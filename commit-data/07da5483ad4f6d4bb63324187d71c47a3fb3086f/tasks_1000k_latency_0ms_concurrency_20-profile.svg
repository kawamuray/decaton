<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (1,072 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="1027.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 0.09%)</title><rect x="10.0" y="1011.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (268 samples, 25.00%)</title><rect x="11.1" y="1027.0" width="295.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1038.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (268 samples, 25.00%)</title><rect x="11.1" y="1011.0" width="295.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="1022.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.09%)</title><rect x="12.2" y="995.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (7 samples, 0.65%)</title><rect x="13.3" y="995.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.56%)</title><rect x="14.4" y="979.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1787602502.accept (6 samples, 0.56%)</title><rect x="14.4" y="963.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.56%)</title><rect x="14.4" y="947.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.56%)</title><rect x="14.4" y="931.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.56%)</title><rect x="14.4" y="915.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.47%)</title><rect x="21.0" y="995.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.37%)</title><rect x="22.1" y="979.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.37%)</title><rect x="22.1" y="963.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.37%)</title><rect x="22.1" y="947.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.1" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.37%)</title><rect x="22.1" y="931.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.37%)</title><rect x="22.1" y="915.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.1" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.28%)</title><rect x="22.1" y="899.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="22.1" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="22.1" y="867.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="22.1" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.1" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="22.1" y="835.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="25.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.19%)</title><rect x="23.2" y="883.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.19%)</title><rect x="23.2" y="867.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.2" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="23.2" y="851.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="26.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="24.3" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.09%)</title><rect x="24.3" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="25.4" y="899.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="25.4" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="25.4" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="25.4" y="851.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="25.4" y="835.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.19%)</title><rect x="26.5" y="995.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.19%)</title><rect x="26.5" y="979.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="27.6" y="963.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="27.6" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="27.6" y="931.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="27.6" y="915.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="27.6" y="899.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="27.6" y="883.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="27.6" y="867.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="27.6" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.6" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="27.6" y="835.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="30.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (201 samples, 18.75%)</title><rect x="28.7" y="995.0" width="221.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.7" y="1006.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (195 samples, 18.19%)</title><rect x="28.7" y="979.0" width="214.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.7" y="990.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (195 samples, 18.19%)</title><rect x="28.7" y="963.0" width="214.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.7" y="974.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="30.9" y="947.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (154 samples, 14.37%)</title><rect x="32.0" y="947.0" width="169.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.0" y="958.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (154 samples, 14.37%)</title><rect x="32.0" y="931.0" width="169.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.0" y="942.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (154 samples, 14.37%)</title><rect x="32.0" y="915.0" width="169.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.0" y="926.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 14.37%)</title><rect x="32.0" y="899.0" width="169.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.0" y="910.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 14.37%)</title><rect x="32.0" y="883.0" width="169.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.0" y="894.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 14.37%)</title><rect x="32.0" y="867.0" width="169.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.0" y="878.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (103 samples, 9.61%)</title><rect x="32.0" y="851.0" width="113.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.0" y="862.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.52%)</title><rect x="32.0" y="835.0" width="29.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.0" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.52%)</title><rect x="32.0" y="819.0" width="29.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.0" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (27 samples, 2.52%)</title><rect x="32.0" y="803.0" width="29.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.0" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetWaitStatus (9 samples, 0.84%)</title><rect x="45.2" y="787.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (6 samples, 0.56%)</title><rect x="55.1" y="787.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 7.09%)</title><rect x="61.7" y="835.0" width="83.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="846.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 7.09%)</title><rect x="61.7" y="819.0" width="83.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="830.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 6.44%)</title><rect x="61.7" y="803.0" width="76.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.7" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 6.34%)</title><rect x="62.8" y="787.0" width="74.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.8" y="798.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 6.34%)</title><rect x="62.8" y="771.0" width="74.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.8" y="782.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="62.8" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.8" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="63.9" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="66.9" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (63 samples, 5.88%)</title><rect x="65.0" y="755.0" width="69.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="68.0" y="766.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.37%)</title><rect x="66.1" y="739.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.1" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="70.5" y="739.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="73.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 3.45%)</title><rect x="72.7" y="739.0" width="40.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="75.7" y="750.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.47%)</title><rect x="113.5" y="739.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="116.5" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.31%)</title><rect x="119.0" y="739.0" width="15.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="122.0" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.19%)</title><rect x="134.4" y="755.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="137.4" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="136.6" y="755.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="139.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (7 samples, 0.65%)</title><rect x="137.7" y="803.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="145.4" y="851.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="148.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="145.4" y="835.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="145.4" y="819.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.09%)</title><rect x="145.4" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.37%)</title><rect x="146.5" y="851.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.37%)</title><rect x="146.5" y="835.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.37%)</title><rect x="146.5" y="819.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (2 samples, 0.19%)</title><rect x="148.7" y="803.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.7" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="149.8" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="152.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="149.8" y="771.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="152.8" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="149.8" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="152.8" y="766.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="149.8" y="739.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="152.8" y="750.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="149.8" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="152.8" y="734.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="149.8" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="152.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (46 samples, 4.29%)</title><rect x="150.9" y="851.0" width="50.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.9" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (46 samples, 4.29%)</title><rect x="150.9" y="835.0" width="50.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.9" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (46 samples, 4.29%)</title><rect x="150.9" y="819.0" width="50.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.9" y="830.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (46 samples, 4.29%)</title><rect x="150.9" y="803.0" width="50.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.9" y="814.0">java/..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="199.3" y="787.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="202.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.19%)</title><rect x="201.5" y="947.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.19%)</title><rect x="201.5" y="931.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.5" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="202.6" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="205.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.19%)</title><rect x="203.7" y="947.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.19%)</title><rect x="203.7" y="931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.19%)</title><rect x="203.7" y="915.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (30 samples, 2.80%)</title><rect x="205.9" y="947.0" width="33.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.9" y="958.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.80%)</title><rect x="205.9" y="931.0" width="33.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.9" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.84%)</title><rect x="222.4" y="915.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.4" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.28%)</title><rect x="223.5" y="899.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.5" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.28%)</title><rect x="223.5" y="883.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.5" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.28%)</title><rect x="223.5" y="867.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="226.8" y="899.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.37%)</title><rect x="227.9" y="899.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.9" y="910.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.19%)</title><rect x="232.4" y="915.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="235.4" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="234.6" y="915.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="237.6" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="239.0" y="947.0" width="4.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="242.0" y="958.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="243.4" y="979.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="246.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="245.6" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="245.6" y="963.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="245.6" y="947.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.6" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="245.6" y="931.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="248.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.28%)</title><rect x="246.7" y="979.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.28%)</title><rect x="246.7" y="963.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.28%)</title><rect x="246.7" y="947.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.28%)</title><rect x="246.7" y="931.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.7" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.19%)</title><rect x="247.8" y="915.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.76%)</title><rect x="250.0" y="995.0" width="56.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.0" y="1006.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.76%)</title><rect x="250.0" y="979.0" width="56.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.0" y="990.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 3.08%)</title><rect x="250.0" y="963.0" width="36.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.0" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.19%)</title><rect x="250.0" y="947.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.19%)</title><rect x="250.0" y="931.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="251.1" y="915.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.89%)</title><rect x="252.2" y="947.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.2" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.89%)</title><rect x="252.2" y="931.0" width="34.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.2" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.61%)</title><rect x="252.2" y="915.0" width="30.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.2" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.61%)</title><rect x="252.2" y="899.0" width="30.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.2" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.12%)</title><rect x="254.4" y="883.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.65%)</title><rect x="254.4" y="867.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.65%)</title><rect x="254.4" y="851.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.65%)</title><rect x="254.4" y="835.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.65%)</title><rect x="254.4" y="819.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.65%)</title><rect x="254.4" y="803.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.65%)</title><rect x="254.4" y="787.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.65%)</title><rect x="254.4" y="771.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.47%)</title><rect x="262.1" y="867.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.47%)</title><rect x="262.1" y="851.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (5 samples, 0.47%)</title><rect x="262.1" y="835.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.31%)</title><rect x="267.6" y="883.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.21%)</title><rect x="268.7" y="867.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (13 samples, 1.21%)</title><rect x="268.7" y="851.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.7" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (13 samples, 1.21%)</title><rect x="268.7" y="835.0" width="14.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.7" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.84%)</title><rect x="273.1" y="819.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (9 samples, 0.84%)</title><rect x="273.1" y="803.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (9 samples, 0.84%)</title><rect x="273.1" y="787.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (9 samples, 0.84%)</title><rect x="273.1" y="771.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="283.0" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="283.0" y="899.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="283.0" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="283.0" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="284.1" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="285.2" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.84%)</title><rect x="286.3" y="963.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.84%)</title><rect x="286.3" y="947.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.75%)</title><rect x="286.3" y="931.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.28%)</title><rect x="286.3" y="915.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/2117579856.accept (3 samples, 0.28%)</title><rect x="286.3" y="899.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.28%)</title><rect x="286.3" y="883.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (3 samples, 0.28%)</title><rect x="286.3" y="867.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (2 samples, 0.19%)</title><rect x="286.3" y="851.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (2 samples, 0.19%)</title><rect x="286.3" y="835.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (2 samples, 0.19%)</title><rect x="286.3" y="819.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="288.5" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="288.5" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.5" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="288.5" y="819.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="288.5" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="289.6" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="289.6" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="289.6" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="289.6" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="290.7" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="290.7" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.7" y="910.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="290.7" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="290.7" y="867.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="290.7" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.7" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="290.7" y="835.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.28%)</title><rect x="291.8" y="915.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.28%)</title><rect x="291.8" y="899.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="292.9" y="883.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="292.9" y="867.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="292.9" y="851.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="292.9" y="835.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="292.9" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.19%)</title><rect x="292.9" y="803.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="295.1" y="931.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="295.1" y="915.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="295.1" y="899.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="295.1" y="883.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="295.1" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="296.2" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="296.2" y="947.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="296.2" y="931.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="296.2" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="296.2" y="899.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="296.2" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.47%)</title><rect x="297.3" y="963.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.37%)</title><rect x="297.3" y="947.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.19%)</title><rect x="297.3" y="931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.19%)</title><rect x="297.3" y="915.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="297.3" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="297.3" y="883.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="297.3" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.09%)</title><rect x="298.4" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.09%)</title><rect x="298.4" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.09%)</title><rect x="298.4" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.19%)</title><rect x="299.5" y="931.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="299.5" y="915.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="299.5" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="299.5" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="299.5" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="300.6" y="899.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="300.6" y="883.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="300.6" y="867.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="300.6" y="851.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="300.6" y="835.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.6" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="300.6" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.6" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="300.6" y="803.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="303.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="301.7" y="947.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="301.7" y="931.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="301.7" y="915.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.09%)</title><rect x="301.7" y="899.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.28%)</title><rect x="302.8" y="963.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="305.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.28%)</title><rect x="302.8" y="947.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="302.8" y="931.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.8" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="302.8" y="915.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="305.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/275374105.accept (1 samples, 0.09%)</title><rect x="303.9" y="915.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="303.9" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="303.9" y="883.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="303.9" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="303.9" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="305.0" y="931.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="305.0" y="915.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="305.0" y="899.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="305.0" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="305.0" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="305.0" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="305.0" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (687 samples, 64.09%)</title><rect x="306.1" y="1027.0" width="756.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.1" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (687 samples, 64.09%)</title><rect x="306.1" y="1011.0" width="756.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.1" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (687 samples, 64.09%)</title><rect x="306.1" y="995.0" width="756.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.1" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (449 samples, 41.88%)</title><rect x="310.5" y="979.0" width="494.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.5" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/190..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (449 samples, 41.88%)</title><rect x="310.5" y="963.0" width="494.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.5" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (449 samples, 41.88%)</title><rect x="310.5" y="947.0" width="494.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.5" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (443 samples, 41.32%)</title><rect x="310.5" y="931.0" width="487.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="313.5" y="942.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="324.8" y="915.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="327.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="327.0" y="915.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.09%)</title><rect x="328.1" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.09%)</title><rect x="328.1" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.09%)</title><rect x="328.1" y="883.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.09%)</title><rect x="328.1" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.1" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="328.1" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.1" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="328.1" y="835.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (162 samples, 15.11%)</title><rect x="329.2" y="915.0" width="178.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.2" y="926.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (162 samples, 15.11%)</title><rect x="329.2" y="899.0" width="178.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.2" y="910.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (162 samples, 15.11%)</title><rect x="329.2" y="883.0" width="178.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.2" y="894.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 15.11%)</title><rect x="329.2" y="867.0" width="178.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.2" y="878.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 15.11%)</title><rect x="329.2" y="851.0" width="178.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.2" y="862.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (162 samples, 15.11%)</title><rect x="329.2" y="835.0" width="178.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.2" y="846.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (43 samples, 4.01%)</title><rect x="329.2" y="819.0" width="47.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.2" y="830.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="343.5" y="803.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="346.5" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.75%)</title><rect x="344.6" y="803.0" width="8.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="347.6" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="346.8" y="787.0" width="6.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="349.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.47%)</title><rect x="353.4" y="803.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.37%)</title><rect x="354.5" y="787.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.37%)</title><rect x="354.5" y="771.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.37%)</title><rect x="354.5" y="755.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.37%)</title><rect x="354.5" y="739.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.37%)</title><rect x="354.5" y="723.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (16 samples, 1.49%)</title><rect x="358.9" y="803.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.28%)</title><rect x="373.2" y="787.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.09%)</title><rect x="373.2" y="771.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="373.2" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.19%)</title><rect x="374.3" y="771.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="374.3" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="377.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="374.3" y="739.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="377.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="374.3" y="723.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="377.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="374.3" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="377.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="374.3" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.3" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="374.3" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="377.3" y="686.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="374.3" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="377.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="374.3" y="643.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.3" y="654.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="374.3" y="627.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="377.3" y="638.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="374.3" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="377.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="375.4" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="378.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="375.4" y="739.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="375.4" y="723.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="378.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="375.4" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="378.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="375.4" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="378.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="375.4" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="378.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (112 samples, 10.45%)</title><rect x="376.5" y="819.0" width="123.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.5" y="830.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.19%)</title><rect x="377.6" y="803.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="379.9" y="803.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (4 samples, 0.37%)</title><rect x="381.0" y="803.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.56%)</title><rect x="385.4" y="803.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.37%)</title><rect x="387.6" y="787.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.65%)</title><rect x="392.0" y="803.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.56%)</title><rect x="393.1" y="787.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.37%)</title><rect x="395.3" y="771.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.37%)</title><rect x="395.3" y="755.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.3" y="766.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="397.5" y="739.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="400.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="398.6" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.93%)</title><rect x="399.7" y="803.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.7" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="401.9" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="404.9" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="401.9" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="404.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="401.9" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="404.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.65%)</title><rect x="403.0" y="787.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (80 samples, 7.46%)</title><rect x="410.7" y="803.0" width="88.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.7" y="814.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (31 samples, 2.89%)</title><rect x="410.7" y="787.0" width="34.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.7" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.93%)</title><rect x="415.1" y="771.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.93%)</title><rect x="415.1" y="755.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.93%)</title><rect x="415.1" y="739.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (10 samples, 0.93%)</title><rect x="415.1" y="723.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.28%)</title><rect x="422.8" y="707.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.21%)</title><rect x="426.1" y="771.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (10 samples, 0.93%)</title><rect x="426.1" y="755.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.28%)</title><rect x="433.8" y="739.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.28%)</title><rect x="437.1" y="755.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.28%)</title><rect x="437.1" y="739.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="440.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.28%)</title><rect x="437.1" y="723.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.28%)</title><rect x="437.1" y="707.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.37%)</title><rect x="440.4" y="771.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.37%)</title><rect x="440.4" y="755.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.19%)</title><rect x="444.8" y="787.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (47 samples, 4.38%)</title><rect x="447.0" y="787.0" width="51.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.0" y="798.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (47 samples, 4.38%)</title><rect x="447.0" y="771.0" width="51.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.0" y="782.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (46 samples, 4.29%)</title><rect x="448.1" y="755.0" width="50.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.1" y="766.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.40%)</title><rect x="451.4" y="739.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.93%)</title><rect x="455.8" y="723.0" width="11.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.93%)</title><rect x="455.8" y="707.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.93%)</title><rect x="455.8" y="691.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.37%)</title><rect x="456.9" y="675.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.47%)</title><rect x="461.3" y="675.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="464.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.37%)</title><rect x="462.4" y="659.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="466.8" y="723.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="466.8" y="707.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="466.8" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.56%)</title><rect x="467.9" y="739.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.47%)</title><rect x="469.0" y="723.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.47%)</title><rect x="469.0" y="707.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.47%)</title><rect x="469.0" y="691.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.47%)</title><rect x="469.0" y="675.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="474.5" y="739.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.84%)</title><rect x="475.6" y="739.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.84%)</title><rect x="475.6" y="723.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.84%)</title><rect x="475.6" y="707.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.84%)</title><rect x="475.6" y="691.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.6" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.84%)</title><rect x="475.6" y="675.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.6" y="686.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.84%)</title><rect x="475.6" y="659.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.6" y="670.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (9 samples, 0.84%)</title><rect x="475.6" y="643.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="478.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.47%)</title><rect x="485.5" y="739.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.47%)</title><rect x="485.5" y="723.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.47%)</title><rect x="485.5" y="707.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="489.9" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="492.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="489.9" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="492.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="489.9" y="659.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="492.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="489.9" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="492.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="489.9" y="627.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="492.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="489.9" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="492.9" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="489.9" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="492.9" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="489.9" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="492.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.65%)</title><rect x="491.0" y="739.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="497.6" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.6" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="497.6" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="500.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="497.6" y="691.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="500.6" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="497.6" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="500.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="498.7" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 0.09%)</title><rect x="498.7" y="787.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="498.7" y="771.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="498.7" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.7" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.09%)</title><rect x="498.7" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="498.7" y="723.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="498.7" y="707.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.65%)</title><rect x="499.8" y="819.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.65%)</title><rect x="499.8" y="803.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.65%)</title><rect x="499.8" y="787.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.65%)</title><rect x="499.8" y="771.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.65%)</title><rect x="499.8" y="755.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (247 samples, 23.04%)</title><rect x="507.5" y="915.0" width="271.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.5" y="926.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (43 samples, 4.01%)</title><rect x="509.7" y="899.0" width="47.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.7" y="910.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (42 samples, 3.92%)</title><rect x="510.8" y="883.0" width="46.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="513.8" y="894.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (39 samples, 3.64%)</title><rect x="511.9" y="867.0" width="43.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.9" y="878.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.12%)</title><rect x="515.2" y="851.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.12%)</title><rect x="515.2" y="835.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.12%)</title><rect x="515.2" y="819.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.28%)</title><rect x="525.1" y="803.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.28%)</title><rect x="525.1" y="787.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.84%)</title><rect x="528.5" y="851.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.84%)</title><rect x="528.5" y="835.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.84%)</title><rect x="528.5" y="819.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="537.3" y="803.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="540.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 1.40%)</title><rect x="538.4" y="851.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.12%)</title><rect x="541.7" y="835.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="544.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="541.7" y="819.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="541.7" y="803.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 1.03%)</title><rect x="542.8" y="819.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="545.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.28%)</title><rect x="550.5" y="803.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="553.5" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="553.8" y="803.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="556.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="554.9" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="554.9" y="851.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="556.0" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="556.0" y="851.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="557.1" y="899.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="560.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="557.1" y="883.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="560.1" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="557.1" y="867.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (145 samples, 13.53%)</title><rect x="559.3" y="899.0" width="159.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.3" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (145 samples, 13.53%)</title><rect x="559.3" y="883.0" width="159.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.3" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.28%)</title><rect x="571.4" y="867.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="574.4" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="571.4" y="851.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="574.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (44 samples, 4.10%)</title><rect x="574.7" y="867.0" width="48.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.7" y="878.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 2.33%)</title><rect x="587.9" y="851.0" width="27.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.9" y="862.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.77%)</title><rect x="590.1" y="835.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.1" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.47%)</title><rect x="596.7" y="819.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.47%)</title><rect x="596.7" y="803.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.7" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.47%)</title><rect x="596.7" y="787.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.47%)</title><rect x="596.7" y="771.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="599.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.28%)</title><rect x="596.7" y="755.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="599.7" y="766.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="596.7" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="599.7" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="597.8" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="600.8" y="750.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="598.9" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="601.9" y="750.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="600.0" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="601.1" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="601.1" y="739.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="604.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="601.1" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="604.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="601.1" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="604.1" y="718.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="601.1" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="604.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.65%)</title><rect x="602.2" y="819.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.2" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="609.9" y="819.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="612.9" y="830.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="611.0" y="835.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="614.0" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="612.1" y="835.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="615.1" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.65%)</title><rect x="615.4" y="851.0" width="7.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="618.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.84%)</title><rect x="623.1" y="867.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="623.1" y="851.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="623.1" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="623.1" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="626.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="623.1" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.1" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="623.1" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="626.1" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="623.1" y="771.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="626.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.75%)</title><rect x="624.2" y="851.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.75%)</title><rect x="624.2" y="835.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="627.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="631.9" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.9" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (78 samples, 7.28%)</title><rect x="633.0" y="867.0" width="85.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.0" y="878.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (76 samples, 7.09%)</title><rect x="635.2" y="851.0" width="83.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.2" y="862.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 2.05%)</title><rect x="635.2" y="835.0" width="24.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.2" y="846.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (22 samples, 2.05%)</title><rect x="635.2" y="819.0" width="24.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.2" y="830.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (22 samples, 2.05%)</title><rect x="635.2" y="803.0" width="24.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.2" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.31%)</title><rect x="644.0" y="787.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (14 samples, 1.31%)</title><rect x="644.0" y="771.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="659.4" y="835.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="659.4" y="819.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="659.4" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="659.4" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.4" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (53 samples, 4.94%)</title><rect x="660.5" y="835.0" width="58.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="663.5" y="846.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (50 samples, 4.66%)</title><rect x="663.8" y="819.0" width="55.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.8" y="830.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="664.9" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.56%)</title><rect x="666.0" y="803.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="669.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.56%)</title><rect x="666.0" y="787.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (42 samples, 3.92%)</title><rect x="672.6" y="803.0" width="46.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.6" y="814.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.47%)</title><rect x="693.6" y="787.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.93%)</title><rect x="699.1" y="787.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="707.9" y="771.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="710.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="707.9" y="755.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="710.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="707.9" y="739.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="710.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="709.0" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="712.0" y="734.0"></text>
</g>
<g>
<title>vtable stub (8 samples, 0.75%)</title><rect x="710.1" y="787.0" width="8.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="713.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (33 samples, 3.08%)</title><rect x="718.9" y="899.0" width="36.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.9" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (33 samples, 3.08%)</title><rect x="718.9" y="883.0" width="36.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.9" y="894.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="718.9" y="867.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="721.9" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="718.9" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="721.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="718.9" y="835.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="718.9" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="721.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.09%)</title><rect x="718.9" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (18 samples, 1.68%)</title><rect x="720.0" y="867.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (17 samples, 1.59%)</title><rect x="721.1" y="851.0" width="18.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.31%)</title><rect x="721.1" y="835.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.1" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="726.6" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="729.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="726.6" y="803.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="726.6" y="787.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="726.6" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="729.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="726.6" y="755.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.56%)</title><rect x="727.7" y="819.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.7" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.56%)</title><rect x="727.7" y="803.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="730.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="727.7" y="787.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="730.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="734.3" y="819.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="734.3" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="734.3" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.09%)</title><rect x="735.4" y="819.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="738.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="736.5" y="835.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="736.5" y="819.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.28%)</title><rect x="736.5" y="803.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="739.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.28%)</title><rect x="736.5" y="787.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="739.8" y="867.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.8" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="739.8" y="851.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.8" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 0.28%)</title><rect x="742.0" y="867.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 0.28%)</title><rect x="742.0" y="851.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/1760607796.get$Lambda (3 samples, 0.28%)</title><rect x="742.0" y="835.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/1760607796.&lt;init&gt; (3 samples, 0.28%)</title><rect x="742.0" y="819.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="745.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="745.3" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="745.3" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="748.3" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="745.3" y="835.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="748.3" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="746.4" y="867.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="746.4" y="851.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.4" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.09%)</title><rect x="746.4" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.4" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.09%)</title><rect x="746.4" y="819.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.65%)</title><rect x="747.5" y="867.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="750.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="754.1" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 2.05%)</title><rect x="755.2" y="899.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.2" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 2.05%)</title><rect x="755.2" y="883.0" width="24.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.2" y="894.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="764.0" y="867.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="767.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="764.0" y="851.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="767.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.12%)</title><rect x="766.2" y="867.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$278/1670469584.accept (12 samples, 1.12%)</title><rect x="766.2" y="851.0" width="13.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 1.12%)</title><rect x="766.2" y="835.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 1.12%)</title><rect x="766.2" y="819.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.2" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 1.12%)</title><rect x="766.2" y="803.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.2" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 1.12%)</title><rect x="766.2" y="787.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.2" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.65%)</title><rect x="771.7" y="771.0" width="7.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="774.7" y="782.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="772.8" y="755.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="775.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.03%)</title><rect x="779.4" y="915.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.03%)</title><rect x="779.4" y="899.0" width="12.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="782.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.84%)</title><rect x="781.6" y="883.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$278/1670469584.accept (9 samples, 0.84%)</title><rect x="781.6" y="867.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.84%)</title><rect x="781.6" y="851.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.84%)</title><rect x="781.6" y="835.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.6" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.84%)</title><rect x="781.6" y="819.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.6" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.84%)</title><rect x="781.6" y="803.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.6" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.56%)</title><rect x="791.5" y="915.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="794.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="792.6" y="899.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="795.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.56%)</title><rect x="798.1" y="931.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.1" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="799.2" y="915.0" width="5.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="802.2" y="926.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="800.3" y="899.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="803.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.37%)</title><rect x="804.7" y="979.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="807.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.37%)</title><rect x="804.7" y="963.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.37%)</title><rect x="804.7" y="947.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.37%)</title><rect x="804.7" y="931.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (230 samples, 21.46%)</title><rect x="809.1" y="979.0" width="253.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.1" y="990.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 21.36%)</title><rect x="810.2" y="963.0" width="252.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.2" y="974.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.37%)</title><rect x="814.6" y="947.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.09%)</title><rect x="819.0" y="947.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (200 samples, 18.66%)</title><rect x="820.1" y="947.0" width="220.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.1" y="958.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 1.96%)</title><rect x="832.3" y="931.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.3" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.09%)</title><rect x="855.4" y="931.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.09%)</title><rect x="855.4" y="915.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 15.58%)</title><rect x="856.5" y="931.0" width="183.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.5" y="942.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 15.58%)</title><rect x="856.5" y="915.0" width="183.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.5" y="926.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="860.9" y="899.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.9" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (155 samples, 14.46%)</title><rect x="862.0" y="899.0" width="170.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="865.0" y="910.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="866.4" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="869.4" y="894.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.19%)</title><rect x="867.5" y="883.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="870.5" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.71%)</title><rect x="869.7" y="883.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="872.7" y="894.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.65%)</title><rect x="881.8" y="867.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="884.8" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.37%)</title><rect x="882.9" y="851.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="885.9" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.19%)</title><rect x="885.1" y="835.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="888.1" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.19%)</title><rect x="887.3" y="851.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="890.3" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="889.5" y="867.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.5" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.84%)</title><rect x="891.7" y="867.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.7" y="878.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="901.6" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.6" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.19%)</title><rect x="902.7" y="883.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="905.7" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="904.9" y="883.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="907.9" y="894.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.75%)</title><rect x="907.1" y="883.0" width="8.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="910.1" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 3.17%)</title><rect x="915.9" y="883.0" width="37.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="918.9" y="894.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 5.13%)</title><rect x="953.3" y="883.0" width="60.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="956.3" y="894.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.37%)</title><rect x="1013.9" y="883.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1016.9" y="894.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1018.3" y="883.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1021.3" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1019.4" y="883.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1022.4" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1020.5" y="883.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1023.5" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1021.6" y="883.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1024.6" y="894.0"></text>
</g>
<g>
<title>_init (2 samples, 0.19%)</title><rect x="1022.7" y="883.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1025.7" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.37%)</title><rect x="1024.9" y="883.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.9" y="894.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="1029.3" y="883.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.3" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1031.5" y="883.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1034.5" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.47%)</title><rect x="1032.6" y="899.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1035.6" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1038.1" y="899.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1041.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (18 samples, 1.68%)</title><rect x="1040.3" y="947.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (18 samples, 1.68%)</title><rect x="1040.3" y="931.0" width="19.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1043.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (15 samples, 1.40%)</title><rect x="1040.3" y="915.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.28%)</title><rect x="1056.8" y="915.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1059.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.28%)</title><rect x="1056.8" y="899.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1059.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.28%)</title><rect x="1056.8" y="883.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.19%)</title><rect x="1060.1" y="947.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="1060.1" y="931.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1062.3" y="1027.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1065.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1062.3" y="1011.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1065.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1062.3" y="995.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1065.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.09%)</title><rect x="1062.3" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.remove (1 samples, 0.09%)</title><rect x="1062.3" y="963.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (1 samples, 0.09%)</title><rect x="1062.3" y="947.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1065.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.09%)</title><rect x="1062.3" y="931.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1065.3" y="942.0"></text>
</g>
<g>
<title>start_thread (115 samples, 10.73%)</title><rect x="1063.4" y="1027.0" width="126.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1066.4" y="1038.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (115 samples, 10.73%)</title><rect x="1063.4" y="1011.0" width="126.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1066.4" y="1022.0">java_start(Threa..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.96%)</title><rect x="1063.4" y="995.0" width="23.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.4" y="1006.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.65%)</title><rect x="1063.4" y="979.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.4" y="990.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.65%)</title><rect x="1063.4" y="963.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.4" y="974.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1063.4" y="947.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.4" y="958.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.47%)</title><rect x="1065.6" y="947.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1068.6" y="958.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.31%)</title><rect x="1071.1" y="979.0" width="15.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.1" y="990.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.47%)</title><rect x="1071.1" y="963.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.1" y="974.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1071.1" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.1" y="958.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.37%)</title><rect x="1072.2" y="947.0" width="4.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1075.2" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.19%)</title><rect x="1076.6" y="963.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.6" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1076.6" y="947.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.6" y="958.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1076.6" y="931.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.6" y="942.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1076.6" y="915.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.6" y="926.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1076.6" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.6" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1077.7" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.7" y="958.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1077.7" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.7" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.65%)</title><rect x="1078.8" y="963.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.8" y="974.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.65%)</title><rect x="1078.8" y="947.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.56%)</title><rect x="1078.8" y="931.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.8" y="942.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.56%)</title><rect x="1078.8" y="915.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.8" y="926.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.56%)</title><rect x="1078.8" y="899.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.8" y="910.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.56%)</title><rect x="1078.8" y="883.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.8" y="894.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.56%)</title><rect x="1078.8" y="867.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.8" y="878.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.19%)</title><rect x="1079.9" y="851.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1082.1" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.1" y="862.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1083.2" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.2" y="862.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1084.3" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.3" y="862.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1085.4" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1085.4" y="915.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.4" y="926.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 8.58%)</title><rect x="1086.5" y="995.0" width="101.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.5" y="1006.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 8.58%)</title><rect x="1086.5" y="979.0" width="101.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.5" y="990.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 8.58%)</title><rect x="1086.5" y="963.0" width="101.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.5" y="974.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (90 samples, 8.40%)</title><rect x="1086.5" y="947.0" width="99.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.5" y="958.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 8.30%)</title><rect x="1086.5" y="931.0" width="98.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.5" y="942.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 8.30%)</title><rect x="1086.5" y="915.0" width="98.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.5" y="926.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 4.48%)</title><rect x="1086.5" y="899.0" width="52.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.5" y="910.0">Compi..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1086.5" y="883.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.5" y="894.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1087.6" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.6" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1087.6" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.6" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1087.6" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.6" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.56%)</title><rect x="1088.7" y="883.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.7" y="894.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1088.7" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.7" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.47%)</title><rect x="1089.8" y="867.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.8" y="878.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1089.8" y="851.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.8" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.28%)</title><rect x="1090.9" y="851.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.9" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.28%)</title><rect x="1090.9" y="835.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.9" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.19%)</title><rect x="1092.0" y="819.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.0" y="830.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.19%)</title><rect x="1092.0" y="803.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.0" y="814.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1092.0" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="798.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.09%)</title><rect x="1093.1" y="787.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.1" y="798.0"></text>
</g>
<g>
<title>Matcher::narrow_oop_use_complex_address() (1 samples, 0.09%)</title><rect x="1094.2" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.2" y="862.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.19%)</title><rect x="1095.3" y="883.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.3" y="894.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.09%)</title><rect x="1095.3" y="867.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.3" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.09%)</title><rect x="1096.4" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.19%)</title><rect x="1097.5" y="883.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.5" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1097.5" y="867.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.5" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.5" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.5" y="862.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1097.5" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1098.6" y="851.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.6" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1098.6" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 3.26%)</title><rect x="1099.7" y="883.0" width="38.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.7" y="894.0">Pha..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.09%)</title><rect x="1099.7" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.7" y="878.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1100.8" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.19%)</title><rect x="1101.9" y="867.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1103.0" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.0" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1103.0" y="835.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1106.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.84%)</title><rect x="1104.1" y="867.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1111.8" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1111.8" y="835.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.8" y="846.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1111.8" y="819.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.8" y="830.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="1112.9" y="851.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.75%)</title><rect x="1114.0" y="867.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.0" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1118.5" y="851.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1119.6" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="862.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1120.7" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.7" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1121.8" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1122.9" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.9" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1122.9" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.65%)</title><rect x="1124.0" y="867.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.37%)</title><rect x="1127.3" y="851.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1130.6" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.6" y="846.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.09%)</title><rect x="1130.6" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.6" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1130.6" y="803.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.6" y="814.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.19%)</title><rect x="1131.7" y="867.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.7" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.19%)</title><rect x="1131.7" y="851.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.7" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.19%)</title><rect x="1131.7" y="835.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.7" y="846.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1131.7" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.7" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1132.8" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.8" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1133.9" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.9" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1133.9" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.9" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1135.0" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1135.0" y="851.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.0" y="862.0"></text>
</g>
<g>
<title>PhaseRegAlloc::alloc_node_regs(int) (1 samples, 0.09%)</title><rect x="1136.1" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.1" y="878.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1137.2" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.2" y="878.0"></text>
</g>
<g>
<title>andL_rReg_immNode::ideal_Opcode() const (1 samples, 0.09%)</title><rect x="1138.3" y="883.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 3.17%)</title><rect x="1139.4" y="899.0" width="37.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.4" y="910.0">Com..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1139.4" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1139.4" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1139.4" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1139.4" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.4" y="846.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1139.4" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.4" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1139.4" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.4" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1139.4" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1140.5" y="883.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1140.5" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.09%)</title><rect x="1140.5" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.09%)</title><rect x="1140.5" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.5" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.09%)</title><rect x="1140.5" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.5" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="1140.5" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.5" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_empty_methodData() (1 samples, 0.09%)</title><rect x="1140.5" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.5" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.19%)</title><rect x="1141.6" y="883.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 2.05%)</title><rect x="1143.8" y="883.0" width="24.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.8" y="894.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1143.8" y="867.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1144.9" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 1.59%)</title><rect x="1146.0" y="867.0" width="18.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 1.49%)</title><rect x="1147.1" y="851.0" width="17.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.19%)</title><rect x="1148.2" y="835.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 1.12%)</title><rect x="1150.4" y="835.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1162.5" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.5" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1163.6" y="835.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1166.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="1164.7" y="867.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1165.8" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.8" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="1165.8" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1166.9" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1166.9" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="862.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.9" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="846.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1166.9" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.65%)</title><rect x="1168.0" y="883.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.65%)</title><rect x="1168.0" y="867.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="878.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1168.0" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="862.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1168.0" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="846.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.0" y="819.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1169.1" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.1" y="862.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1169.1" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.28%)</title><rect x="1170.2" y="851.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.19%)</title><rect x="1170.2" y="835.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1170.2" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.2" y="830.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1170.2" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1171.3" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1171.3" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1172.4" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.4" y="846.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.19%)</title><rect x="1173.5" y="851.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.19%)</title><rect x="1173.5" y="835.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1173.5" y="819.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1173.5" y="803.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1173.5" y="787.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="723.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.5" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.6" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="782.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.6" y="755.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1175.7" y="883.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.09%)</title><rect x="1175.7" y="867.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="846.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1176.8" y="899.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1176.8" y="883.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1176.8" y="867.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1176.8" y="851.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1176.8" y="835.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.47%)</title><rect x="1176.8" y="819.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="830.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.8" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="814.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1176.8" y="787.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.09%)</title><rect x="1176.8" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1176.8" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1176.8" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.09%)</title><rect x="1176.8" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.9" y="803.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.9" y="787.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.9" y="771.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.9" y="755.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.9" y="739.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1177.9" y="723.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="547.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="499.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="483.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="435.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="403.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="371.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="355.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="243.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="227.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.9" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="206.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.9" y="179.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="190.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.09%)</title><rect x="1177.9" y="163.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="174.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="147.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="158.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1177.9" y="131.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="531.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="499.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="435.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="419.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="387.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="355.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="339.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="275.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="259.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="243.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="227.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="195.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="179.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="163.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="147.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="131.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="115.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="99.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="110.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1179.0" y="83.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1179.0" y="67.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.0" y="51.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="62.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.0" y="35.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="771.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="691.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="483.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="467.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="451.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="435.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="403.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="371.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="355.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.1" y="307.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.1" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.1" y="275.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1180.1" y="259.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1180.1" y="243.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="254.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1180.1" y="227.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="238.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_constant(ciObject*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.2" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1181.2" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1181.2" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>ciObject::hash() (1 samples, 0.09%)</title><rect x="1181.2" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1182.3" y="899.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="910.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1182.3" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="894.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1183.4" y="899.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>MethodCounters::highest_osr_comp_level() const (1 samples, 0.09%)</title><rect x="1183.4" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1184.5" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1184.5" y="915.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1184.5" y="899.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1184.5" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1184.5" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1184.5" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.09%)</title><rect x="1184.5" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.09%)</title><rect x="1184.5" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.19%)</title><rect x="1185.6" y="947.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.6" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.19%)</title><rect x="1185.6" y="931.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.6" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.19%)</title><rect x="1185.6" y="915.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.6" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.19%)</title><rect x="1185.6" y="899.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.6" y="910.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.7" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="894.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.09%)</title><rect x="1186.7" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="995.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="1006.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="979.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="990.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.19%)</title><rect x="1187.8" y="963.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.19%)</title><rect x="1187.8" y="947.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (2 samples, 0.19%)</title><rect x="1187.8" y="931.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1187.8" y="915.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="926.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1187.8" y="899.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="1187.8" y="883.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="1187.8" y="867.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="878.0"></text>
</g>
</g>
</svg>
