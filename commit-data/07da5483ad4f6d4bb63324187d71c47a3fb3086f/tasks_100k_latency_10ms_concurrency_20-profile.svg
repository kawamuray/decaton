<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1670" onload="init(evt)" viewBox="0 0 1200 1670" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1653"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1653"> </text>
<g id="frames">
<g>
<title>all (266 samples, 100.00%)</title><rect x="10.0" y="1619.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1630.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 8.27%)</title><rect x="10.0" y="1603.0" width="97.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1614.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (3 samples, 1.13%)</title><rect x="10.0" y="1587.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 1.13%)</title><rect x="10.0" y="1571.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 1.13%)</title><rect x="10.0" y="1555.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (3 samples, 1.13%)</title><rect x="10.0" y="1539.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.38%)</title><rect x="10.0" y="1523.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.38%)</title><rect x="10.0" y="1507.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.38%)</title><rect x="10.0" y="1491.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.38%)</title><rect x="10.0" y="1475.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.75%)</title><rect x="14.4" y="1523.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.4" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.75%)</title><rect x="14.4" y="1507.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.75%)</title><rect x="14.4" y="1491.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.38%)</title><rect x="14.4" y="1475.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.38%)</title><rect x="14.4" y="1459.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.38%)</title><rect x="14.4" y="1443.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.4" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.38%)</title><rect x="14.4" y="1427.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.4" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.38%)</title><rect x="14.4" y="1411.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.4" y="1422.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.38%)</title><rect x="14.4" y="1395.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="18.9" y="1475.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.38%)</title><rect x="18.9" y="1459.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="18.9" y="1443.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="18.9" y="1427.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.38%)</title><rect x="18.9" y="1411.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.38%)</title><rect x="18.9" y="1395.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.38%)</title><rect x="18.9" y="1379.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.38%)</title><rect x="18.9" y="1363.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 7.14%)</title><rect x="23.3" y="1587.0" width="84.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="1598.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 1.13%)</title><rect x="23.3" y="1571.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.3" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 1.13%)</title><rect x="23.3" y="1555.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.3" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (3 samples, 1.13%)</title><rect x="23.3" y="1539.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 1.13%)</title><rect x="23.3" y="1523.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.3" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 1.13%)</title><rect x="23.3" y="1507.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.3" y="1518.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 1.13%)</title><rect x="23.3" y="1491.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.38%)</title><rect x="36.6" y="1571.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.6" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.38%)</title><rect x="36.6" y="1555.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.6" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="36.6" y="1539.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.6" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="36.6" y="1523.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.6" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="36.6" y="1507.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.6" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="36.6" y="1491.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.6" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.38%)</title><rect x="36.6" y="1475.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.6" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.38%)</title><rect x="36.6" y="1459.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.6" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.38%)</title><rect x="36.6" y="1443.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.6" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.38%)</title><rect x="36.6" y="1427.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.6" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/284184760.test (1 samples, 0.38%)</title><rect x="36.6" y="1411.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 2.63%)</title><rect x="41.1" y="1571.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.1" y="1582.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (7 samples, 2.63%)</title><rect x="41.1" y="1555.0" width="31.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.1" y="1566.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (7 samples, 2.63%)</title><rect x="41.1" y="1539.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.1" y="1550.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.13%)</title><rect x="41.1" y="1523.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.1" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.13%)</title><rect x="41.1" y="1507.0" width="13.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.1" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.13%)</title><rect x="41.1" y="1491.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.1" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.13%)</title><rect x="41.1" y="1475.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.1" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.13%)</title><rect x="41.1" y="1459.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.13%)</title><rect x="41.1" y="1443.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.75%)</title><rect x="41.1" y="1427.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.75%)</title><rect x="41.1" y="1411.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.75%)</title><rect x="41.1" y="1395.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.38%)</title><rect x="49.9" y="1427.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.38%)</title><rect x="49.9" y="1411.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.38%)</title><rect x="49.9" y="1395.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.9" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.50%)</title><rect x="54.4" y="1523.0" width="17.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.4" y="1534.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.50%)</title><rect x="54.4" y="1507.0" width="17.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.4" y="1518.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.75%)</title><rect x="63.2" y="1491.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.2" y="1502.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.75%)</title><rect x="63.2" y="1475.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.2" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.01%)</title><rect x="72.1" y="1571.0" width="35.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.1" y="1582.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.01%)</title><rect x="72.1" y="1555.0" width="35.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="75.1" y="1566.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.88%)</title><rect x="72.1" y="1539.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.1" y="1550.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="72.1" y="1523.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.1" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="72.1" y="1507.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.38%)</title><rect x="72.1" y="1491.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.1" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.38%)</title><rect x="72.1" y="1475.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.38%)</title><rect x="72.1" y="1459.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.38%)</title><rect x="72.1" y="1443.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.38%)</title><rect x="72.1" y="1427.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.38%)</title><rect x="72.1" y="1411.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.38%)</title><rect x="72.1" y="1395.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.38%)</title><rect x="72.1" y="1379.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.1" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.38%)</title><rect x="72.1" y="1363.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.1" y="1374.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.38%)</title><rect x="72.1" y="1347.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.75%)</title><rect x="76.5" y="1523.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.5" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.75%)</title><rect x="76.5" y="1507.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.5" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.38%)</title><rect x="76.5" y="1491.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.5" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.38%)</title><rect x="76.5" y="1475.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.38%)</title><rect x="76.5" y="1459.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.38%)</title><rect x="76.5" y="1443.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.5" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.38%)</title><rect x="76.5" y="1427.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.5" y="1438.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.38%)</title><rect x="76.5" y="1411.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.38%)</title><rect x="81.0" y="1491.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.38%)</title><rect x="81.0" y="1475.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.38%)</title><rect x="81.0" y="1459.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.38%)</title><rect x="81.0" y="1443.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.75%)</title><rect x="85.4" y="1523.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.4" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.75%)</title><rect x="85.4" y="1507.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.4" y="1518.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.38%)</title><rect x="85.4" y="1491.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.4" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/981530120.accept (1 samples, 0.38%)</title><rect x="85.4" y="1475.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.38%)</title><rect x="85.4" y="1459.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.38%)</title><rect x="85.4" y="1443.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.38%)</title><rect x="85.4" y="1427.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.38%)</title><rect x="85.4" y="1411.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.4" y="1422.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.38%)</title><rect x="85.4" y="1395.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.4" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="85.4" y="1379.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.38%)</title><rect x="89.8" y="1491.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.8" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getKey (1 samples, 0.38%)</title><rect x="89.8" y="1475.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.38%)</title><rect x="94.3" y="1539.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.3" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.38%)</title><rect x="94.3" y="1523.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.3" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.38%)</title><rect x="94.3" y="1507.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.3" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.38%)</title><rect x="94.3" y="1491.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.3" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.38%)</title><rect x="94.3" y="1475.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="94.3" y="1459.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.3" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="94.3" y="1443.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.3" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="94.3" y="1427.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.3" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="94.3" y="1411.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.3" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.38%)</title><rect x="94.3" y="1395.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.3" y="1406.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.38%)</title><rect x="94.3" y="1379.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.3" y="1390.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.38%)</title><rect x="94.3" y="1363.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.3" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.38%)</title><rect x="94.3" y="1347.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.3" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.38%)</title><rect x="94.3" y="1331.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.38%)</title><rect x="94.3" y="1315.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="1326.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.38%)</title><rect x="94.3" y="1299.0" width="4.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="97.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.38%)</title><rect x="98.7" y="1539.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.7" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.38%)</title><rect x="98.7" y="1523.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.7" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.38%)</title><rect x="98.7" y="1507.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.7" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.38%)</title><rect x="98.7" y="1491.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.7" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.38%)</title><rect x="98.7" y="1475.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.7" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.38%)</title><rect x="98.7" y="1459.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.38%)</title><rect x="103.2" y="1539.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.2" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.38%)</title><rect x="103.2" y="1523.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.2" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.38%)</title><rect x="103.2" y="1507.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.2" y="1518.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.38%)</title><rect x="103.2" y="1491.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.2" y="1502.0"></text>
</g>
<g>
<title>java/lang/Thread.run (157 samples, 59.02%)</title><rect x="107.6" y="1603.0" width="696.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.6" y="1614.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (157 samples, 59.02%)</title><rect x="107.6" y="1587.0" width="696.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.6" y="1598.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (157 samples, 59.02%)</title><rect x="107.6" y="1571.0" width="696.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.6" y="1582.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.38%)</title><rect x="116.5" y="1555.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.5" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 0.38%)</title><rect x="116.5" y="1539.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.5" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="116.5" y="1523.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.5" y="1534.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.38%)</title><rect x="116.5" y="1507.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.5" y="1518.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.38%)</title><rect x="116.5" y="1491.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.5" y="1502.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.38%)</title><rect x="116.5" y="1475.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.5" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (147 samples, 55.26%)</title><rect x="120.9" y="1555.0" width="652.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.9" y="1566.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (147 samples, 55.26%)</title><rect x="120.9" y="1539.0" width="652.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.9" y="1550.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (147 samples, 55.26%)</title><rect x="120.9" y="1523.0" width="652.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.9" y="1534.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (144 samples, 54.14%)</title><rect x="120.9" y="1507.0" width="638.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.9" y="1518.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (39 samples, 14.66%)</title><rect x="143.1" y="1491.0" width="173.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.1" y="1502.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (39 samples, 14.66%)</title><rect x="143.1" y="1475.0" width="173.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.1" y="1486.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (39 samples, 14.66%)</title><rect x="143.1" y="1459.0" width="173.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.1" y="1470.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 14.66%)</title><rect x="143.1" y="1443.0" width="173.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.1" y="1454.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 14.66%)</title><rect x="143.1" y="1427.0" width="173.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.1" y="1438.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (39 samples, 14.66%)</title><rect x="143.1" y="1411.0" width="173.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.1" y="1422.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 5.26%)</title><rect x="143.1" y="1395.0" width="62.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.1" y="1406.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.75%)</title><rect x="156.4" y="1379.0" width="8.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="159.4" y="1390.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.75%)</title><rect x="156.4" y="1363.0" width="8.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="159.4" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.75%)</title><rect x="165.3" y="1379.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.3" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.75%)</title><rect x="165.3" y="1363.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.3" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.75%)</title><rect x="165.3" y="1347.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.75%)</title><rect x="165.3" y="1331.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.75%)</title><rect x="165.3" y="1315.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.75%)</title><rect x="165.3" y="1299.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.3" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.63%)</title><rect x="174.1" y="1379.0" width="31.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.1" y="1390.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.63%)</title><rect x="174.1" y="1363.0" width="31.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.1" y="1374.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.38%)</title><rect x="183.0" y="1347.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.0" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.38%)</title><rect x="183.0" y="1331.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.0" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.50%)</title><rect x="187.4" y="1347.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.4" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.50%)</title><rect x="187.4" y="1331.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.4" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 1.50%)</title><rect x="187.4" y="1315.0" width="17.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.4" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 7.89%)</title><rect x="205.2" y="1395.0" width="93.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.2" y="1406.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.38%)</title><rect x="209.6" y="1379.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.6" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.75%)</title><rect x="214.1" y="1379.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.75%)</title><rect x="214.1" y="1363.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.1" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.38%)</title><rect x="222.9" y="1379.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.38%)</title><rect x="222.9" y="1363.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.9" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 6.02%)</title><rect x="227.4" y="1379.0" width="70.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.4" y="1390.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.13%)</title><rect x="227.4" y="1363.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.4" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.38%)</title><rect x="236.2" y="1347.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.2" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 4.89%)</title><rect x="240.7" y="1363.0" width="57.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.7" y="1374.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 4.89%)</title><rect x="240.7" y="1347.0" width="57.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.7" y="1358.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 4.89%)</title><rect x="240.7" y="1331.0" width="57.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.7" y="1342.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.50%)</title><rect x="245.1" y="1315.0" width="17.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.1" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.38%)</title><rect x="249.5" y="1299.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.5" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.75%)</title><rect x="254.0" y="1299.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.0" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.75%)</title><rect x="254.0" y="1283.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.75%)</title><rect x="254.0" y="1267.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.75%)</title><rect x="254.0" y="1251.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.13%)</title><rect x="262.9" y="1315.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.9" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.75%)</title><rect x="267.3" y="1299.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.3" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.75%)</title><rect x="267.3" y="1283.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.75%)</title><rect x="267.3" y="1267.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.75%)</title><rect x="267.3" y="1251.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 1.88%)</title><rect x="276.2" y="1315.0" width="22.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.2" y="1326.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 1.88%)</title><rect x="276.2" y="1299.0" width="22.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.2" y="1310.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 1.88%)</title><rect x="276.2" y="1283.0" width="22.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.2" y="1294.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 1.88%)</title><rect x="276.2" y="1267.0" width="22.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.2" y="1278.0">c..</text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 1.88%)</title><rect x="276.2" y="1251.0" width="22.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.2" y="1262.0">j..</text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 1.50%)</title><rect x="276.2" y="1235.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.2" y="1246.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor20.newInstance (1 samples, 0.38%)</title><rect x="293.9" y="1235.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.50%)</title><rect x="298.3" y="1395.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.3" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.50%)</title><rect x="298.3" y="1379.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.3" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.50%)</title><rect x="298.3" y="1363.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.3" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.50%)</title><rect x="298.3" y="1347.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.50%)</title><rect x="298.3" y="1331.0" width="17.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (91 samples, 34.21%)</title><rect x="316.1" y="1491.0" width="403.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.1" y="1502.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 5.64%)</title><rect x="316.1" y="1475.0" width="66.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.1" y="1486.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 5.26%)</title><rect x="320.5" y="1459.0" width="62.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.5" y="1470.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 3.76%)</title><rect x="338.3" y="1443.0" width="44.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.3" y="1454.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.13%)</title><rect x="338.3" y="1427.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.13%)</title><rect x="338.3" y="1411.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.13%)</title><rect x="338.3" y="1395.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.38%)</title><rect x="347.1" y="1379.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.38%)</title><rect x="347.1" y="1363.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.1" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.63%)</title><rect x="351.6" y="1427.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.6" y="1438.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.26%)</title><rect x="356.0" y="1411.0" width="26.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.0" y="1422.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.50%)</title><rect x="364.9" y="1395.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.9" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 7.89%)</title><rect x="382.6" y="1475.0" width="93.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.6" y="1486.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 7.89%)</title><rect x="382.6" y="1459.0" width="93.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.6" y="1470.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.38%)</title><rect x="382.6" y="1443.0" width="40.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.6" y="1454.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.63%)</title><rect x="382.6" y="1427.0" width="31.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.6" y="1438.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.63%)</title><rect x="382.6" y="1411.0" width="31.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.6" y="1422.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.13%)</title><rect x="395.9" y="1395.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="398.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.13%)</title><rect x="395.9" y="1379.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.9" y="1390.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.13%)</title><rect x="395.9" y="1363.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.9" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.13%)</title><rect x="395.9" y="1347.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="398.9" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.38%)</title><rect x="395.9" y="1331.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="398.9" y="1342.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.38%)</title><rect x="395.9" y="1315.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="398.9" y="1326.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.38%)</title><rect x="395.9" y="1299.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="398.9" y="1310.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.38%)</title><rect x="395.9" y="1283.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="398.9" y="1294.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.75%)</title><rect x="400.4" y="1331.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="403.4" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.75%)</title><rect x="400.4" y="1315.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="403.4" y="1326.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.38%)</title><rect x="400.4" y="1299.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="403.4" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.38%)</title><rect x="400.4" y="1283.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.4" y="1294.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.38%)</title><rect x="404.8" y="1299.0" width="4.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="407.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.38%)</title><rect x="409.2" y="1395.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.2" y="1406.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.75%)</title><rect x="413.7" y="1427.0" width="8.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="416.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="422.6" y="1443.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.6" y="1454.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 4.14%)</title><rect x="427.0" y="1443.0" width="48.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.0" y="1454.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 4.14%)</title><rect x="427.0" y="1427.0" width="48.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.0" y="1438.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.38%)</title><rect x="431.4" y="1411.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.38%)</title><rect x="431.4" y="1395.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.38%)</title><rect x="431.4" y="1379.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.38%)</title><rect x="431.4" y="1363.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.38%)</title><rect x="431.4" y="1347.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.4" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 3.38%)</title><rect x="435.9" y="1411.0" width="39.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.9" y="1422.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 3.01%)</title><rect x="440.3" y="1395.0" width="35.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.3" y="1406.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 1.13%)</title><rect x="444.7" y="1379.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 1.13%)</title><rect x="444.7" y="1363.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.7" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.50%)</title><rect x="458.0" y="1379.0" width="17.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.0" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.75%)</title><rect x="466.9" y="1363.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 19.55%)</title><rect x="475.8" y="1475.0" width="230.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.8" y="1486.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 19.55%)</title><rect x="475.8" y="1459.0" width="230.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.8" y="1470.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (50 samples, 18.80%)</title><rect x="475.8" y="1443.0" width="221.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.8" y="1454.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (49 samples, 18.42%)</title><rect x="480.2" y="1427.0" width="217.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.2" y="1438.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 18.42%)</title><rect x="480.2" y="1411.0" width="217.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.2" y="1422.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (47 samples, 17.67%)</title><rect x="484.7" y="1395.0" width="208.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.7" y="1406.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (46 samples, 17.29%)</title><rect x="484.7" y="1379.0" width="204.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.7" y="1390.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 13.91%)</title><rect x="520.2" y="1363.0" width="164.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="523.2" y="1374.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.50%)</title><rect x="537.9" y="1347.0" width="17.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.9" y="1358.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="555.6" y="1347.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="558.6" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="560.1" y="1347.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="563.1" y="1358.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="560.1" y="1331.0" width="4.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="563.1" y="1342.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.13%)</title><rect x="564.5" y="1347.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="567.5" y="1358.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (24 samples, 9.02%)</title><rect x="577.8" y="1347.0" width="106.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="580.8" y="1358.0">os::sleep(Thr..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="586.7" y="1331.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="589.7" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="586.7" y="1315.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="589.7" y="1326.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.38%)</title><rect x="591.1" y="1331.0" width="4.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="594.1" y="1342.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.38%)</title><rect x="595.6" y="1331.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="598.6" y="1342.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 2.63%)</title><rect x="600.0" y="1331.0" width="31.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="603.0" y="1342.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 1.50%)</title><rect x="631.1" y="1331.0" width="17.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="634.1" y="1342.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.50%)</title><rect x="648.8" y="1331.0" width="17.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="651.8" y="1342.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.75%)</title><rect x="666.5" y="1331.0" width="8.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="669.5" y="1342.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.38%)</title><rect x="675.4" y="1331.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="678.4" y="1342.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.38%)</title><rect x="679.8" y="1331.0" width="4.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="682.8" y="1342.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.38%)</title><rect x="684.3" y="1363.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="687.3" y="1374.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.38%)</title><rect x="688.7" y="1379.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="691.7" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="688.7" y="1363.0" width="4.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="691.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="693.2" y="1395.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="696.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.38%)</title><rect x="693.2" y="1379.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="696.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.38%)</title><rect x="697.6" y="1443.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="700.6" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.38%)</title><rect x="697.6" y="1427.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.6" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$262/1401016505.get$Lambda (1 samples, 0.38%)</title><rect x="697.6" y="1411.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.6" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$262/1401016505.&lt;init&gt; (1 samples, 0.38%)</title><rect x="697.6" y="1395.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.6" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="702.0" y="1443.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.0" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="702.0" y="1427.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.0" y="1438.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.38%)</title><rect x="702.0" y="1411.0" width="4.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="705.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.13%)</title><rect x="706.5" y="1475.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.5" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.13%)</title><rect x="706.5" y="1459.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.38%)</title><rect x="710.9" y="1443.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.9" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1422095843.accept (1 samples, 0.38%)</title><rect x="710.9" y="1427.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.9" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.38%)</title><rect x="710.9" y="1411.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.9" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="710.9" y="1395.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="713.9" y="1406.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.38%)</title><rect x="710.9" y="1379.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.9" y="1390.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.38%)</title><rect x="710.9" y="1363.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="713.9" y="1374.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.38%)</title><rect x="715.3" y="1443.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.3" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.38%)</title><rect x="719.8" y="1491.0" width="39.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.8" y="1502.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.38%)</title><rect x="719.8" y="1475.0" width="39.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.8" y="1486.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.26%)</title><rect x="733.1" y="1459.0" width="26.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.1" y="1470.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1422095843.accept (6 samples, 2.26%)</title><rect x="733.1" y="1443.0" width="26.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="736.1" y="1454.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 2.26%)</title><rect x="733.1" y="1427.0" width="26.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="736.1" y="1438.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 2.26%)</title><rect x="733.1" y="1411.0" width="26.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.1" y="1422.0">c..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 2.26%)</title><rect x="733.1" y="1395.0" width="26.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="736.1" y="1406.0">j..</text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 2.26%)</title><rect x="733.1" y="1379.0" width="26.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.1" y="1390.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="759.7" y="1507.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.7" y="1518.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.38%)</title><rect x="759.7" y="1491.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.7" y="1502.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.38%)</title><rect x="759.7" y="1475.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="762.7" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="759.7" y="1459.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="762.7" y="1470.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="759.7" y="1443.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="762.7" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.38%)</title><rect x="759.7" y="1427.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="762.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.75%)</title><rect x="764.1" y="1507.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.38%)</title><rect x="773.0" y="1555.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.0" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.38%)</title><rect x="773.0" y="1539.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.0" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.38%)</title><rect x="773.0" y="1523.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="776.0" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.38%)</title><rect x="773.0" y="1507.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.0" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.38%)</title><rect x="773.0" y="1491.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.0" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.26%)</title><rect x="777.4" y="1555.0" width="26.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.4" y="1566.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.26%)</title><rect x="777.4" y="1539.0" width="26.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.4" y="1550.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.50%)</title><rect x="786.3" y="1523.0" width="17.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.3" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.50%)</title><rect x="786.3" y="1507.0" width="17.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="789.3" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.50%)</title><rect x="786.3" y="1491.0" width="17.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.3" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.50%)</title><rect x="786.3" y="1475.0" width="17.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.3" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.75%)</title><rect x="804.1" y="1603.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.1" y="1614.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.38%)</title><rect x="804.1" y="1587.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="807.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.38%)</title><rect x="808.5" y="1587.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.38%)</title><rect x="808.5" y="1571.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.5" y="1582.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.38%)</title><rect x="808.5" y="1555.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="811.5" y="1566.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.38%)</title><rect x="808.5" y="1539.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.5" y="1550.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.38%)</title><rect x="808.5" y="1523.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.5" y="1534.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.38%)</title><rect x="808.5" y="1507.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.5" y="1518.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.38%)</title><rect x="808.5" y="1491.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="811.5" y="1502.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.38%)</title><rect x="808.5" y="1475.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="811.5" y="1486.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.38%)</title><rect x="808.5" y="1459.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="811.5" y="1470.0"></text>
</g>
<g>
<title>start_thread (84 samples, 31.58%)</title><rect x="812.9" y="1603.0" width="372.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="815.9" y="1614.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (84 samples, 31.58%)</title><rect x="812.9" y="1587.0" width="372.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="815.9" y="1598.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.26%)</title><rect x="812.9" y="1571.0" width="26.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.9" y="1582.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.26%)</title><rect x="812.9" y="1555.0" width="26.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.9" y="1566.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.50%)</title><rect x="812.9" y="1539.0" width="17.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.9" y="1550.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.50%)</title><rect x="812.9" y="1523.0" width="17.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="815.9" y="1534.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.75%)</title><rect x="821.8" y="1507.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="824.8" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.38%)</title><rect x="826.2" y="1491.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="829.2" y="1502.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.75%)</title><rect x="830.7" y="1539.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.7" y="1550.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.75%)</title><rect x="830.7" y="1523.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.7" y="1534.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.75%)</title><rect x="830.7" y="1507.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.7" y="1518.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.75%)</title><rect x="830.7" y="1491.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.7" y="1502.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.75%)</title><rect x="830.7" y="1475.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.7" y="1486.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.75%)</title><rect x="830.7" y="1459.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="833.7" y="1470.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.75%)</title><rect x="830.7" y="1443.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.7" y="1454.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.75%)</title><rect x="830.7" y="1427.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.7" y="1438.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.75%)</title><rect x="830.7" y="1411.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.7" y="1422.0"></text>
</g>
<g>
<title>JavaThread::run() (78 samples, 29.32%)</title><rect x="839.5" y="1571.0" width="346.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.5" y="1582.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (78 samples, 29.32%)</title><rect x="839.5" y="1555.0" width="346.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="842.5" y="1566.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (78 samples, 29.32%)</title><rect x="839.5" y="1539.0" width="346.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="842.5" y="1550.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (78 samples, 29.32%)</title><rect x="839.5" y="1523.0" width="346.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="842.5" y="1534.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (74 samples, 27.82%)</title><rect x="839.5" y="1507.0" width="328.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="842.5" y="1518.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (74 samples, 27.82%)</title><rect x="839.5" y="1491.0" width="328.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="842.5" y="1502.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 15.41%)</title><rect x="839.5" y="1475.0" width="181.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.5" y="1486.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.75%)</title><rect x="839.5" y="1459.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="842.5" y="1470.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.75%)</title><rect x="839.5" y="1443.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.5" y="1454.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.38%)</title><rect x="839.5" y="1427.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="842.5" y="1438.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.38%)</title><rect x="839.5" y="1411.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="842.5" y="1422.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.38%)</title><rect x="839.5" y="1395.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="842.5" y="1406.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.38%)</title><rect x="839.5" y="1379.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.5" y="1390.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.38%)</title><rect x="844.0" y="1427.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="847.0" y="1438.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.75%)</title><rect x="848.4" y="1459.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="851.4" y="1470.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.38%)</title><rect x="848.4" y="1443.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="851.4" y="1454.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.38%)</title><rect x="848.4" y="1427.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="851.4" y="1438.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="848.4" y="1411.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="851.4" y="1422.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.38%)</title><rect x="852.9" y="1443.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="855.9" y="1454.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="852.9" y="1427.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="855.9" y="1438.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.88%)</title><rect x="857.3" y="1459.0" width="22.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="860.3" y="1470.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.38%)</title><rect x="857.3" y="1443.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="860.3" y="1454.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.50%)</title><rect x="861.7" y="1443.0" width="17.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="864.7" y="1454.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.13%)</title><rect x="866.2" y="1427.0" width="13.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.2" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.75%)</title><rect x="879.5" y="1459.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="882.5" y="1470.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.75%)</title><rect x="879.5" y="1443.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.5" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="879.5" y="1427.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.5" y="1438.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.38%)</title><rect x="879.5" y="1411.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.5" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="883.9" y="1427.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.9" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="883.9" y="1411.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="886.9" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 11.28%)</title><rect x="888.3" y="1459.0" width="133.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.3" y="1470.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.38%)</title><rect x="888.3" y="1443.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.3" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.75%)</title><rect x="892.8" y="1443.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="895.8" y="1454.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="892.8" y="1427.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="895.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.38%)</title><rect x="897.2" y="1427.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="900.2" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.75%)</title><rect x="901.7" y="1443.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.7" y="1454.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.75%)</title><rect x="901.7" y="1427.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.7" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.38%)</title><rect x="906.1" y="1411.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.1" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.50%)</title><rect x="910.5" y="1443.0" width="17.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="913.5" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.38%)</title><rect x="923.8" y="1427.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.8" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.38%)</title><rect x="923.8" y="1411.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.8" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.26%)</title><rect x="928.3" y="1443.0" width="26.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="1454.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="941.6" y="1427.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.6" y="1438.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.38%)</title><rect x="946.0" y="1427.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.0" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.38%)</title><rect x="950.5" y="1427.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.5" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="950.5" y="1411.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="953.5" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.75%)</title><rect x="954.9" y="1443.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.9" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.75%)</title><rect x="954.9" y="1427.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.9" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.38%)</title><rect x="963.8" y="1443.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.8" y="1454.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 3.01%)</title><rect x="968.2" y="1443.0" width="35.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.2" y="1454.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 3.01%)</title><rect x="968.2" y="1427.0" width="35.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.2" y="1438.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.38%)</title><rect x="968.2" y="1411.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.2" y="1422.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.63%)</title><rect x="972.6" y="1411.0" width="31.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.6" y="1422.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.13%)</title><rect x="972.6" y="1395.0" width="13.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.6" y="1406.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.75%)</title><rect x="985.9" y="1395.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.9" y="1406.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.75%)</title><rect x="994.8" y="1395.0" width="8.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="997.8" y="1406.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.38%)</title><rect x="1003.7" y="1443.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.7" y="1454.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="1003.7" y="1427.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.7" y="1438.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.13%)</title><rect x="1008.1" y="1443.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.1" y="1454.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.38%)</title><rect x="1012.6" y="1427.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.6" y="1438.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="1017.0" y="1427.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.0" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="1017.0" y="1411.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.0" y="1422.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 10.53%)</title><rect x="1021.4" y="1475.0" width="124.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1486.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.38%)</title><rect x="1021.4" y="1459.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="1470.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.38%)</title><rect x="1021.4" y="1443.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.4" y="1454.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.38%)</title><rect x="1021.4" y="1427.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="1438.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1021.4" y="1411.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.38%)</title><rect x="1025.9" y="1459.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.9" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.38%)</title><rect x="1025.9" y="1443.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.9" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1427.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.9" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1411.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.9" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1395.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.9" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1379.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.9" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1363.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.9" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1347.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.9" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1331.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1315.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1299.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1283.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.9" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1267.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.9" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1251.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1235.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1219.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1203.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1187.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1171.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1155.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1139.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1123.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1107.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1091.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1075.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.38%)</title><rect x="1025.9" y="1059.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.75%)</title><rect x="1030.3" y="1459.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.3" y="1470.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.75%)</title><rect x="1030.3" y="1443.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.3" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 8.65%)</title><rect x="1039.2" y="1459.0" width="102.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.2" y="1470.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1039.2" y="1443.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.2" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 7.14%)</title><rect x="1043.6" y="1443.0" width="84.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1046.6" y="1454.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 6.77%)</title><rect x="1048.0" y="1427.0" width="79.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.0" y="1438.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.38%)</title><rect x="1048.0" y="1411.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 6.39%)</title><rect x="1052.5" y="1411.0" width="75.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.5" y="1422.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.13%)</title><rect x="1114.6" y="1395.0" width="13.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.6" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.38%)</title><rect x="1127.9" y="1443.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.9" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1132.3" y="1443.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.3" y="1454.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.38%)</title><rect x="1136.8" y="1443.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.8" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.38%)</title><rect x="1141.2" y="1459.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.2" y="1470.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.38%)</title><rect x="1141.2" y="1443.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.2" y="1454.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.38%)</title><rect x="1141.2" y="1427.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.88%)</title><rect x="1145.6" y="1475.0" width="22.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="1486.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.88%)</title><rect x="1145.6" y="1459.0" width="22.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="1470.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.88%)</title><rect x="1145.6" y="1443.0" width="22.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="1454.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.88%)</title><rect x="1145.6" y="1427.0" width="22.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.6" y="1438.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.88%)</title><rect x="1145.6" y="1411.0" width="22.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="1422.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.88%)</title><rect x="1145.6" y="1395.0" width="22.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="1406.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.88%)</title><rect x="1145.6" y="1379.0" width="22.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="1390.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.88%)</title><rect x="1145.6" y="1363.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="1374.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.88%)</title><rect x="1145.6" y="1347.0" width="22.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="1358.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.88%)</title><rect x="1145.6" y="1331.0" width="22.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="1342.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.88%)</title><rect x="1145.6" y="1315.0" width="22.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.50%)</title><rect x="1145.6" y="1299.0" width="17.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1145.6" y="1283.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1145.6" y="1267.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1145.6" y="1251.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1145.6" y="1235.0" width="8.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1145.6" y="1219.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1145.6" y="1203.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1145.6" y="1187.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1145.6" y="1171.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1145.6" y="1155.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1145.6" y="1139.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1145.6" y="1123.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1145.6" y="1107.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.6" y="1091.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.6" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1145.6" y="1075.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1145.6" y="1059.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1145.6" y="1043.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1145.6" y="1027.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1145.6" y="1011.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.6" y="995.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1145.6" y="979.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1145.6" y="963.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1145.6" y="947.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1145.6" y="931.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1145.6" y="915.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1145.6" y="899.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="910.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.38%)</title><rect x="1145.6" y="883.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1150.1" y="1107.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1150.1" y="1091.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.1" y="1102.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.38%)</title><rect x="1150.1" y="1075.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1150.1" y="1059.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1150.1" y="1043.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="1054.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1150.1" y="1027.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="1038.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.38%)</title><rect x="1150.1" y="1011.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1154.5" y="1283.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.5" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1154.5" y="1267.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.5" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1154.5" y="1251.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1154.5" y="1235.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1154.5" y="1219.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1154.5" y="1203.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1154.5" y="1187.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1154.5" y="1171.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1154.5" y="1155.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1154.5" y="1139.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1154.5" y="1123.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1154.5" y="1107.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1154.5" y="1091.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1154.5" y="1075.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1154.5" y="1059.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1154.5" y="1043.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1154.5" y="1027.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1154.5" y="1011.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1154.5" y="995.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.5" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1154.5" y="979.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.5" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1154.5" y="963.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.5" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1154.5" y="947.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.5" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1154.5" y="931.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1154.5" y="915.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1154.5" y="899.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1154.5" y="883.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1154.5" y="867.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1154.5" y="851.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.5" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.38%)</title><rect x="1154.5" y="835.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.5" y="819.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.5" y="803.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.5" y="814.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.5" y="787.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="1154.5" y="771.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="1154.5" y="755.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.5" y="766.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.5" y="739.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="979.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="963.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="947.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="931.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="915.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="899.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="883.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="867.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="851.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="835.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="819.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="803.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="787.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="771.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="755.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="739.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="723.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="707.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="691.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="675.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="659.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="643.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="627.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="611.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="595.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="579.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="563.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="547.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="531.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="515.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="499.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="483.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="467.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="451.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="435.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="419.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="403.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="387.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="371.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="355.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="339.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="323.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="307.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="291.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="275.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="259.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="243.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="227.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.9" y="211.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.9" y="195.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.9" y="179.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.9" y="163.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.9" y="147.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.9" y="131.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="115.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="99.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.38%)</title><rect x="1158.9" y="83.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.38%)</title><rect x="1158.9" y="67.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1158.9" y="51.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="62.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1158.9" y="35.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="1299.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="1283.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.4" y="1294.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.38%)</title><rect x="1163.4" y="1267.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="1278.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.38%)</title><rect x="1163.4" y="1251.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="1262.0"></text>
</g>
<g>
<title>IdealKit::clear(Node*) (1 samples, 0.38%)</title><rect x="1163.4" y="1235.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.4" y="1246.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.13%)</title><rect x="1167.8" y="1507.0" width="13.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="1518.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.13%)</title><rect x="1167.8" y="1491.0" width="13.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="1502.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.13%)</title><rect x="1167.8" y="1475.0" width="13.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="1486.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.75%)</title><rect x="1167.8" y="1459.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="1470.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.38%)</title><rect x="1167.8" y="1443.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="1454.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.38%)</title><rect x="1167.8" y="1427.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="1438.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1411.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="1422.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.38%)</title><rect x="1167.8" y="1395.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1406.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1379.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1390.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.8" y="1363.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="1374.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.8" y="1347.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="1358.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.8" y="1331.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="1342.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.8" y="1315.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1299.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.8" y="1283.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.8" y="1267.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.8" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.8" y="1251.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.8" y="1235.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.8" y="1219.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.8" y="1203.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.8" y="1187.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.8" y="1171.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.8" y="1155.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.38%)</title><rect x="1167.8" y="1139.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.8" y="1150.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.38%)</title><rect x="1167.8" y="1123.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.38%)</title><rect x="1172.3" y="1443.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="1454.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.38%)</title><rect x="1172.3" y="1427.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="1438.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.38%)</title><rect x="1172.3" y="1411.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="1422.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.38%)</title><rect x="1176.7" y="1459.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="1470.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.38%)</title><rect x="1176.7" y="1443.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1454.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.38%)</title><rect x="1176.7" y="1427.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1438.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.38%)</title><rect x="1176.7" y="1411.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1422.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.38%)</title><rect x="1176.7" y="1395.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="1406.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.38%)</title><rect x="1176.7" y="1379.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="1390.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::ValueRecorder(Arena*) (1 samples, 0.38%)</title><rect x="1176.7" y="1363.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1374.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.38%)</title><rect x="1181.1" y="1507.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="1518.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.38%)</title><rect x="1181.1" y="1491.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="1502.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.38%)</title><rect x="1181.1" y="1475.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="1486.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.38%)</title><rect x="1185.6" y="1603.0" width="4.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1188.6" y="1614.0"></text>
</g>
</g>
</svg>
