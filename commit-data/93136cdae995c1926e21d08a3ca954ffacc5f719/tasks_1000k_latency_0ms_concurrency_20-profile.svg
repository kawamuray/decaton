<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,226 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (259 samples, 21.13%)</title><rect x="11.0" y="2035.0" width="249.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="2046.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (259 samples, 21.13%)</title><rect x="11.0" y="2019.0" width="249.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.0" y="2030.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.24%)</title><rect x="11.0" y="2003.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.24%)</title><rect x="11.0" y="1987.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/955063018.accept (3 samples, 0.24%)</title><rect x="11.0" y="1971.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.0" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.24%)</title><rect x="11.0" y="1955.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.24%)</title><rect x="11.0" y="1939.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.0" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.16%)</title><rect x="11.9" y="1923.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.33%)</title><rect x="13.8" y="2003.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.24%)</title><rect x="14.8" y="1987.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.8" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="14.8" y="1971.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1982.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="14.8" y="1955.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1966.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="14.8" y="1939.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="14.8" y="1923.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="14.8" y="1907.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="14.8" y="1891.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="15.8" y="1955.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="16.7" y="1939.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="16.7" y="1923.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="16.7" y="1907.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="16.7" y="1891.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (4 samples, 0.33%)</title><rect x="17.7" y="2003.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (4 samples, 0.33%)</title><rect x="17.7" y="1987.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="20.6" y="1971.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="20.6" y="1955.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.6" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="20.6" y="1939.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.6" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="20.6" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="20.6" y="1907.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="20.6" y="1891.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="20.6" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="20.6" y="1859.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="20.6" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/736738084.get (1 samples, 0.08%)</title><rect x="20.6" y="1827.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (186 samples, 15.17%)</title><rect x="21.5" y="2003.0" width="179.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.5" y="2014.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/157260265.accept (177 samples, 14.44%)</title><rect x="21.5" y="1987.0" width="170.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="1998.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (176 samples, 14.36%)</title><rect x="22.5" y="1971.0" width="169.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.5" y="1982.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.16%)</title><rect x="25.4" y="1955.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (133 samples, 10.85%)</title><rect x="27.3" y="1955.0" width="128.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.3" y="1966.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (133 samples, 10.85%)</title><rect x="27.3" y="1939.0" width="128.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.3" y="1950.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (133 samples, 10.85%)</title><rect x="27.3" y="1923.0" width="128.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.3" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (133 samples, 10.85%)</title><rect x="27.3" y="1907.0" width="128.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.3" y="1918.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (133 samples, 10.85%)</title><rect x="27.3" y="1891.0" width="128.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.3" y="1902.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (133 samples, 10.85%)</title><rect x="27.3" y="1875.0" width="128.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.3" y="1886.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (97 samples, 7.91%)</title><rect x="27.3" y="1859.0" width="93.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.3" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.71%)</title><rect x="27.3" y="1843.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.71%)</title><rect x="27.3" y="1827.0" width="20.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.31%)</title><rect x="32.1" y="1811.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (16 samples, 1.31%)</title><rect x="32.1" y="1795.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.41%)</title><rect x="47.5" y="1843.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.41%)</title><rect x="47.5" y="1827.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.24%)</title><rect x="48.5" y="1811.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.5" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.24%)</title><rect x="48.5" y="1795.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="51.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="51.4" y="1811.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (71 samples, 5.79%)</title><rect x="52.3" y="1843.0" width="68.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.3" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (71 samples, 5.79%)</title><rect x="52.3" y="1827.0" width="68.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.3" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 5.71%)</title><rect x="52.3" y="1811.0" width="67.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.3" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 5.71%)</title><rect x="52.3" y="1795.0" width="67.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.3" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 5.55%)</title><rect x="54.3" y="1779.0" width="65.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.3" y="1790.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 4.73%)</title><rect x="54.3" y="1763.0" width="55.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="57.3" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="54.3" y="1747.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="57.3" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.24%)</title><rect x="56.2" y="1747.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="59.2" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="59.1" y="1747.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="62.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (36 samples, 2.94%)</title><rect x="60.0" y="1747.0" width="34.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="63.0" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="94.7" y="1747.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.7" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.22%)</title><rect x="95.7" y="1747.0" width="14.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="98.7" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.65%)</title><rect x="110.1" y="1763.0" width="7.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="113.1" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="117.8" y="1763.0" width="1.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="120.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="119.7" y="1811.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 2.69%)</title><rect x="120.7" y="1859.0" width="31.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 2.69%)</title><rect x="120.7" y="1843.0" width="31.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (33 samples, 2.69%)</title><rect x="120.7" y="1827.0" width="31.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.7" y="1838.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="150.5" y="1811.0" width="1.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="153.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.24%)</title><rect x="152.4" y="1859.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="152.4" y="1843.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="152.4" y="1827.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="152.4" y="1811.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="154.4" y="1827.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="154.4" y="1811.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.41%)</title><rect x="155.3" y="1955.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.3" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.41%)</title><rect x="155.3" y="1939.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.3" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.24%)</title><rect x="160.1" y="1955.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.1" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="160.1" y="1939.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="160.1" y="1923.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (29 samples, 2.37%)</title><rect x="163.0" y="1955.0" width="27.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.0" y="1966.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="163.0" y="1939.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="166.0" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="163.0" y="1923.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="166.0" y="1934.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="163.0" y="1907.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.0" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="163.0" y="1891.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="166.0" y="1902.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="163.0" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.28%)</title><rect x="164.0" y="1939.0" width="26.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.0" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 0.98%)</title><rect x="177.5" y="1923.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.41%)</title><rect x="177.5" y="1907.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.41%)</title><rect x="177.5" y="1891.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.41%)</title><rect x="177.5" y="1875.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="181.3" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="184.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="181.3" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="184.3" y="1854.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="181.3" y="1827.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="184.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.41%)</title><rect x="182.3" y="1907.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="187.1" y="1907.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.1" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="189.0" y="1923.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="192.0" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="190.0" y="1923.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="193.0" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="190.9" y="1955.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="193.9" y="1966.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="191.9" y="1987.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="194.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.57%)</title><rect x="193.8" y="1987.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.57%)</title><rect x="193.8" y="1971.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.57%)</title><rect x="193.8" y="1955.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.57%)</title><rect x="193.8" y="1939.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.06%)</title><rect x="200.6" y="2003.0" width="59.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.6" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.06%)</title><rect x="200.6" y="1987.0" width="59.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="203.6" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (44 samples, 3.59%)</title><rect x="200.6" y="1971.0" width="42.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.6" y="1982.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="200.6" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="200.6" y="1939.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.6" y="1950.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.08%)</title><rect x="200.6" y="1923.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="203.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (43 samples, 3.51%)</title><rect x="201.5" y="1955.0" width="41.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.5" y="1966.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="201.5" y="1939.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="202.5" y="1923.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (41 samples, 3.34%)</title><rect x="203.5" y="1939.0" width="39.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.5" y="1950.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 2.85%)</title><rect x="203.5" y="1923.0" width="33.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.5" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 2.85%)</title><rect x="203.5" y="1907.0" width="33.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.5" y="1918.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="206.3" y="1891.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="209.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.14%)</title><rect x="207.3" y="1891.0" width="13.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="212.1" y="1875.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="212.1" y="1859.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.08%)</title><rect x="212.1" y="1843.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.08%)</title><rect x="212.1" y="1827.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="212.1" y="1811.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="212.1" y="1795.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.1" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.08%)</title><rect x="212.1" y="1779.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.49%)</title><rect x="213.1" y="1875.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.49%)</title><rect x="213.1" y="1859.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.49%)</title><rect x="213.1" y="1843.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.49%)</title><rect x="213.1" y="1827.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.49%)</title><rect x="213.1" y="1811.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.49%)</title><rect x="213.1" y="1795.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.49%)</title><rect x="213.1" y="1779.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="218.9" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="218.9" y="1859.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="218.9" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="219.8" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="219.8" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="219.8" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="219.8" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.8" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="219.8" y="1811.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.39%)</title><rect x="220.8" y="1891.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (16 samples, 1.31%)</title><rect x="221.7" y="1875.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (16 samples, 1.31%)</title><rect x="221.7" y="1859.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.7" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (16 samples, 1.31%)</title><rect x="221.7" y="1843.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.7" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (7 samples, 0.57%)</title><rect x="230.4" y="1827.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.4" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="236.2" y="1811.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="239.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.24%)</title><rect x="237.1" y="1923.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.24%)</title><rect x="237.1" y="1907.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="237.1" y="1891.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="237.1" y="1875.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.1" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="237.1" y="1859.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="240.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="238.1" y="1891.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="238.1" y="1875.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="238.1" y="1859.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.16%)</title><rect x="238.1" y="1843.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="240.0" y="1923.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="240.0" y="1907.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.08%)</title><rect x="240.0" y="1891.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.0" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="240.0" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="240.0" y="1859.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="240.0" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.0" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="240.0" y="1827.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="243.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.0" y="1891.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.0" y="1875.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="242.0" y="1923.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.49%)</title><rect x="242.9" y="1971.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.49%)</title><rect x="242.9" y="1955.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.41%)</title><rect x="242.9" y="1939.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="242.9" y="1923.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.9" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="242.9" y="1907.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="245.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="243.9" y="1907.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="243.9" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="243.9" y="1875.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="243.9" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/645474870.accept (1 samples, 0.08%)</title><rect x="244.8" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="244.8" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="244.8" y="1875.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="244.8" y="1859.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="244.8" y="1843.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="244.8" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="245.8" y="1923.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="246.8" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="246.8" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="246.8" y="1891.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="246.8" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="246.8" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="246.8" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.8" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="246.8" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.8" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="246.8" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="246.8" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="246.8" y="1779.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.8" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="246.8" y="1763.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="249.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="247.7" y="1939.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="247.7" y="1923.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="247.7" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="247.7" y="1891.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="247.7" y="1875.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="247.7" y="1859.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="247.7" y="1843.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="247.7" y="1827.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="247.7" y="1811.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="247.7" y="1795.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.7" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="247.7" y="1779.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.41%)</title><rect x="248.7" y="1971.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.41%)</title><rect x="248.7" y="1955.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.41%)</title><rect x="248.7" y="1939.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.41%)</title><rect x="248.7" y="1923.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.24%)</title><rect x="248.7" y="1907.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="248.7" y="1891.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="248.7" y="1875.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="248.7" y="1859.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="248.7" y="1843.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.7" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="248.7" y="1827.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.7" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="248.7" y="1811.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="251.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.08%)</title><rect x="250.6" y="1891.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="250.6" y="1875.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.6" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="250.6" y="1859.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.08%)</title><rect x="250.6" y="1843.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.08%)</title><rect x="250.6" y="1827.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.08%)</title><rect x="250.6" y="1811.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.08%)</title><rect x="250.6" y="1795.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.16%)</title><rect x="251.6" y="1907.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.6" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="251.6" y="1891.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.6" y="1902.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="251.6" y="1875.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="254.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.41%)</title><rect x="253.5" y="1971.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.41%)</title><rect x="253.5" y="1955.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.5" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="254.5" y="1939.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="254.5" y="1923.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1033155302.accept (1 samples, 0.08%)</title><rect x="255.4" y="1923.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.4" y="1934.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.08%)</title><rect x="256.4" y="1939.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="257.4" y="1939.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="257.4" y="1923.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$1700 (1 samples, 0.08%)</title><rect x="257.4" y="1907.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="257.4" y="1891.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.08%)</title><rect x="257.4" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.08%)</title><rect x="257.4" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="258.3" y="1971.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="258.3" y="1955.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="259.3" y="1971.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="259.3" y="1955.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="259.3" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="259.3" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="259.3" y="1907.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="259.3" y="1891.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.08%)</title><rect x="259.3" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (670 samples, 54.65%)</title><rect x="260.2" y="2035.0" width="644.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.2" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (670 samples, 54.65%)</title><rect x="260.2" y="2019.0" width="644.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.2" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (670 samples, 54.65%)</title><rect x="260.2" y="2003.0" width="644.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.2" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2144758258.run (462 samples, 37.68%)</title><rect x="262.2" y="1987.0" width="444.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.2" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (462 samples, 37.68%)</title><rect x="262.2" y="1971.0" width="444.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.2" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (462 samples, 37.68%)</title><rect x="262.2" y="1955.0" width="444.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.2" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (455 samples, 37.11%)</title><rect x="262.2" y="1939.0" width="437.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.2" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (169 samples, 13.78%)</title><rect x="270.8" y="1923.0" width="162.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.8" y="1934.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (169 samples, 13.78%)</title><rect x="270.8" y="1907.0" width="162.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.8" y="1918.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (169 samples, 13.78%)</title><rect x="270.8" y="1891.0" width="162.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.8" y="1902.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 13.78%)</title><rect x="270.8" y="1875.0" width="162.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.8" y="1886.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 13.78%)</title><rect x="270.8" y="1859.0" width="162.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.8" y="1870.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (169 samples, 13.78%)</title><rect x="270.8" y="1843.0" width="162.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.8" y="1854.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (57 samples, 4.65%)</title><rect x="270.8" y="1827.0" width="54.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.8" y="1838.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 2.20%)</title><rect x="270.8" y="1811.0" width="26.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.8" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (26 samples, 2.12%)</title><rect x="270.8" y="1795.0" width="25.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.8" y="1806.0">c..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.49%)</title><rect x="285.3" y="1779.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="288.3" y="1790.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="287.2" y="1763.0" width="3.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="290.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="291.0" y="1779.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="291.0" y="1763.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.41%)</title><rect x="291.0" y="1747.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="295.9" y="1795.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="295.9" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.45%)</title><rect x="296.8" y="1811.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.8" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (6 samples, 0.49%)</title><rect x="296.8" y="1795.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.8" y="1806.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="301.6" y="1779.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 1.96%)</title><rect x="302.6" y="1795.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.6" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.16%)</title><rect x="306.4" y="1779.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.41%)</title><rect x="308.4" y="1779.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="312.2" y="1763.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.73%)</title><rect x="313.2" y="1779.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.73%)</title><rect x="313.2" y="1763.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.73%)</title><rect x="313.2" y="1747.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 0.33%)</title><rect x="321.8" y="1779.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (103 samples, 8.40%)</title><rect x="325.7" y="1827.0" width="99.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.7" y="1838.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.24%)</title><rect x="325.7" y="1811.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.24%)</title><rect x="325.7" y="1795.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.24%)</title><rect x="325.7" y="1779.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.16%)</title><rect x="326.7" y="1763.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.57%)</title><rect x="328.6" y="1811.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.57%)</title><rect x="328.6" y="1795.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="330.5" y="1779.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.16%)</title><rect x="331.5" y="1779.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.16%)</title><rect x="333.4" y="1779.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.82%)</title><rect x="335.3" y="1811.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.65%)</title><rect x="336.3" y="1795.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="337.2" y="1779.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.33%)</title><rect x="338.2" y="1779.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="341.1" y="1763.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="342.1" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="342.1" y="1763.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="342.1" y="1747.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="342.1" y="1731.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="343.0" y="1779.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.08%)</title><rect x="344.0" y="1795.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.82%)</title><rect x="344.9" y="1811.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.24%)</title><rect x="345.9" y="1795.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.49%)</title><rect x="348.8" y="1795.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="351.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 5.95%)</title><rect x="354.6" y="1811.0" width="70.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.6" y="1822.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.63%)</title><rect x="355.5" y="1795.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="355.5" y="1779.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.33%)</title><rect x="356.5" y="1779.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.33%)</title><rect x="356.5" y="1763.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.33%)</title><rect x="356.5" y="1747.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="358.4" y="1731.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="358.4" y="1715.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (15 samples, 1.22%)</title><rect x="360.3" y="1779.0" width="14.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (10 samples, 0.82%)</title><rect x="360.3" y="1763.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.24%)</title><rect x="367.1" y="1747.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 0.41%)</title><rect x="370.0" y="1763.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 0.41%)</title><rect x="370.0" y="1747.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="373.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.33%)</title><rect x="370.9" y="1731.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="373.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.33%)</title><rect x="370.9" y="1715.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.24%)</title><rect x="374.8" y="1795.0" width="50.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="377.8" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.08%)</title><rect x="374.8" y="1779.0" width="48.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.8" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 4.08%)</title><rect x="374.8" y="1763.0" width="48.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="377.8" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.98%)</title><rect x="377.7" y="1747.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.33%)</title><rect x="378.6" y="1731.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="381.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="382.5" y="1731.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="385.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="382.5" y="1715.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="382.5" y="1699.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="382.5" y="1683.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="384.4" y="1731.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="384.4" y="1715.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.08%)</title><rect x="385.4" y="1715.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.08%)</title><rect x="385.4" y="1699.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.24%)</title><rect x="386.3" y="1731.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.24%)</title><rect x="386.3" y="1715.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="387.3" y="1699.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (14 samples, 1.14%)</title><rect x="389.2" y="1747.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="392.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.82%)</title><rect x="393.1" y="1731.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.82%)</title><rect x="393.1" y="1715.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.82%)</title><rect x="393.1" y="1699.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="396.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.82%)</title><rect x="393.1" y="1683.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.24%)</title><rect x="402.7" y="1747.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.90%)</title><rect x="405.6" y="1747.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="408.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.90%)</title><rect x="405.6" y="1731.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.90%)</title><rect x="405.6" y="1715.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.90%)</title><rect x="405.6" y="1699.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.90%)</title><rect x="405.6" y="1683.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.65%)</title><rect x="408.5" y="1667.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.5" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor12.newInstance (4 samples, 0.33%)</title><rect x="412.3" y="1651.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.3" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.16%)</title><rect x="416.2" y="1747.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="419.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="416.2" y="1731.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="416.2" y="1715.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.41%)</title><rect x="418.1" y="1747.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="421.9" y="1731.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.9" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="421.9" y="1715.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="424.9" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="421.9" y="1699.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="424.9" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.16%)</title><rect x="422.9" y="1779.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="425.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.16%)</title><rect x="422.9" y="1763.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="425.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/887799569.accept (2 samples, 0.16%)</title><rect x="422.9" y="1747.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.9" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (2 samples, 0.16%)</title><rect x="422.9" y="1731.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.9" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/650273782.complete (2 samples, 0.16%)</title><rect x="422.9" y="1715.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.9" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.16%)</title><rect x="422.9" y="1699.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.9" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.16%)</title><rect x="422.9" y="1683.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.9" y="1694.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.16%)</title><rect x="422.9" y="1667.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.9" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.16%)</title><rect x="422.9" y="1651.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.9" y="1662.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="422.9" y="1635.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="425.9" y="1646.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="422.9" y="1619.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.9" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.16%)</title><rect x="422.9" y="1603.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.9" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="422.9" y="1587.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="425.9" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="422.9" y="1571.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.9" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="422.9" y="1555.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.9" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="422.9" y="1539.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.9" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.73%)</title><rect x="424.8" y="1827.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.8" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.73%)</title><rect x="424.8" y="1811.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.73%)</title><rect x="424.8" y="1795.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="425.8" y="1779.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (4 samples, 0.33%)</title><rect x="426.8" y="1779.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.08%)</title><rect x="430.6" y="1779.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.16%)</title><rect x="431.6" y="1779.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="431.6" y="1763.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (250 samples, 20.39%)</title><rect x="433.5" y="1923.0" width="240.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.5" y="1934.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (45 samples, 3.67%)</title><rect x="434.5" y="1907.0" width="43.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.5" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (45 samples, 3.67%)</title><rect x="434.5" y="1891.0" width="43.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="437.5" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 3.51%)</title><rect x="436.4" y="1875.0" width="41.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.4" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.33%)</title><rect x="438.3" y="1859.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.33%)</title><rect x="438.3" y="1843.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.33%)</title><rect x="438.3" y="1827.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.33%)</title><rect x="438.3" y="1811.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.33%)</title><rect x="438.3" y="1795.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="440.2" y="1779.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 3.02%)</title><rect x="442.2" y="1859.0" width="35.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.2" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (29 samples, 2.37%)</title><rect x="449.9" y="1843.0" width="27.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.9" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.90%)</title><rect x="467.2" y="1827.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.73%)</title><rect x="477.8" y="1907.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.65%)</title><rect x="478.7" y="1891.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.7" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="478.7" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.57%)</title><rect x="479.7" y="1875.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (145 samples, 11.83%)</title><rect x="486.4" y="1907.0" width="139.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.4" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (145 samples, 11.83%)</title><rect x="486.4" y="1891.0" width="139.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.4" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="496.1" y="1875.0" width="4.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="499.1" y="1886.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="496.1" y="1859.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="499.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (40 samples, 3.26%)</title><rect x="500.9" y="1875.0" width="38.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.9" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.18%)</title><rect x="501.8" y="1859.0" width="37.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.8" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (31 samples, 2.53%)</title><rect x="506.6" y="1843.0" width="29.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="509.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.55%)</title><rect x="512.4" y="1827.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.55%)</title><rect x="512.4" y="1811.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.55%)</title><rect x="512.4" y="1795.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.57%)</title><rect x="521.1" y="1779.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="524.1" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="521.1" y="1763.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="524.1" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="522.0" y="1763.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="525.0" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="522.0" y="1747.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="525.0" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="522.0" y="1731.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="525.0" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="523.0" y="1747.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="526.0" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="523.0" y="1731.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="526.0" y="1742.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="523.0" y="1715.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="526.0" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="524.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="527.0" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="524.9" y="1763.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="527.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="524.9" y="1747.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="527.9" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="524.9" y="1731.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="527.9" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="524.9" y="1715.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="527.9" y="1726.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="524.9" y="1699.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="527.9" y="1710.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.08%)</title><rect x="524.9" y="1683.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="527.9" y="1694.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="525.9" y="1731.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="528.9" y="1742.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="526.9" y="1763.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="529.9" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="527.8" y="1779.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="530.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.24%)</title><rect x="530.7" y="1827.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.7" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="533.6" y="1827.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="536.6" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="535.5" y="1827.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="538.5" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="536.5" y="1843.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="539.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.57%)</title><rect x="539.4" y="1875.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="539.4" y="1859.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="539.4" y="1843.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="539.4" y="1827.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.49%)</title><rect x="540.3" y="1859.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.49%)</title><rect x="540.3" y="1843.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.3" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="545.1" y="1827.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="548.1" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="545.1" y="1811.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.1" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="545.1" y="1795.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="548.1" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="545.1" y="1779.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.1" y="1790.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="545.1" y="1763.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="548.1" y="1774.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.69%)</title><rect x="546.1" y="1875.0" width="78.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.1" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.53%)</title><rect x="548.0" y="1859.0" width="77.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.0" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.57%)</title><rect x="548.0" y="1843.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="551.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.57%)</title><rect x="548.0" y="1827.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.57%)</title><rect x="548.0" y="1811.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.57%)</title><rect x="548.0" y="1795.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.24%)</title><rect x="551.9" y="1779.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.9" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.24%)</title><rect x="551.9" y="1763.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.9" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (73 samples, 5.95%)</title><rect x="554.8" y="1843.0" width="70.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="557.8" y="1854.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (70 samples, 5.71%)</title><rect x="557.7" y="1827.0" width="67.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.7" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (41 samples, 3.34%)</title><rect x="585.6" y="1811.0" width="39.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.6" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (7 samples, 0.57%)</title><rect x="603.8" y="1795.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.98%)</title><rect x="610.6" y="1795.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.6" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="621.2" y="1779.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="624.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="621.2" y="1763.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="624.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="621.2" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="624.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="621.2" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="624.2" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="621.2" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.2" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="621.2" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.2" y="1710.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.24%)</title><rect x="622.1" y="1795.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="625.1" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="625.0" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="628.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (35 samples, 2.85%)</title><rect x="626.0" y="1907.0" width="33.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="629.0" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (34 samples, 2.77%)</title><rect x="626.0" y="1891.0" width="32.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="629.0" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/580786606.process (18 samples, 1.47%)</title><rect x="626.9" y="1875.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (17 samples, 1.39%)</title><rect x="627.9" y="1859.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.06%)</title><rect x="630.8" y="1843.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="633.8" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="635.6" y="1827.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.6" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="635.6" y="1811.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="635.6" y="1795.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.6" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="635.6" y="1779.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="635.6" y="1763.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.57%)</title><rect x="636.6" y="1827.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.6" y="1838.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="636.6" y="1811.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="639.6" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.49%)</title><rect x="637.5" y="1811.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="640.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="637.5" y="1795.0" width="5.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="640.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="643.3" y="1843.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="646.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="643.3" y="1827.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.08%)</title><rect x="643.3" y="1811.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.08%)</title><rect x="643.3" y="1795.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="644.3" y="1875.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.33%)</title><rect x="644.3" y="1859.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.3" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.16%)</title><rect x="648.1" y="1875.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.08%)</title><rect x="649.1" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.1" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="649.1" y="1843.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="652.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.24%)</title><rect x="650.0" y="1875.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.24%)</title><rect x="650.0" y="1859.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.49%)</title><rect x="652.9" y="1875.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="656.8" y="1859.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.8" y="1870.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="658.7" y="1891.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="659.7" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.7" y="1918.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="659.7" y="1891.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="662.7" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="659.7" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="662.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/4502125.linkToTargetMethod (1 samples, 0.08%)</title><rect x="660.6" y="1907.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.6" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="660.6" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/43989775.get$Lambda (1 samples, 0.08%)</title><rect x="660.6" y="1875.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.6" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="660.6" y="1859.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="663.6" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="660.6" y="1843.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="663.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="660.6" y="1827.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="660.6" y="1811.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="663.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.06%)</title><rect x="661.6" y="1907.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.6" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="665.4" y="1891.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="668.4" y="1902.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="666.4" y="1875.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="669.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.41%)</title><rect x="669.3" y="1891.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="672.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.33%)</title><rect x="670.3" y="1875.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/43989775.accept (4 samples, 0.33%)</title><rect x="670.3" y="1859.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="673.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (4 samples, 0.33%)</title><rect x="670.3" y="1843.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.3" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.33%)</title><rect x="670.3" y="1827.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.3" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.33%)</title><rect x="670.3" y="1811.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="673.3" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="672.2" y="1795.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="675.2" y="1806.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="672.2" y="1779.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="675.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.14%)</title><rect x="674.1" y="1923.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.06%)</title><rect x="675.1" y="1907.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.82%)</title><rect x="676.0" y="1891.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="679.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/887799569.accept (10 samples, 0.82%)</title><rect x="676.0" y="1875.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (10 samples, 0.82%)</title><rect x="676.0" y="1859.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/650273782.complete (10 samples, 0.82%)</title><rect x="676.0" y="1843.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (10 samples, 0.82%)</title><rect x="676.0" y="1827.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.82%)</title><rect x="676.0" y="1811.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="679.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.82%)</title><rect x="676.0" y="1795.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.82%)</title><rect x="676.0" y="1779.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.0" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 0.82%)</title><rect x="676.0" y="1763.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="679.0" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 0.82%)</title><rect x="676.0" y="1747.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="679.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="685.7" y="1891.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.7" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 1.06%)</title><rect x="687.6" y="1923.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.98%)</title><rect x="688.5" y="1907.0" width="11.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="691.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="700.1" y="1939.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="703.1" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="700.1" y="1923.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.1" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="700.1" y="1907.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="703.1" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="700.1" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.1" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="700.1" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.1" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="700.1" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="703.1" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="700.1" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.1" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="700.1" y="1827.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="703.1" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="700.1" y="1811.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.1" y="1822.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="700.1" y="1795.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="703.1" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="700.1" y="1779.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.1" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.49%)</title><rect x="701.1" y="1939.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="704.1" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="703.0" y="1923.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="706.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="703.0" y="1907.0" width="3.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="706.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.57%)</title><rect x="706.8" y="1987.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.57%)</title><rect x="706.8" y="1971.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.57%)</title><rect x="706.8" y="1955.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.57%)</title><rect x="706.8" y="1939.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.08%)</title><rect x="712.6" y="1923.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="715.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (199 samples, 16.23%)</title><rect x="713.6" y="1987.0" width="191.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.6" y="1998.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (197 samples, 16.07%)</title><rect x="714.5" y="1971.0" width="189.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.5" y="1982.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (2 samples, 0.16%)</title><rect x="718.4" y="1955.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (176 samples, 14.36%)</title><rect x="720.3" y="1955.0" width="169.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="723.3" y="1966.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 1.63%)</title><rect x="728.0" y="1939.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.16%)</title><rect x="747.3" y="1939.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.08%)</title><rect x="747.3" y="1923.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="750.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="748.2" y="1923.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.41%)</title><rect x="749.2" y="1939.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="752.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.33%)</title><rect x="750.1" y="1923.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (141 samples, 11.50%)</title><rect x="754.0" y="1939.0" width="135.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.0" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (141 samples, 11.50%)</title><rect x="754.0" y="1923.0" width="135.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="757.0" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>Unsafe_Park (132 samples, 10.77%)</title><rect x="758.8" y="1907.0" width="127.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="761.8" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="763.6" y="1891.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="766.6" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="765.5" y="1891.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="768.5" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.47%)</title><rect x="766.5" y="1891.0" width="17.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="769.5" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.49%)</title><rect x="772.3" y="1875.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="773.2" y="1859.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="774.2" y="1843.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="777.2" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="776.1" y="1859.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.1" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.41%)</title><rect x="778.1" y="1875.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="781.1" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="782.9" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.9" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="783.8" y="1891.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="786.8" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="784.8" y="1891.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="787.8" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.49%)</title><rect x="785.8" y="1891.0" width="5.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="788.8" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (22 samples, 1.79%)</title><rect x="791.5" y="1891.0" width="21.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="794.5" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 4.73%)</title><rect x="812.7" y="1891.0" width="55.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="815.7" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.33%)</title><rect x="868.5" y="1891.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="871.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.24%)</title><rect x="872.4" y="1891.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="875.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="875.3" y="1891.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="878.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="876.2" y="1891.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="879.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="879.1" y="1891.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="882.1" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.16%)</title><rect x="880.1" y="1891.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="883.1" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="882.0" y="1891.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="885.0" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="884.9" y="1891.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="887.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="885.9" y="1907.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="888.9" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="888.7" y="1907.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 1.14%)</title><rect x="889.7" y="1955.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 1.14%)</title><rect x="889.7" y="1939.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="892.7" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (12 samples, 0.98%)</title><rect x="889.7" y="1923.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.7" y="1934.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="900.3" y="1907.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.16%)</title><rect x="901.3" y="1923.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.16%)</title><rect x="901.3" y="1907.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="904.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="902.2" y="1891.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="905.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="903.2" y="1955.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="903.2" y="1939.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="903.2" y="1923.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="904.1" y="1971.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="905.1" y="2035.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="905.1" y="2019.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="908.1" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="905.1" y="2003.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.1" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="905.1" y="1987.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="905.1" y="1971.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="905.1" y="1955.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="908.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="905.1" y="1939.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="908.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="905.1" y="1923.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="905.1" y="1907.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="908.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="905.1" y="1891.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="908.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.08%)</title><rect x="905.1" y="1875.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="908.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.08%)</title><rect x="905.1" y="1859.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="908.1" y="1870.0"></text>
</g>
<g>
<title>start_thread (294 samples, 23.98%)</title><rect x="906.1" y="2035.0" width="282.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="909.1" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (294 samples, 23.98%)</title><rect x="906.1" y="2019.0" width="282.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="909.1" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.47%)</title><rect x="906.1" y="2003.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.1" y="2014.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="906.1" y="1987.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="909.1" y="1998.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="906.1" y="1971.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="909.1" y="1982.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.33%)</title><rect x="907.0" y="1987.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.33%)</title><rect x="907.0" y="1971.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="910.0" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.24%)</title><rect x="907.0" y="1955.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="909.9" y="1955.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="912.9" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.06%)</title><rect x="910.9" y="1987.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="913.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.65%)</title><rect x="910.9" y="1971.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.9" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="910.9" y="1955.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.9" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="911.8" y="1955.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="914.8" y="1966.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.41%)</title><rect x="913.8" y="1955.0" width="4.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="916.8" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="918.6" y="1971.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.6" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="918.6" y="1955.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.6" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="918.6" y="1939.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.6" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="918.6" y="1923.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.6" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="918.6" y="1907.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.6" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="919.5" y="1939.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.5" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="920.5" y="1955.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="923.5" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.24%)</title><rect x="920.5" y="1939.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.5" y="1950.0"></text>
</g>
<g>
<title>JavaThread::run() (274 samples, 22.35%)</title><rect x="923.4" y="2003.0" width="263.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.4" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (274 samples, 22.35%)</title><rect x="923.4" y="1987.0" width="263.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.4" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (274 samples, 22.35%)</title><rect x="923.4" y="1971.0" width="263.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.4" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (274 samples, 22.35%)</title><rect x="923.4" y="1955.0" width="263.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.4" y="1966.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (274 samples, 22.35%)</title><rect x="923.4" y="1939.0" width="263.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.4" y="1950.0">C2Compiler::compile_method(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (274 samples, 22.35%)</title><rect x="923.4" y="1923.0" width="263.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.4" y="1934.0">Compile::Compile(ciEnv*, C2Compiler..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="923.4" y="1907.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.4" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="923.4" y="1891.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.4" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="923.4" y="1875.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.4" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="923.4" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.4" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="923.4" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.4" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="923.4" y="1827.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.4" y="1838.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (69 samples, 5.63%)</title><rect x="924.4" y="1907.0" width="66.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="927.4" y="1918.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="924.4" y="1891.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.4" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="924.4" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.4" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="925.3" y="1875.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.3" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="925.3" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.3" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="925.3" y="1843.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.3" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.08%)</title><rect x="925.3" y="1827.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.3" y="1838.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.08%)</title><rect x="925.3" y="1811.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.3" y="1822.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.24%)</title><rect x="926.3" y="1891.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.16%)</title><rect x="926.3" y="1875.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.3" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="926.3" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="927.2" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="930.2" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="927.2" y="1843.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.2" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="928.2" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.2" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="928.2" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.57%)</title><rect x="929.2" y="1891.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.2" y="1902.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.08%)</title><rect x="929.2" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.2" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.49%)</title><rect x="930.1" y="1875.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.1" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.24%)</title><rect x="931.1" y="1859.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="934.0" y="1859.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="934.0" y="1843.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.0" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="934.0" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="937.0" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="934.0" y="1811.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="937.0" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="934.9" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="937.9" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="934.9" y="1827.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="937.9" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="934.9" y="1811.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.9" y="1822.0"></text>
</g>
<g>
<title>partialSubtypeCheck_vs_ZeroNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="934.9" y="1795.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.9" y="1806.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="935.9" y="1891.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="938.9" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.08%)</title><rect x="935.9" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.9" y="1886.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="935.9" y="1859.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.9" y="1870.0"></text>
</g>
<g>
<title>Block::map_node(Node*, unsigned int) (1 samples, 0.08%)</title><rect x="935.9" y="1843.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.9" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="936.9" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.9" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="936.9" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.24%)</title><rect x="937.8" y="1891.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.8" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.08%)</title><rect x="937.8" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.8" y="1886.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.08%)</title><rect x="937.8" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="940.8" y="1870.0"></text>
</g>
<g>
<title>jmpConNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="937.8" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.8" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="938.8" y="1875.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="938.8" y="1859.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.8" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="938.8" y="1843.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.8" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="939.8" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 4.24%)</title><rect x="940.7" y="1891.0" width="50.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.7" y="1902.0">Phase..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="941.7" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.7" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="942.6" y="1875.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.33%)</title><rect x="943.6" y="1875.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.24%)</title><rect x="944.6" y="1859.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="947.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.33%)</title><rect x="947.5" y="1875.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="950.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="947.5" y="1859.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="950.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="949.4" y="1859.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.73%)</title><rect x="951.3" y="1875.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.3" y="1886.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="956.1" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="959.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="957.1" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="957.1" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.1" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="957.1" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.1" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.16%)</title><rect x="958.0" y="1859.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="958.0" y="1843.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.0" y="1854.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="958.0" y="1827.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.0" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="958.0" y="1811.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="961.0" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="958.0" y="1795.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.0" y="1806.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="959.0" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.0" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="959.0" y="1827.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.0" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.90%)</title><rect x="960.0" y="1875.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="967.7" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.7" y="1870.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="968.6" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="969.6" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="970.6" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="970.6" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.41%)</title><rect x="971.5" y="1875.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.5" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="975.4" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.33%)</title><rect x="976.3" y="1875.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="979.2" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="980.2" y="1875.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.2" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="980.2" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="983.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.08%)</title><rect x="980.2" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.2" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="981.1" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="981.1" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.1" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="981.1" y="1827.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="982.1" y="1875.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="982.1" y="1859.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="983.1" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.57%)</title><rect x="984.0" y="1875.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.0" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.24%)</title><rect x="986.9" y="1859.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="988.8" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.8" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="989.8" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.8" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (197 samples, 16.07%)</title><rect x="990.8" y="1907.0" width="189.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.8" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.16%)</title><rect x="990.8" y="1891.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.16%)</title><rect x="990.8" y="1875.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.16%)</title><rect x="990.8" y="1859.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1843.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1827.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1811.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1795.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1779.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1747.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1731.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1715.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="991.7" y="1699.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.7" y="1710.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="992.7" y="1891.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (177 samples, 14.44%)</title><rect x="993.7" y="1891.0" width="170.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.7" y="1902.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1875.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.7" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1859.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="996.7" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.7" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.7" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.7" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1795.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.7" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.7" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1763.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.7" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.7" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.7" y="1731.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.7" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.08%)</title><rect x="993.7" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.7" y="1726.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="994.6" y="1875.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.16%)</title><rect x="995.6" y="1875.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.6" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="996.5" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.49%)</title><rect x="997.5" y="1875.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1002.3" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1005.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (157 samples, 12.81%)</title><rect x="1003.3" y="1875.0" width="151.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.3" y="1886.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (152 samples, 12.40%)</title><rect x="1008.1" y="1859.0" width="146.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.1" y="1870.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.73%)</title><rect x="1011.9" y="1843.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1014.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (139 samples, 11.34%)</title><rect x="1020.6" y="1843.0" width="133.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.6" y="1854.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1125.5" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (26 samples, 2.12%)</title><rect x="1126.5" y="1827.0" width="25.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.5" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.24%)</title><rect x="1151.5" y="1827.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1153.4" y="1811.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1154.4" y="1875.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="1886.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1155.4" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1157.3" y="1875.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1157.3" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.08%)</title><rect x="1157.3" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1157.3" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1157.3" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1158.2" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1158.2" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.33%)</title><rect x="1159.2" y="1875.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.33%)</title><rect x="1159.2" y="1859.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.2" y="1870.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1159.2" y="1843.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.2" y="1854.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.08%)</title><rect x="1159.2" y="1827.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.2" y="1838.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.2" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.2" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.2" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1161.1" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1161.1" y="1827.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.1" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1161.1" y="1811.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="1822.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1161.1" y="1795.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.1" y="1806.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.1" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1162.1" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="1838.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1163.1" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (15 samples, 1.22%)</title><rect x="1164.0" y="1891.0" width="14.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (15 samples, 1.22%)</title><rect x="1164.0" y="1875.0" width="14.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.0" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.0" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.0" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.0" y="1843.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1165.9" y="1859.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1165.9" y="1843.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.9" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.9" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1165.9" y="1811.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="1822.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.9" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="1854.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1827.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1166.9" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="1822.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1795.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1779.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="1790.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1166.9" y="1763.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="1774.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1166.9" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="1758.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.33%)</title><rect x="1168.8" y="1859.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1170.8" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="1843.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="1827.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1172.7" y="1859.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="1870.0"></text>
</g>
<g>
<title>Node::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1173.6" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1174.6" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1175.6" y="1859.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.6" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1175.6" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1175.6" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.6" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1176.5" y="1843.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="1827.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="1795.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="1806.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.5" y="1779.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1790.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="1763.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1178.5" y="1891.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1178.5" y="1875.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1178.5" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1178.5" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1178.5" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1179.4" y="1891.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1179.4" y="1875.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="1843.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="1854.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.57%)</title><rect x="1180.4" y="1907.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.57%)</title><rect x="1180.4" y="1891.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.57%)</title><rect x="1180.4" y="1875.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.57%)</title><rect x="1180.4" y="1859.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.57%)</title><rect x="1180.4" y="1843.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1180.4" y="1827.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="1838.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="1822.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1806.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1790.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1763.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1774.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="1747.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="1758.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="1731.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="1742.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="1726.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="1699.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1180.4" y="1683.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="1694.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1667.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1181.3" y="1811.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1181.3" y="1795.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1181.3" y="1779.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1181.3" y="1763.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1181.3" y="1747.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1181.3" y="1731.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1181.3" y="1715.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1181.3" y="1699.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1181.3" y="1683.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1181.3" y="1667.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1181.3" y="1651.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1181.3" y="1635.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1181.3" y="1619.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1181.3" y="1603.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1181.3" y="1587.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1181.3" y="1571.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1181.3" y="1555.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1181.3" y="1539.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1181.3" y="1523.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1181.3" y="1507.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1181.3" y="1491.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1181.3" y="1475.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1181.3" y="1459.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1181.3" y="1443.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1181.3" y="1427.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1181.3" y="1411.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1181.3" y="1395.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1181.3" y="1379.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1181.3" y="1363.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.3" y="1347.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.3" y="1331.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.3" y="1315.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.3" y="1299.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.3" y="1283.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.3" y="1267.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.3" y="1251.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="1219.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="1166.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="1150.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.08%)</title><rect x="1181.3" y="1123.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1181.3" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1118.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.3" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="1235.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="1203.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="1187.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="1107.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1182.3" y="1059.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="1070.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.3" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="1054.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.3" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1182.3" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="979.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="1347.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="1331.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="1342.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1183.3" y="1315.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1183.3" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="1310.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="1294.0"></text>
</g>
<g>
<title>IdealKit::Bool(Node*, BoolTest::mask) (1 samples, 0.08%)</title><rect x="1183.3" y="1267.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.2" y="1523.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.2" y="1507.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1184.2" y="1491.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1184.2" y="1475.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1184.2" y="1459.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1184.2" y="1443.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1184.2" y="1427.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.2" y="1411.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1184.2" y="1395.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1184.2" y="1379.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1184.2" y="1363.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1184.2" y="1347.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1184.2" y="1331.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.2" y="1315.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1184.2" y="1299.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1184.2" y="1283.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1184.2" y="1267.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1184.2" y="1251.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="1235.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="1203.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1187.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1171.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1184.2" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="1102.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1075.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="1086.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1184.2" y="1059.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="1070.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1184.2" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="1054.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1184.2" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1185.2" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="1246.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1185.2" y="1219.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="1230.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1185.2" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="1214.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="1198.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1185.2" y="1171.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="1539.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="1523.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1186.2" y="1507.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="1518.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1187.1" y="2003.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1187.1" y="1987.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.1" y="1971.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1188.1" y="1971.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1188.1" y="1955.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1188.1" y="1939.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1188.1" y="1923.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.1" y="1907.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1188.1" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="1902.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.08%)</title><rect x="1188.1" y="1875.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="1886.0"></text>
</g>
<g>
<title>G1ParClosureSuper::G1ParClosureSuper(G1CollectedHeap*) (1 samples, 0.08%)</title><rect x="1188.1" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="1870.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.08%)</title><rect x="1189.0" y="2035.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1192.0" y="2046.0"></text>
</g>
</g>
</svg>
