<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (288 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.35%)</title><rect x="10.0" y="1187.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.35%)</title><rect x="10.0" y="1171.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.35%)</title><rect x="10.0" y="1155.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>Events::log(Thread*, char const*, ...) (1 samples, 0.35%)</title><rect x="10.0" y="1139.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="10.0" y="1123.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="10.0" y="1107.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="14.1" y="1187.0" width="4.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="17.1" y="1198.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.35%)</title><rect x="14.1" y="1171.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.64%)</title><rect x="18.2" y="1187.0" width="90.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.2" y="1198.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.69%)</title><rect x="18.2" y="1171.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.69%)</title><rect x="18.2" y="1155.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.69%)</title><rect x="18.2" y="1139.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.69%)</title><rect x="18.2" y="1123.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.69%)</title><rect x="18.2" y="1107.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.69%)</title><rect x="18.2" y="1091.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.69%)</title><rect x="18.2" y="1075.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.69%)</title><rect x="18.2" y="1059.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.35%)</title><rect x="18.2" y="1043.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.35%)</title><rect x="18.2" y="1027.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="18.2" y="1011.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.35%)</title><rect x="18.2" y="995.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="1006.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 0.35%)</title><rect x="18.2" y="979.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="990.0"></text>
</g>
<g>
<title>java/util/EnumMap.isValidKey (1 samples, 0.35%)</title><rect x="18.2" y="963.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.shouldBlock (1 samples, 0.35%)</title><rect x="22.3" y="1043.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 6.60%)</title><rect x="26.4" y="1171.0" width="77.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.4" y="1182.0">com/linec..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.08%)</title><rect x="26.4" y="1155.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.4" y="1166.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/913387780.accept (6 samples, 2.08%)</title><rect x="26.4" y="1139.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.4" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (6 samples, 2.08%)</title><rect x="26.4" y="1123.0" width="24.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.4" y="1134.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.04%)</title><rect x="26.4" y="1107.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.04%)</title><rect x="26.4" y="1091.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.04%)</title><rect x="26.4" y="1075.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.04%)</title><rect x="26.4" y="1059.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.04%)</title><rect x="26.4" y="1043.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.35%)</title><rect x="34.6" y="1027.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.35%)</title><rect x="34.6" y="1011.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="34.6" y="995.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.35%)</title><rect x="34.6" y="979.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.35%)</title><rect x="34.6" y="963.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.04%)</title><rect x="38.7" y="1107.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.04%)</title><rect x="38.7" y="1091.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.69%)</title><rect x="42.8" y="1075.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.35%)</title><rect x="42.8" y="1059.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.35%)</title><rect x="42.8" y="1043.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.35%)</title><rect x="42.8" y="1027.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="42.8" y="1011.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="45.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="46.9" y="1059.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.51%)</title><rect x="51.0" y="1155.0" width="53.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.0" y="1166.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.51%)</title><rect x="51.0" y="1139.0" width="53.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.0" y="1150.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.12%)</title><rect x="55.1" y="1123.0" width="36.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.1" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.35%)</title><rect x="55.1" y="1107.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.1" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.35%)</title><rect x="55.1" y="1091.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.1" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.35%)</title><rect x="55.1" y="1075.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="58.1" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.35%)</title><rect x="55.1" y="1059.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="58.1" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.35%)</title><rect x="55.1" y="1043.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="58.1" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.35%)</title><rect x="55.1" y="1027.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="58.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 2.78%)</title><rect x="59.2" y="1107.0" width="32.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.2" y="1118.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.69%)</title><rect x="59.2" y="1091.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.69%)</title><rect x="59.2" y="1075.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.35%)</title><rect x="63.3" y="1059.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.35%)</title><rect x="67.4" y="1091.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.4" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.iterator (1 samples, 0.35%)</title><rect x="67.4" y="1075.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.35%)</title><rect x="71.5" y="1091.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.39%)</title><rect x="75.6" y="1091.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.39%)</title><rect x="75.6" y="1075.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.39%)</title><rect x="75.6" y="1059.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.69%)</title><rect x="79.7" y="1043.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="83.8" y="1027.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="83.8" y="1011.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="83.8" y="995.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="83.8" y="979.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="83.8" y="963.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="83.8" y="947.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="83.8" y="931.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.35%)</title><rect x="87.8" y="1043.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.69%)</title><rect x="91.9" y="1123.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="91.9" y="1107.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.69%)</title><rect x="91.9" y="1091.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="91.9" y="1075.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="91.9" y="1059.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.35%)</title><rect x="91.9" y="1043.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.35%)</title><rect x="91.9" y="1027.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.35%)</title><rect x="91.9" y="1011.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.35%)</title><rect x="91.9" y="995.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.35%)</title><rect x="91.9" y="979.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="96.0" y="1075.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.35%)</title><rect x="96.0" y="1059.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.35%)</title><rect x="96.0" y="1043.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="96.0" y="1027.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.0" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="96.0" y="1011.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="99.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.35%)</title><rect x="100.1" y="1123.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.35%)</title><rect x="100.1" y="1107.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.35%)</title><rect x="100.1" y="1091.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.1" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.35%)</title><rect x="100.1" y="1075.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.35%)</title><rect x="100.1" y="1059.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.35%)</title><rect x="104.2" y="1171.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.2" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="104.2" y="1155.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="107.2" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="104.2" y="1139.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="107.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (141 samples, 48.96%)</title><rect x="108.3" y="1187.0" width="577.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.3" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (141 samples, 48.96%)</title><rect x="108.3" y="1171.0" width="577.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.3" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (141 samples, 48.96%)</title><rect x="108.3" y="1155.0" width="577.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.3" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2057761063.run (130 samples, 45.14%)</title><rect x="108.3" y="1139.0" width="532.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/205776106..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (130 samples, 45.14%)</title><rect x="108.3" y="1123.0" width="532.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.3" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (130 samples, 45.14%)</title><rect x="108.3" y="1107.0" width="532.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.3" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (128 samples, 44.44%)</title><rect x="108.3" y="1091.0" width="524.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.3" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (37 samples, 12.85%)</title><rect x="116.5" y="1075.0" width="151.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.5" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (37 samples, 12.85%)</title><rect x="116.5" y="1059.0" width="151.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.5" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (37 samples, 12.85%)</title><rect x="116.5" y="1043.0" width="151.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.5" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 12.85%)</title><rect x="116.5" y="1027.0" width="151.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.5" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 12.85%)</title><rect x="116.5" y="1011.0" width="151.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.5" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 12.85%)</title><rect x="116.5" y="995.0" width="151.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.5" y="1006.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 4.86%)</title><rect x="116.5" y="979.0" width="57.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.5" y="990.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.04%)</title><rect x="132.9" y="963.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.04%)</title><rect x="132.9" y="947.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.04%)</title><rect x="132.9" y="931.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.04%)</title><rect x="132.9" y="915.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.04%)</title><rect x="132.9" y="899.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.04%)</title><rect x="132.9" y="883.0" width="12.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.08%)</title><rect x="145.2" y="963.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.2" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.35%)</title><rect x="165.7" y="947.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.35%)</title><rect x="165.7" y="931.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="165.7" y="915.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="168.7" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="165.7" y="899.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="168.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="165.7" y="883.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="168.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="165.7" y="867.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="168.7" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="165.7" y="851.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="168.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.35%)</title><rect x="169.8" y="963.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="172.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 7.29%)</title><rect x="173.9" y="979.0" width="86.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.9" y="990.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.35%)</title><rect x="173.9" y="963.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.35%)</title><rect x="178.0" y="963.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.35%)</title><rect x="178.0" y="947.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.04%)</title><rect x="182.1" y="963.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.04%)</title><rect x="182.1" y="947.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.04%)</title><rect x="182.1" y="931.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 1.04%)</title><rect x="182.1" y="915.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="186.2" y="899.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="189.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="186.2" y="883.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="189.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="186.2" y="867.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="189.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="186.2" y="851.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="189.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="186.2" y="835.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="189.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="190.3" y="899.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.69%)</title><rect x="194.4" y="963.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.69%)</title><rect x="194.4" y="947.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 4.86%)</title><rect x="202.6" y="963.0" width="57.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.6" y="974.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.39%)</title><rect x="206.7" y="947.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.69%)</title><rect x="206.7" y="931.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.69%)</title><rect x="206.7" y="915.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.69%)</title><rect x="206.7" y="899.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.69%)</title><rect x="214.9" y="931.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.35%)</title><rect x="223.1" y="947.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.78%)</title><rect x="227.2" y="947.0" width="32.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.2" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.78%)</title><rect x="227.2" y="931.0" width="32.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.2" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.78%)</title><rect x="227.2" y="915.0" width="32.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.2" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="231.3" y="899.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.04%)</title><rect x="235.3" y="899.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.69%)</title><rect x="239.4" y="883.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.69%)</title><rect x="239.4" y="867.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.69%)</title><rect x="239.4" y="851.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.69%)</title><rect x="239.4" y="835.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.69%)</title><rect x="247.6" y="899.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.69%)</title><rect x="247.6" y="883.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.69%)</title><rect x="247.6" y="867.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="251.7" y="851.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.35%)</title><rect x="255.8" y="899.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.35%)</title><rect x="255.8" y="883.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.69%)</title><rect x="259.9" y="979.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.69%)</title><rect x="259.9" y="963.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.69%)</title><rect x="259.9" y="947.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.69%)</title><rect x="259.9" y="931.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.69%)</title><rect x="259.9" y="915.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (83 samples, 28.82%)</title><rect x="268.1" y="1075.0" width="340.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.1" y="1086.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 4.86%)</title><rect x="268.1" y="1059.0" width="57.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.1" y="1070.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 4.86%)</title><rect x="268.1" y="1043.0" width="57.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.1" y="1054.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 4.86%)</title><rect x="268.1" y="1027.0" width="57.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.1" y="1038.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.35%)</title><rect x="296.8" y="1011.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.35%)</title><rect x="296.8" y="995.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.35%)</title><rect x="296.8" y="979.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.35%)</title><rect x="296.8" y="963.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="299.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.08%)</title><rect x="300.9" y="1011.0" width="24.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.9" y="1022.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.04%)</title><rect x="313.2" y="995.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.04%)</title><rect x="313.2" y="979.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 7.29%)</title><rect x="325.5" y="1059.0" width="86.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.5" y="1070.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 7.29%)</title><rect x="325.5" y="1043.0" width="86.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.5" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.78%)</title><rect x="333.7" y="1027.0" width="32.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.7" y="1038.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.78%)</title><rect x="333.7" y="1011.0" width="32.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.7" y="1022.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.74%)</title><rect x="337.8" y="995.0" width="20.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.39%)</title><rect x="337.8" y="979.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.8" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.39%)</title><rect x="337.8" y="963.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.8" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.39%)</title><rect x="337.8" y="947.0" width="16.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.35%)</title><rect x="341.9" y="931.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="344.9" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="346.0" y="931.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="349.0" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="346.0" y="915.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="349.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="346.0" y="899.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="349.0" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="346.0" y="883.0" width="4.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="349.0" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="350.1" y="931.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="353.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="354.2" y="979.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.2" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.69%)</title><rect x="358.3" y="995.0" width="8.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="361.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.69%)</title><rect x="366.5" y="1027.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.35%)</title><rect x="366.5" y="1011.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.35%)</title><rect x="366.5" y="995.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.35%)</title><rect x="370.6" y="1011.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="370.6" y="995.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.6" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 3.12%)</title><rect x="374.7" y="1027.0" width="36.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.7" y="1038.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.43%)</title><rect x="382.8" y="1011.0" width="28.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.8" y="1022.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.43%)</title><rect x="382.8" y="995.0" width="28.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.8" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.43%)</title><rect x="382.8" y="979.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.8" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.74%)</title><rect x="391.0" y="963.0" width="20.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.69%)</title><rect x="395.1" y="947.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.69%)</title><rect x="403.3" y="947.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.3" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="407.4" y="931.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="410.4" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="407.4" y="915.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="410.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 15.97%)</title><rect x="411.5" y="1059.0" width="188.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.5" y="1070.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (46 samples, 15.97%)</title><rect x="411.5" y="1043.0" width="188.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.5" y="1054.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/173717178.process (42 samples, 14.58%)</title><rect x="415.6" y="1027.0" width="172.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.6" y="1038.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (42 samples, 14.58%)</title><rect x="415.6" y="1011.0" width="172.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.6" y="1022.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (42 samples, 14.58%)</title><rect x="415.6" y="995.0" width="172.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.6" y="1006.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (40 samples, 13.89%)</title><rect x="415.6" y="979.0" width="163.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.6" y="990.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 13.89%)</title><rect x="415.6" y="963.0" width="163.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.6" y="974.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (31 samples, 10.76%)</title><rect x="444.3" y="947.0" width="127.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="447.3" y="958.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.69%)</title><rect x="468.9" y="931.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="471.9" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="477.1" y="931.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.1" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="481.2" y="931.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="484.2" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="481.2" y="915.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="484.2" y="926.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (21 samples, 7.29%)</title><rect x="485.3" y="931.0" width="86.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="488.3" y="942.0">os::sleep(..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="497.6" y="915.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="500.6" y="926.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.35%)</title><rect x="501.7" y="915.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="504.7" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.69%)</title><rect x="505.8" y="915.0" width="8.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="508.8" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.82%)</title><rect x="514.0" y="915.0" width="45.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="517.0" y="926.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.35%)</title><rect x="559.0" y="915.0" width="4.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="562.0" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.35%)</title><rect x="563.1" y="915.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="566.1" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="567.2" y="915.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="570.2" y="926.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.35%)</title><rect x="571.3" y="947.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="574.3" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.35%)</title><rect x="575.4" y="947.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="578.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.69%)</title><rect x="579.5" y="979.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.35%)</title><rect x="583.6" y="963.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.35%)</title><rect x="583.6" y="947.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.69%)</title><rect x="587.7" y="1027.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.69%)</title><rect x="587.7" y="1011.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1845496931.get$Lambda (2 samples, 0.69%)</title><rect x="587.7" y="995.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1845496931.&lt;init&gt; (2 samples, 0.69%)</title><rect x="587.7" y="979.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.7" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="591.8" y="963.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="594.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.35%)</title><rect x="595.9" y="1027.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="598.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/SubscriptionScope.subscriptionId (1 samples, 0.35%)</title><rect x="600.0" y="1059.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="603.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.35%)</title><rect x="604.1" y="1059.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.35%)</title><rect x="604.1" y="1043.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="607.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.35%)</title><rect x="604.1" y="1027.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/706897707.accept (1 samples, 0.35%)</title><rect x="604.1" y="1011.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.35%)</title><rect x="604.1" y="995.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="607.1" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.35%)</title><rect x="604.1" y="979.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.1" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.35%)</title><rect x="604.1" y="963.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.08%)</title><rect x="608.2" y="1075.0" width="24.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="611.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.74%)</title><rect x="612.3" y="1059.0" width="20.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.04%)</title><rect x="620.5" y="1043.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1153750044.accept (3 samples, 1.04%)</title><rect x="620.5" y="1027.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (3 samples, 1.04%)</title><rect x="620.5" y="1011.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/922356050.complete (3 samples, 1.04%)</title><rect x="620.5" y="995.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (3 samples, 1.04%)</title><rect x="620.5" y="979.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 1.04%)</title><rect x="620.5" y="963.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.5" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.04%)</title><rect x="620.5" y="947.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.5" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.04%)</title><rect x="620.5" y="931.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.5" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.04%)</title><rect x="620.5" y="915.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.5" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 1.04%)</title><rect x="620.5" y="899.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.69%)</title><rect x="632.8" y="1091.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.69%)</title><rect x="641.0" y="1139.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.69%)</title><rect x="641.0" y="1123.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.69%)</title><rect x="641.0" y="1107.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="644.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.69%)</title><rect x="641.0" y="1091.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 3.12%)</title><rect x="649.2" y="1139.0" width="36.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="652.2" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.43%)</title><rect x="657.4" y="1123.0" width="28.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.4" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.04%)</title><rect x="673.8" y="1107.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.04%)</title><rect x="673.8" y="1091.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.04%)</title><rect x="673.8" y="1075.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="676.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.04%)</title><rect x="673.8" y="1059.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.69%)</title><rect x="686.0" y="1187.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.35%)</title><rect x="686.0" y="1171.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.0" y="1182.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.35%)</title><rect x="686.0" y="1155.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="689.0" y="1166.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.35%)</title><rect x="686.0" y="1139.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="689.0" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="686.0" y="1123.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="689.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.35%)</title><rect x="690.1" y="1171.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.35%)</title><rect x="690.1" y="1155.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.35%)</title><rect x="690.1" y="1139.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="693.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.35%)</title><rect x="690.1" y="1123.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.35%)</title><rect x="690.1" y="1107.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.35%)</title><rect x="690.1" y="1091.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.35%)</title><rect x="690.1" y="1075.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.1" y="1086.0"></text>
</g>
<g>
<title>start_thread (121 samples, 42.01%)</title><rect x="694.2" y="1187.0" width="495.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="697.2" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (121 samples, 42.01%)</title><rect x="694.2" y="1171.0" width="495.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="697.2" y="1182.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.82%)</title><rect x="694.2" y="1155.0" width="45.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="697.2" y="1166.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.82%)</title><rect x="694.2" y="1139.0" width="45.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="697.2" y="1150.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 3.47%)</title><rect x="694.2" y="1123.0" width="41.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="697.2" y="1134.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 3.12%)</title><rect x="694.2" y="1107.0" width="36.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="697.2" y="1118.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.04%)</title><rect x="714.7" y="1091.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.7" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="722.9" y="1075.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="725.9" y="1086.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.35%)</title><rect x="722.9" y="1059.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.9" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="727.0" y="1091.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="730.0" y="1102.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.35%)</title><rect x="731.1" y="1107.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="734.1" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.35%)</title><rect x="735.2" y="1123.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="738.2" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.35%)</title><rect x="735.2" y="1107.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.2" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.35%)</title><rect x="735.2" y="1091.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="738.2" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (110 samples, 38.19%)</title><rect x="739.3" y="1155.0" width="450.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="742.3" y="1166.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (110 samples, 38.19%)</title><rect x="739.3" y="1139.0" width="450.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="742.3" y="1150.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (110 samples, 38.19%)</title><rect x="739.3" y="1123.0" width="450.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.3" y="1134.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (110 samples, 38.19%)</title><rect x="739.3" y="1107.0" width="450.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.3" y="1118.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (106 samples, 36.81%)</title><rect x="739.3" y="1091.0" width="434.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="742.3" y="1102.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (106 samples, 36.81%)</title><rect x="739.3" y="1075.0" width="434.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.3" y="1086.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (58 samples, 20.14%)</title><rect x="739.3" y="1059.0" width="237.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.3" y="1070.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.69%)</title><rect x="739.3" y="1043.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.3" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.35%)</title><rect x="739.3" y="1027.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="742.3" y="1038.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.35%)</title><rect x="743.4" y="1027.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.4" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.69%)</title><rect x="747.5" y="1043.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="750.5" y="1054.0"></text>
</g>
<g>
<title>Assembler::jmp(Label&amp;, bool) (1 samples, 0.35%)</title><rect x="747.5" y="1027.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="750.5" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.35%)</title><rect x="751.6" y="1027.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="754.6" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="751.6" y="1011.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.6" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.35%)</title><rect x="751.6" y="995.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="754.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.74%)</title><rect x="755.7" y="1043.0" width="20.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="758.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.74%)</title><rect x="755.7" y="1027.0" width="20.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="758.7" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.04%)</title><rect x="759.8" y="1011.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.8" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="772.1" y="1011.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="772.1" y="995.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="775.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="772.1" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="775.1" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.35%)</title><rect x="772.1" y="963.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="775.1" y="974.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.35%)</title><rect x="772.1" y="947.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="775.1" y="958.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.35%)</title><rect x="772.1" y="931.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="775.1" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.04%)</title><rect x="776.2" y="1043.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="779.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.35%)</title><rect x="776.2" y="1027.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.69%)</title><rect x="780.3" y="1027.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="783.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="780.3" y="1011.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.35%)</title><rect x="784.4" y="1011.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="787.4" y="1022.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.35%)</title><rect x="784.4" y="995.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="787.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 15.97%)</title><rect x="788.5" y="1043.0" width="188.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.5" y="1054.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.69%)</title><rect x="788.5" y="1027.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.35%)</title><rect x="788.5" y="1011.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.35%)</title><rect x="792.6" y="1011.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="795.6" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="792.6" y="995.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.04%)</title><rect x="796.7" y="1027.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.69%)</title><rect x="800.8" y="1011.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="803.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="804.9" y="995.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="807.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.08%)</title><rect x="809.0" y="1027.0" width="24.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.0" y="1038.0">P..</text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.35%)</title><rect x="825.3" y="1011.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="828.3" y="1022.0"></text>
</g>
<g>
<title>loadSNode::rule() const (1 samples, 0.35%)</title><rect x="829.4" y="1011.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="832.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.43%)</title><rect x="833.5" y="1027.0" width="28.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.5" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.39%)</title><rect x="845.8" y="1011.0" width="16.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.04%)</title><rect x="845.8" y="995.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.8" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="858.1" y="995.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="861.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 2.08%)</title><rect x="862.2" y="1027.0" width="24.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="865.2" y="1038.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.35%)</title><rect x="882.7" y="1011.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.35%)</title><rect x="886.8" y="1027.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.04%)</title><rect x="890.9" y="1027.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.04%)</title><rect x="890.9" y="1011.0" width="12.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="893.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.47%)</title><rect x="903.2" y="1027.0" width="41.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.2" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.35%)</title><rect x="903.2" y="1011.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.2" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.12%)</title><rect x="907.3" y="1011.0" width="36.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="910.3" y="1022.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.35%)</title><rect x="907.3" y="995.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.3" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.78%)</title><rect x="911.4" y="995.0" width="32.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="914.4" y="1006.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.39%)</title><rect x="911.4" y="979.0" width="16.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.4" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.39%)</title><rect x="927.8" y="979.0" width="16.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.8" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.69%)</title><rect x="944.2" y="1027.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.2" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.35%)</title><rect x="948.3" y="1011.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.69%)</title><rect x="952.4" y="1027.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.4" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="952.4" y="1011.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.4" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.39%)</title><rect x="960.6" y="1027.0" width="16.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.6" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.69%)</title><rect x="968.8" y="1011.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="968.8" y="995.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.8" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.35%)</title><rect x="972.8" y="995.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.8" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.35%)</title><rect x="972.8" y="979.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.8" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 14.24%)</title><rect x="976.9" y="1059.0" width="168.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.9" y="1070.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="976.9" y="1043.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="976.9" y="1027.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.35%)</title><rect x="976.9" y="1011.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="979.9" y="1022.0"></text>
</g>
<g>
<title>MulHiLNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="981.0" y="1043.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 11.81%)</title><rect x="985.1" y="1043.0" width="139.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.1" y="1054.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.35%)</title><rect x="985.1" y="1027.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.04%)</title><rect x="989.2" y="1027.0" width="12.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.69%)</title><rect x="993.3" y="1011.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (27 samples, 9.38%)</title><rect x="1001.5" y="1027.0" width="110.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.5" y="1038.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (25 samples, 8.68%)</title><rect x="1009.7" y="1011.0" width="102.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.7" y="1022.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.04%)</title><rect x="1009.7" y="995.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (22 samples, 7.64%)</title><rect x="1022.0" y="995.0" width="90.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.0" y="1006.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.04%)</title><rect x="1099.9" y="979.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.35%)</title><rect x="1112.2" y="1027.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1116.2" y="1027.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.35%)</title><rect x="1116.2" y="1011.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_use_block(Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.35%)</title><rect x="1116.2" y="995.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.2" y="1006.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.35%)</title><rect x="1120.3" y="1027.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.04%)</title><rect x="1124.4" y="1043.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.04%)</title><rect x="1124.4" y="1027.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.4" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1124.4" y="1011.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.4" y="1022.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1124.4" y="995.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.4" y="1006.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.35%)</title><rect x="1124.4" y="979.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.4" y="990.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.35%)</title><rect x="1124.4" y="963.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.4" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1124.4" y="947.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.4" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1124.4" y="931.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.35%)</title><rect x="1124.4" y="915.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.4" y="926.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.35%)</title><rect x="1128.5" y="1011.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1128.5" y="995.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.5" y="1006.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.35%)</title><rect x="1128.5" y="979.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.5" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1132.6" y="1011.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.35%)</title><rect x="1132.6" y="995.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="979.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="963.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="947.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="931.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="915.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="899.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="883.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="867.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="851.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.6" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.35%)</title><rect x="1132.6" y="835.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.6" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.35%)</title><rect x="1132.6" y="819.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.6" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.35%)</title><rect x="1136.7" y="1043.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.7" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.35%)</title><rect x="1136.7" y="1027.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.7" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1136.7" y="1011.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.7" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1136.7" y="995.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.7" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.35%)</title><rect x="1136.7" y="979.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.7" y="990.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.35%)</title><rect x="1136.7" y="963.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.7" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.35%)</title><rect x="1140.8" y="1043.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1140.8" y="1027.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.8" y="1038.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.35%)</title><rect x="1140.8" y="1011.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.74%)</title><rect x="1144.9" y="1059.0" width="20.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.74%)</title><rect x="1144.9" y="1043.0" width="20.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.74%)</title><rect x="1144.9" y="1027.0" width="20.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.74%)</title><rect x="1144.9" y="1011.0" width="20.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.74%)</title><rect x="1144.9" y="995.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.74%)</title><rect x="1144.9" y="979.0" width="20.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.39%)</title><rect x="1144.9" y="963.0" width="16.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.39%)</title><rect x="1144.9" y="947.0" width="16.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.39%)</title><rect x="1144.9" y="931.0" width="16.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.39%)</title><rect x="1144.9" y="915.0" width="16.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.39%)</title><rect x="1144.9" y="899.0" width="16.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.04%)</title><rect x="1144.9" y="883.0" width="12.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.9" y="867.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.9" y="851.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.9" y="835.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1144.9" y="819.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1144.9" y="803.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1144.9" y="787.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.9" y="771.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.9" y="755.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.9" y="739.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1144.9" y="723.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1144.9" y="707.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1144.9" y="691.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1144.9" y="675.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1144.9" y="659.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1144.9" y="643.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1144.9" y="627.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1144.9" y="611.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1144.9" y="595.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1144.9" y="579.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.9" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1144.9" y="563.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1144.9" y="547.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1144.9" y="531.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.9" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.35%)</title><rect x="1144.9" y="515.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="526.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.35%)</title><rect x="1144.9" y="499.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="510.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.35%)</title><rect x="1144.9" y="483.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.0" y="867.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.0" y="851.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.0" y="835.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.0" y="819.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.0" y="803.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.0" y="787.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.0" y="771.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.0" y="755.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.0" y="739.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.0" y="723.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.0" y="707.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.0" y="691.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.0" y="675.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.0" y="659.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.0" y="643.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.0" y="627.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.0" y="611.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.0" y="595.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.0" y="579.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.0" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1149.0" y="563.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.0" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1149.0" y="547.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.35%)</title><rect x="1149.0" y="531.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1149.0" y="515.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.0" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.35%)</title><rect x="1149.0" y="499.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.0" y="510.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.35%)</title><rect x="1149.0" y="483.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="494.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.35%)</title><rect x="1149.0" y="467.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.1" y="563.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1153.1" y="547.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.1" y="531.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.1" y="515.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1153.1" y="499.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1153.1" y="483.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.1" y="467.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1153.1" y="451.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.1" y="435.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.1" y="419.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1153.1" y="403.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1153.1" y="387.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.1" y="371.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1153.1" y="355.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.1" y="339.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.1" y="323.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1153.1" y="307.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1153.1" y="291.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.1" y="275.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.1" y="259.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1153.1" y="243.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.1" y="227.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.1" y="211.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1153.1" y="195.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1153.1" y="179.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.1" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1153.1" y="163.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1153.1" y="147.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1153.1" y="131.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1153.1" y="115.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1153.1" y="99.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.35%)</title><rect x="1153.1" y="83.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.35%)</title><rect x="1153.1" y="67.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.35%)</title><rect x="1153.1" y="51.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.1" y="62.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.35%)</title><rect x="1153.1" y="35.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1157.2" y="883.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1157.2" y="867.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.2" y="878.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.35%)</title><rect x="1157.2" y="851.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1157.2" y="835.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.2" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1157.2" y="819.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.2" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1157.2" y="803.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.3" y="963.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.3" y="974.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1161.3" y="947.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.35%)</title><rect x="1161.3" y="931.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.3" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1161.3" y="915.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="926.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.69%)</title><rect x="1165.4" y="1059.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="1070.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (2 samples, 0.69%)</title><rect x="1165.4" y="1043.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="1054.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (2 samples, 0.69%)</title><rect x="1165.4" y="1027.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="1038.0"></text>
</g>
<g>
<title>free (2 samples, 0.69%)</title><rect x="1165.4" y="1011.0" width="8.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1168.4" y="1022.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.04%)</title><rect x="1173.6" y="1091.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.04%)</title><rect x="1173.6" y="1075.0" width="12.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.04%)</title><rect x="1173.6" y="1059.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.04%)</title><rect x="1173.6" y="1043.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.69%)</title><rect x="1173.6" y="1027.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="1038.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.69%)</title><rect x="1173.6" y="1011.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1022.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.35%)</title><rect x="1173.6" y="995.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1006.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.35%)</title><rect x="1173.6" y="979.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="990.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.35%)</title><rect x="1173.6" y="963.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="974.0"></text>
</g>
<g>
<title>Instruction::as_Constant() (1 samples, 0.35%)</title><rect x="1173.6" y="947.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="958.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.35%)</title><rect x="1177.7" y="995.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.35%)</title><rect x="1181.8" y="1027.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.35%)</title><rect x="1185.9" y="1091.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1185.9" y="1075.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1086.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1185.9" y="1059.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="1070.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1185.9" y="1043.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="1054.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.35%)</title><rect x="1185.9" y="1027.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1038.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.35%)</title><rect x="1185.9" y="1011.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="1022.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.35%)</title><rect x="1185.9" y="995.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="1006.0"></text>
</g>
</g>
</svg>
