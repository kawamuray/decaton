<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (173 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.58%)</title><rect x="10.0" y="1171.0" width="6.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 15.61%)</title><rect x="16.8" y="1171.0" width="184.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.8" y="1182.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 15.61%)</title><rect x="16.8" y="1155.0" width="184.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.8" y="1166.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.58%)</title><rect x="16.8" y="1139.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.58%)</title><rect x="16.8" y="1123.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/818403214.accept (1 samples, 0.58%)</title><rect x="16.8" y="1107.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.8" y="1091.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.8" y="1075.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.58%)</title><rect x="16.8" y="1059.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.58%)</title><rect x="23.6" y="1139.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.58%)</title><rect x="23.6" y="1123.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.58%)</title><rect x="23.6" y="1107.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.58%)</title><rect x="23.6" y="1091.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 10.40%)</title><rect x="30.5" y="1139.0" width="122.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.5" y="1150.0">java/lang/Itera..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1992302078.accept (18 samples, 10.40%)</title><rect x="30.5" y="1123.0" width="122.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.5" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 10.40%)</title><rect x="30.5" y="1107.0" width="122.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.5" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.58%)</title><rect x="30.5" y="1091.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 6.36%)</title><rect x="37.3" y="1091.0" width="75.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1102.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 6.36%)</title><rect x="37.3" y="1075.0" width="75.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.3" y="1086.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 6.36%)</title><rect x="37.3" y="1059.0" width="75.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.3" y="1070.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 6.36%)</title><rect x="37.3" y="1043.0" width="75.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="1054.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 6.36%)</title><rect x="37.3" y="1027.0" width="75.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1038.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 6.36%)</title><rect x="37.3" y="1011.0" width="75.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="1022.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.62%)</title><rect x="37.3" y="995.0" width="54.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1006.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.16%)</title><rect x="37.3" y="979.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.16%)</title><rect x="37.3" y="963.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.16%)</title><rect x="37.3" y="947.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.47%)</title><rect x="50.9" y="979.0" width="40.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.9" y="990.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.47%)</title><rect x="50.9" y="963.0" width="40.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.9" y="974.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.47%)</title><rect x="50.9" y="947.0" width="40.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.9" y="958.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.47%)</title><rect x="50.9" y="931.0" width="40.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.9" y="942.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.89%)</title><rect x="57.7" y="915.0" width="34.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="60.7" y="926.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.73%)</title><rect x="64.6" y="899.0" width="20.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="67.6" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 1.16%)</title><rect x="64.6" y="883.0" width="13.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="67.6" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.58%)</title><rect x="78.2" y="883.0" width="6.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="81.2" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.58%)</title><rect x="85.0" y="899.0" width="6.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="88.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.73%)</title><rect x="91.8" y="995.0" width="20.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.73%)</title><rect x="91.8" y="979.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.73%)</title><rect x="91.8" y="963.0" width="20.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.73%)</title><rect x="91.8" y="947.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 1.73%)</title><rect x="112.3" y="1091.0" width="20.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 1.73%)</title><rect x="112.3" y="1075.0" width="20.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 1.16%)</title><rect x="119.1" y="1059.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="122.1" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.58%)</title><rect x="119.1" y="1043.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="122.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.58%)</title><rect x="119.1" y="1027.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="122.1" y="1038.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.58%)</title><rect x="126.0" y="1043.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="129.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 1.16%)</title><rect x="132.8" y="1091.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.16%)</title><rect x="132.8" y="1075.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="135.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.16%)</title><rect x="132.8" y="1059.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.58%)</title><rect x="146.4" y="1091.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.05%)</title><rect x="153.2" y="1139.0" width="47.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="156.2" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.05%)</title><rect x="153.2" y="1123.0" width="47.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.2" y="1134.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.31%)</title><rect x="153.2" y="1107.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.2" y="1118.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.31%)</title><rect x="153.2" y="1091.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.2" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.31%)</title><rect x="153.2" y="1075.0" width="27.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.2" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.73%)</title><rect x="153.2" y="1059.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.73%)</title><rect x="153.2" y="1043.0" width="20.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="156.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.73%)</title><rect x="153.2" y="1027.0" width="20.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.58%)</title><rect x="153.2" y="1011.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.58%)</title><rect x="153.2" y="995.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.58%)</title><rect x="153.2" y="979.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.58%)</title><rect x="153.2" y="963.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.58%)</title><rect x="153.2" y="947.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.58%)</title><rect x="153.2" y="931.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.58%)</title><rect x="153.2" y="915.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 1.16%)</title><rect x="160.1" y="1011.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 1.16%)</title><rect x="160.1" y="995.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.58%)</title><rect x="173.7" y="1059.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.58%)</title><rect x="173.7" y="1043.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.58%)</title><rect x="173.7" y="1027.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.58%)</title><rect x="173.7" y="1011.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="173.7" y="995.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.58%)</title><rect x="173.7" y="979.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.7" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="173.7" y="963.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.58%)</title><rect x="180.5" y="1107.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.58%)</title><rect x="180.5" y="1091.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.58%)</title><rect x="180.5" y="1075.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.58%)</title><rect x="180.5" y="1059.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.58%)</title><rect x="180.5" y="1043.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.58%)</title><rect x="187.3" y="1107.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.58%)</title><rect x="187.3" y="1091.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.58%)</title><rect x="187.3" y="1075.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.58%)</title><rect x="187.3" y="1059.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.58%)</title><rect x="187.3" y="1043.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.58%)</title><rect x="187.3" y="1027.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.58%)</title><rect x="187.3" y="1011.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.58%)</title><rect x="187.3" y="995.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.58%)</title><rect x="187.3" y="979.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.3" y="990.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.58%)</title><rect x="187.3" y="963.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.58%)</title><rect x="194.2" y="1107.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.58%)</title><rect x="194.2" y="1091.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.58%)</title><rect x="194.2" y="1075.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.58%)</title><rect x="194.2" y="1059.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.58%)</title><rect x="194.2" y="1043.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.58%)</title><rect x="194.2" y="1027.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 31.79%)</title><rect x="201.0" y="1171.0" width="375.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.0" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 31.79%)</title><rect x="201.0" y="1155.0" width="375.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.0" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 31.79%)</title><rect x="201.0" y="1139.0" width="375.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.0" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.58%)</title><rect x="228.3" y="1123.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1529316903.run (28 samples, 16.18%)</title><rect x="235.1" y="1123.0" width="191.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.1" y="1134.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (28 samples, 16.18%)</title><rect x="235.1" y="1107.0" width="191.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.1" y="1118.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (28 samples, 16.18%)</title><rect x="235.1" y="1091.0" width="191.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.1" y="1102.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (27 samples, 15.61%)</title><rect x="235.1" y="1075.0" width="184.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.1" y="1086.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.58%)</title><rect x="235.1" y="1059.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.58%)</title><rect x="235.1" y="1043.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 5.78%)</title><rect x="241.9" y="1059.0" width="68.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.9" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 5.78%)</title><rect x="241.9" y="1043.0" width="68.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.9" y="1054.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 5.78%)</title><rect x="241.9" y="1027.0" width="68.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.9" y="1038.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.78%)</title><rect x="241.9" y="1011.0" width="68.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.9" y="1022.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.78%)</title><rect x="241.9" y="995.0" width="68.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.9" y="1006.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 5.78%)</title><rect x="241.9" y="979.0" width="68.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.9" y="990.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.73%)</title><rect x="241.9" y="963.0" width="20.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.58%)</title><rect x="241.9" y="947.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.58%)</title><rect x="241.9" y="931.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.58%)</title><rect x="241.9" y="915.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="241.9" y="899.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.16%)</title><rect x="248.7" y="947.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.16%)</title><rect x="248.7" y="931.0" width="13.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.58%)</title><rect x="255.5" y="915.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.58%)</title><rect x="255.5" y="899.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.05%)</title><rect x="262.4" y="963.0" width="47.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.4" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.16%)</title><rect x="262.4" y="947.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.16%)</title><rect x="262.4" y="931.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.58%)</title><rect x="269.2" y="915.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.58%)</title><rect x="269.2" y="899.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.89%)</title><rect x="276.0" y="947.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.0" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.16%)</title><rect x="276.0" y="931.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.16%)</title><rect x="276.0" y="915.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.16%)</title><rect x="276.0" y="899.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.16%)</title><rect x="276.0" y="883.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.73%)</title><rect x="289.7" y="931.0" width="20.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.73%)</title><rect x="289.7" y="915.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.16%)</title><rect x="296.5" y="899.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.58%)</title><rect x="296.5" y="883.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.58%)</title><rect x="303.3" y="883.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.58%)</title><rect x="303.3" y="867.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.58%)</title><rect x="303.3" y="851.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.58%)</title><rect x="303.3" y="835.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.3" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.58%)</title><rect x="303.3" y="819.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.3" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.58%)</title><rect x="303.3" y="803.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (16 samples, 9.25%)</title><rect x="310.1" y="1059.0" width="109.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.1" y="1070.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.73%)</title><rect x="310.1" y="1043.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.1" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.73%)</title><rect x="310.1" y="1027.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.73%)</title><rect x="310.1" y="1011.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="310.1" y="995.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="310.1" y="979.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.58%)</title><rect x="310.1" y="963.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="310.1" y="947.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.1" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.16%)</title><rect x="316.9" y="995.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.16%)</title><rect x="316.9" y="979.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.58%)</title><rect x="330.6" y="1043.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.58%)</title><rect x="330.6" y="1027.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.6" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.58%)</title><rect x="330.6" y="1011.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="333.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 4.62%)</title><rect x="337.4" y="1043.0" width="54.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.4" y="1054.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 4.62%)</title><rect x="337.4" y="1027.0" width="54.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.4" y="1038.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.89%)</title><rect x="344.2" y="1011.0" width="34.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.2" y="1022.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.73%)</title><rect x="357.9" y="995.0" width="20.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.16%)</title><rect x="364.7" y="979.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.7" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.16%)</title><rect x="364.7" y="963.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="367.7" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.16%)</title><rect x="364.7" y="947.0" width="13.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.7" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.58%)</title><rect x="371.5" y="931.0" width="6.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="374.5" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.16%)</title><rect x="378.3" y="1011.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="381.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.16%)</title><rect x="378.3" y="995.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="378.3" y="979.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="378.3" y="963.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.58%)</title><rect x="378.3" y="947.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="378.3" y="931.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="385.1" y="979.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.58%)</title><rect x="385.1" y="963.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="385.1" y="947.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.58%)</title><rect x="385.1" y="931.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.16%)</title><rect x="392.0" y="1043.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.58%)</title><rect x="392.0" y="1027.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.58%)</title><rect x="398.8" y="1027.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.58%)</title><rect x="398.8" y="1011.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="401.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.58%)</title><rect x="398.8" y="995.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.16%)</title><rect x="405.6" y="1043.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="408.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.16%)</title><rect x="405.6" y="1027.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.16%)</title><rect x="405.6" y="1011.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/992772354.accept (2 samples, 1.16%)</title><rect x="405.6" y="995.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (2 samples, 1.16%)</title><rect x="405.6" y="979.0" width="13.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.6" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 1.16%)</title><rect x="405.6" y="963.0" width="13.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.6" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 1.16%)</title><rect x="405.6" y="947.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.58%)</title><rect x="419.2" y="1075.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.58%)</title><rect x="419.2" y="1059.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.2" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="419.2" y="1043.0" width="6.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="422.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="419.2" y="1027.0" width="6.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="422.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.58%)</title><rect x="426.1" y="1123.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.58%)</title><rect x="426.1" y="1107.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="429.1" y="1118.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.58%)</title><rect x="426.1" y="1091.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="429.1" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.58%)</title><rect x="426.1" y="1075.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="429.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.58%)</title><rect x="432.9" y="1123.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.58%)</title><rect x="432.9" y="1107.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (20 samples, 11.56%)</title><rect x="439.7" y="1123.0" width="136.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.7" y="1134.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (20 samples, 11.56%)</title><rect x="439.7" y="1107.0" width="136.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.7" y="1118.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 8.67%)</title><rect x="439.7" y="1091.0" width="102.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.7" y="1102.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.58%)</title><rect x="446.5" y="1075.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.58%)</title><rect x="446.5" y="1059.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="449.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 7.51%)</title><rect x="453.4" y="1075.0" width="88.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.4" y="1086.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 6.94%)</title><rect x="460.2" y="1059.0" width="81.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.2" y="1070.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 6.94%)</title><rect x="460.2" y="1043.0" width="81.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="463.2" y="1054.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.58%)</title><rect x="460.2" y="1027.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="463.2" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.58%)</title><rect x="467.0" y="1027.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="470.0" y="1038.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.58%)</title><rect x="473.8" y="1027.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="476.8" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.58%)</title><rect x="480.6" y="1027.0" width="6.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="483.6" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 4.05%)</title><rect x="487.5" y="1027.0" width="47.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="490.5" y="1038.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.58%)</title><rect x="535.2" y="1027.0" width="6.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="538.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.89%)</title><rect x="542.0" y="1091.0" width="34.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.0" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.89%)</title><rect x="542.0" y="1075.0" width="34.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.0" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.89%)</title><rect x="542.0" y="1059.0" width="34.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.0" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.89%)</title><rect x="542.0" y="1043.0" width="34.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.0" y="1054.0">ja..</text>
</g>
<g>
<title>start_thread (90 samples, 52.02%)</title><rect x="576.1" y="1171.0" width="613.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="579.1" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (90 samples, 52.02%)</title><rect x="576.1" y="1155.0" width="613.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="579.1" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 8.09%)</title><rect x="576.1" y="1139.0" width="95.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="579.1" y="1150.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.16%)</title><rect x="576.1" y="1123.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.1" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.16%)</title><rect x="576.1" y="1107.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.1" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.58%)</title><rect x="576.1" y="1091.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="579.1" y="1102.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.58%)</title><rect x="582.9" y="1091.0" width="6.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="585.9" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 6.94%)</title><rect x="589.8" y="1123.0" width="81.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.8" y="1134.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.62%)</title><rect x="589.8" y="1107.0" width="54.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="592.8" y="1118.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.31%)</title><rect x="589.8" y="1091.0" width="27.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="592.8" y="1102.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.16%)</title><rect x="596.6" y="1075.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="599.6" y="1086.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.58%)</title><rect x="610.2" y="1075.0" width="6.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="613.2" y="1086.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.73%)</title><rect x="617.1" y="1091.0" width="20.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="620.1" y="1102.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.58%)</title><rect x="637.5" y="1091.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="640.5" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.16%)</title><rect x="644.3" y="1107.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="647.3" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.58%)</title><rect x="644.3" y="1091.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="647.3" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.58%)</title><rect x="644.3" y="1075.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="647.3" y="1086.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.58%)</title><rect x="644.3" y="1059.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="647.3" y="1070.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.58%)</title><rect x="651.2" y="1091.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="654.2" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.58%)</title><rect x="651.2" y="1075.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="654.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.58%)</title><rect x="651.2" y="1059.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="654.2" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.16%)</title><rect x="658.0" y="1107.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.0" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.16%)</title><rect x="658.0" y="1091.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="661.0" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.16%)</title><rect x="658.0" y="1075.0" width="13.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="661.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.16%)</title><rect x="658.0" y="1059.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="661.0" y="1070.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.16%)</title><rect x="658.0" y="1043.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="661.0" y="1054.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.16%)</title><rect x="658.0" y="1027.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="661.0" y="1038.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 1.16%)</title><rect x="658.0" y="1011.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.0" y="1022.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 1.16%)</title><rect x="658.0" y="995.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="661.0" y="1006.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.58%)</title><rect x="664.8" y="979.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="667.8" y="990.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.58%)</title><rect x="664.8" y="963.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="667.8" y="974.0"></text>
</g>
<g>
<title>CodeRootSetTable::new_entry(nmethod*) (1 samples, 0.58%)</title><rect x="664.8" y="947.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.8" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 43.93%)</title><rect x="671.6" y="1139.0" width="518.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="674.6" y="1150.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 43.93%)</title><rect x="671.6" y="1123.0" width="518.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="674.6" y="1134.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 42.77%)</title><rect x="671.6" y="1107.0" width="504.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="674.6" y="1118.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (72 samples, 41.62%)</title><rect x="671.6" y="1091.0" width="491.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="674.6" y="1102.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (72 samples, 41.62%)</title><rect x="671.6" y="1075.0" width="491.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="674.6" y="1086.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 22.54%)</title><rect x="671.6" y="1059.0" width="266.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.6" y="1070.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.16%)</title><rect x="671.6" y="1043.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.6" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.58%)</title><rect x="671.6" y="1027.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.6" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.58%)</title><rect x="678.4" y="1027.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="681.4" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.58%)</title><rect x="678.4" y="1011.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="681.4" y="1022.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.58%)</title><rect x="678.4" y="995.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="681.4" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.58%)</title><rect x="685.3" y="1043.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.3" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.58%)</title><rect x="685.3" y="1027.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="688.3" y="1038.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.58%)</title><rect x="685.3" y="1011.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="688.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.31%)</title><rect x="692.1" y="1043.0" width="27.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="695.1" y="1054.0">M..</text>
</g>
<g>
<title>LoadUBNode::Opcode() const (1 samples, 0.58%)</title><rect x="692.1" y="1027.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="695.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.58%)</title><rect x="698.9" y="1027.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="701.9" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.16%)</title><rect x="705.7" y="1027.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.7" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.58%)</title><rect x="712.5" y="1011.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="715.5" y="1022.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.58%)</title><rect x="719.4" y="1043.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="722.4" y="1054.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.58%)</title><rect x="719.4" y="1027.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="722.4" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.16%)</title><rect x="726.2" y="1043.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="729.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.16%)</title><rect x="726.2" y="1027.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="729.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.58%)</title><rect x="726.2" y="1011.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="729.2" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.58%)</title><rect x="726.2" y="995.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.58%)</title><rect x="733.0" y="1011.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="736.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.58%)</title><rect x="733.0" y="995.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="736.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 16.76%)</title><rect x="739.8" y="1043.0" width="197.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.8" y="1054.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.58%)</title><rect x="739.8" y="1027.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.58%)</title><rect x="746.6" y="1027.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="749.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.73%)</title><rect x="753.5" y="1027.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="756.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="753.5" y="1011.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="756.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.58%)</title><rect x="760.3" y="1011.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="763.3" y="1022.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.58%)</title><rect x="767.1" y="1011.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="770.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.89%)</title><rect x="773.9" y="1027.0" width="34.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.9" y="1038.0">Ph..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.58%)</title><rect x="787.6" y="1011.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.6" y="1022.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.58%)</title><rect x="794.4" y="1011.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="797.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.58%)</title><rect x="801.2" y="1011.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="804.2" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.58%)</title><rect x="801.2" y="995.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="804.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.89%)</title><rect x="808.0" y="1027.0" width="34.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.0" y="1038.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.58%)</title><rect x="828.5" y="1011.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="831.5" y="1022.0"></text>
</g>
<g>
<title>xorL_rRegNode::rule() const (1 samples, 0.58%)</title><rect x="835.3" y="1011.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.58%)</title><rect x="842.1" y="1027.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.58%)</title><rect x="842.1" y="1011.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="845.1" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="842.1" y="995.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.58%)</title><rect x="849.0" y="1027.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="852.0" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.58%)</title><rect x="849.0" y="1011.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="852.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.73%)</title><rect x="855.8" y="1027.0" width="20.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.8" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.58%)</title><rect x="862.6" y="1011.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="865.6" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.58%)</title><rect x="869.4" y="1011.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.4" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.58%)</title><rect x="869.4" y="995.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.73%)</title><rect x="876.2" y="1027.0" width="20.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.58%)</title><rect x="883.1" y="1011.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.58%)</title><rect x="889.9" y="1011.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.58%)</title><rect x="896.7" y="1027.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.58%)</title><rect x="903.5" y="1027.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="906.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="903.5" y="1011.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="906.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.58%)</title><rect x="910.3" y="1027.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.3" y="1038.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.58%)</title><rect x="910.3" y="1011.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.3" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.16%)</title><rect x="917.2" y="1027.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.2" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.16%)</title><rect x="917.2" y="1011.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.2" y="1022.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.58%)</title><rect x="924.0" y="995.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.0" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.58%)</title><rect x="930.8" y="1027.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.8" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 12.72%)</title><rect x="937.6" y="1059.0" width="150.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="940.6" y="1070.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.58%)</title><rect x="937.6" y="1043.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="940.6" y="1054.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.58%)</title><rect x="937.6" y="1027.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 8.67%)</title><rect x="944.5" y="1043.0" width="102.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.5" y="1054.0">PhaseIdealLo..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.58%)</title><rect x="944.5" y="1027.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.16%)</title><rect x="951.3" y="1027.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 3.47%)</title><rect x="964.9" y="1027.0" width="40.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.9" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.31%)</title><rect x="978.6" y="1011.0" width="27.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.6" y="1022.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.73%)</title><rect x="985.4" y="995.0" width="20.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="985.4" y="979.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.16%)</title><rect x="992.2" y="979.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.73%)</title><rect x="1005.8" y="1027.0" width="20.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 1.16%)</title><rect x="1012.7" y="1011.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.58%)</title><rect x="1026.3" y="1027.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1033.1" y="1027.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1033.1" y="1011.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.1" y="1022.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.58%)</title><rect x="1033.1" y="995.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.1" y="1006.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.58%)</title><rect x="1033.1" y="979.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.1" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.58%)</title><rect x="1033.1" y="963.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.1" y="974.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.58%)</title><rect x="1039.9" y="1027.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.58%)</title><rect x="1046.8" y="1043.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.8" y="1054.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.58%)</title><rect x="1046.8" y="1027.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.89%)</title><rect x="1053.6" y="1043.0" width="34.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.6" y="1054.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.89%)</title><rect x="1053.6" y="1027.0" width="34.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.6" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.16%)</title><rect x="1053.6" y="1011.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 1.16%)</title><rect x="1053.6" y="995.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.6" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1067.2" y="1011.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.2" y="1022.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.58%)</title><rect x="1067.2" y="995.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.2" y="1006.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.58%)</title><rect x="1067.2" y="979.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.2" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1074.0" y="1011.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.0" y="1022.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.58%)</title><rect x="1074.0" y="995.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.0" y="1006.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="1080.9" y="1011.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.9" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.78%)</title><rect x="1087.7" y="1059.0" width="68.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="1070.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.78%)</title><rect x="1087.7" y="1043.0" width="68.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.7" y="1054.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.78%)</title><rect x="1087.7" y="1027.0" width="68.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.7" y="1038.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 5.78%)</title><rect x="1087.7" y="1011.0" width="68.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.7" y="1022.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 5.78%)</title><rect x="1087.7" y="995.0" width="68.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.7" y="1006.0">Parse::..</text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.58%)</title><rect x="1087.7" y="979.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.7" y="990.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.58%)</title><rect x="1087.7" y="963.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="974.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.58%)</title><rect x="1087.7" y="947.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 5.20%)</title><rect x="1094.5" y="979.0" width="61.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.5" y="990.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.62%)</title><rect x="1094.5" y="963.0" width="54.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.5" y="974.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.62%)</title><rect x="1094.5" y="947.0" width="54.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.5" y="958.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.05%)</title><rect x="1094.5" y="931.0" width="47.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.5" y="942.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.05%)</title><rect x="1094.5" y="915.0" width="47.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.5" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.05%)</title><rect x="1094.5" y="899.0" width="47.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.5" y="910.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 4.05%)</title><rect x="1094.5" y="883.0" width="47.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.5" y="894.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.16%)</title><rect x="1094.5" y="867.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.5" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.16%)</title><rect x="1094.5" y="851.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.5" y="862.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.58%)</title><rect x="1094.5" y="835.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.5" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="1101.3" y="835.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="1101.3" y="819.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="1101.3" y="803.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1101.3" y="787.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1101.3" y="771.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.73%)</title><rect x="1108.2" y="867.0" width="20.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.73%)</title><rect x="1108.2" y="851.0" width="20.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.73%)</title><rect x="1108.2" y="835.0" width="20.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.73%)</title><rect x="1108.2" y="819.0" width="20.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.73%)</title><rect x="1108.2" y="803.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.73%)</title><rect x="1108.2" y="787.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.73%)</title><rect x="1108.2" y="771.0" width="20.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.73%)</title><rect x="1108.2" y="755.0" width="20.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.73%)</title><rect x="1108.2" y="739.0" width="20.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.73%)</title><rect x="1108.2" y="723.0" width="20.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.73%)</title><rect x="1108.2" y="707.0" width="20.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.73%)</title><rect x="1108.2" y="691.0" width="20.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.2" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1108.2" y="675.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.2" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.58%)</title><rect x="1108.2" y="659.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.2" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="1108.2" y="643.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="1108.2" y="627.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.2" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="1108.2" y="611.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1108.2" y="595.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.2" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1108.2" y="579.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.2" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1108.2" y="563.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.2" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.58%)</title><rect x="1108.2" y="547.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.2" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1108.2" y="531.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1108.2" y="515.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.2" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1108.2" y="499.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.2" y="510.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.58%)</title><rect x="1108.2" y="483.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1115.0" y="675.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1115.0" y="659.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1115.0" y="643.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1115.0" y="627.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1115.0" y="611.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.0" y="622.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.58%)</title><rect x="1115.0" y="595.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.0" y="606.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.58%)</title><rect x="1115.0" y="579.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.0" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1115.0" y="563.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.0" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.58%)</title><rect x="1115.0" y="547.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.0" y="558.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.58%)</title><rect x="1115.0" y="531.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.0" y="542.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.58%)</title><rect x="1115.0" y="515.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.0" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="675.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="659.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.8" y="643.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1121.8" y="627.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1121.8" y="611.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1121.8" y="595.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1121.8" y="579.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="563.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.8" y="547.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1121.8" y="531.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1121.8" y="515.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1121.8" y="499.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1121.8" y="483.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="467.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.8" y="451.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1121.8" y="435.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1121.8" y="419.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1121.8" y="403.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1121.8" y="387.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="371.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.8" y="355.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1121.8" y="339.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1121.8" y="323.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1121.8" y="307.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1121.8" y="291.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="275.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.8" y="259.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1121.8" y="243.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1121.8" y="227.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1121.8" y="211.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1121.8" y="195.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.8" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1121.8" y="179.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.8" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1121.8" y="163.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.8" y="174.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.58%)</title><rect x="1121.8" y="147.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.8" y="158.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1121.8" y="131.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.8" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1121.8" y="115.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.8" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1121.8" y="99.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.8" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1121.8" y="83.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.8" y="94.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1121.8" y="67.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.8" y="78.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.58%)</title><rect x="1121.8" y="51.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.8" y="62.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.58%)</title><rect x="1121.8" y="35.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1128.6" y="867.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1128.6" y="851.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1128.6" y="835.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1128.6" y="819.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1128.6" y="803.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1128.6" y="787.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1128.6" y="771.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1128.6" y="755.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1128.6" y="739.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1128.6" y="723.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1128.6" y="707.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1128.6" y="691.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1128.6" y="675.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1128.6" y="659.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1128.6" y="643.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1128.6" y="627.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1128.6" y="611.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1128.6" y="595.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1128.6" y="579.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1128.6" y="563.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.6" y="574.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.58%)</title><rect x="1128.6" y="547.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.6" y="558.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.58%)</title><rect x="1128.6" y="531.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.6" y="542.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.58%)</title><rect x="1128.6" y="515.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.6" y="526.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.58%)</title><rect x="1128.6" y="499.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.6" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1135.4" y="867.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.4" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.58%)</title><rect x="1135.4" y="851.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="862.0"></text>
</g>
<g>
<title>ConstantPool::has_method_type_at_if_loaded(constantPoolHandle, int) (1 samples, 0.58%)</title><rect x="1135.4" y="835.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.58%)</title><rect x="1142.3" y="931.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.3" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1142.3" y="915.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.3" y="926.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.58%)</title><rect x="1142.3" y="899.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.3" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.58%)</title><rect x="1142.3" y="883.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.58%)</title><rect x="1142.3" y="867.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.3" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.58%)</title><rect x="1142.3" y="851.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.3" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1149.1" y="963.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.1" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1149.1" y="947.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.1" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1149.1" y="931.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.1" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1149.1" y="915.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.1" y="926.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.58%)</title><rect x="1155.9" y="1059.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.9" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.16%)</title><rect x="1162.7" y="1091.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.16%)</title><rect x="1162.7" y="1075.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.7" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.16%)</title><rect x="1162.7" y="1059.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.7" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.16%)</title><rect x="1162.7" y="1043.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="1054.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.58%)</title><rect x="1162.7" y="1027.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="1038.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.58%)</title><rect x="1162.7" y="1011.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.7" y="1022.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.58%)</title><rect x="1162.7" y="995.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.58%)</title><rect x="1162.7" y="979.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1162.7" y="963.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1162.7" y="947.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.7" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1162.7" y="931.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.7" y="915.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.7" y="899.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1162.7" y="883.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1162.7" y="867.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.7" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1162.7" y="851.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.7" y="835.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.7" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.7" y="819.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1162.7" y="803.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1162.7" y="787.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1162.7" y="771.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.7" y="755.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.7" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.7" y="739.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.7" y="750.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.58%)</title><rect x="1162.7" y="723.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="734.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.58%)</title><rect x="1162.7" y="707.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.7" y="718.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 0.58%)</title><rect x="1162.7" y="691.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle, Thread*) (1 samples, 0.58%)</title><rect x="1162.7" y="675.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="686.0"></text>
</g>
<g>
<title>MethodData::compute_allocation_size_in_bytes(methodHandle) (1 samples, 0.58%)</title><rect x="1162.7" y="659.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.7" y="670.0"></text>
</g>
<g>
<title>MethodData::compute_data_size(BytecodeStream*) (1 samples, 0.58%)</title><rect x="1162.7" y="643.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.7" y="654.0"></text>
</g>
<g>
<title>Bytecode_invoke::verify() const (1 samples, 0.58%)</title><rect x="1162.7" y="627.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.7" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.58%)</title><rect x="1169.5" y="1027.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="1038.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.58%)</title><rect x="1169.5" y="1011.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.5" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.58%)</title><rect x="1169.5" y="995.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="1006.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.58%)</title><rect x="1169.5" y="979.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="990.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, int, int, bool, bool) (1 samples, 0.58%)</title><rect x="1169.5" y="963.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 1.16%)</title><rect x="1176.4" y="1107.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 1.16%)</title><rect x="1176.4" y="1091.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 1.16%)</title><rect x="1176.4" y="1075.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 1.16%)</title><rect x="1176.4" y="1059.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="1070.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (2 samples, 1.16%)</title><rect x="1176.4" y="1043.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.58%)</title><rect x="1183.2" y="1027.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="1038.0"></text>
</g>
</g>
</svg>
