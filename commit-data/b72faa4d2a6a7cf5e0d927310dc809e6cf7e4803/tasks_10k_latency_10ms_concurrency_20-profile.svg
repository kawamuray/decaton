<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (52 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (2 samples, 3.85%)</title><rect x="10.0" y="947.0" width="45.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (2 samples, 3.85%)</title><rect x="10.0" y="931.0" width="45.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 3.85%)</title><rect x="10.0" y="915.0" width="45.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 3.85%)</title><rect x="10.0" y="899.0" width="45.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="910.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 1.92%)</title><rect x="10.0" y="883.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 1.92%)</title><rect x="10.0" y="867.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 1.92%)</title><rect x="10.0" y="851.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 1.92%)</title><rect x="10.0" y="835.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 1.92%)</title><rect x="10.0" y="819.0" width="22.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 1.92%)</title><rect x="10.0" y="803.0" width="22.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 1.92%)</title><rect x="10.0" y="787.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 1.92%)</title><rect x="10.0" y="771.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 1.92%)</title><rect x="10.0" y="755.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 1.92%)</title><rect x="10.0" y="739.0" width="22.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 1.92%)</title><rect x="10.0" y="723.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="734.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 1.92%)</title><rect x="10.0" y="707.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="718.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 1.92%)</title><rect x="32.7" y="883.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.7" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.92%)</title><rect x="32.7" y="867.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.92%)</title><rect x="32.7" y="851.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.7" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 1.92%)</title><rect x="32.7" y="835.0" width="22.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.7" y="846.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 1.92%)</title><rect x="32.7" y="819.0" width="22.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.7" y="830.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 1.92%)</title><rect x="32.7" y="803.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="814.0">s..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 1.92%)</title><rect x="32.7" y="787.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.7" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 1.92%)</title><rect x="32.7" y="771.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="782.0">s..</text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.92%)</title><rect x="55.4" y="947.0" width="22.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.4" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.92%)</title><rect x="55.4" y="931.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.4" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.92%)</title><rect x="55.4" y="915.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.4" y="926.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/151177546.run (1 samples, 1.92%)</title><rect x="55.4" y="899.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.4" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.92%)</title><rect x="55.4" y="883.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.4" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.92%)</title><rect x="55.4" y="867.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.92%)</title><rect x="55.4" y="851.0" width="22.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.4" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 1.92%)</title><rect x="55.4" y="835.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.4" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 1.92%)</title><rect x="55.4" y="819.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.4" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 1.92%)</title><rect x="55.4" y="803.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.4" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/823236465.process (1 samples, 1.92%)</title><rect x="55.4" y="787.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 1.92%)</title><rect x="55.4" y="771.0" width="22.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.4" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 1.92%)</title><rect x="55.4" y="755.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.4" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 1.92%)</title><rect x="55.4" y="739.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.4" y="750.0">c..</text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 1.92%)</title><rect x="55.4" y="723.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.4" y="734.0">j..</text>
</g>
<g>
<title>JVM_Sleep (1 samples, 1.92%)</title><rect x="55.4" y="707.0" width="22.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="58.4" y="718.0">J..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 1.92%)</title><rect x="55.4" y="691.0" width="22.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="58.4" y="702.0">o..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 1.92%)</title><rect x="55.4" y="675.0" width="22.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="58.4" y="686.0">o..</text>
</g>
<g>
<title>start_thread (49 samples, 94.23%)</title><rect x="78.1" y="947.0" width="1111.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="81.1" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (49 samples, 94.23%)</title><rect x="78.1" y="931.0" width="1111.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="81.1" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 9.62%)</title><rect x="78.1" y="915.0" width="113.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="81.1" y="926.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (5 samples, 9.62%)</title><rect x="78.1" y="899.0" width="113.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.1" y="910.0">G1ParTask::wor..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 9.62%)</title><rect x="78.1" y="883.0" width="113.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="81.1" y="894.0">G1ParEvacuateF..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 1.92%)</title><rect x="78.1" y="867.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="81.1" y="878.0">P..</text>
</g>
<g>
<title>SpinPause (3 samples, 5.77%)</title><rect x="100.8" y="867.0" width="68.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="103.8" y="878.0">SpinPause</text>
</g>
<g>
<title>__sched_yield (1 samples, 1.92%)</title><rect x="168.8" y="867.0" width="22.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="171.8" y="878.0">_..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (44 samples, 84.62%)</title><rect x="191.5" y="915.0" width="998.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="194.5" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (44 samples, 84.62%)</title><rect x="191.5" y="899.0" width="998.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="194.5" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (44 samples, 84.62%)</title><rect x="191.5" y="883.0" width="998.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="194.5" y="894.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (42 samples, 80.77%)</title><rect x="191.5" y="867.0" width="953.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="194.5" y="878.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (42 samples, 80.77%)</title><rect x="191.5" y="851.0" width="953.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="194.5" y="862.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (25 samples, 48.08%)</title><rect x="191.5" y="835.0" width="567.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="194.5" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 1.92%)</title><rect x="191.5" y="819.0" width="22.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="194.5" y="830.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.92%)</title><rect x="191.5" y="803.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="194.5" y="814.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 3.85%)</title><rect x="214.2" y="819.0" width="45.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="217.2" y="830.0">Comp..</text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 1.92%)</title><rect x="236.9" y="803.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="239.9" y="814.0">D..</text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 1.92%)</title><rect x="259.6" y="819.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.6" y="830.0">P..</text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 1.92%)</title><rect x="259.6" y="803.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="262.6" y="814.0">P..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 1.92%)</title><rect x="259.6" y="787.0" width="22.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="262.6" y="798.0">p..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 3.85%)</title><rect x="282.3" y="819.0" width="45.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="285.3" y="830.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 3.85%)</title><rect x="282.3" y="803.0" width="45.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="285.3" y="814.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 3.85%)</title><rect x="282.3" y="787.0" width="45.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="285.3" y="798.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 1.92%)</title><rect x="305.0" y="771.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="308.0" y="782.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 36.54%)</title><rect x="327.7" y="819.0" width="431.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.7" y="830.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 1.92%)</title><rect x="327.7" y="803.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.7" y="814.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.92%)</title><rect x="327.7" y="787.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.7" y="798.0">I..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 1.92%)</title><rect x="350.4" y="803.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="353.4" y="814.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 11.54%)</title><rect x="373.1" y="803.0" width="136.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="376.1" y="814.0">PhaseChaitin::bui..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.92%)</title><rect x="418.5" y="787.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="421.5" y="798.0">I..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 3.85%)</title><rect x="441.2" y="787.0" width="45.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.2" y="798.0">Phas..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.92%)</title><rect x="486.5" y="787.0" width="22.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="489.5" y="798.0">R..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 1.92%)</title><rect x="509.2" y="803.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.2" y="814.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 1.92%)</title><rect x="509.2" y="787.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="512.2" y="798.0">P..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 5.77%)</title><rect x="531.9" y="803.0" width="68.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="534.9" y="814.0">PhaseCh..</text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 1.92%)</title><rect x="577.3" y="787.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="580.3" y="798.0">R..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 5.77%)</title><rect x="600.0" y="803.0" width="68.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="814.0">PhaseCh..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 3.85%)</title><rect x="622.7" y="787.0" width="45.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="625.7" y="798.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 1.92%)</title><rect x="645.4" y="771.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.4" y="782.0">P..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 7.69%)</title><rect x="668.1" y="803.0" width="90.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="671.1" y="814.0">PhaseLive:..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 5.77%)</title><rect x="690.8" y="787.0" width="68.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.8" y="798.0">PhaseLi..</text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 21.15%)</title><rect x="758.8" y="835.0" width="249.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.8" y="846.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 3.85%)</title><rect x="758.8" y="819.0" width="45.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="761.8" y="830.0">Comp..</text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 1.92%)</title><rect x="804.2" y="819.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="807.2" y="830.0">L..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 1.92%)</title><rect x="826.9" y="819.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.9" y="830.0">P..</text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 1.92%)</title><rect x="826.9" y="803.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="829.9" y="814.0">P..</text>
</g>
<g>
<title>Type::singleton() const (1 samples, 1.92%)</title><rect x="826.9" y="787.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="829.9" y="798.0">T..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 11.54%)</title><rect x="849.6" y="819.0" width="136.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.6" y="830.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 1.92%)</title><rect x="849.6" y="803.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="852.6" y="814.0">I..</text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 1.92%)</title><rect x="849.6" y="787.0" width="22.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="852.6" y="798.0">P..</text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 1.92%)</title><rect x="849.6" y="771.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.6" y="782.0">I..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 1.92%)</title><rect x="872.3" y="803.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.3" y="814.0">N..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 5.77%)</title><rect x="895.0" y="803.0" width="68.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.0" y="814.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 3.85%)</title><rect x="917.7" y="787.0" width="45.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.7" y="798.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 1.92%)</title><rect x="917.7" y="771.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.7" y="782.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 1.92%)</title><rect x="940.4" y="771.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="943.4" y="782.0">P..</text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 1.92%)</title><rect x="940.4" y="755.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.4" y="766.0">L..</text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 1.92%)</title><rect x="940.4" y="739.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.4" y="750.0">M..</text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 1.92%)</title><rect x="963.1" y="803.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.1" y="814.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.92%)</title><rect x="985.8" y="819.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="988.8" y="830.0">P..</text>
</g>
<g>
<title>AddLNode::Identity(PhaseTransform*) (1 samples, 1.92%)</title><rect x="985.8" y="803.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.8" y="814.0">A..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 9.62%)</title><rect x="1008.5" y="835.0" width="113.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.5" y="846.0">ParseGenerator..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 9.62%)</title><rect x="1008.5" y="819.0" width="113.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.5" y="830.0">Parse::Parse(J..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 9.62%)</title><rect x="1008.5" y="803.0" width="113.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.5" y="814.0">Parse::do_all_..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 9.62%)</title><rect x="1008.5" y="787.0" width="113.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.5" y="798.0">Parse::do_one_..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 9.62%)</title><rect x="1008.5" y="771.0" width="113.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.5" y="782.0">Parse::do_one_..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 9.62%)</title><rect x="1008.5" y="755.0" width="113.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1011.5" y="766.0">Parse::do_call()</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 9.62%)</title><rect x="1008.5" y="739.0" width="113.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.5" y="750.0">ParseGenerator..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 9.62%)</title><rect x="1008.5" y="723.0" width="113.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.5" y="734.0">Parse::Parse(J..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 7.69%)</title><rect x="1008.5" y="707.0" width="90.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.5" y="718.0">Parse::do_..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 7.69%)</title><rect x="1008.5" y="691.0" width="90.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.5" y="702.0">Parse::do_..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 1.92%)</title><rect x="1008.5" y="675.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.5" y="686.0">P..</text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 1.92%)</title><rect x="1008.5" y="659.0" width="22.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.5" y="670.0">P..</text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.92%)</title><rect x="1008.5" y="643.0" width="22.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.5" y="654.0">P..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.92%)</title><rect x="1008.5" y="627.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.5" y="638.0">N..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 5.77%)</title><rect x="1031.2" y="675.0" width="68.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.2" y="686.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 3.85%)</title><rect x="1031.2" y="659.0" width="45.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.2" y="670.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1031.2" y="643.0" width="22.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.2" y="654.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1031.2" y="627.0" width="22.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.2" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1031.2" y="611.0" width="22.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.2" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1031.2" y="595.0" width="22.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.2" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1031.2" y="579.0" width="22.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.2" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1031.2" y="563.0" width="22.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.2" y="574.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1031.2" y="547.0" width="22.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.2" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1031.2" y="531.0" width="22.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.2" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1031.2" y="515.0" width="22.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.2" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1031.2" y="499.0" width="22.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.2" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1031.2" y="483.0" width="22.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.2" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1031.2" y="467.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.2" y="478.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1031.2" y="451.0" width="22.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.2" y="462.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1031.2" y="435.0" width="22.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.2" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1031.2" y="419.0" width="22.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.2" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1031.2" y="403.0" width="22.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.2" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1031.2" y="387.0" width="22.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.2" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1031.2" y="371.0" width="22.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.2" y="382.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1031.2" y="355.0" width="22.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.2" y="366.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1031.2" y="339.0" width="22.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.2" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1031.2" y="323.0" width="22.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.2" y="334.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1031.2" y="307.0" width="22.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.2" y="318.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1031.2" y="291.0" width="22.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.2" y="302.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1031.2" y="275.0" width="22.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.2" y="286.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1031.2" y="259.0" width="22.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.2" y="270.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1031.2" y="243.0" width="22.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.2" y="254.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 1.92%)</title><rect x="1031.2" y="227.0" width="22.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.2" y="238.0">P..</text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 1.92%)</title><rect x="1031.2" y="211.0" width="22.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.2" y="222.0">G..</text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 1.92%)</title><rect x="1031.2" y="195.0" width="22.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.2" y="206.0">G..</text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 1.92%)</title><rect x="1031.2" y="179.0" width="22.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.2" y="190.0">G..</text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 1.92%)</title><rect x="1031.2" y="163.0" width="22.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.2" y="174.0">G..</text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 1.92%)</title><rect x="1031.2" y="147.0" width="22.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.2" y="158.0">G..</text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 1.92%)</title><rect x="1031.2" y="131.0" width="22.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.2" y="142.0">c..</text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.92%)</title><rect x="1031.2" y="115.0" width="22.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.2" y="126.0">c..</text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.92%)</title><rect x="1031.2" y="99.0" width="22.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.2" y="110.0">c..</text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.92%)</title><rect x="1031.2" y="83.0" width="22.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.2" y="94.0">c..</text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 1.92%)</title><rect x="1031.2" y="67.0" width="22.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.2" y="78.0">c..</text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 1.92%)</title><rect x="1031.2" y="51.0" width="22.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.2" y="62.0">L..</text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 1.92%)</title><rect x="1031.2" y="35.0" width="22.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.2" y="46.0">m..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1053.8" y="643.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="654.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1053.8" y="627.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.8" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1053.8" y="611.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.8" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1053.8" y="595.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.8" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1053.8" y="579.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.8" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1053.8" y="563.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1056.8" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1053.8" y="547.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.8" y="558.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1053.8" y="531.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.8" y="542.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1053.8" y="515.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.8" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1053.8" y="499.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.8" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1053.8" y="483.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.8" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1053.8" y="467.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.8" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1053.8" y="451.0" width="22.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.8" y="462.0">P..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1053.8" y="435.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.8" y="446.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1053.8" y="419.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="430.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1053.8" y="403.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.8" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1053.8" y="387.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.8" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1053.8" y="371.0" width="22.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.8" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1053.8" y="355.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.8" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.92%)</title><rect x="1053.8" y="339.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.8" y="350.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.92%)</title><rect x="1053.8" y="323.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.8" y="334.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.92%)</title><rect x="1053.8" y="307.0" width="22.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.8" y="318.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.92%)</title><rect x="1053.8" y="291.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="302.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.92%)</title><rect x="1053.8" y="275.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.8" y="286.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.92%)</title><rect x="1053.8" y="259.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.8" y="270.0">P..</text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.92%)</title><rect x="1053.8" y="243.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.8" y="254.0">P..</text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.92%)</title><rect x="1053.8" y="227.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1056.8" y="238.0">P..</text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 1.92%)</title><rect x="1053.8" y="211.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.8" y="222.0">C..</text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.92%)</title><rect x="1053.8" y="195.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1056.8" y="206.0">T..</text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.92%)</title><rect x="1053.8" y="179.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.8" y="190.0">T..</text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 1.92%)</title><rect x="1053.8" y="163.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="174.0">T..</text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.92%)</title><rect x="1076.5" y="659.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.5" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.92%)</title><rect x="1076.5" y="643.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.5" y="654.0">P..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.92%)</title><rect x="1076.5" y="627.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.5" y="638.0">G..</text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 1.92%)</title><rect x="1076.5" y="611.0" width="22.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.5" y="622.0">G..</text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 1.92%)</title><rect x="1076.5" y="595.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.5" y="606.0">I..</text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 1.92%)</title><rect x="1076.5" y="579.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.5" y="590.0">I..</text>
</g>
<g>
<title>Parse::make_node_notes(Node_Notes*) (1 samples, 1.92%)</title><rect x="1099.2" y="707.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="718.0">P..</text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.92%)</title><rect x="1121.9" y="835.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.9" y="846.0">P..</text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 1.92%)</title><rect x="1121.9" y="819.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.9" y="830.0">C..</text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 3.85%)</title><rect x="1144.6" y="867.0" width="45.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.6" y="878.0">Comp..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 3.85%)</title><rect x="1144.6" y="851.0" width="45.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.6" y="862.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 3.85%)</title><rect x="1144.6" y="835.0" width="45.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.6" y="846.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 3.85%)</title><rect x="1144.6" y="819.0" width="45.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.6" y="830.0">Comp..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.92%)</title><rect x="1144.6" y="803.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.6" y="814.0">C..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.92%)</title><rect x="1144.6" y="787.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.6" y="798.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.92%)</title><rect x="1144.6" y="771.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.6" y="782.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.92%)</title><rect x="1144.6" y="755.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.6" y="766.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.92%)</title><rect x="1144.6" y="739.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.6" y="750.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.92%)</title><rect x="1144.6" y="723.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.6" y="734.0">G..</text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 1.92%)</title><rect x="1144.6" y="707.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.6" y="718.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.92%)</title><rect x="1144.6" y="691.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.6" y="702.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 1.92%)</title><rect x="1144.6" y="675.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="686.0">G..</text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 1.92%)</title><rect x="1144.6" y="659.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.6" y="670.0">c..</text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 1.92%)</title><rect x="1144.6" y="643.0" width="22.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.6" y="654.0">c..</text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 1.92%)</title><rect x="1144.6" y="627.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="638.0">c..</text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 1.92%)</title><rect x="1144.6" y="611.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="622.0">c..</text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 1.92%)</title><rect x="1144.6" y="595.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.6" y="606.0">c..</text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 1.92%)</title><rect x="1167.3" y="803.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.3" y="814.0">C..</text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 1.92%)</title><rect x="1167.3" y="787.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.3" y="798.0">L..</text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 1.92%)</title><rect x="1167.3" y="771.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="782.0">L..</text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 1.92%)</title><rect x="1167.3" y="755.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="766.0">L..</text>
</g>
</g>
</svg>
