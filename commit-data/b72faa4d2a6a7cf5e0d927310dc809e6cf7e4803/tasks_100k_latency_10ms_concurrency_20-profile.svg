<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1477"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1477"> </text>
<g id="frames">
<g>
<title>all (251 samples, 100.00%)</title><rect x="10.0" y="1443.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1454.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.40%)</title><rect x="10.0" y="1427.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 7.57%)</title><rect x="14.7" y="1427.0" width="89.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1438.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.40%)</title><rect x="14.7" y="1411.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.40%)</title><rect x="14.7" y="1395.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.7" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.40%)</title><rect x="14.7" y="1379.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.40%)</title><rect x="14.7" y="1363.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.40%)</title><rect x="14.7" y="1347.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 7.17%)</title><rect x="19.4" y="1411.0" width="84.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="1422.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.40%)</title><rect x="19.4" y="1395.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.4" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.40%)</title><rect x="19.4" y="1379.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.4" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="19.4" y="1363.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="19.4" y="1347.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="19.4" y="1331.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="19.4" y="1315.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="19.4" y="1299.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.4" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.40%)</title><rect x="19.4" y="1283.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="19.4" y="1267.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="19.4" y="1251.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.40%)</title><rect x="19.4" y="1235.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$253/1131287595.apply (1 samples, 0.40%)</title><rect x="19.4" y="1219.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.39%)</title><rect x="24.1" y="1395.0" width="28.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.1" y="1406.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1786808100.accept (4 samples, 1.59%)</title><rect x="24.1" y="1379.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (4 samples, 1.59%)</title><rect x="24.1" y="1363.0" width="18.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.1" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.40%)</title><rect x="24.1" y="1347.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.1" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.20%)</title><rect x="28.8" y="1347.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.20%)</title><rect x="28.8" y="1331.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.40%)</title><rect x="42.9" y="1379.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.40%)</title><rect x="42.9" y="1363.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.40%)</title><rect x="42.9" y="1347.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.9" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$EmptyMap.values (1 samples, 0.40%)</title><rect x="42.9" y="1331.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.40%)</title><rect x="47.6" y="1379.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.40%)</title><rect x="47.6" y="1363.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.40%)</title><rect x="47.6" y="1347.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.40%)</title><rect x="47.6" y="1331.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.6" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.40%)</title><rect x="47.6" y="1315.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.40%)</title><rect x="47.6" y="1299.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.38%)</title><rect x="52.3" y="1395.0" width="51.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.3" y="1406.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.38%)</title><rect x="52.3" y="1379.0" width="51.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.3" y="1390.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.19%)</title><rect x="57.0" y="1363.0" width="37.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.0" y="1374.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (2 samples, 0.80%)</title><rect x="57.0" y="1347.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (2 samples, 0.80%)</title><rect x="57.0" y="1331.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.0" y="1342.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.80%)</title><rect x="57.0" y="1315.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="60.0" y="1326.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.40%)</title><rect x="57.0" y="1299.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="60.0" y="1310.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.40%)</title><rect x="57.0" y="1283.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="60.0" y="1294.0"></text>
</g>
<g>
<title>ServiceUtil::visible_oop(oopDesc*) (1 samples, 0.40%)</title><rect x="61.7" y="1299.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.39%)</title><rect x="66.4" y="1347.0" width="28.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.4" y="1358.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.39%)</title><rect x="66.4" y="1331.0" width="28.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.4" y="1342.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 2.39%)</title><rect x="66.4" y="1315.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.4" y="1326.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 2.39%)</title><rect x="66.4" y="1299.0" width="28.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.4" y="1310.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.20%)</title><rect x="66.4" y="1283.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.40%)</title><rect x="75.8" y="1267.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.40%)</title><rect x="75.8" y="1251.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.40%)</title><rect x="75.8" y="1235.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.40%)</title><rect x="75.8" y="1219.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.40%)</title><rect x="75.8" y="1203.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.40%)</title><rect x="75.8" y="1187.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.40%)</title><rect x="75.8" y="1171.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.20%)</title><rect x="80.5" y="1283.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.20%)</title><rect x="80.5" y="1267.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 1.20%)</title><rect x="80.5" y="1251.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.5" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 1.20%)</title><rect x="80.5" y="1235.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.40%)</title><rect x="94.6" y="1363.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.40%)</title><rect x="94.6" y="1347.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.40%)</title><rect x="94.6" y="1331.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.40%)</title><rect x="94.6" y="1315.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.40%)</title><rect x="94.6" y="1299.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.6" y="1310.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.40%)</title><rect x="94.6" y="1283.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.6" y="1294.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.40%)</title><rect x="94.6" y="1267.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.6" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.40%)</title><rect x="94.6" y="1251.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.6" y="1262.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.40%)</title><rect x="94.6" y="1235.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="99.3" y="1363.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="99.3" y="1347.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.40%)</title><rect x="99.3" y="1331.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.3" y="1342.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.40%)</title><rect x="99.3" y="1315.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.3" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.40%)</title><rect x="99.3" y="1299.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.3" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.size (1 samples, 0.40%)</title><rect x="99.3" y="1283.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.run (137 samples, 54.58%)</title><rect x="104.0" y="1427.0" width="644.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.0" y="1438.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (137 samples, 54.58%)</title><rect x="104.0" y="1411.0" width="644.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.0" y="1422.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (137 samples, 54.58%)</title><rect x="104.0" y="1395.0" width="644.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.0" y="1406.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/285797256.run (132 samples, 52.59%)</title><rect x="104.0" y="1379.0" width="620.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.0" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/285797256.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (132 samples, 52.59%)</title><rect x="104.0" y="1363.0" width="620.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.0" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (132 samples, 52.59%)</title><rect x="104.0" y="1347.0" width="620.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.0" y="1358.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (123 samples, 49.00%)</title><rect x="104.0" y="1331.0" width="578.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.0" y="1342.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (30 samples, 11.95%)</title><rect x="104.0" y="1315.0" width="141.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.0" y="1326.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="118.1" y="1299.0" width="4.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="121.1" y="1310.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="118.1" y="1283.0" width="4.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="121.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 10.36%)</title><rect x="122.8" y="1299.0" width="122.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.8" y="1310.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 10.36%)</title><rect x="122.8" y="1283.0" width="122.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="125.8" y="1294.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.96%)</title><rect x="122.8" y="1267.0" width="117.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.8" y="1278.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.96%)</title><rect x="122.8" y="1251.0" width="117.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.8" y="1262.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 9.96%)</title><rect x="122.8" y="1235.0" width="117.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.8" y="1246.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 4.38%)</title><rect x="122.8" y="1219.0" width="51.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.8" y="1230.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 2.79%)</title><rect x="122.8" y="1203.0" width="32.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="125.8" y="1214.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 2.79%)</title><rect x="122.8" y="1187.0" width="32.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="125.8" y="1198.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 2.79%)</title><rect x="122.8" y="1171.0" width="32.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.8" y="1182.0">co..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 2.79%)</title><rect x="122.8" y="1155.0" width="32.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.8" y="1166.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 2.39%)</title><rect x="122.8" y="1139.0" width="28.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.8" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.80%)</title><rect x="141.6" y="1123.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="151.0" y="1139.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.59%)</title><rect x="155.7" y="1203.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.59%)</title><rect x="155.7" y="1187.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.7" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="155.7" y="1171.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="158.7" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.40%)</title><rect x="155.7" y="1155.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="158.7" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.40%)</title><rect x="155.7" y="1139.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="158.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.20%)</title><rect x="160.4" y="1171.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.20%)</title><rect x="160.4" y="1155.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.40%)</title><rect x="160.4" y="1139.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.40%)</title><rect x="165.1" y="1139.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="168.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.40%)</title><rect x="165.1" y="1123.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.40%)</title><rect x="169.8" y="1139.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="169.8" y="1123.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 5.58%)</title><rect x="174.5" y="1219.0" width="65.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.5" y="1230.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.40%)</title><rect x="174.5" y="1203.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="174.5" y="1187.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="174.5" y="1171.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.40%)</title><rect x="174.5" y="1155.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 5.18%)</title><rect x="179.2" y="1203.0" width="61.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.2" y="1214.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 3.19%)</title><rect x="179.2" y="1187.0" width="37.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.2" y="1198.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="188.6" y="1171.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="188.6" y="1155.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="188.6" y="1139.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.99%)</title><rect x="193.3" y="1171.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.3" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.99%)</title><rect x="216.9" y="1187.0" width="23.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.9" y="1198.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.99%)</title><rect x="216.9" y="1171.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.9" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.99%)</title><rect x="216.9" y="1155.0" width="23.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.9" y="1166.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="216.9" y="1139.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.40%)</title><rect x="216.9" y="1123.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.40%)</title><rect x="216.9" y="1107.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="216.9" y="1091.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.40%)</title><rect x="221.6" y="1139.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.40%)</title><rect x="221.6" y="1123.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.20%)</title><rect x="226.3" y="1139.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.20%)</title><rect x="226.3" y="1123.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.20%)</title><rect x="226.3" y="1107.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.20%)</title><rect x="226.3" y="1091.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.20%)</title><rect x="226.3" y="1075.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.3" y="1086.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.80%)</title><rect x="231.0" y="1059.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.0" y="1070.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor8.newInstance (2 samples, 0.80%)</title><rect x="231.0" y="1043.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.40%)</title><rect x="240.4" y="1267.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.4" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="240.4" y="1251.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="243.4" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="240.4" y="1235.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="243.4" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="240.4" y="1219.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="243.4" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="240.4" y="1203.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="243.4" y="1214.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="240.4" y="1187.0" width="4.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="243.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (93 samples, 37.05%)</title><rect x="245.1" y="1315.0" width="437.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.1" y="1326.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (9 samples, 3.59%)</title><rect x="245.1" y="1299.0" width="42.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.1" y="1310.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 3.19%)</title><rect x="249.8" y="1283.0" width="37.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.8" y="1294.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 2.39%)</title><rect x="259.2" y="1267.0" width="28.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.2" y="1278.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.40%)</title><rect x="259.2" y="1251.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="259.2" y="1235.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="259.2" y="1219.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="259.2" y="1203.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 1.99%)</title><rect x="263.9" y="1251.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.9" y="1262.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.99%)</title><rect x="263.9" y="1235.0" width="23.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.9" y="1246.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.40%)</title><rect x="282.7" y="1219.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.59%)</title><rect x="287.4" y="1299.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (16 samples, 6.37%)</title><rect x="306.2" y="1299.0" width="75.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.2" y="1310.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (16 samples, 6.37%)</title><rect x="306.2" y="1283.0" width="75.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.2" y="1294.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.59%)</title><rect x="310.9" y="1267.0" width="18.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.59%)</title><rect x="310.9" y="1251.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.59%)</title><rect x="310.9" y="1235.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.80%)</title><rect x="310.9" y="1219.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.80%)</title><rect x="310.9" y="1203.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.9" y="1214.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.80%)</title><rect x="310.9" y="1187.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.9" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.80%)</title><rect x="310.9" y="1171.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="313.9" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.40%)</title><rect x="310.9" y="1155.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.9" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.40%)</title><rect x="310.9" y="1139.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="313.9" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="315.6" y="1155.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="318.6" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="315.6" y="1139.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="318.6" y="1150.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.40%)</title><rect x="315.6" y="1123.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="318.6" y="1134.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.40%)</title><rect x="315.6" y="1107.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="318.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.80%)</title><rect x="320.3" y="1219.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="323.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.80%)</title><rect x="329.7" y="1267.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.80%)</title><rect x="329.7" y="1251.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.80%)</title><rect x="329.7" y="1235.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.7" y="1246.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 3.59%)</title><rect x="339.1" y="1267.0" width="42.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.1" y="1278.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 3.59%)</title><rect x="339.1" y="1251.0" width="42.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.1" y="1262.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.20%)</title><rect x="339.1" y="1235.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.20%)</title><rect x="339.1" y="1219.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.20%)</title><rect x="339.1" y="1203.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.20%)</title><rect x="339.1" y="1187.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.80%)</title><rect x="343.8" y="1171.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.80%)</title><rect x="343.8" y="1155.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.39%)</title><rect x="353.2" y="1235.0" width="28.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.39%)</title><rect x="353.2" y="1219.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.2" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.20%)</title><rect x="367.3" y="1203.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.40%)</title><rect x="372.0" y="1187.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.40%)</title><rect x="376.7" y="1187.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 23.11%)</title><rect x="381.4" y="1299.0" width="272.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.4" y="1310.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 23.11%)</title><rect x="381.4" y="1283.0" width="272.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.4" y="1294.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/157864370.process (53 samples, 21.12%)</title><rect x="395.5" y="1267.0" width="249.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.5" y="1278.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 21.12%)</title><rect x="395.5" y="1251.0" width="249.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.5" y="1262.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.40%)</title><rect x="395.5" y="1235.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="398.5" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="395.5" y="1219.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="398.5" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="395.5" y="1203.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="398.5" y="1214.0"></text>
</g>
<g>
<title>CompiledIC_before(nmethod*, unsigned char*) (1 samples, 0.40%)</title><rect x="395.5" y="1187.0" width="4.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="398.5" y="1198.0"></text>
</g>
<g>
<title>CompiledIC::CompiledIC(nmethod*, NativeCall*) (1 samples, 0.40%)</title><rect x="395.5" y="1171.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="398.5" y="1182.0"></text>
</g>
<g>
<title>RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) (1 samples, 0.40%)</title><rect x="395.5" y="1155.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="398.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (52 samples, 20.72%)</title><rect x="400.2" y="1235.0" width="244.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.2" y="1246.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="404.9" y="1219.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.9" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="404.9" y="1203.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.9" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="404.9" y="1187.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.9" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="404.9" y="1171.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.40%)</title><rect x="404.9" y="1155.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 19.52%)</title><rect x="409.6" y="1219.0" width="230.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.6" y="1230.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 19.52%)</title><rect x="409.6" y="1203.0" width="230.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.6" y="1214.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (41 samples, 16.33%)</title><rect x="433.1" y="1187.0" width="192.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="436.1" y="1198.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.59%)</title><rect x="451.9" y="1171.0" width="18.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="454.9" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="470.7" y="1171.0" width="4.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="473.7" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.40%)</title><rect x="475.4" y="1171.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="478.4" y="1182.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (31 samples, 12.35%)</title><rect x="480.1" y="1171.0" width="145.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="483.1" y="1182.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="498.9" y="1155.0" width="4.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="501.9" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="498.9" y="1139.0" width="4.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="501.9" y="1150.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.59%)</title><rect x="503.6" y="1155.0" width="18.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="506.6" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.40%)</title><rect x="522.4" y="1155.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="525.4" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.78%)</title><rect x="527.1" y="1155.0" width="56.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="530.1" y="1166.0">__pthr..</text>
</g>
<g>
<title>_init (5 samples, 1.99%)</title><rect x="583.5" y="1155.0" width="23.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="586.5" y="1166.0">_..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.40%)</title><rect x="607.1" y="1155.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="610.1" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="611.8" y="1155.0" width="4.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="614.8" y="1166.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.80%)</title><rect x="616.5" y="1155.0" width="9.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="619.5" y="1166.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.80%)</title><rect x="625.9" y="1187.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="628.9" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.40%)</title><rect x="635.3" y="1187.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="638.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="640.0" y="1219.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="643.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="640.0" y="1203.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 0.40%)</title><rect x="640.0" y="1187.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.0" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.40%)</title><rect x="644.7" y="1267.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.7" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.40%)</title><rect x="644.7" y="1251.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.7" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="649.4" y="1267.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="652.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.39%)</title><rect x="654.1" y="1299.0" width="28.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.1" y="1310.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.20%)</title><rect x="668.2" y="1283.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="671.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.20%)</title><rect x="668.2" y="1267.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/204023945.accept (3 samples, 1.20%)</title><rect x="668.2" y="1251.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (3 samples, 1.20%)</title><rect x="668.2" y="1235.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.2" y="1246.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.20%)</title><rect x="668.2" y="1219.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.2" y="1230.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.20%)</title><rect x="668.2" y="1203.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.2" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="677.6" y="1187.0" width="4.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="680.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="677.6" y="1171.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="680.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.99%)</title><rect x="682.3" y="1331.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.3" y="1342.0">c..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.80%)</title><rect x="696.4" y="1315.0" width="9.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="699.4" y="1326.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.80%)</title><rect x="696.4" y="1299.0" width="9.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="699.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.59%)</title><rect x="705.8" y="1331.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="708.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.40%)</title><rect x="719.9" y="1315.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="722.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="719.9" y="1299.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$269/1639981591.accept (1 samples, 0.40%)</title><rect x="719.9" y="1283.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="722.9" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (1 samples, 0.40%)</title><rect x="719.9" y="1267.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1240909360.complete (1 samples, 0.40%)</title><rect x="719.9" y="1251.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="722.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (1 samples, 0.40%)</title><rect x="719.9" y="1235.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="722.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.40%)</title><rect x="719.9" y="1219.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="722.9" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.40%)</title><rect x="719.9" y="1203.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.9" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.40%)</title><rect x="719.9" y="1187.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.9" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="719.9" y="1171.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.9" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="719.9" y="1155.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.99%)</title><rect x="724.6" y="1379.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.6" y="1390.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.20%)</title><rect x="734.0" y="1363.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.40%)</title><rect x="734.0" y="1347.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.40%)</title><rect x="734.0" y="1331.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="734.0" y="1315.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="734.0" y="1299.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="737.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="734.0" y="1283.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.80%)</title><rect x="738.7" y="1347.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="741.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.80%)</title><rect x="738.7" y="1331.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.80%)</title><rect x="738.7" y="1315.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.80%)</title><rect x="738.7" y="1299.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.80%)</title><rect x="748.1" y="1427.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.1" y="1438.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.40%)</title><rect x="748.1" y="1411.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.40%)</title><rect x="752.8" y="1411.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.8" y="1422.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.40%)</title><rect x="752.8" y="1395.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="755.8" y="1406.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.40%)</title><rect x="752.8" y="1379.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.8" y="1390.0"></text>
</g>
<g>
<title>start_thread (92 samples, 36.65%)</title><rect x="757.5" y="1427.0" width="432.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="760.5" y="1438.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (92 samples, 36.65%)</title><rect x="757.5" y="1411.0" width="432.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="760.5" y="1422.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.19%)</title><rect x="757.5" y="1395.0" width="37.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="760.5" y="1406.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.19%)</title><rect x="757.5" y="1379.0" width="37.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.5" y="1390.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 3.19%)</title><rect x="757.5" y="1363.0" width="37.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.5" y="1374.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.39%)</title><rect x="757.5" y="1347.0" width="28.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="760.5" y="1358.0">G1..</text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.40%)</title><rect x="785.7" y="1347.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.7" y="1358.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="790.4" y="1347.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="793.4" y="1358.0"></text>
</g>
<g>
<title>JavaThread::run() (84 samples, 33.47%)</title><rect x="795.1" y="1395.0" width="394.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="798.1" y="1406.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (84 samples, 33.47%)</title><rect x="795.1" y="1379.0" width="394.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="798.1" y="1390.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (84 samples, 33.47%)</title><rect x="795.1" y="1363.0" width="394.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.1" y="1374.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (83 samples, 33.07%)</title><rect x="795.1" y="1347.0" width="390.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.1" y="1358.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 32.67%)</title><rect x="795.1" y="1331.0" width="385.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.1" y="1342.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 32.67%)</title><rect x="795.1" y="1315.0" width="385.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.1" y="1326.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 19.12%)</title><rect x="795.1" y="1299.0" width="225.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="798.1" y="1310.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.40%)</title><rect x="795.1" y="1283.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.1" y="1294.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.40%)</title><rect x="795.1" y="1267.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="798.1" y="1278.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.40%)</title><rect x="795.1" y="1251.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.1" y="1262.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.80%)</title><rect x="799.8" y="1283.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.8" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.80%)</title><rect x="799.8" y="1267.0" width="9.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.8" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.80%)</title><rect x="799.8" y="1251.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.8" y="1262.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.59%)</title><rect x="809.2" y="1283.0" width="18.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="812.2" y="1294.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.40%)</title><rect x="809.2" y="1267.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="812.2" y="1278.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.20%)</title><rect x="813.9" y="1267.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="816.9" y="1278.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.20%)</title><rect x="813.9" y="1251.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.9" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.20%)</title><rect x="828.0" y="1283.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="831.0" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.20%)</title><rect x="828.0" y="1267.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.0" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.80%)</title><rect x="828.0" y="1251.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.0" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="837.4" y="1251.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.4" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.40%)</title><rect x="842.1" y="1283.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="845.1" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 14.74%)</title><rect x="846.8" y="1283.0" width="174.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="849.8" y="1294.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.40%)</title><rect x="846.8" y="1267.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.8" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.20%)</title><rect x="851.5" y="1267.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.5" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.40%)</title><rect x="851.5" y="1251.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.80%)</title><rect x="856.2" y="1251.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="859.2" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.80%)</title><rect x="856.2" y="1235.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.80%)</title><rect x="865.6" y="1267.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.80%)</title><rect x="865.6" y="1251.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.6" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.59%)</title><rect x="875.0" y="1267.0" width="18.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="878.0" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.40%)</title><rect x="884.4" y="1251.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.4" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.40%)</title><rect x="889.1" y="1251.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.1" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.40%)</title><rect x="889.1" y="1235.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="892.1" y="1246.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.40%)</title><rect x="889.1" y="1219.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.79%)</title><rect x="893.8" y="1267.0" width="32.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.8" y="1278.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.40%)</title><rect x="917.3" y="1251.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.3" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="917.3" y="1235.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.3" y="1246.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.40%)</title><rect x="922.0" y="1251.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="925.0" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.40%)</title><rect x="926.7" y="1267.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.7" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.40%)</title><rect x="931.4" y="1267.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.4" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.40%)</title><rect x="931.4" y="1251.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.4" y="1262.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 3.19%)</title><rect x="936.1" y="1267.0" width="37.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.1" y="1278.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.40%)</title><rect x="936.1" y="1251.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.1" y="1262.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.40%)</title><rect x="936.1" y="1235.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.40%)</title><rect x="936.1" y="1219.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.1" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.79%)</title><rect x="940.8" y="1251.0" width="32.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.8" y="1262.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 2.39%)</title><rect x="945.5" y="1235.0" width="28.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.5" y="1246.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.59%)</title><rect x="945.5" y="1219.0" width="18.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.5" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.80%)</title><rect x="964.3" y="1219.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.40%)</title><rect x="973.7" y="1267.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.20%)</title><rect x="978.4" y="1267.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.4" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="987.8" y="1251.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.80%)</title><rect x="992.5" y="1267.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.5" y="1278.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="997.3" y="1251.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.3" y="1262.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.59%)</title><rect x="1002.0" y="1267.0" width="18.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.0" y="1278.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.80%)</title><rect x="1011.4" y="1251.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.4" y="1262.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 10.76%)</title><rect x="1020.8" y="1299.0" width="126.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1023.8" y="1310.0">Compile::Optimiz..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1020.8" y="1283.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1023.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.40%)</title><rect x="1020.8" y="1267.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1020.8" y="1251.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.8" y="1262.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.40%)</title><rect x="1020.8" y="1235.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.8" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="1020.8" y="1219.0" width="4.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1023.8" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="1020.8" y="1203.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1023.8" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="1025.5" y="1283.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 8.76%)</title><rect x="1030.2" y="1283.0" width="103.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.2" y="1294.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.20%)</title><rect x="1030.2" y="1267.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.2" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 6.37%)</title><rect x="1044.3" y="1267.0" width="75.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.3" y="1278.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 6.37%)</title><rect x="1044.3" y="1251.0" width="75.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.3" y="1262.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.40%)</title><rect x="1049.0" y="1235.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 5.58%)</title><rect x="1053.7" y="1235.0" width="65.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.7" y="1246.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.80%)</title><rect x="1110.1" y="1219.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.80%)</title><rect x="1119.5" y="1267.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1128.9" y="1267.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.9" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1128.9" y="1251.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.9" y="1262.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1128.9" y="1235.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="1246.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.40%)</title><rect x="1128.9" y="1219.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1133.6" y="1283.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1133.6" y="1267.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.6" y="1278.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1133.6" y="1251.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1133.6" y="1235.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1133.6" y="1219.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.6" y="1230.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.40%)</title><rect x="1133.6" y="1203.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.6" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.40%)</title><rect x="1138.3" y="1283.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.3" y="1294.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.40%)</title><rect x="1138.3" y="1267.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.3" y="1278.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1138.3" y="1251.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.3" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.40%)</title><rect x="1138.3" y="1235.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.3" y="1246.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.40%)</title><rect x="1138.3" y="1219.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.3" y="1230.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.40%)</title><rect x="1138.3" y="1203.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.3" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.40%)</title><rect x="1138.3" y="1187.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.3" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1138.3" y="1171.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1143.0" y="1283.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1143.0" y="1267.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.0" y="1278.0"></text>
</g>
<g>
<title>OrLNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1143.0" y="1251.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.0" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.39%)</title><rect x="1147.7" y="1299.0" width="28.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.7" y="1310.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.39%)</title><rect x="1147.7" y="1283.0" width="28.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.7" y="1294.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.39%)</title><rect x="1147.7" y="1267.0" width="28.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="1278.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.39%)</title><rect x="1147.7" y="1251.0" width="28.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="1262.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.39%)</title><rect x="1147.7" y="1235.0" width="28.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="1246.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.39%)</title><rect x="1147.7" y="1219.0" width="28.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="1230.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1147.7" y="1203.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.7" y="1214.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1147.7" y="1187.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.7" y="1198.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1147.7" y="1171.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1147.7" y="1155.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.7" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1147.7" y="1139.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.7" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1147.7" y="1123.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.7" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1147.7" y="1107.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1147.7" y="1091.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1147.7" y="1075.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.7" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1147.7" y="1059.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.7" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1147.7" y="1043.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1147.7" y="1027.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1147.7" y="1011.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.7" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1147.7" y="995.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1147.7" y="979.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.7" y="990.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1147.7" y="963.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.7" y="974.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.40%)</title><rect x="1147.7" y="947.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.7" y="958.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.40%)</title><rect x="1147.7" y="931.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.7" y="942.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.40%)</title><rect x="1147.7" y="915.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.99%)</title><rect x="1152.4" y="1203.0" width="23.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.4" y="1214.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.99%)</title><rect x="1152.4" y="1187.0" width="23.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.99%)</title><rect x="1152.4" y="1171.0" width="23.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.99%)</title><rect x="1152.4" y="1155.0" width="23.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.4" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.99%)</title><rect x="1152.4" y="1139.0" width="23.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.99%)</title><rect x="1152.4" y="1123.0" width="23.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1134.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1152.4" y="1107.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1152.4" y="1091.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1152.4" y="1075.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1152.4" y="1059.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.4" y="1043.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1152.4" y="1027.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1152.4" y="1011.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1152.4" y="995.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1152.4" y="979.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1152.4" y="963.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.4" y="947.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1152.4" y="931.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1152.4" y="915.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1152.4" y="899.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1152.4" y="883.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1152.4" y="867.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.4" y="851.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1152.4" y="835.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1152.4" y="819.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1152.4" y="803.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1152.4" y="787.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1152.4" y="771.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1152.4" y="755.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1152.4" y="739.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1152.4" y="723.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1152.4" y="707.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1152.4" y="691.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1152.4" y="675.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1152.4" y="659.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1152.4" y="643.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1152.4" y="627.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1152.4" y="611.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1152.4" y="595.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1152.4" y="579.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1152.4" y="563.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1152.4" y="547.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1152.4" y="531.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1152.4" y="515.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="526.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.40%)</title><rect x="1152.4" y="499.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="510.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.40%)</title><rect x="1152.4" y="483.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.4" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.40%)</title><rect x="1152.4" y="467.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.40%)</title><rect x="1152.4" y="451.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1157.1" y="835.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1157.1" y="819.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="830.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.40%)</title><rect x="1157.1" y="803.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1157.1" y="787.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1157.1" y="771.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1157.1" y="755.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.1" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.8" y="1107.0" width="14.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.8" y="1091.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.8" y="1075.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1161.8" y="1059.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1161.8" y="1043.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1161.8" y="1027.0" width="14.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1161.8" y="1011.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.8" y="995.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.8" y="979.0" width="14.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1161.8" y="963.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1161.8" y="947.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1161.8" y="931.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1161.8" y="915.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.8" y="899.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.8" y="883.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1161.8" y="867.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1161.8" y="851.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1161.8" y="835.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1161.8" y="819.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.8" y="803.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.8" y="787.0" width="14.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1161.8" y="771.0" width="14.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1161.8" y="755.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1161.8" y="739.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1161.8" y="723.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.8" y="707.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.8" y="691.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1161.8" y="675.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1161.8" y="659.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1161.8" y="643.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1161.8" y="627.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1161.8" y="611.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1161.8" y="595.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1161.8" y="579.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1161.8" y="563.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1161.8" y="547.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1161.8" y="531.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1161.8" y="515.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1161.8" y="499.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1161.8" y="483.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1161.8" y="467.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1161.8" y="451.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1161.8" y="435.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1161.8" y="419.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1161.8" y="403.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1161.8" y="387.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1161.8" y="371.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1161.8" y="355.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1161.8" y="339.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1161.8" y="323.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1161.8" y="307.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1161.8" y="291.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1161.8" y="275.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1161.8" y="259.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1161.8" y="243.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1161.8" y="227.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1161.8" y="211.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1161.8" y="195.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1161.8" y="179.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.8" y="163.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.8" y="147.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1161.8" y="131.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.40%)</title><rect x="1161.8" y="115.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.40%)</title><rect x="1161.8" y="99.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="1161.8" y="83.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.8" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="1161.8" y="67.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.40%)</title><rect x="1161.8" y="51.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.40%)</title><rect x="1161.8" y="35.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.8" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.5" y="323.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1166.5" y="307.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1166.5" y="291.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1166.5" y="275.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1166.5" y="259.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1166.5" y="243.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="254.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.5" y="227.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="238.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.40%)</title><rect x="1166.5" y="211.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.40%)</title><rect x="1166.5" y="195.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.40%)</title><rect x="1166.5" y="179.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.40%)</title><rect x="1166.5" y="163.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="174.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.40%)</title><rect x="1166.5" y="147.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.40%)</title><rect x="1166.5" y="131.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.40%)</title><rect x="1166.5" y="115.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="126.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.40%)</title><rect x="1166.5" y="99.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="110.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1171.2" y="627.0" width="4.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.40%)</title><rect x="1175.9" y="1299.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="1310.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1175.9" y="1283.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="1294.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1180.6" y="1331.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="1342.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.40%)</title><rect x="1180.6" y="1315.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="1326.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.40%)</title><rect x="1180.6" y="1299.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="1310.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.40%)</title><rect x="1180.6" y="1283.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="1294.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.40%)</title><rect x="1180.6" y="1267.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="1278.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1180.6" y="1251.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="1262.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1180.6" y="1235.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1180.6" y="1219.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1180.6" y="1203.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1180.6" y="1187.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="1198.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.40%)</title><rect x="1180.6" y="1171.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1182.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.40%)</title><rect x="1180.6" y="1155.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.40%)</title><rect x="1180.6" y="1139.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.40%)</title><rect x="1185.3" y="1347.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="1358.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.40%)</title><rect x="1185.3" y="1331.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="1342.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.40%)</title><rect x="1185.3" y="1315.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.3" y="1326.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.40%)</title><rect x="1185.3" y="1299.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="1310.0"></text>
</g>
</g>
</svg>
