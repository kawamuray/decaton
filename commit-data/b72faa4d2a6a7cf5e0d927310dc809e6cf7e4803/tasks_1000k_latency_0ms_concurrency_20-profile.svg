<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1942" onload="init(evt)" viewBox="0 0 1200 1942" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1925"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1925"> </text>
<g id="frames">
<g>
<title>all (1,382 samples, 100.00%)</title><rect x="10.0" y="1891.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1902.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (253 samples, 18.31%)</title><rect x="10.0" y="1875.0" width="216.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1886.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (253 samples, 18.31%)</title><rect x="10.0" y="1859.0" width="216.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1870.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.43%)</title><rect x="10.9" y="1843.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.43%)</title><rect x="10.9" y="1827.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1914520408.accept (6 samples, 0.43%)</title><rect x="10.9" y="1811.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.43%)</title><rect x="10.9" y="1795.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.36%)</title><rect x="11.7" y="1779.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.7" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.36%)</title><rect x="11.7" y="1763.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.7" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.07%)</title><rect x="15.1" y="1747.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.1" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="15.1" y="1731.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.07%)</title><rect x="16.0" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="16.0" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="16.0" y="1811.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.07%)</title><rect x="16.0" y="1795.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="16.0" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="16.8" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="16.8" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="16.8" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="16.8" y="1795.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="16.8" y="1779.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (179 samples, 12.95%)</title><rect x="17.7" y="1843.0" width="152.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="1854.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/485608507.accept (171 samples, 12.37%)</title><rect x="18.5" y="1827.0" width="146.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.5" y="1838.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (171 samples, 12.37%)</title><rect x="18.5" y="1811.0" width="146.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.5" y="1822.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.14%)</title><rect x="18.5" y="1795.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (139 samples, 10.06%)</title><rect x="20.2" y="1795.0" width="118.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.2" y="1806.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (139 samples, 10.06%)</title><rect x="20.2" y="1779.0" width="118.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.2" y="1790.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (131 samples, 9.48%)</title><rect x="25.4" y="1763.0" width="111.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="1774.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (131 samples, 9.48%)</title><rect x="25.4" y="1747.0" width="111.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.4" y="1758.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (131 samples, 9.48%)</title><rect x="25.4" y="1731.0" width="111.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="1742.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (131 samples, 9.48%)</title><rect x="25.4" y="1715.0" width="111.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.4" y="1726.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (130 samples, 9.41%)</title><rect x="25.4" y="1699.0" width="111.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="1710.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 1.66%)</title><rect x="25.4" y="1683.0" width="19.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.4" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 1.66%)</title><rect x="25.4" y="1667.0" width="19.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.4" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (23 samples, 1.66%)</title><rect x="25.4" y="1651.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (107 samples, 7.74%)</title><rect x="45.0" y="1683.0" width="91.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.0" y="1694.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (107 samples, 7.74%)</title><rect x="45.0" y="1667.0" width="91.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.0" y="1678.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (107 samples, 7.74%)</title><rect x="45.0" y="1651.0" width="91.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.0" y="1662.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 5.21%)</title><rect x="74.9" y="1635.0" width="61.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.9" y="1646.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 5.21%)</title><rect x="74.9" y="1619.0" width="61.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.9" y="1630.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 4.70%)</title><rect x="74.9" y="1603.0" width="55.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="77.9" y="1614.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.36%)</title><rect x="76.6" y="1587.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="79.6" y="1598.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.14%)</title><rect x="80.9" y="1587.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="83.9" y="1598.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 2.75%)</title><rect x="82.6" y="1587.0" width="32.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="85.6" y="1598.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.30%)</title><rect x="115.0" y="1587.0" width="15.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="118.0" y="1598.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.43%)</title><rect x="130.4" y="1603.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="133.4" y="1614.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="135.5" y="1603.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="138.5" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="136.4" y="1699.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.4" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="136.4" y="1683.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.4" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="136.4" y="1667.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.4" y="1678.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="137.2" y="1763.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="140.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.07%)</title><rect x="138.9" y="1795.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.07%)</title><rect x="138.9" y="1779.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.9" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.07%)</title><rect x="139.8" y="1795.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="139.8" y="1779.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.8" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="139.8" y="1763.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.03%)</title><rect x="140.6" y="1795.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.6" y="1806.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 1.95%)</title><rect x="140.6" y="1779.0" width="23.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.6" y="1790.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.72%)</title><rect x="152.6" y="1763.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.51%)</title><rect x="153.4" y="1747.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.51%)</title><rect x="153.4" y="1731.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.4" y="1742.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.51%)</title><rect x="153.4" y="1715.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.4" y="1726.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="158.6" y="1699.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="161.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="159.4" y="1747.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="160.3" y="1747.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.3" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="161.1" y="1763.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="164.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="163.7" y="1779.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="163.7" y="1763.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="166.7" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="163.7" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="166.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="163.7" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="166.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="163.7" y="1715.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="166.7" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="164.5" y="1827.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="164.5" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="164.5" y="1795.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="164.5" y="1779.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.5" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="164.5" y="1763.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.5" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="164.5" y="1747.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.36%)</title><rect x="165.4" y="1827.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.36%)</title><rect x="165.4" y="1811.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.36%)</title><rect x="165.4" y="1795.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.36%)</title><rect x="165.4" y="1779.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.4" y="1790.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.36%)</title><rect x="165.4" y="1763.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="169.7" y="1827.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="169.7" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 4.70%)</title><rect x="170.5" y="1843.0" width="55.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="173.5" y="1854.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 4.70%)</title><rect x="170.5" y="1827.0" width="55.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.5" y="1838.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.53%)</title><rect x="170.5" y="1811.0" width="29.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.5" y="1822.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="170.5" y="1795.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.5" y="1806.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.07%)</title><rect x="170.5" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="173.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.46%)</title><rect x="171.4" y="1795.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="174.4" y="1806.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.46%)</title><rect x="171.4" y="1779.0" width="29.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.4" y="1790.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.32%)</title><rect x="171.4" y="1763.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.4" y="1774.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.32%)</title><rect x="171.4" y="1747.0" width="27.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.4" y="1758.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.09%)</title><rect x="172.2" y="1731.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.65%)</title><rect x="172.2" y="1715.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.65%)</title><rect x="172.2" y="1699.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.2" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.65%)</title><rect x="172.2" y="1683.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.65%)</title><rect x="172.2" y="1667.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.65%)</title><rect x="172.2" y="1651.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.65%)</title><rect x="172.2" y="1635.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.65%)</title><rect x="172.2" y="1619.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.2" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.43%)</title><rect x="179.9" y="1715.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.43%)</title><rect x="179.9" y="1699.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.9" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (16 samples, 1.16%)</title><rect x="185.0" y="1731.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (16 samples, 1.16%)</title><rect x="185.0" y="1715.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (12 samples, 0.87%)</title><rect x="185.0" y="1699.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.0" y="1710.0"></text>
</g>
<g>
<title>java/util/Optional.of (12 samples, 0.87%)</title><rect x="185.0" y="1683.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.0" y="1694.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="191.9" y="1667.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="194.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.29%)</title><rect x="195.3" y="1699.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.3" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.29%)</title><rect x="195.3" y="1683.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.3" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="198.7" y="1763.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="198.7" y="1747.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="198.7" y="1731.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.7" y="1715.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.7" y="1726.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.7" y="1699.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.7" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="199.6" y="1763.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.07%)</title><rect x="199.6" y="1747.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.72%)</title><rect x="200.4" y="1811.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.65%)</title><rect x="200.4" y="1795.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.51%)</title><rect x="200.4" y="1779.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="200.4" y="1763.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1925129129.accept (1 samples, 0.07%)</title><rect x="200.4" y="1747.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="200.4" y="1731.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="200.4" y="1715.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="200.4" y="1699.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.07%)</title><rect x="200.4" y="1683.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.4" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="200.4" y="1667.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.4" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="200.4" y="1651.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.4" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="201.3" y="1763.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.3" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="201.3" y="1747.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.3" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="201.3" y="1731.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.3" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="201.3" y="1715.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.3" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="201.3" y="1699.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.3" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="201.3" y="1683.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.3" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$67/1400441417.get (1 samples, 0.07%)</title><rect x="201.3" y="1667.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.3" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="202.1" y="1763.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="202.1" y="1747.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.1" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.07%)</title><rect x="202.1" y="1731.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.1" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="203.0" y="1763.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.0" y="1774.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="203.0" y="1747.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.0" y="1758.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="203.0" y="1731.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.0" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.07%)</title><rect x="203.0" y="1715.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.22%)</title><rect x="203.8" y="1763.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.22%)</title><rect x="203.8" y="1747.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.8" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="203.8" y="1731.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.8" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="203.8" y="1715.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.8" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="203.8" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.8" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="203.8" y="1683.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.8" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="203.8" y="1667.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.8" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="204.7" y="1715.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.7" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="204.7" y="1699.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.7" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="204.7" y="1683.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.7" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="204.7" y="1667.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.7" y="1678.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="204.7" y="1651.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.7" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="205.5" y="1651.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.5" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="205.5" y="1635.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.5" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="205.5" y="1619.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.5" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="205.5" y="1603.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.5" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/705785571.get (1 samples, 0.07%)</title><rect x="205.5" y="1587.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="206.4" y="1779.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.14%)</title><rect x="206.4" y="1763.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.4" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="206.4" y="1747.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.4" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="207.2" y="1731.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.2" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="207.2" y="1715.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.2" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="207.2" y="1699.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.2" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="207.2" y="1683.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.2" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="207.2" y="1667.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.2" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="207.2" y="1651.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.2" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.07%)</title><rect x="207.2" y="1635.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="208.1" y="1795.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="208.1" y="1779.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="208.1" y="1763.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="208.1" y="1747.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="208.1" y="1731.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.1" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="208.1" y="1715.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.1" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="208.1" y="1699.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.1" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="208.1" y="1683.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.1" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.65%)</title><rect x="208.9" y="1811.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (9 samples, 0.65%)</title><rect x="208.9" y="1795.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (9 samples, 0.65%)</title><rect x="208.9" y="1779.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="208.9" y="1763.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="208.9" y="1747.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="208.9" y="1731.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.07%)</title><rect x="209.8" y="1731.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor$RecordingLevel.shouldRecord (1 samples, 0.07%)</title><rect x="209.8" y="1715.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="210.7" y="1763.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="210.7" y="1747.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.07%)</title><rect x="210.7" y="1731.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="210.7" y="1715.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.7" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="210.7" y="1699.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.7" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="210.7" y="1683.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.7" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.43%)</title><rect x="211.5" y="1763.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.5" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="211.5" y="1747.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.5" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="211.5" y="1731.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.5" y="1742.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="211.5" y="1715.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.5" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.29%)</title><rect x="212.4" y="1747.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.22%)</title><rect x="212.4" y="1731.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.22%)</title><rect x="212.4" y="1715.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.22%)</title><rect x="212.4" y="1699.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.22%)</title><rect x="212.4" y="1683.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.4" y="1694.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.14%)</title><rect x="213.2" y="1667.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.2" y="1678.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="213.2" y="1651.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="216.2" y="1662.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="214.1" y="1651.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="217.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.07%)</title><rect x="214.9" y="1731.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.9" y="1742.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (1 samples, 0.07%)</title><rect x="214.9" y="1715.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.07%)</title><rect x="215.8" y="1747.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="215.8" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="218.8" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="215.8" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="218.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.58%)</title><rect x="216.6" y="1811.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.58%)</title><rect x="216.6" y="1795.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="218.3" y="1779.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/460590394.accept (2 samples, 0.14%)</title><rect x="218.3" y="1763.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.14%)</title><rect x="218.3" y="1747.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.14%)</title><rect x="218.3" y="1731.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.3" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="218.3" y="1715.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.3" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="218.3" y="1699.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.3" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="218.3" y="1683.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="221.3" y="1694.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.07%)</title><rect x="218.3" y="1667.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="221.3" y="1678.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.07%)</title><rect x="218.3" y="1651.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="221.3" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="219.2" y="1715.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.2" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="219.2" y="1699.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.2" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="219.2" y="1683.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.14%)</title><rect x="220.0" y="1779.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="220.0" y="1763.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.0" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="220.0" y="1747.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.0" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="220.0" y="1731.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.0" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="220.0" y="1715.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.0" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="220.0" y="1699.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.0" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="220.0" y="1683.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="1694.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="220.0" y="1667.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.0" y="1678.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="220.0" y="1651.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.0" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="220.0" y="1635.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.0" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="220.0" y="1619.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.0" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="220.0" y="1603.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.0" y="1614.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="220.0" y="1587.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="223.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="220.9" y="1747.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.9" y="1758.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.07%)</title><rect x="220.9" y="1731.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.9" y="1742.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="220.9" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.14%)</title><rect x="221.8" y="1779.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.8" y="1790.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.14%)</title><rect x="221.8" y="1763.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="1774.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.14%)</title><rect x="221.8" y="1747.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.8" y="1758.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="221.8" y="1731.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.8" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.14%)</title><rect x="221.8" y="1715.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.8" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="222.6" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.6" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.14%)</title><rect x="223.5" y="1811.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="223.5" y="1795.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="224.3" y="1779.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.07%)</title><rect x="224.3" y="1763.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="225.2" y="1811.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.2" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.2" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/Thread.run (642 samples, 46.45%)</title><rect x="226.0" y="1875.0" width="548.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.0" y="1886.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (642 samples, 46.45%)</title><rect x="226.0" y="1859.0" width="548.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.0" y="1870.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (642 samples, 46.45%)</title><rect x="226.0" y="1843.0" width="548.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.0" y="1854.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/421643679.run (441 samples, 31.91%)</title><rect x="226.9" y="1827.0" width="376.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.9" y="1838.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (441 samples, 31.91%)</title><rect x="226.9" y="1811.0" width="376.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.9" y="1822.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (439 samples, 31.77%)</title><rect x="228.6" y="1795.0" width="374.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.6" y="1806.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (424 samples, 30.68%)</title><rect x="228.6" y="1779.0" width="362.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.6" y="1790.0">com/linecorp/decaton/processor/runtime/ProcessPip..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="230.3" y="1763.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="233.3" y="1774.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.07%)</title><rect x="230.3" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="233.3" y="1758.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="230.3" y="1731.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="233.3" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="230.3" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="233.3" y="1726.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.43%)</title><rect x="231.1" y="1763.0" width="5.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="234.1" y="1774.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.43%)</title><rect x="231.1" y="1747.0" width="5.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="234.1" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (125 samples, 9.04%)</title><rect x="236.3" y="1763.0" width="106.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.3" y="1774.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (125 samples, 9.04%)</title><rect x="236.3" y="1747.0" width="106.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.3" y="1758.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (125 samples, 9.04%)</title><rect x="236.3" y="1731.0" width="106.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.3" y="1742.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (120 samples, 8.68%)</title><rect x="240.5" y="1715.0" width="102.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.5" y="1726.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (120 samples, 8.68%)</title><rect x="240.5" y="1699.0" width="102.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.5" y="1710.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (120 samples, 8.68%)</title><rect x="240.5" y="1683.0" width="102.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.5" y="1694.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (27 samples, 1.95%)</title><rect x="240.5" y="1667.0" width="23.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.5" y="1678.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.14%)</title><rect x="240.5" y="1651.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.14%)</title><rect x="240.5" y="1635.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.5" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.14%)</title><rect x="240.5" y="1619.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.5" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="240.5" y="1603.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.5" y="1614.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="240.5" y="1587.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.5" y="1598.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="240.5" y="1571.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.5" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.07%)</title><rect x="241.4" y="1555.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.4" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 1.81%)</title><rect x="242.2" y="1651.0" width="21.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.2" y="1662.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 1.81%)</title><rect x="242.2" y="1635.0" width="21.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.2" y="1646.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="243.1" y="1619.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="246.1" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="243.1" y="1603.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="246.1" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="244.0" y="1587.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="247.0" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="244.0" y="1571.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="247.0" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="244.0" y="1555.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="247.0" y="1566.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="244.0" y="1539.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="247.0" y="1550.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="244.0" y="1523.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="247.0" y="1534.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="244.0" y="1507.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="247.0" y="1518.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="244.0" y="1491.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="247.0" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (9 samples, 0.65%)</title><rect x="244.8" y="1619.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.8" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (9 samples, 0.65%)</title><rect x="244.8" y="1603.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.8" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 0.94%)</title><rect x="252.5" y="1619.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.5" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 0.94%)</title><rect x="252.5" y="1603.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.14%)</title><rect x="252.5" y="1587.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.5" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="252.5" y="1571.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="255.5" y="1582.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="253.3" y="1571.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="256.3" y="1582.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="253.3" y="1555.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="256.3" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="253.3" y="1539.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="256.3" y="1550.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="253.3" y="1523.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="256.3" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (11 samples, 0.80%)</title><rect x="254.2" y="1587.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.2" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (11 samples, 0.80%)</title><rect x="254.2" y="1571.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.2" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (11 samples, 0.80%)</title><rect x="254.2" y="1555.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.2" y="1566.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="262.7" y="1539.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.7" y="1550.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.07%)</title><rect x="262.7" y="1523.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="265.7" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (89 samples, 6.44%)</title><rect x="263.6" y="1667.0" width="76.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.6" y="1678.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="263.6" y="1651.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.07%)</title><rect x="263.6" y="1635.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.6" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.07%)</title><rect x="263.6" y="1619.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.6" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.07%)</title><rect x="263.6" y="1603.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.07%)</title><rect x="263.6" y="1587.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.6" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.07%)</title><rect x="263.6" y="1571.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.6" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.07%)</title><rect x="263.6" y="1555.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.6" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="263.6" y="1539.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.6" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.65%)</title><rect x="264.4" y="1651.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.4" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.65%)</title><rect x="264.4" y="1635.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="270.4" y="1619.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.80%)</title><rect x="272.1" y="1651.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.1" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.72%)</title><rect x="273.0" y="1635.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.65%)</title><rect x="273.0" y="1619.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.0" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.58%)</title><rect x="273.8" y="1603.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.8" y="1614.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="277.3" y="1587.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="280.3" y="1598.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="277.3" y="1571.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.3" y="1582.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="277.3" y="1555.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="280.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="278.1" y="1587.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.1" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="280.7" y="1619.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.7" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.07%)</title><rect x="281.5" y="1651.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.07%)</title><rect x="281.5" y="1635.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.5" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="281.5" y="1619.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="284.5" y="1630.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="281.5" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="284.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (67 samples, 4.85%)</title><rect x="282.4" y="1651.0" width="57.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.4" y="1662.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.52%)</title><rect x="283.2" y="1635.0" width="18.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.2" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.29%)</title><rect x="283.2" y="1619.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.2" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.29%)</title><rect x="283.2" y="1603.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.2" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.29%)</title><rect x="283.2" y="1587.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.2" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (16 samples, 1.16%)</title><rect x="286.6" y="1619.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.6" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="300.3" y="1619.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.3" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 3.26%)</title><rect x="301.2" y="1635.0" width="38.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.2" y="1646.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 3.26%)</title><rect x="301.2" y="1619.0" width="38.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.2" y="1630.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (44 samples, 3.18%)</title><rect x="302.0" y="1603.0" width="37.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.0" y="1614.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.01%)</title><rect x="305.4" y="1587.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.4" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.43%)</title><rect x="310.5" y="1571.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.5" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.43%)</title><rect x="310.5" y="1555.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.43%)</title><rect x="310.5" y="1539.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.5" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.36%)</title><rect x="311.4" y="1523.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.4" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.14%)</title><rect x="315.7" y="1571.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.7" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.43%)</title><rect x="317.4" y="1587.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.4" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.36%)</title><rect x="318.2" y="1571.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.2" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.36%)</title><rect x="318.2" y="1555.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="321.2" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.36%)</title><rect x="318.2" y="1539.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.2" y="1550.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.36%)</title><rect x="318.2" y="1523.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.2" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.22%)</title><rect x="322.5" y="1587.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.5" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (13 samples, 0.94%)</title><rect x="325.1" y="1587.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.1" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (13 samples, 0.94%)</title><rect x="325.1" y="1571.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.1" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (13 samples, 0.94%)</title><rect x="325.1" y="1555.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.1" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (13 samples, 0.94%)</title><rect x="325.1" y="1539.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.1" y="1550.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 0.94%)</title><rect x="325.1" y="1523.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.1" y="1534.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.58%)</title><rect x="329.3" y="1507.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.3" y="1518.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (6 samples, 0.43%)</title><rect x="331.0" y="1491.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.0" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.29%)</title><rect x="336.2" y="1587.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.2" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.29%)</title><rect x="336.2" y="1571.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.2" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="336.2" y="1555.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.2" y="1566.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="338.7" y="1539.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="341.7" y="1550.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 0.07%)</title><rect x="338.7" y="1523.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="341.7" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.29%)</title><rect x="339.6" y="1667.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.29%)</title><rect x="339.6" y="1651.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.29%)</title><rect x="339.6" y="1635.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.6" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.29%)</title><rect x="339.6" y="1619.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.6" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.29%)</title><rect x="339.6" y="1603.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.6" y="1614.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="342.1" y="1587.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.1" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (289 samples, 20.91%)</title><rect x="343.0" y="1763.0" width="246.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.0" y="1774.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.07%)</title><rect x="343.0" y="1747.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="346.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 3.55%)</title><rect x="343.8" y="1747.0" width="41.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="346.8" y="1758.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="343.8" y="1731.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="346.8" y="1742.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (48 samples, 3.47%)</title><rect x="344.7" y="1731.0" width="41.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.7" y="1742.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.18%)</title><rect x="348.1" y="1715.0" width="37.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.1" y="1726.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (26 samples, 1.88%)</title><rect x="349.8" y="1699.0" width="22.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.8" y="1710.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (26 samples, 1.88%)</title><rect x="349.8" y="1683.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.8" y="1694.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (26 samples, 1.88%)</title><rect x="349.8" y="1667.0" width="22.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="352.8" y="1678.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.72%)</title><rect x="363.5" y="1651.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.5" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (10 samples, 0.72%)</title><rect x="363.5" y="1635.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.5" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.65%)</title><rect x="372.0" y="1699.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="375.0" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.65%)</title><rect x="372.0" y="1683.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="375.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.65%)</title><rect x="372.0" y="1667.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.0" y="1678.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 0.51%)</title><rect x="379.7" y="1699.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.7" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="384.8" y="1683.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.8" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.07%)</title><rect x="384.8" y="1667.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.8" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (24 samples, 1.74%)</title><rect x="385.7" y="1747.0" width="20.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.7" y="1758.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="389.1" y="1731.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="392.1" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.51%)</title><rect x="390.0" y="1731.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.0" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.51%)</title><rect x="390.0" y="1715.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.0" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.87%)</title><rect x="395.9" y="1731.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="398.9" y="1742.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.87%)</title><rect x="395.9" y="1715.0" width="10.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="398.9" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (143 samples, 10.35%)</title><rect x="406.2" y="1747.0" width="122.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.2" y="1758.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (143 samples, 10.35%)</title><rect x="406.2" y="1731.0" width="122.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="1742.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="413.0" y="1715.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="416.0" y="1726.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="413.9" y="1699.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="416.9" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (41 samples, 2.97%)</title><rect x="416.4" y="1715.0" width="35.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.4" y="1726.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="424.1" y="1699.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="424.1" y="1683.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="427.1" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="424.1" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="427.1" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="424.1" y="1651.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="427.1" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="424.1" y="1635.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="427.1" y="1646.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 1.95%)</title><rect x="425.0" y="1699.0" width="23.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.0" y="1710.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (25 samples, 1.81%)</title><rect x="426.7" y="1683.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.7" y="1694.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.16%)</title><rect x="430.1" y="1667.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.1" y="1678.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.16%)</title><rect x="430.1" y="1651.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.1" y="1662.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.16%)</title><rect x="430.1" y="1635.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.1" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.36%)</title><rect x="436.1" y="1619.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.1" y="1630.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.29%)</title><rect x="436.9" y="1603.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="439.9" y="1614.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.29%)</title><rect x="436.9" y="1587.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="439.9" y="1598.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="438.6" y="1571.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.6" y="1582.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="438.6" y="1555.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="441.6" y="1566.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="438.6" y="1539.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="441.6" y="1550.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="439.5" y="1555.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="442.5" y="1566.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="440.3" y="1619.0" width="3.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="443.3" y="1630.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.29%)</title><rect x="443.7" y="1667.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.7" y="1678.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="447.2" y="1667.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="450.2" y="1678.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="448.0" y="1699.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="451.0" y="1710.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="448.9" y="1699.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="451.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.80%)</title><rect x="451.4" y="1715.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="454.4" y="1726.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (5 samples, 0.36%)</title><rect x="451.4" y="1699.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.4" y="1710.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="451.4" y="1683.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="454.4" y="1694.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="451.4" y="1667.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="454.4" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="451.4" y="1651.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="454.4" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="451.4" y="1635.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="454.4" y="1646.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.14%)</title><rect x="451.4" y="1619.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="454.4" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.14%)</title><rect x="451.4" y="1603.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="454.4" y="1614.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="452.3" y="1587.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="455.3" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="452.3" y="1571.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="455.3" y="1582.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="452.3" y="1555.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="455.3" y="1566.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.22%)</title><rect x="453.1" y="1683.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.1" y="1694.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="453.1" y="1667.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="456.1" y="1678.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="454.0" y="1667.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="457.0" y="1678.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="454.0" y="1651.0" width="1.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="457.0" y="1662.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.43%)</title><rect x="455.7" y="1699.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.43%)</title><rect x="455.7" y="1683.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.7" y="1694.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="460.0" y="1667.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.0" y="1678.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 5.72%)</title><rect x="460.8" y="1715.0" width="67.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.8" y="1726.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 5.64%)</title><rect x="461.7" y="1699.0" width="66.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.7" y="1710.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 2.17%)</title><rect x="461.7" y="1683.0" width="25.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.7" y="1694.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (30 samples, 2.17%)</title><rect x="461.7" y="1667.0" width="25.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.7" y="1678.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (30 samples, 2.17%)</title><rect x="461.7" y="1651.0" width="25.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.7" y="1662.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 1.16%)</title><rect x="473.6" y="1635.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.6" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (16 samples, 1.16%)</title><rect x="473.6" y="1619.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.6" y="1630.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="486.4" y="1603.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="489.4" y="1614.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.07%)</title><rect x="486.4" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="489.4" y="1598.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="486.4" y="1571.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="489.4" y="1582.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="486.4" y="1555.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.4" y="1566.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="487.3" y="1683.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="487.3" y="1667.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.3" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="487.3" y="1651.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.3" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.22%)</title><rect x="487.3" y="1635.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.3" y="1646.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (45 samples, 3.26%)</title><rect x="489.9" y="1683.0" width="38.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.9" y="1694.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (37 samples, 2.68%)</title><rect x="496.7" y="1667.0" width="31.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.7" y="1678.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="499.2" y="1651.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="502.2" y="1662.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="499.2" y="1635.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.2" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.39%)</title><rect x="500.1" y="1651.0" width="28.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.1" y="1662.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.22%)</title><rect x="517.2" y="1635.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="520.2" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.51%)</title><rect x="519.7" y="1635.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="522.7" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="524.0" y="1619.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="527.0" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="524.0" y="1603.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="527.0" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="524.0" y="1587.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="527.0" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="524.0" y="1571.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="527.0" y="1582.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.07%)</title><rect x="524.9" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="527.9" y="1582.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="525.7" y="1635.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="528.7" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 3.33%)</title><rect x="528.3" y="1747.0" width="39.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="531.3" y="1758.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 3.26%)</title><rect x="528.3" y="1731.0" width="38.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.3" y="1742.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/983331208.process (20 samples, 1.45%)</title><rect x="530.0" y="1715.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.0" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.45%)</title><rect x="530.0" y="1699.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.0" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 0.87%)</title><rect x="532.5" y="1683.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.5" y="1694.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="534.3" y="1667.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="537.3" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="534.3" y="1651.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.3" y="1662.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="534.3" y="1635.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.3" y="1646.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="534.3" y="1619.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.3" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="534.3" y="1603.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="537.3" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="534.3" y="1587.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="537.3" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.43%)</title><rect x="535.1" y="1667.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.1" y="1678.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.43%)</title><rect x="535.1" y="1651.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="538.1" y="1662.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.43%)</title><rect x="535.1" y="1635.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="538.1" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="540.2" y="1667.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.2" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.36%)</title><rect x="542.8" y="1683.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.8" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.36%)</title><rect x="542.8" y="1667.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="545.8" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.36%)</title><rect x="542.8" y="1651.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.8" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.36%)</title><rect x="542.8" y="1635.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.8" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.14%)</title><rect x="545.4" y="1619.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.4" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="547.1" y="1715.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.1" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.14%)</title><rect x="547.1" y="1699.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.1" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="548.8" y="1715.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.8" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="548.8" y="1699.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="551.8" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.58%)</title><rect x="549.6" y="1715.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.6" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.29%)</title><rect x="553.0" y="1699.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="556.0" y="1710.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.29%)</title><rect x="553.0" y="1683.0" width="3.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="556.0" y="1694.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="556.5" y="1715.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.5" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="556.5" y="1699.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="559.5" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.72%)</title><rect x="558.2" y="1715.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.2" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="565.0" y="1699.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.0" y="1710.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="566.7" y="1731.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.7" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.14%)</title><rect x="567.6" y="1747.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.6" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.07%)</title><rect x="567.6" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="570.6" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="568.4" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="571.4" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="568.4" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="571.4" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="568.4" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.4" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="568.4" y="1683.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="571.4" y="1694.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="568.4" y="1667.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="571.4" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.74%)</title><rect x="569.3" y="1747.0" width="20.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.3" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 1.74%)</title><rect x="569.3" y="1731.0" width="20.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.3" y="1742.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="575.2" y="1715.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="578.2" y="1726.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="575.2" y="1699.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="578.2" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.01%)</title><rect x="576.9" y="1715.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.9" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/2122184128.accept (14 samples, 1.01%)</title><rect x="576.9" y="1699.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.9" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (14 samples, 1.01%)</title><rect x="576.9" y="1683.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.9" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (14 samples, 1.01%)</title><rect x="576.9" y="1667.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="579.9" y="1678.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (14 samples, 1.01%)</title><rect x="576.9" y="1651.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="579.9" y="1662.0"></text>
</g>
<g>
<title>java/time/Duration.create (14 samples, 1.01%)</title><rect x="576.9" y="1635.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.9" y="1646.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.58%)</title><rect x="581.2" y="1619.0" width="6.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="584.2" y="1630.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.58%)</title><rect x="581.2" y="1603.0" width="6.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="584.2" y="1614.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="588.0" y="1619.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="591.0" y="1630.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="588.9" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.9" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="589.8" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="592.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.09%)</title><rect x="590.6" y="1779.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.09%)</title><rect x="590.6" y="1763.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="593.6" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="592.3" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="595.3" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="592.3" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="595.3" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="592.3" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="595.3" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="592.3" y="1699.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="595.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.87%)</title><rect x="593.2" y="1747.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.2" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/2122184128.accept (12 samples, 0.87%)</title><rect x="593.2" y="1731.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.2" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (12 samples, 0.87%)</title><rect x="593.2" y="1715.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.2" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.87%)</title><rect x="593.2" y="1699.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.2" y="1710.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.87%)</title><rect x="593.2" y="1683.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="596.2" y="1694.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.87%)</title><rect x="593.2" y="1667.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.2" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.43%)</title><rect x="603.4" y="1827.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.43%)</title><rect x="603.4" y="1811.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.43%)</title><rect x="603.4" y="1795.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (3 samples, 0.22%)</title><rect x="606.0" y="1779.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (194 samples, 14.04%)</title><rect x="608.5" y="1827.0" width="165.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.5" y="1838.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (193 samples, 13.97%)</title><rect x="609.4" y="1811.0" width="164.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="612.4" y="1822.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.29%)</title><rect x="617.1" y="1795.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="620.1" y="1806.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.14%)</title><rect x="618.8" y="1779.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="621.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (159 samples, 11.51%)</title><rect x="620.5" y="1795.0" width="135.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.5" y="1806.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.07%)</title><rect x="623.9" y="1779.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.07%)</title><rect x="623.9" y="1763.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.65%)</title><rect x="624.8" y="1779.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="627.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.58%)</title><rect x="625.6" y="1763.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.58%)</title><rect x="625.6" y="1747.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.58%)</title><rect x="625.6" y="1731.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.43%)</title><rect x="632.4" y="1779.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.43%)</title><rect x="632.4" y="1763.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.29%)</title><rect x="634.2" y="1747.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.2" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.36%)</title><rect x="637.6" y="1779.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.36%)</title><rect x="637.6" y="1763.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (134 samples, 9.70%)</title><rect x="641.8" y="1779.0" width="114.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.8" y="1790.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (134 samples, 9.70%)</title><rect x="641.8" y="1763.0" width="114.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="644.8" y="1774.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="646.1" y="1747.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="649.1" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="647.0" y="1747.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="650.0" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Park (124 samples, 8.97%)</title><rect x="647.8" y="1747.0" width="105.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="650.8" y="1758.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.22%)</title><rect x="649.5" y="1731.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="652.5" y="1742.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.14%)</title><rect x="652.1" y="1731.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="655.1" y="1742.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 1.52%)</title><rect x="653.8" y="1731.0" width="17.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="656.8" y="1742.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.36%)</title><rect x="661.5" y="1715.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="664.5" y="1726.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.14%)</title><rect x="661.5" y="1699.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="664.5" y="1710.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="663.2" y="1699.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="666.2" y="1710.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="664.0" y="1699.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="667.0" y="1710.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="665.7" y="1715.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="668.7" y="1726.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.36%)</title><rect x="667.5" y="1715.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="670.5" y="1726.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="671.7" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.7" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="672.6" y="1731.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="675.6" y="1742.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.14%)</title><rect x="674.3" y="1731.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="677.3" y="1742.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.22%)</title><rect x="676.0" y="1731.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="679.0" y="1742.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.10%)</title><rect x="678.6" y="1731.0" width="24.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="681.6" y="1742.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (42 samples, 3.04%)</title><rect x="703.3" y="1731.0" width="35.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="706.3" y="1742.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.36%)</title><rect x="739.2" y="1731.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="742.2" y="1742.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.14%)</title><rect x="743.4" y="1731.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="746.4" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.22%)</title><rect x="745.2" y="1731.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="748.2" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="747.7" y="1731.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="750.7" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="748.6" y="1731.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="751.6" y="1742.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="752.0" y="1731.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.0" y="1742.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="752.8" y="1731.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="755.8" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="753.7" y="1747.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="756.7" y="1758.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="755.4" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="758.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (20 samples, 1.45%)</title><rect x="756.3" y="1795.0" width="17.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (20 samples, 1.45%)</title><rect x="756.3" y="1779.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (18 samples, 1.30%)</title><rect x="756.3" y="1763.0" width="15.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.14%)</title><rect x="771.6" y="1763.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.14%)</title><rect x="771.6" y="1747.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="774.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="772.5" y="1731.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.5" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="773.3" y="1795.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="776.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="773.3" y="1779.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="776.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="773.3" y="1763.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="774.2" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.2" y="1886.0"></text>
</g>
<g>
<title>start_thread (486 samples, 35.17%)</title><rect x="775.0" y="1875.0" width="415.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="778.0" y="1886.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (486 samples, 35.17%)</title><rect x="775.0" y="1859.0" width="415.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="778.0" y="1870.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.66%)</title><rect x="775.0" y="1843.0" width="19.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="778.0" y="1854.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.58%)</title><rect x="775.0" y="1827.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.0" y="1838.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.58%)</title><rect x="775.0" y="1811.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="778.0" y="1822.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="775.0" y="1795.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.0" y="1806.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.36%)</title><rect x="777.6" y="1795.0" width="4.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="780.6" y="1806.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.09%)</title><rect x="781.9" y="1827.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="784.9" y="1838.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::retire_alloc_buffers() (1 samples, 0.07%)</title><rect x="781.9" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.9" y="1822.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.36%)</title><rect x="782.7" y="1811.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="785.7" y="1822.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="782.7" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.7" y="1806.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="783.6" y="1795.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="786.6" y="1806.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="783.6" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="786.6" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="783.6" y="1763.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="786.6" y="1774.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.14%)</title><rect x="784.4" y="1795.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="787.4" y="1806.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="786.1" y="1795.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="789.1" y="1806.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.14%)</title><rect x="787.0" y="1811.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.0" y="1822.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="787.0" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="790.0" y="1806.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="787.0" y="1779.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.0" y="1790.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="787.8" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.8" y="1806.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="787.8" y="1779.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="790.8" y="1790.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="787.8" y="1763.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="790.8" y="1774.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.51%)</title><rect x="788.7" y="1811.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.7" y="1822.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.51%)</title><rect x="788.7" y="1795.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.7" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.43%)</title><rect x="788.7" y="1779.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="791.7" y="1790.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.43%)</title><rect x="788.7" y="1763.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.7" y="1774.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="788.7" y="1747.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="791.7" y="1758.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="788.7" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.7" y="1742.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.36%)</title><rect x="789.6" y="1747.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="792.6" y="1758.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.36%)</title><rect x="789.6" y="1731.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.6" y="1742.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.22%)</title><rect x="791.3" y="1715.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="794.3" y="1726.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.14%)</title><rect x="792.1" y="1699.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="795.1" y="1710.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="793.8" y="1779.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="796.8" y="1790.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="793.8" y="1763.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="796.8" y="1774.0"></text>
</g>
<g>
<title>JavaThread::run() (461 samples, 33.36%)</title><rect x="794.7" y="1843.0" width="393.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="797.7" y="1854.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (461 samples, 33.36%)</title><rect x="794.7" y="1827.0" width="393.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="797.7" y="1838.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (460 samples, 33.29%)</title><rect x="794.7" y="1811.0" width="392.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="797.7" y="1822.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (460 samples, 33.29%)</title><rect x="794.7" y="1795.0" width="392.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="797.7" y="1806.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (459 samples, 33.21%)</title><rect x="794.7" y="1779.0" width="391.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="797.7" y="1790.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (459 samples, 33.21%)</title><rect x="794.7" y="1763.0" width="391.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="797.7" y="1774.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (73 samples, 5.28%)</title><rect x="794.7" y="1747.0" width="62.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.7" y="1758.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.07%)</title><rect x="794.7" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="797.7" y="1742.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="794.7" y="1715.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="797.7" y="1726.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.29%)</title><rect x="795.5" y="1731.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.5" y="1742.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.29%)</title><rect x="795.5" y="1715.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="798.5" y="1726.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.29%)</title><rect x="795.5" y="1699.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.5" y="1710.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.51%)</title><rect x="798.9" y="1731.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.9" y="1742.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.51%)</title><rect x="798.9" y="1715.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="801.9" y="1726.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.22%)</title><rect x="799.8" y="1699.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="802.8" y="1710.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.14%)</title><rect x="802.4" y="1699.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.4" y="1710.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.14%)</title><rect x="802.4" y="1683.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.4" y="1694.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="803.2" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.2" y="1678.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="803.2" y="1651.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.2" y="1662.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="804.1" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="807.1" y="1710.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="804.1" y="1683.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="807.1" y="1694.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="804.1" y="1667.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.1" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.36%)</title><rect x="804.9" y="1731.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="807.9" y="1742.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.36%)</title><rect x="804.9" y="1715.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="807.9" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="804.9" y="1699.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.9" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="805.8" y="1699.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="808.8" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.14%)</title><rect x="805.8" y="1683.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.8" y="1694.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="806.6" y="1667.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.6" y="1678.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="806.6" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="809.6" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="807.5" y="1699.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.5" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="808.3" y="1683.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.3" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 4.05%)</title><rect x="809.2" y="1731.0" width="47.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.2" y="1742.0">Phas..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="810.0" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.0" y="1726.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="810.9" y="1715.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.9" y="1726.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="811.8" y="1715.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="814.8" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.29%)</title><rect x="813.5" y="1715.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="816.5" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="813.5" y="1699.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="816.5" y="1710.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.22%)</title><rect x="814.3" y="1699.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="817.3" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="816.0" y="1683.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="819.0" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.22%)</title><rect x="816.9" y="1715.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="819.9" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="817.7" y="1699.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="820.7" y="1710.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="818.6" y="1699.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="821.6" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="818.6" y="1683.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="821.6" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.43%)</title><rect x="819.4" y="1715.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="822.4" y="1726.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.07%)</title><rect x="823.7" y="1699.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="826.7" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.87%)</title><rect x="824.6" y="1715.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.6" y="1726.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="828.0" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="831.0" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="828.8" y="1699.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="831.8" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.36%)</title><rect x="829.7" y="1699.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.7" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.29%)</title><rect x="830.5" y="1683.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.5" y="1694.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="834.0" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="837.0" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="834.8" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="837.8" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="834.8" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.8" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="834.8" y="1683.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="837.8" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.07%)</title><rect x="835.7" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="838.7" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (2 samples, 0.14%)</title><rect x="836.5" y="1715.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="839.5" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.36%)</title><rect x="838.2" y="1715.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="841.2" y="1726.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="840.8" y="1699.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="843.8" y="1710.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="841.6" y="1699.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="844.6" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="842.5" y="1715.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.5" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="842.5" y="1699.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="845.5" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.22%)</title><rect x="843.3" y="1715.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.3" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="844.2" y="1699.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="847.2" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="844.2" y="1683.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="847.2" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="844.2" y="1667.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="847.2" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="845.1" y="1699.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="848.1" y="1710.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.07%)</title><rect x="845.1" y="1683.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.1" y="1694.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.07%)</title><rect x="845.1" y="1667.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.1" y="1678.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.29%)</title><rect x="845.9" y="1715.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="848.9" y="1726.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="845.9" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.9" y="1710.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.22%)</title><rect x="846.8" y="1699.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.8" y="1710.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.22%)</title><rect x="846.8" y="1683.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="849.8" y="1694.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.14%)</title><rect x="846.8" y="1667.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="849.8" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="847.6" y="1651.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="850.6" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="848.5" y="1667.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.5" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="848.5" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.5" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="849.3" y="1715.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.3" y="1726.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="851.0" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="854.0" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="851.0" y="1699.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.0" y="1710.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="851.9" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.9" y="1726.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.29%)</title><rect x="852.7" y="1715.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.7" y="1726.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="856.2" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="859.2" y="1726.0"></text>
</g>
<g>
<title>Compile::Optimize() (367 samples, 26.56%)</title><rect x="857.0" y="1747.0" width="313.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="860.0" y="1758.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.22%)</title><rect x="857.0" y="1731.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="860.0" y="1742.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 0.22%)</title><rect x="857.0" y="1715.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="860.0" y="1726.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.07%)</title><rect x="857.9" y="1699.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="860.9" y="1710.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="858.7" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.7" y="1710.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="858.7" y="1683.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.7" y="1694.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="858.7" y="1667.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.7" y="1678.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="859.6" y="1731.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.6" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="860.4" y="1715.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="863.4" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="860.4" y="1699.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="863.4" y="1710.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="860.4" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.4" y="1694.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="860.4" y="1667.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.4" y="1678.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="860.4" y="1651.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.4" y="1662.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="860.4" y="1635.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="863.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (20 samples, 1.45%)</title><rect x="861.3" y="1731.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (20 samples, 1.45%)</title><rect x="861.3" y="1715.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="862.1" y="1699.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="862.1" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (18 samples, 1.30%)</title><rect x="863.0" y="1699.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="866.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (15 samples, 1.09%)</title><rect x="863.8" y="1683.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="863.8" y="1667.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="863.8" y="1651.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="863.8" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (14 samples, 1.01%)</title><rect x="864.7" y="1667.0" width="11.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="867.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (4 samples, 0.29%)</title><rect x="864.7" y="1651.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.7" y="1662.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (4 samples, 0.29%)</title><rect x="864.7" y="1635.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.7" y="1646.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (2 samples, 0.14%)</title><rect x="866.4" y="1619.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="869.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.72%)</title><rect x="868.1" y="1651.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="871.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.72%)</title><rect x="868.1" y="1635.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="868.1" y="1619.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.1" y="1630.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="868.1" y="1603.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="871.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (9 samples, 0.65%)</title><rect x="869.0" y="1619.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="872.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="869.0" y="1603.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="869.0" y="1587.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="872.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.0" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="872.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.0" y="1555.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="869.0" y="1539.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="872.0" y="1550.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="869.0" y="1523.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="872.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1571.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1555.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1539.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="872.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1523.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1507.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="872.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1491.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1475.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1459.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1443.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="872.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1427.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1411.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="872.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1379.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1363.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1347.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1331.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="872.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1315.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1299.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1283.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="872.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1267.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1251.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="872.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1235.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1219.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="872.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1171.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="872.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="872.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="872.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1075.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="872.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="872.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="872.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="995.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="872.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="872.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="869.8" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="872.8" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="869.8" y="899.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="872.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="870.7" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="870.7" y="1571.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="873.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="870.7" y="1555.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="873.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="870.7" y="1539.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="873.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="870.7" y="1523.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="870.7" y="1507.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.7" y="1518.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="870.7" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="873.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1603.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1587.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1571.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1555.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1539.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1523.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1507.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="874.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1491.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1475.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="874.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.43%)</title><rect x="871.5" y="1459.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1443.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="874.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1427.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1411.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1395.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1379.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1363.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1347.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1331.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1315.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1299.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="874.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="871.5" y="1283.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.5" y="1294.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="871.5" y="1267.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="874.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.36%)</title><rect x="872.4" y="1443.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.36%)</title><rect x="872.4" y="1427.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1411.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1395.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1379.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="875.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1363.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1347.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1331.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="872.4" y="1315.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1283.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1251.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="875.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1171.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="875.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1155.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="875.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1027.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="875.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="963.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="947.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="931.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="915.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="899.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="883.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="867.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="851.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="875.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="819.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="875.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="803.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="875.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="771.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="755.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="739.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="707.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="691.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="675.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="875.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="659.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="875.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="643.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="875.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="627.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="611.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="595.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="579.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="563.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="547.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="531.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="515.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="467.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="451.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="435.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="419.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="403.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="875.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="371.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="355.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="339.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="323.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="307.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="275.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="259.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="243.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="227.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="211.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="195.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="179.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="163.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="147.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="131.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="115.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="875.4" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="99.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="83.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="875.4" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="67.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.4" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="51.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.4" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="872.4" y="35.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.4" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1299.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1283.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1267.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1251.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1235.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1203.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1187.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1171.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="876.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="876.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="915.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="876.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="803.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="787.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="659.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="627.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="563.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="547.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="876.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="531.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="515.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="499.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="876.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="483.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="451.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="435.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="876.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="419.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="403.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="387.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="371.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="339.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="323.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="307.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="876.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="291.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="275.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="243.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="876.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="227.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="195.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="179.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="163.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="147.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="131.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="876.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="115.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="99.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.2" y="110.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="873.2" y="83.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1411.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1395.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1379.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1363.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="877.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1347.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1331.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1315.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1299.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1283.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="874.1" y="1267.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1235.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="877.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1155.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="877.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1139.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1091.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="877.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="877.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="877.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="979.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="877.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="963.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="947.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="931.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="877.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="915.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="877.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="899.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="883.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="877.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="867.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="819.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="803.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="877.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="877.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="755.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="739.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="877.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="723.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="707.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="874.1" y="675.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1251.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1235.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1219.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1203.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1187.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1171.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1155.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1139.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1123.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1107.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1091.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1075.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1059.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1043.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="877.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="874.9" y="1027.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="874.9" y="1011.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="878.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="878.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="931.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="878.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="899.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="883.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="878.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="851.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="878.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="755.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="739.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="878.8" y="734.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="875.8" y="707.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.8" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="876.6" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="879.6" y="1694.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="876.6" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.6" y="1678.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="876.6" y="1651.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="879.6" y="1662.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.07%)</title><rect x="877.5" y="1683.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="880.5" y="1694.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="877.5" y="1667.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.5" y="1678.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="877.5" y="1651.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.5" y="1662.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="877.5" y="1635.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.5" y="1646.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.22%)</title><rect x="878.4" y="1731.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="881.4" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (306 samples, 22.14%)</title><rect x="880.9" y="1731.0" width="261.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.9" y="1742.0">PhaseIdealLoop::build_and_optimize(..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="880.9" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.9" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="880.9" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.9" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="880.9" y="1683.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="883.9" y="1694.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="880.9" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.9" y="1678.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="880.9" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.9" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="880.9" y="1635.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.9" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="880.9" y="1619.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="883.9" y="1630.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="881.8" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="884.8" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.29%)</title><rect x="882.6" y="1715.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="885.6" y="1726.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="884.3" y="1699.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="887.3" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.14%)</title><rect x="886.0" y="1715.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.0" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (285 samples, 20.62%)</title><rect x="887.7" y="1715.0" width="243.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.7" y="1726.0">PhaseIdealLoop::build_loop_late(..</text>
</g>
<g>
<title>CheckCastPPNode::Opcode() const (1 samples, 0.07%)</title><rect x="892.0" y="1699.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="895.0" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (279 samples, 20.19%)</title><rect x="892.9" y="1699.0" width="238.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.9" y="1710.0">PhaseIdealLoop::build_loop_late_..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (15 samples, 1.09%)</title><rect x="893.7" y="1683.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.7" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="906.5" y="1683.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.5" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="907.4" y="1683.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="910.4" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (260 samples, 18.81%)</title><rect x="908.2" y="1683.0" width="222.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.2" y="1694.0">PhaseIdealLoop::get_late_ctrl..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1091.0" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.0" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1091.0" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.0" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (44 samples, 3.18%)</title><rect x="1091.8" y="1667.0" width="37.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.8" y="1678.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1129.4" y="1667.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.4" y="1678.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1130.2" y="1683.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.2" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1131.1" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.58%)</title><rect x="1131.9" y="1715.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.9" y="1726.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1133.6" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.36%)</title><rect x="1134.5" y="1699.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1134.5" y="1683.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.5" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1134.5" y="1667.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.5" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.22%)</title><rect x="1135.4" y="1683.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.4" y="1694.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1135.4" y="1667.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="1678.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1135.4" y="1651.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.4" y="1662.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1135.4" y="1635.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.4" y="1646.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1136.2" y="1667.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.2" y="1678.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1136.2" y="1651.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.2" y="1662.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1136.2" y="1635.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.2" y="1646.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1136.2" y="1619.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.2" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1137.1" y="1667.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="1678.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1137.1" y="1651.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1137.9" y="1683.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.9" y="1694.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1137.9" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.29%)</title><rect x="1138.8" y="1715.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.8" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.29%)</title><rect x="1138.8" y="1699.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.8" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1138.8" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.8" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.14%)</title><rect x="1139.6" y="1683.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="1694.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1140.5" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.5" y="1678.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1140.5" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.5" y="1662.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1141.3" y="1683.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="1694.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1141.3" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.3" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1142.2" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.2" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1142.2" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.2" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (29 samples, 2.10%)</title><rect x="1143.0" y="1731.0" width="24.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.0" y="1742.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1143.0" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="1726.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1143.0" y="1699.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.0" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (28 samples, 2.03%)</title><rect x="1143.9" y="1715.0" width="23.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.9" y="1726.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1145.6" y="1699.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.6" y="1710.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1145.6" y="1683.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.6" y="1694.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1147.3" y="1699.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="1710.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1147.3" y="1683.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.3" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1147.3" y="1667.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1147.3" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.3" y="1662.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.14%)</title><rect x="1148.2" y="1683.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.2" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.14%)</title><rect x="1148.2" y="1667.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.2" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="1148.2" y="1651.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="1662.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1149.9" y="1699.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.9" y="1710.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1149.9" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.9" y="1694.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.9" y="1678.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.7" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="1710.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1151.6" y="1699.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1153.3" y="1699.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.3" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.43%)</title><rect x="1154.1" y="1699.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.1" y="1710.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (2 samples, 0.14%)</title><rect x="1155.8" y="1683.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.8" y="1694.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1157.6" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.6" y="1694.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1157.6" y="1667.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1160.6" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1158.4" y="1683.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="1694.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1158.4" y="1667.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.4" y="1678.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1159.3" y="1699.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="1710.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1160.1" y="1683.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.1" y="1694.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1160.1" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="1678.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1161.0" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="1694.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1161.8" y="1699.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.8" y="1710.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1162.7" y="1699.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="1710.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1162.7" y="1683.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.7" y="1694.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1164.4" y="1699.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.4" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.22%)</title><rect x="1164.4" y="1683.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.4" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.22%)</title><rect x="1164.4" y="1667.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.4" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.22%)</title><rect x="1164.4" y="1651.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.22%)</title><rect x="1164.4" y="1635.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.4" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1619.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.4" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1603.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.4" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1587.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1571.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.4" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1555.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.4" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1539.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.4" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1523.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.4" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1507.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.4" y="1518.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1491.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.4" y="1502.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1164.4" y="1475.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.4" y="1486.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.4" y="1459.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.4" y="1470.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.4" y="1443.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.4" y="1454.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1164.4" y="1427.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.4" y="1438.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="1459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.2" y="1470.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="1443.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.2" y="1454.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.1" y="1619.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="1630.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="1614.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1166.9" y="1699.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.9" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1167.8" y="1731.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1742.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1167.8" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.8" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1167.8" y="1699.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.8" y="1683.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1167.8" y="1667.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="1678.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1168.7" y="1731.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1168.7" y="1715.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.7" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1168.7" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.7" y="1683.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.7" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1168.7" y="1667.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="1678.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.7" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1169.5" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1169.5" y="1699.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1169.5" y="1683.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="1694.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_card_mark(Node*) (1 samples, 0.07%)</title><rect x="1169.5" y="1667.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.09%)</title><rect x="1170.4" y="1747.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1758.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.09%)</title><rect x="1170.4" y="1731.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1742.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.09%)</title><rect x="1170.4" y="1715.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="1726.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.09%)</title><rect x="1170.4" y="1699.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (2 samples, 0.14%)</title><rect x="1170.4" y="1683.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="1694.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (2 samples, 0.14%)</title><rect x="1170.4" y="1667.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="1678.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="1651.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.4" y="1662.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="1635.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="1646.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.4" y="1619.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="1630.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1170.4" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.4" y="1614.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.07%)</title><rect x="1171.2" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="1662.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.07%)</title><rect x="1171.2" y="1635.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="1646.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1171.2" y="1619.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="1630.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1171.2" y="1603.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1174.2" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.94%)</title><rect x="1172.1" y="1683.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.94%)</title><rect x="1172.1" y="1667.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="1678.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.1" y="1651.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="1662.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.1" y="1635.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.1" y="1646.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.1" y="1619.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.1" y="1603.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.1" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.1" y="1587.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.1" y="1571.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.1" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.1" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.1" y="1539.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.1" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1172.1" y="1523.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1534.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1172.1" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="1518.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.1" y="1491.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="1502.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.1" y="1475.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.1" y="1486.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.07%)</title><rect x="1172.1" y="1459.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.58%)</title><rect x="1172.9" y="1651.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="1662.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.58%)</title><rect x="1172.9" y="1635.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.58%)</title><rect x="1172.9" y="1619.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.58%)</title><rect x="1172.9" y="1603.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.58%)</title><rect x="1172.9" y="1587.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.58%)</title><rect x="1172.9" y="1571.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1172.9" y="1555.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="1566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1172.9" y="1539.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1172.9" y="1523.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1172.9" y="1507.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1172.9" y="1491.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1172.9" y="1475.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1172.9" y="1459.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.9" y="1470.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1172.9" y="1443.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="1454.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1172.9" y="1427.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.9" y="1438.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1172.9" y="1411.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1422.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1172.9" y="1395.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.9" y="1406.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1172.9" y="1379.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1173.8" y="1427.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1173.8" y="1411.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="1422.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1173.8" y="1395.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1174.6" y="1395.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.6" y="1379.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="1390.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.6" y="1363.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.6" y="1374.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.6" y="1347.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="1358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.6" y="1331.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.6" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.6" y="1315.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.6" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.6" y="1299.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.6" y="1283.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.6" y="1267.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.6" y="1251.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.6" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1174.6" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1174.6" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.6" y="1203.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.6" y="1187.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.6" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.6" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.6" y="1155.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="1379.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="1374.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1175.5" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="1358.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="1331.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="1342.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1175.5" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1326.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1175.5" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1310.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.3" y="1555.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.3" y="1539.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1176.3" y="1523.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1176.3" y="1507.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.3" y="1491.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.3" y="1475.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1176.3" y="1459.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1176.3" y="1443.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1176.3" y="1427.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1176.3" y="1411.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.3" y="1395.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.3" y="1379.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1176.3" y="1363.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1374.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1176.3" y="1347.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="1358.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1176.3" y="1331.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1342.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1176.3" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1326.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="1299.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1310.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1176.3" y="1283.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1177.2" y="1347.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1177.2" y="1331.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1177.2" y="1315.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1177.2" y="1299.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1177.2" y="1283.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="1267.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.2" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.2" y="1235.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.2" y="1219.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.2" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.2" y="1203.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.2" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.2" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.2" y="1155.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.2" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.2" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.2" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.2" y="1091.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.2" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.2" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.2" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.2" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.2" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.2" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.2" y="979.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.2" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.2" y="947.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.2" y="931.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.2" y="915.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.2" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.2" y="883.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.2" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.2" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1177.2" y="835.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1177.2" y="819.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1177.2" y="803.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1177.2" y="787.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.2" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1177.2" y="771.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="782.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.07%)</title><rect x="1177.2" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="766.0"></text>
</g>
<g>
<title>/usr/lib64/libc-2.17.so (1 samples, 0.07%)</title><rect x="1177.2" y="739.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1180.2" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1251.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1235.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.0" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.0" y="1203.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.0" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.0" y="1171.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.0" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1139.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.0" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.0" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.0" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.0" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.0" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1027.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.0" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.0" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.0" y="963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.0" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.0" y="915.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.0" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.0" y="883.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.0" y="867.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="1267.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="1251.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="1262.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1178.9" y="1235.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="1246.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="1219.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="1230.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1178.9" y="1203.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1214.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.9" y="1187.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="1198.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.8" y="1651.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.8" y="1662.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.8" y="1635.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="1646.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1179.8" y="1619.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="1630.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1179.8" y="1603.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1179.8" y="1587.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1179.8" y="1571.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1179.8" y="1555.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="1566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.8" y="1539.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1179.8" y="1523.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1179.8" y="1507.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1179.8" y="1491.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1179.8" y="1475.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1179.8" y="1459.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1179.8" y="1443.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1179.8" y="1427.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1179.8" y="1411.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1179.8" y="1395.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1179.8" y="1379.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1179.8" y="1363.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1179.8" y="1347.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1179.8" y="1331.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1179.8" y="1315.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1179.8" y="1299.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1179.8" y="1283.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1179.8" y="1267.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.8" y="1235.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.8" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.8" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.8" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="1166.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1179.8" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.6" y="1251.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="1235.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="1219.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="1203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="1187.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1180.6" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1180.6" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1134.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1180.6" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="1118.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1180.6" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="1123.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="1075.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="979.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="947.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="931.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="915.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="899.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1181.5" y="835.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1181.5" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1181.5" y="803.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1181.5" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1181.5" y="771.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1347.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1331.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="1315.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="1283.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="1251.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1235.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="1219.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="1171.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="1166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1043.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1182.3" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.3" y="1022.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="995.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="1006.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1182.3" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1182.3" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="958.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.22%)</title><rect x="1183.2" y="1747.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="1758.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.14%)</title><rect x="1183.2" y="1731.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="1742.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.9" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="1742.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.7" y="1747.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="1758.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.7" y="1731.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="1742.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="1699.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.7" y="1710.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.6" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="1790.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1186.6" y="1763.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="1774.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1186.6" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="1758.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.6" y="1731.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="1742.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.07%)</title><rect x="1186.6" y="1715.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="1726.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.6" y="1699.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.6" y="1710.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="1694.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.07%)</title><rect x="1186.6" y="1667.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="1678.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.6" y="1651.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="1662.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.6" y="1635.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="1646.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.6" y="1619.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="1630.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.6" y="1603.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="1614.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.6" y="1587.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="1598.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.6" y="1571.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="1582.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.6" y="1555.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="1566.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.6" y="1539.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="1550.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.07%)</title><rect x="1186.6" y="1523.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="1534.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.07%)</title><rect x="1186.6" y="1507.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="1518.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.07%)</title><rect x="1186.6" y="1491.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="1502.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.4" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="1822.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.4" y="1795.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="1806.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1779.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.4" y="1790.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1187.4" y="1763.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1190.4" y="1774.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.3" y="1843.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="1854.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.3" y="1827.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="1838.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.14%)</title><rect x="1188.3" y="1811.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="1822.0"></text>
</g>
<g>
<title>TemplateInterpreter::notice_safepoints() (1 samples, 0.07%)</title><rect x="1189.1" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="1806.0"></text>
</g>
</g>
</svg>
