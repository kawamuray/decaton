<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (208 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 8.65%)</title><rect x="10.0" y="723.0" width="102.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 8.65%)</title><rect x="10.0" y="707.0" width="102.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.48%)</title><rect x="15.7" y="691.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.48%)</title><rect x="15.7" y="675.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.48%)</title><rect x="21.3" y="691.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.3" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.48%)</title><rect x="21.3" y="675.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$288/1374185775.accept (1 samples, 0.48%)</title><rect x="21.3" y="659.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$60 (1 samples, 0.48%)</title><rect x="21.3" y="643.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.48%)</title><rect x="21.3" y="627.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.3" y="638.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.48%)</title><rect x="21.3" y="611.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.3" y="622.0"></text>
</g>
<g>
<title>JVM_NanoTime (1 samples, 0.48%)</title><rect x="21.3" y="595.0" width="5.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="24.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.96%)</title><rect x="27.0" y="691.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1950086458.accept (2 samples, 0.96%)</title><rect x="27.0" y="675.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (2 samples, 0.96%)</title><rect x="27.0" y="659.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.48%)</title><rect x="27.0" y="643.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.48%)</title><rect x="27.0" y="627.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.48%)</title><rect x="27.0" y="611.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.48%)</title><rect x="27.0" y="595.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.48%)</title><rect x="27.0" y="579.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.48%)</title><rect x="27.0" y="563.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.48%)</title><rect x="27.0" y="547.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.48%)</title><rect x="27.0" y="531.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.48%)</title><rect x="27.0" y="515.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.48%)</title><rect x="32.7" y="643.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.48%)</title><rect x="32.7" y="627.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.7" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.48%)</title><rect x="32.7" y="611.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.7" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.48%)</title><rect x="32.7" y="595.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 6.25%)</title><rect x="38.4" y="691.0" width="73.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.4" y="702.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 6.25%)</title><rect x="38.4" y="675.0" width="73.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.4" y="686.0">org/apac..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.48%)</title><rect x="38.4" y="659.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.33%)</title><rect x="44.0" y="659.0" width="51.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.0" y="670.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.44%)</title><rect x="44.0" y="643.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.44%)</title><rect x="44.0" y="627.0" width="17.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.48%)</title><rect x="44.0" y="611.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.48%)</title><rect x="44.0" y="595.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="44.0" y="579.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.48%)</title><rect x="49.7" y="611.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.48%)</title><rect x="49.7" y="595.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.48%)</title><rect x="49.7" y="579.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.48%)</title><rect x="55.4" y="611.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.48%)</title><rect x="55.4" y="595.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.48%)</title><rect x="55.4" y="579.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.88%)</title><rect x="61.1" y="643.0" width="34.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.1" y="654.0">or..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.48%)</title><rect x="61.1" y="627.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.40%)</title><rect x="66.7" y="627.0" width="28.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.7" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.40%)</title><rect x="66.7" y="611.0" width="28.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.7" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.40%)</title><rect x="66.7" y="595.0" width="28.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.7" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.44%)</title><rect x="66.7" y="579.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.96%)</title><rect x="66.7" y="563.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.96%)</title><rect x="66.7" y="547.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.96%)</title><rect x="66.7" y="531.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.96%)</title><rect x="66.7" y="515.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.96%)</title><rect x="66.7" y="499.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.96%)</title><rect x="66.7" y="483.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.96%)</title><rect x="66.7" y="467.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.48%)</title><rect x="78.1" y="563.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.48%)</title><rect x="78.1" y="547.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.48%)</title><rect x="78.1" y="531.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.96%)</title><rect x="83.8" y="579.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.48%)</title><rect x="89.4" y="563.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.48%)</title><rect x="89.4" y="547.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.4" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.48%)</title><rect x="89.4" y="531.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.48%)</title><rect x="95.1" y="659.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.48%)</title><rect x="95.1" y="643.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.48%)</title><rect x="95.1" y="627.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.48%)</title><rect x="95.1" y="611.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.48%)</title><rect x="95.1" y="595.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.48%)</title><rect x="95.1" y="579.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.48%)</title><rect x="95.1" y="563.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.48%)</title><rect x="95.1" y="547.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.48%)</title><rect x="95.1" y="531.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.48%)</title><rect x="95.1" y="515.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.validate (1 samples, 0.48%)</title><rect x="95.1" y="499.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.validate (1 samples, 0.48%)</title><rect x="95.1" y="483.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.96%)</title><rect x="100.8" y="659.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.96%)</title><rect x="100.8" y="643.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.96%)</title><rect x="100.8" y="627.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.96%)</title><rect x="100.8" y="611.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.96%)</title><rect x="100.8" y="595.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.96%)</title><rect x="100.8" y="579.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.8" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.96%)</title><rect x="100.8" y="563.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.96%)</title><rect x="100.8" y="547.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.8" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.96%)</title><rect x="100.8" y="531.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.8" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.96%)</title><rect x="100.8" y="515.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.8" y="526.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.96%)</title><rect x="100.8" y="499.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.96%)</title><rect x="100.8" y="483.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.8" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.96%)</title><rect x="100.8" y="467.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.8" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.48%)</title><rect x="100.8" y="451.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.8" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.48%)</title><rect x="100.8" y="435.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="103.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/270694857.test (1 samples, 0.48%)</title><rect x="106.4" y="451.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.4" y="462.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.48%)</title><rect x="106.4" y="435.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="109.4" y="446.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.48%)</title><rect x="106.4" y="419.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="109.4" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (160 samples, 76.92%)</title><rect x="112.1" y="723.0" width="907.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.1" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (160 samples, 76.92%)</title><rect x="112.1" y="707.0" width="907.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.1" y="718.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (160 samples, 76.92%)</title><rect x="112.1" y="691.0" width="907.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.1" y="702.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1726595460.run (146 samples, 70.19%)</title><rect x="112.1" y="675.0" width="828.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.1" y="686.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1726595460.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (146 samples, 70.19%)</title><rect x="112.1" y="659.0" width="828.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.1" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (146 samples, 70.19%)</title><rect x="112.1" y="643.0" width="828.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.1" y="654.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (146 samples, 70.19%)</title><rect x="112.1" y="627.0" width="828.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.1" y="638.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.48%)</title><rect x="123.5" y="611.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (40 samples, 19.23%)</title><rect x="129.1" y="611.0" width="227.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.1" y="622.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (40 samples, 19.23%)</title><rect x="129.1" y="595.0" width="227.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.1" y="606.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (40 samples, 19.23%)</title><rect x="129.1" y="579.0" width="227.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.1" y="590.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 19.23%)</title><rect x="129.1" y="563.0" width="227.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.1" y="574.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 19.23%)</title><rect x="129.1" y="547.0" width="227.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.1" y="558.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (40 samples, 19.23%)</title><rect x="129.1" y="531.0" width="227.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.1" y="542.0">com/fasterxml/jackson/databind..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 8.17%)</title><rect x="129.1" y="515.0" width="96.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.1" y="526.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 3.85%)</title><rect x="129.1" y="499.0" width="45.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.1" y="510.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 3.85%)</title><rect x="129.1" y="483.0" width="45.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.1" y="494.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.96%)</title><rect x="129.1" y="467.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 2.88%)</title><rect x="140.5" y="467.0" width="34.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.5" y="478.0">co..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.44%)</title><rect x="140.5" y="451.0" width="17.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.44%)</title><rect x="140.5" y="435.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.5" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.44%)</title><rect x="140.5" y="419.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.5" y="430.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (3 samples, 1.44%)</title><rect x="157.5" y="451.0" width="17.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 4.33%)</title><rect x="174.5" y="499.0" width="51.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.5" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 4.33%)</title><rect x="174.5" y="483.0" width="51.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.5" y="494.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 2.40%)</title><rect x="174.5" y="467.0" width="28.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.5" y="478.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.96%)</title><rect x="180.2" y="451.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.48%)</title><rect x="191.5" y="451.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.48%)</title><rect x="197.2" y="451.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.44%)</title><rect x="202.9" y="467.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.44%)</title><rect x="202.9" y="451.0" width="17.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 1.44%)</title><rect x="202.9" y="435.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.48%)</title><rect x="219.9" y="467.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 10.10%)</title><rect x="225.6" y="515.0" width="119.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.6" y="526.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.48%)</title><rect x="225.6" y="499.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.48%)</title><rect x="225.6" y="483.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.48%)</title><rect x="225.6" y="467.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.48%)</title><rect x="225.6" y="451.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.48%)</title><rect x="231.3" y="499.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.48%)</title><rect x="231.3" y="483.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.48%)</title><rect x="231.3" y="467.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.48%)</title><rect x="236.9" y="499.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.48%)</title><rect x="236.9" y="483.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (18 samples, 8.65%)</title><rect x="242.6" y="499.0" width="102.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.6" y="510.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.88%)</title><rect x="242.6" y="483.0" width="34.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.6" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.48%)</title><rect x="265.3" y="467.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.48%)</title><rect x="265.3" y="451.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.48%)</title><rect x="265.3" y="435.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.48%)</title><rect x="271.0" y="467.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 5.77%)</title><rect x="276.6" y="483.0" width="68.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.6" y="494.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 5.77%)</title><rect x="276.6" y="467.0" width="68.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.6" y="478.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 5.77%)</title><rect x="276.6" y="451.0" width="68.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.6" y="462.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.44%)</title><rect x="276.6" y="435.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.44%)</title><rect x="276.6" y="419.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.44%)</title><rect x="276.6" y="403.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.44%)</title><rect x="276.6" y="387.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 1.44%)</title><rect x="276.6" y="371.0" width="17.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.48%)</title><rect x="293.7" y="435.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.92%)</title><rect x="299.3" y="435.0" width="22.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.3" y="446.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.92%)</title><rect x="299.3" y="419.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.3" y="430.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.92%)</title><rect x="299.3" y="403.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.3" y="414.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 1.92%)</title><rect x="299.3" y="387.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.3" y="398.0">c..</text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 1.92%)</title><rect x="299.3" y="371.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.3" y="382.0">j..</text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 1.92%)</title><rect x="299.3" y="355.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.3" y="366.0">s..</text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor15.newInstance (1 samples, 0.48%)</title><rect x="316.3" y="339.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.44%)</title><rect x="322.0" y="435.0" width="17.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="325.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.44%)</title><rect x="322.0" y="419.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.44%)</title><rect x="322.0" y="403.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.48%)</title><rect x="333.4" y="387.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.48%)</title><rect x="339.0" y="435.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.96%)</title><rect x="344.7" y="515.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.96%)</title><rect x="344.7" y="499.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.96%)</title><rect x="344.7" y="483.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.96%)</title><rect x="344.7" y="467.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.48%)</title><rect x="350.4" y="451.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.4" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (96 samples, 46.15%)</title><rect x="356.1" y="611.0" width="544.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.1" y="622.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (21 samples, 10.10%)</title><rect x="356.1" y="595.0" width="119.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="359.1" y="606.0">com/linecorp/de..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 9.62%)</title><rect x="361.7" y="579.0" width="113.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.7" y="590.0">org/slf4j/MDC...</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 7.21%)</title><rect x="390.1" y="563.0" width="85.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.1" y="574.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 3.37%)</title><rect x="395.8" y="547.0" width="39.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.8" y="558.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 3.37%)</title><rect x="395.8" y="531.0" width="39.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.8" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.44%)</title><rect x="418.5" y="515.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.44%)</title><rect x="418.5" y="499.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 1.44%)</title><rect x="418.5" y="483.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.5" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="435.5" y="547.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.48%)</title><rect x="435.5" y="531.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="435.5" y="515.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.5" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.88%)</title><rect x="441.2" y="547.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.2" y="558.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.88%)</title><rect x="441.2" y="531.0" width="34.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.2" y="542.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.88%)</title><rect x="441.2" y="515.0" width="34.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.2" y="526.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.48%)</title><rect x="469.5" y="499.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="472.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.44%)</title><rect x="475.2" y="595.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="478.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.96%)</title><rect x="480.9" y="579.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.96%)</title><rect x="480.9" y="563.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 6.73%)</title><rect x="492.2" y="595.0" width="79.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="495.2" y="606.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 6.73%)</title><rect x="492.2" y="579.0" width="79.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.2" y="590.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.92%)</title><rect x="492.2" y="563.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="495.2" y="574.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.44%)</title><rect x="492.2" y="547.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.2" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.44%)</title><rect x="492.2" y="531.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.2" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.96%)</title><rect x="492.2" y="515.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="495.2" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.96%)</title><rect x="492.2" y="499.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.2" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.96%)</title><rect x="492.2" y="483.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="495.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.48%)</title><rect x="492.2" y="467.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="495.2" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.48%)</title><rect x="492.2" y="451.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="495.2" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.48%)</title><rect x="492.2" y="435.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="495.2" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.48%)</title><rect x="492.2" y="419.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="495.2" y="430.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.48%)</title><rect x="497.9" y="467.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="500.9" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.48%)</title><rect x="503.6" y="515.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="506.6" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="509.2" y="547.0" width="5.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="512.2" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 4.81%)</title><rect x="514.9" y="563.0" width="56.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.9" y="574.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.85%)</title><rect x="520.6" y="547.0" width="45.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.6" y="558.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.48%)</title><rect x="520.6" y="531.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.48%)</title><rect x="520.6" y="515.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="523.6" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.37%)</title><rect x="526.2" y="531.0" width="39.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.2" y="542.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.88%)</title><rect x="531.9" y="515.0" width="34.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.9" y="526.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.88%)</title><rect x="531.9" y="499.0" width="34.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="534.9" y="510.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.48%)</title><rect x="548.9" y="483.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.96%)</title><rect x="554.6" y="483.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.48%)</title><rect x="566.0" y="547.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 25.00%)</title><rect x="571.6" y="595.0" width="295.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.6" y="606.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 25.00%)</title><rect x="571.6" y="579.0" width="295.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="574.6" y="590.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1066778873.process (42 samples, 20.19%)</title><rect x="588.7" y="563.0" width="238.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="591.7" y="574.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (42 samples, 20.19%)</title><rect x="588.7" y="547.0" width="238.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.7" y="558.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (42 samples, 20.19%)</title><rect x="588.7" y="531.0" width="238.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.7" y="542.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (42 samples, 20.19%)</title><rect x="588.7" y="515.0" width="238.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.7" y="526.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 19.23%)</title><rect x="594.3" y="499.0" width="227.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.3" y="510.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 16.83%)</title><rect x="617.0" y="483.0" width="198.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="620.0" y="494.0">JVM_Sleep</text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="634.0" y="467.0" width="5.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="637.0" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.92%)</title><rect x="639.7" y="467.0" width="22.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="642.7" y="478.0">_..</text>
</g>
<g>
<title>[vdso] (3 samples, 1.44%)</title><rect x="645.4" y="451.0" width="17.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="648.4" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.48%)</title><rect x="662.4" y="467.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="665.4" y="478.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (26 samples, 12.50%)</title><rect x="668.1" y="467.0" width="147.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.1" y="478.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.48%)</title><rect x="690.8" y="451.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="693.8" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.92%)</title><rect x="696.4" y="451.0" width="22.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="699.4" y="462.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.48%)</title><rect x="719.1" y="451.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="722.1" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 4.33%)</title><rect x="724.8" y="451.0" width="51.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="727.8" y="462.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.48%)</title><rect x="775.9" y="451.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="778.9" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.96%)</title><rect x="781.5" y="451.0" width="11.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="784.5" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.92%)</title><rect x="792.9" y="451.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="795.9" y="462.0">o..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.48%)</title><rect x="815.6" y="483.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="818.6" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.48%)</title><rect x="821.2" y="499.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.2" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="821.2" y="483.0" width="5.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="824.2" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.44%)</title><rect x="826.9" y="563.0" width="17.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.9" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.44%)</title><rect x="826.9" y="547.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="829.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1477880378.get$Lambda (3 samples, 1.44%)</title><rect x="826.9" y="531.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="829.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1477880378.&lt;init&gt; (3 samples, 1.44%)</title><rect x="826.9" y="515.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="829.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.48%)</title><rect x="843.9" y="563.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="846.9" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.48%)</title><rect x="843.9" y="547.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.9" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.48%)</title><rect x="849.6" y="563.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.6" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.48%)</title><rect x="849.6" y="547.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.6" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.48%)</title><rect x="849.6" y="531.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="852.6" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.48%)</title><rect x="855.3" y="563.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.48%)</title><rect x="855.3" y="547.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.48%)</title><rect x="861.0" y="563.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="864.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.88%)</title><rect x="866.6" y="595.0" width="34.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="869.6" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.88%)</title><rect x="866.6" y="579.0" width="34.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.6" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.44%)</title><rect x="878.0" y="563.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1004828529.accept (3 samples, 1.44%)</title><rect x="878.0" y="547.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 1.44%)</title><rect x="878.0" y="531.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="881.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.44%)</title><rect x="878.0" y="515.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.0" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.44%)</title><rect x="878.0" y="499.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="881.0" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.44%)</title><rect x="878.0" y="483.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="881.0" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.96%)</title><rect x="883.7" y="467.0" width="11.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="886.7" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.96%)</title><rect x="883.7" y="451.0" width="11.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="886.7" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.48%)</title><rect x="895.0" y="563.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.88%)</title><rect x="900.7" y="611.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.7" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.88%)</title><rect x="900.7" y="595.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="903.7" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.88%)</title><rect x="900.7" y="579.0" width="34.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="903.7" y="590.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1004828529.accept (6 samples, 2.88%)</title><rect x="900.7" y="563.0" width="34.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="903.7" y="574.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 2.88%)</title><rect x="900.7" y="547.0" width="34.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.7" y="558.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 2.88%)</title><rect x="900.7" y="531.0" width="34.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="903.7" y="542.0">co..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 2.88%)</title><rect x="900.7" y="515.0" width="34.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.7" y="526.0">ja..</text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 2.88%)</title><rect x="900.7" y="499.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.7" y="510.0">ja..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.48%)</title><rect x="934.7" y="611.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.7" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="934.7" y="595.0" width="5.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="937.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 2.40%)</title><rect x="940.4" y="675.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="943.4" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.40%)</title><rect x="940.4" y="659.0" width="28.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.4" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.40%)</title><rect x="940.4" y="643.0" width="28.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.4" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.40%)</title><rect x="940.4" y="627.0" width="28.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="943.4" y="638.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="963.1" y="611.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="966.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="963.1" y="595.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="966.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 4.33%)</title><rect x="968.8" y="675.0" width="51.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="971.8" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 3.85%)</title><rect x="974.4" y="659.0" width="45.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.4" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.92%)</title><rect x="997.1" y="643.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1000.1" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.92%)</title><rect x="997.1" y="627.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1000.1" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.92%)</title><rect x="997.1" y="611.0" width="22.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1000.1" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.92%)</title><rect x="997.1" y="595.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1000.1" y="606.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.96%)</title><rect x="1019.8" y="723.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.8" y="734.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.48%)</title><rect x="1025.5" y="707.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.5" y="718.0"></text>
</g>
<g>
<title>start_thread (28 samples, 13.46%)</title><rect x="1031.2" y="723.0" width="158.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1034.2" y="734.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (28 samples, 13.46%)</title><rect x="1031.2" y="707.0" width="158.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1034.2" y="718.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.85%)</title><rect x="1031.2" y="691.0" width="45.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.2" y="702.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.85%)</title><rect x="1031.2" y="675.0" width="45.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.2" y="686.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.37%)</title><rect x="1031.2" y="659.0" width="39.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.2" y="670.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.37%)</title><rect x="1031.2" y="643.0" width="39.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.2" y="654.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.40%)</title><rect x="1031.2" y="627.0" width="28.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.2" y="638.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.96%)</title><rect x="1048.2" y="611.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.2" y="622.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.96%)</title><rect x="1059.5" y="627.0" width="11.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1062.5" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.48%)</title><rect x="1070.9" y="659.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.9" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.48%)</title><rect x="1070.9" y="643.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.9" y="654.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.48%)</title><rect x="1070.9" y="627.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.9" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (20 samples, 9.62%)</title><rect x="1076.5" y="691.0" width="113.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.5" y="702.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (20 samples, 9.62%)</title><rect x="1076.5" y="675.0" width="113.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.5" y="686.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (20 samples, 9.62%)</title><rect x="1076.5" y="659.0" width="113.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.5" y="670.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (20 samples, 9.62%)</title><rect x="1076.5" y="643.0" width="113.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.5" y="654.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (18 samples, 8.65%)</title><rect x="1076.5" y="627.0" width="102.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.5" y="638.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (18 samples, 8.65%)</title><rect x="1076.5" y="611.0" width="102.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.5" y="622.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 3.85%)</title><rect x="1076.5" y="595.0" width="45.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.5" y="606.0">Comp..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.48%)</title><rect x="1076.5" y="579.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.5" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.48%)</title><rect x="1076.5" y="563.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.5" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.48%)</title><rect x="1076.5" y="547.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 3.37%)</title><rect x="1082.2" y="579.0" width="39.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.2" y="590.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.48%)</title><rect x="1082.2" y="563.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.2" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.48%)</title><rect x="1082.2" y="547.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.2" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.48%)</title><rect x="1082.2" y="531.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.2" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.48%)</title><rect x="1087.9" y="563.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.96%)</title><rect x="1093.6" y="563.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.96%)</title><rect x="1093.6" y="547.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.48%)</title><rect x="1099.2" y="531.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.2" y="542.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.48%)</title><rect x="1099.2" y="515.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.48%)</title><rect x="1104.9" y="563.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.9" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="1104.9" y="547.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.9" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.96%)</title><rect x="1110.6" y="563.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.6" y="574.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.48%)</title><rect x="1116.2" y="547.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.2" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="1116.2" y="531.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.2" y="542.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 2.88%)</title><rect x="1121.9" y="595.0" width="34.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.9" y="606.0">Co..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.48%)</title><rect x="1121.9" y="579.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.9" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.48%)</title><rect x="1121.9" y="563.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.9" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.48%)</title><rect x="1121.9" y="547.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.9" y="558.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.48%)</title><rect x="1121.9" y="531.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.9" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.92%)</title><rect x="1127.6" y="579.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.6" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.96%)</title><rect x="1127.6" y="563.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.6" y="574.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.48%)</title><rect x="1133.3" y="547.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="1138.9" y="563.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="1144.6" y="563.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.48%)</title><rect x="1144.6" y="547.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.48%)</title><rect x="1144.6" y="531.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.6" y="542.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.48%)</title><rect x="1150.3" y="579.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="1156.0" y="595.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="1156.0" y="579.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.44%)</title><rect x="1156.0" y="563.0" width="17.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.44%)</title><rect x="1156.0" y="547.0" width="17.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="1156.0" y="531.0" width="17.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1156.0" y="515.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1156.0" y="499.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1156.0" y="483.0" width="11.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="1156.0" y="467.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.96%)</title><rect x="1156.0" y="451.0" width="11.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.96%)</title><rect x="1156.0" y="435.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1156.0" y="419.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1156.0" y="403.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1156.0" y="387.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="1156.0" y="371.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.96%)</title><rect x="1156.0" y="355.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.96%)</title><rect x="1156.0" y="339.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1156.0" y="323.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1156.0" y="307.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1156.0" y="291.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1156.0" y="275.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1156.0" y="259.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1156.0" y="243.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1156.0" y="227.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1156.0" y="211.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1156.0" y="195.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1156.0" y="179.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1156.0" y="163.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1156.0" y="147.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1156.0" y="131.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1156.0" y="115.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_currentThread() (1 samples, 0.48%)</title><rect x="1156.0" y="99.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_current_thread(Node*&amp;) (1 samples, 0.48%)</title><rect x="1156.0" y="83.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1156.0" y="67.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="78.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.48%)</title><rect x="1156.0" y="51.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="62.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="1156.0" y="35.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1161.6" y="307.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="318.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1161.6" y="291.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.6" y="302.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.48%)</title><rect x="1161.6" y="275.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="286.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="1161.6" y="259.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="270.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="1161.6" y="243.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.6" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.48%)</title><rect x="1161.6" y="227.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.6" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1161.6" y="211.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="222.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="1161.6" y="195.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="206.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.48%)</title><rect x="1161.6" y="179.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="190.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.48%)</title><rect x="1161.6" y="163.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.48%)</title><rect x="1167.3" y="515.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.3" y="526.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.48%)</title><rect x="1167.3" y="499.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.3" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.48%)</title><rect x="1167.3" y="483.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.3" y="494.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.48%)</title><rect x="1167.3" y="467.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.3" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="1167.3" y="451.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.3" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1167.3" y="435.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.3" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="1167.3" y="419.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.3" y="430.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.48%)</title><rect x="1167.3" y="403.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="414.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.48%)</title><rect x="1173.0" y="595.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.48%)</title><rect x="1173.0" y="579.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="590.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.48%)</title><rect x="1173.0" y="563.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
<g>
<title>__GI___qsort_r (1 samples, 0.48%)</title><rect x="1173.0" y="547.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1176.0" y="558.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.96%)</title><rect x="1178.7" y="627.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="638.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.96%)</title><rect x="1178.7" y="611.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.96%)</title><rect x="1178.7" y="595.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.48%)</title><rect x="1178.7" y="579.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.48%)</title><rect x="1178.7" y="563.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="574.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.48%)</title><rect x="1178.7" y="547.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.48%)</title><rect x="1178.7" y="531.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.48%)</title><rect x="1178.7" y="515.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="526.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.48%)</title><rect x="1178.7" y="499.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="510.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.48%)</title><rect x="1184.3" y="579.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.48%)</title><rect x="1184.3" y="563.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.48%)</title><rect x="1184.3" y="547.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.48%)</title><rect x="1184.3" y="531.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>CompilerOracle::should_print(methodHandle) (1 samples, 0.48%)</title><rect x="1184.3" y="515.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="526.0"></text>
</g>
</g>
</svg>
