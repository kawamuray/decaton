<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (1,004 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>__GI___mprotect (1 samples, 0.10%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (249 samples, 24.80%)</title><rect x="11.2" y="787.0" width="292.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="798.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.10%)</title><rect x="11.2" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.10%)</title><rect x="11.2" y="755.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.10%)</title><rect x="11.2" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.10%)</title><rect x="11.2" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.10%)</title><rect x="11.2" y="707.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.10%)</title><rect x="11.2" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.metadata (1 samples, 0.10%)</title><rect x="11.2" y="675.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (247 samples, 24.60%)</title><rect x="12.4" y="771.0" width="290.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.4" y="782.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.40%)</title><rect x="13.5" y="755.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.40%)</title><rect x="13.5" y="739.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/543331443.accept (4 samples, 0.40%)</title><rect x="13.5" y="723.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.40%)</title><rect x="13.5" y="707.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.40%)</title><rect x="13.5" y="691.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.40%)</title><rect x="13.5" y="675.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.20%)</title><rect x="18.2" y="755.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.20%)</title><rect x="18.2" y="739.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="18.2" y="723.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="18.2" y="707.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="18.2" y="691.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="18.2" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="18.2" y="659.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="18.2" y="643.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="18.2" y="627.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="19.4" y="691.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="19.4" y="675.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="19.4" y="659.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.4" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.4" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="19.4" y="611.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="19.4" y="595.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/736738084.get (1 samples, 0.10%)</title><rect x="19.4" y="579.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (189 samples, 18.82%)</title><rect x="20.6" y="755.0" width="222.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.6" y="766.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/216751329.accept (180 samples, 17.93%)</title><rect x="20.6" y="739.0" width="211.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.6" y="750.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (180 samples, 17.93%)</title><rect x="20.6" y="723.0" width="211.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.6" y="734.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (143 samples, 14.24%)</title><rect x="31.2" y="707.0" width="168.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.2" y="718.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (143 samples, 14.24%)</title><rect x="31.2" y="691.0" width="168.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.2" y="702.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (143 samples, 14.24%)</title><rect x="31.2" y="675.0" width="168.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.2" y="686.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (143 samples, 14.24%)</title><rect x="31.2" y="659.0" width="168.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.2" y="670.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (143 samples, 14.24%)</title><rect x="31.2" y="643.0" width="168.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.2" y="654.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (143 samples, 14.24%)</title><rect x="31.2" y="627.0" width="168.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.2" y="638.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 9.46%)</title><rect x="31.2" y="611.0" width="111.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.2" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 2.09%)</title><rect x="31.2" y="595.0" width="24.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.2" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 2.09%)</title><rect x="31.2" y="579.0" width="24.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.2" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.69%)</title><rect x="35.9" y="563.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.69%)</title><rect x="35.9" y="547.0" width="19.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.50%)</title><rect x="55.8" y="595.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.50%)</title><rect x="55.8" y="579.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.30%)</title><rect x="57.0" y="563.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.0" y="574.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.30%)</title><rect x="57.0" y="547.0" width="3.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="60.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.10%)</title><rect x="60.5" y="563.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (69 samples, 6.87%)</title><rect x="61.7" y="595.0" width="81.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.7" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (69 samples, 6.87%)</title><rect x="61.7" y="579.0" width="81.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.7" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 6.87%)</title><rect x="61.7" y="563.0" width="81.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 6.87%)</title><rect x="61.7" y="547.0" width="81.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="558.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (69 samples, 6.87%)</title><rect x="61.7" y="531.0" width="81.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.7" y="542.0">sun/misc/..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="61.7" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="64.7" y="526.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="62.9" y="515.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="65.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="64.1" y="515.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.1" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 5.78%)</title><rect x="65.2" y="515.0" width="68.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="68.2" y="526.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="66.4" y="499.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="69.4" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 4.18%)</title><rect x="68.8" y="499.0" width="49.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="71.8" y="510.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.20%)</title><rect x="118.1" y="499.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="121.1" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.10%)</title><rect x="120.5" y="499.0" width="12.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="123.5" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.30%)</title><rect x="133.4" y="515.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="136.4" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.50%)</title><rect x="136.9" y="515.0" width="5.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="139.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (41 samples, 4.08%)</title><rect x="142.8" y="611.0" width="48.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.8" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (41 samples, 4.08%)</title><rect x="142.8" y="595.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.8" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (41 samples, 4.08%)</title><rect x="142.8" y="579.0" width="48.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.8" y="590.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.40%)</title><rect x="191.0" y="611.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.40%)</title><rect x="191.0" y="595.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.40%)</title><rect x="191.0" y="579.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.30%)</title><rect x="195.7" y="611.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.30%)</title><rect x="195.7" y="595.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="195.7" y="579.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="195.7" y="563.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.20%)</title><rect x="196.9" y="579.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.20%)</title><rect x="196.9" y="563.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.50%)</title><rect x="199.2" y="707.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.50%)</title><rect x="199.2" y="691.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.10%)</title><rect x="205.1" y="707.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="205.1" y="691.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="205.1" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (19 samples, 1.89%)</title><rect x="206.3" y="707.0" width="22.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.3" y="718.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.89%)</title><rect x="206.3" y="691.0" width="22.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.3" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.70%)</title><rect x="219.2" y="675.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.2" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.20%)</title><rect x="219.2" y="659.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.2" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.20%)</title><rect x="219.2" y="643.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.2" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.20%)</title><rect x="219.2" y="627.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="221.6" y="659.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.40%)</title><rect x="222.7" y="659.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.7" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="227.4" y="675.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="230.4" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="228.6" y="707.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="231.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.20%)</title><rect x="232.1" y="739.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.20%)</title><rect x="232.1" y="723.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.20%)</title><rect x="232.1" y="707.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.1" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="232.1" y="691.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="235.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.10%)</title><rect x="233.3" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.60%)</title><rect x="234.5" y="739.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.60%)</title><rect x="234.5" y="723.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.60%)</title><rect x="234.5" y="707.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.60%)</title><rect x="234.5" y="691.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.40%)</title><rect x="236.8" y="675.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="241.5" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="241.5" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 5.08%)</title><rect x="242.7" y="755.0" width="59.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.7" y="766.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 5.08%)</title><rect x="242.7" y="739.0" width="59.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.7" y="750.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 2.79%)</title><rect x="242.7" y="723.0" width="32.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.7" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (27 samples, 2.69%)</title><rect x="243.9" y="707.0" width="31.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.9" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 2.69%)</title><rect x="243.9" y="691.0" width="31.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.9" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 2.39%)</title><rect x="243.9" y="675.0" width="28.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.9" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 2.39%)</title><rect x="243.9" y="659.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.9" y="670.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 1.00%)</title><rect x="245.1" y="643.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.50%)</title><rect x="250.9" y="627.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.50%)</title><rect x="250.9" y="611.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.50%)</title><rect x="250.9" y="595.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.50%)</title><rect x="250.9" y="579.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.50%)</title><rect x="250.9" y="563.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.50%)</title><rect x="250.9" y="547.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.50%)</title><rect x="250.9" y="531.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.29%)</title><rect x="256.8" y="643.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.29%)</title><rect x="256.8" y="627.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.80%)</title><rect x="256.8" y="611.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.8" y="622.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.80%)</title><rect x="256.8" y="595.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.50%)</title><rect x="266.2" y="611.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.2" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.50%)</title><rect x="266.2" y="595.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.2" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="270.9" y="579.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="273.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.20%)</title><rect x="272.1" y="675.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.20%)</title><rect x="272.1" y="659.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="272.1" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="272.1" y="627.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="273.3" y="643.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="273.3" y="627.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="273.3" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="274.4" y="675.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.10%)</title><rect x="274.4" y="659.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 1.20%)</title><rect x="275.6" y="723.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 1.00%)</title><rect x="275.6" y="707.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.80%)</title><rect x="275.6" y="691.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.6" y="702.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="276.8" y="675.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.8" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="276.8" y="659.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="279.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.20%)</title><rect x="278.0" y="675.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.20%)</title><rect x="278.0" y="659.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="279.1" y="643.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="279.1" y="627.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="279.1" y="611.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="279.1" y="595.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="279.1" y="579.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="279.1" y="563.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="279.1" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.40%)</title><rect x="280.3" y="675.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.40%)</title><rect x="280.3" y="659.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="280.3" y="643.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="280.3" y="627.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="280.3" y="611.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="280.3" y="595.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="280.3" y="579.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.3" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="280.3" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.3" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="280.3" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.3" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="281.5" y="563.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.5" y="574.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="281.5" y="547.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="281.5" y="531.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="281.5" y="515.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="281.5" y="499.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.5" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="281.5" y="483.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="284.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="282.7" y="563.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="282.7" y="547.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="282.7" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="282.7" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/2136288211.get (1 samples, 0.10%)</title><rect x="282.7" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="283.8" y="643.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="286.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="283.8" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="283.8" y="611.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="283.8" y="595.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.20%)</title><rect x="285.0" y="691.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.20%)</title><rect x="285.0" y="675.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="285.0" y="659.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.20%)</title><rect x="285.0" y="643.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.20%)</title><rect x="285.0" y="627.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="285.0" y="611.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="285.0" y="595.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.20%)</title><rect x="285.0" y="579.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="285.0" y="563.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="286.2" y="563.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.10%)</title><rect x="286.2" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.20%)</title><rect x="287.4" y="707.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="287.4" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="287.4" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.10%)</title><rect x="287.4" y="659.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.10%)</title><rect x="287.4" y="643.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.10%)</title><rect x="287.4" y="627.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.10%)</title><rect x="287.4" y="611.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.10%)</title><rect x="288.5" y="691.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.10%)</title><rect x="288.5" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.50%)</title><rect x="289.7" y="723.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.30%)</title><rect x="289.7" y="707.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.30%)</title><rect x="289.7" y="691.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.20%)</title><rect x="289.7" y="675.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.10%)</title><rect x="289.7" y="659.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="289.7" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="289.7" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="289.7" y="611.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="290.9" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="290.9" y="643.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="290.9" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="290.9" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="290.9" y="595.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="290.9" y="579.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.9" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="290.9" y="563.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="293.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="292.1" y="675.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="292.1" y="659.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="292.1" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="292.1" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="292.1" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.10%)</title><rect x="292.1" y="595.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.10%)</title><rect x="292.1" y="579.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="590.0"></text>
</g>
<g>
<title>__GI_epoll_ctl (1 samples, 0.10%)</title><rect x="292.1" y="563.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="295.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.20%)</title><rect x="293.2" y="707.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.20%)</title><rect x="293.2" y="691.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.20%)</title><rect x="293.2" y="675.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.20%)</title><rect x="293.2" y="659.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.20%)</title><rect x="293.2" y="643.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.20%)</title><rect x="293.2" y="627.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.10%)</title><rect x="293.2" y="611.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.2" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (1 samples, 0.10%)</title><rect x="293.2" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.10%)</title><rect x="294.4" y="611.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.10%)</title><rect x="294.4" y="595.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.40%)</title><rect x="295.6" y="723.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.40%)</title><rect x="295.6" y="707.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="295.6" y="691.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="295.6" y="675.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.30%)</title><rect x="296.8" y="691.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="299.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="296.8" y="675.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="296.8" y="659.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="296.8" y="643.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.10%)</title><rect x="296.8" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.20%)</title><rect x="297.9" y="675.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="297.9" y="659.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="297.9" y="643.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="297.9" y="627.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="297.9" y="611.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="297.9" y="595.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.9" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="297.9" y="579.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.9" y="590.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.20%)</title><rect x="297.9" y="563.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.20%)</title><rect x="297.9" y="547.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.9" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="297.9" y="531.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="297.9" y="515.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/479436363.test (1 samples, 0.10%)</title><rect x="297.9" y="499.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/479436363.test (1 samples, 0.10%)</title><rect x="299.1" y="515.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.10%)</title><rect x="299.1" y="499.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1746558644.test (1 samples, 0.10%)</title><rect x="299.1" y="483.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.10%)</title><rect x="299.1" y="467.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="299.1" y="451.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="299.1" y="435.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="299.1" y="419.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.20%)</title><rect x="300.3" y="723.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="300.3" y="707.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="300.3" y="691.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="301.5" y="675.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="301.5" y="659.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="301.5" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="302.6" y="771.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.6" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="302.6" y="755.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="305.6" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="302.6" y="739.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="305.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (638 samples, 63.55%)</title><rect x="303.8" y="787.0" width="749.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.8" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (638 samples, 63.55%)</title><rect x="303.8" y="771.0" width="749.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.8" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (638 samples, 63.55%)</title><rect x="303.8" y="755.0" width="749.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.8" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1214051491.run (434 samples, 43.23%)</title><rect x="308.5" y="739.0" width="510.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.5" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/12140..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (434 samples, 43.23%)</title><rect x="308.5" y="723.0" width="510.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (434 samples, 43.23%)</title><rect x="308.5" y="707.0" width="510.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.5" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (430 samples, 42.83%)</title><rect x="308.5" y="691.0" width="505.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.5" y="702.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="320.3" y="675.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="323.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.20%)</title><rect x="321.5" y="675.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (139 samples, 13.84%)</title><rect x="323.8" y="675.0" width="163.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.8" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (139 samples, 13.84%)</title><rect x="323.8" y="659.0" width="163.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.8" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (139 samples, 13.84%)</title><rect x="323.8" y="643.0" width="163.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.8" y="654.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (139 samples, 13.84%)</title><rect x="323.8" y="627.0" width="163.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.8" y="638.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (139 samples, 13.84%)</title><rect x="323.8" y="611.0" width="163.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.8" y="622.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (139 samples, 13.84%)</title><rect x="323.8" y="595.0" width="163.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.8" y="606.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (47 samples, 4.68%)</title><rect x="323.8" y="579.0" width="55.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.8" y="590.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 1.00%)</title><rect x="337.9" y="563.0" width="11.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="340.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.80%)</title><rect x="340.3" y="547.0" width="9.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="343.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="349.7" y="563.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="352.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.10%)</title><rect x="353.2" y="547.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="353.2" y="531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.2" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="353.2" y="515.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="353.2" y="499.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="353.2" y="483.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 2.09%)</title><rect x="354.4" y="563.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.4" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 1.00%)</title><rect x="367.3" y="547.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.80%)</title><rect x="367.3" y="531.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="370.3" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="367.3" y="515.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="370.3" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="368.5" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="371.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="368.5" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.5" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="369.6" y="515.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="372.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="369.6" y="499.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="372.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.50%)</title><rect x="370.8" y="515.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="373.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="376.7" y="531.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.7" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="376.7" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="379.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="377.9" y="515.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="377.9" y="499.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.9" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="377.9" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="380.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="377.9" y="467.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="380.9" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="377.9" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="380.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (82 samples, 8.17%)</title><rect x="379.0" y="579.0" width="96.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.0" y="590.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.30%)</title><rect x="380.2" y="563.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.10%)</title><rect x="383.7" y="563.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.10%)</title><rect x="384.9" y="563.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.40%)</title><rect x="386.1" y="563.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.40%)</title><rect x="386.1" y="547.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.60%)</title><rect x="390.8" y="563.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.50%)</title><rect x="392.0" y="547.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.40%)</title><rect x="393.1" y="531.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.40%)</title><rect x="393.1" y="515.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.10%)</title><rect x="397.8" y="563.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.8" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="397.8" y="547.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="400.8" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="397.8" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="400.8" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="397.8" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="400.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="397.8" y="499.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="400.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 6.47%)</title><rect x="399.0" y="563.0" width="76.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.0" y="574.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.99%)</title><rect x="401.4" y="547.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.4" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.10%)</title><rect x="401.4" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="402.5" y="531.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="402.5" y="515.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="405.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="402.5" y="499.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.80%)</title><rect x="408.4" y="531.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.30%)</title><rect x="417.8" y="531.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.30%)</title><rect x="417.8" y="515.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.30%)</title><rect x="421.4" y="531.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.20%)</title><rect x="424.9" y="547.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (41 samples, 4.08%)</title><rect x="427.2" y="547.0" width="48.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.2" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (41 samples, 4.08%)</title><rect x="427.2" y="531.0" width="48.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.2" y="542.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.88%)</title><rect x="429.6" y="515.0" width="45.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.6" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.10%)</title><rect x="431.9" y="499.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.30%)</title><rect x="436.6" y="483.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.30%)</title><rect x="436.6" y="467.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.30%)</title><rect x="436.6" y="451.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="439.0" y="435.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.20%)</title><rect x="440.2" y="483.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="442.5" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="442.5" y="467.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="443.7" y="483.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.60%)</title><rect x="444.9" y="499.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.40%)</title><rect x="447.2" y="483.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.40%)</title><rect x="447.2" y="467.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.40%)</title><rect x="447.2" y="451.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.40%)</title><rect x="447.2" y="435.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="451.9" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.50%)</title><rect x="453.1" y="499.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="456.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.20%)</title><rect x="456.6" y="483.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="459.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.20%)</title><rect x="456.6" y="467.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.20%)</title><rect x="456.6" y="451.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="459.6" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.20%)</title><rect x="456.6" y="435.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.90%)</title><rect x="459.0" y="499.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.90%)</title><rect x="459.0" y="483.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.90%)</title><rect x="459.0" y="467.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="467.2" y="451.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.10%)</title><rect x="468.4" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.50%)</title><rect x="469.5" y="499.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="472.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 1.00%)</title><rect x="475.4" y="579.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.10%)</title><rect x="476.6" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.80%)</title><rect x="477.8" y="563.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.80%)</title><rect x="477.8" y="547.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.80%)</title><rect x="477.8" y="531.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.80%)</title><rect x="477.8" y="515.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (263 samples, 26.20%)</title><rect x="487.2" y="675.0" width="309.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.2" y="686.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (39 samples, 3.88%)</title><rect x="488.3" y="659.0" width="45.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.3" y="670.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (39 samples, 3.88%)</title><rect x="488.3" y="643.0" width="45.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.3" y="654.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (39 samples, 3.88%)</title><rect x="488.3" y="627.0" width="45.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.3" y="638.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.99%)</title><rect x="496.6" y="611.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="499.6" y="622.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (20 samples, 1.99%)</title><rect x="496.6" y="595.0" width="23.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.6" y="606.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (20 samples, 1.99%)</title><rect x="496.6" y="579.0" width="23.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.6" y="590.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (20 samples, 1.99%)</title><rect x="496.6" y="563.0" width="23.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="499.6" y="574.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.80%)</title><rect x="520.1" y="611.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.80%)</title><rect x="520.1" y="595.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="523.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.80%)</title><rect x="520.1" y="579.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="523.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 0.40%)</title><rect x="529.5" y="611.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="532.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.20%)</title><rect x="531.8" y="595.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.20%)</title><rect x="531.8" y="579.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.80%)</title><rect x="534.2" y="659.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.80%)</title><rect x="534.2" y="643.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="537.2" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="534.2" y="627.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="537.2" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="534.2" y="611.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="537.2" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="534.2" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="537.2" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.70%)</title><rect x="535.4" y="627.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (157 samples, 15.64%)</title><rect x="543.6" y="659.0" width="184.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="546.6" y="670.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="545.9" y="643.0" width="5.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="548.9" y="654.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="547.1" y="627.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="550.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 14.84%)</title><rect x="551.8" y="643.0" width="175.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.8" y="654.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (59 samples, 5.88%)</title><rect x="557.7" y="627.0" width="69.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.7" y="638.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (49 samples, 4.88%)</title><rect x="567.1" y="611.0" width="57.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.1" y="622.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (31 samples, 3.09%)</title><rect x="577.7" y="595.0" width="36.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="580.7" y="606.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="587.1" y="579.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.1" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.39%)</title><rect x="588.2" y="579.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.2" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.39%)</title><rect x="588.2" y="563.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="591.2" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.39%)</title><rect x="588.2" y="547.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.2" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.10%)</title><rect x="590.6" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="593.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 1.10%)</title><rect x="591.8" y="531.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="594.8" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.70%)</title><rect x="592.9" y="515.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="595.9" y="526.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.10%)</title><rect x="592.9" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="595.9" y="510.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="594.1" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.1" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.50%)</title><rect x="595.3" y="499.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="598.3" y="510.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.40%)</title><rect x="596.5" y="483.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.5" y="494.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="596.5" y="467.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="599.5" y="478.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.20%)</title><rect x="597.6" y="467.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.6" y="478.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="600.0" y="467.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.0" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="601.2" y="515.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="604.2" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="601.2" y="499.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="604.2" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="602.4" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="605.4" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="603.5" y="515.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="606.5" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="604.7" y="579.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.7" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="608.2" y="579.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="611.2" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="610.6" y="579.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="613.6" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.90%)</title><rect x="614.1" y="595.0" width="10.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="617.1" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="624.7" y="611.0" width="2.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="627.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.40%)</title><rect x="627.0" y="627.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="630.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.40%)</title><rect x="627.0" y="611.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="627.0" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="630.0" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="627.0" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="627.0" y="563.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="630.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="628.2" y="595.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.2" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 8.07%)</title><rect x="631.7" y="627.0" width="95.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.7" y="638.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 7.87%)</title><rect x="634.1" y="611.0" width="92.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.1" y="622.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.39%)</title><rect x="645.8" y="595.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="648.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (14 samples, 1.39%)</title><rect x="645.8" y="579.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (14 samples, 1.39%)</title><rect x="645.8" y="563.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (14 samples, 1.39%)</title><rect x="645.8" y="547.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="662.3" y="595.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="662.3" y="579.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="662.3" y="563.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="663.5" y="547.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.5" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (52 samples, 5.18%)</title><rect x="665.8" y="595.0" width="61.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.8" y="606.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (44 samples, 4.38%)</title><rect x="675.2" y="579.0" width="51.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.2" y="590.0">java/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.10%)</title><rect x="676.4" y="563.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.50%)</title><rect x="677.6" y="563.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.50%)</title><rect x="677.6" y="547.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.69%)</title><rect x="683.4" y="563.0" width="43.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.4" y="574.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.40%)</title><rect x="707.0" y="547.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 1.00%)</title><rect x="711.7" y="547.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="714.7" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="722.2" y="531.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="725.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="722.2" y="515.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="725.2" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="722.2" y="499.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="725.2" y="510.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="723.4" y="547.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="726.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="726.9" y="643.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 4.18%)</title><rect x="728.1" y="659.0" width="49.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.1" y="670.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="728.1" y="643.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (41 samples, 4.08%)</title><rect x="729.3" y="643.0" width="48.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.3" y="654.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/580786606.process (19 samples, 1.89%)</title><rect x="732.8" y="627.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.8" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (17 samples, 1.69%)</title><rect x="735.2" y="611.0" width="19.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.39%)</title><rect x="737.5" y="595.0" width="16.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.40%)</title><rect x="748.1" y="579.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.1" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.40%)</title><rect x="748.1" y="563.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="751.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="748.1" y="547.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="751.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="752.8" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.10%)</title><rect x="752.8" y="563.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="754.0" y="595.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="754.0" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="754.0" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="754.0" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="755.1" y="627.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="755.1" y="611.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.80%)</title><rect x="758.7" y="627.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.40%)</title><rect x="763.4" y="611.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.4" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="763.4" y="595.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="766.4" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.30%)</title><rect x="764.5" y="595.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="767.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.20%)</title><rect x="768.1" y="627.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="771.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.20%)</title><rect x="768.1" y="611.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="771.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.60%)</title><rect x="770.4" y="627.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="777.5" y="659.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.49%)</title><rect x="778.6" y="659.0" width="17.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.6" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="778.6" y="643.0" width="5.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="781.6" y="654.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="778.6" y="627.0" width="5.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="781.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 1.00%)</title><rect x="784.5" y="643.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.5" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="788.0" y="627.0" width="5.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="791.0" y="638.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="789.2" y="611.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="792.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="793.9" y="627.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="796.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/548143039.accept (2 samples, 0.20%)</title><rect x="793.9" y="611.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (2 samples, 0.20%)</title><rect x="793.9" y="595.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1378091292.complete (2 samples, 0.20%)</title><rect x="793.9" y="579.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.20%)</title><rect x="793.9" y="563.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.20%)</title><rect x="793.9" y="547.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.9" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.20%)</title><rect x="793.9" y="531.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.9" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.20%)</title><rect x="793.9" y="515.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="796.9" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.20%)</title><rect x="793.9" y="499.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="796.9" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.20%)</title><rect x="793.9" y="483.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.80%)</title><rect x="796.3" y="675.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="799.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.80%)</title><rect x="796.3" y="659.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="799.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.60%)</title><rect x="798.6" y="643.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="801.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/548143039.accept (6 samples, 0.60%)</title><rect x="798.6" y="627.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (6 samples, 0.60%)</title><rect x="798.6" y="611.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1378091292.complete (6 samples, 0.60%)</title><rect x="798.6" y="595.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (6 samples, 0.60%)</title><rect x="798.6" y="579.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 0.60%)</title><rect x="798.6" y="563.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.6" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 0.60%)</title><rect x="798.6" y="547.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.6" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 0.60%)</title><rect x="798.6" y="531.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.6" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.60%)</title><rect x="798.6" y="515.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.6" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.60%)</title><rect x="798.6" y="499.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.6" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.70%)</title><rect x="805.7" y="675.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="808.7" y="686.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.70%)</title><rect x="805.7" y="659.0" width="8.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="808.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.40%)</title><rect x="813.9" y="691.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.9" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="813.9" y="675.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="816.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="815.1" y="659.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="818.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="817.4" y="675.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.10%)</title><rect x="818.6" y="739.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.20%)</title><rect x="819.8" y="739.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="822.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="819.8" y="723.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="819.8" y="707.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="819.8" y="691.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (197 samples, 19.62%)</title><rect x="822.1" y="739.0" width="231.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.1" y="750.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (197 samples, 19.62%)</title><rect x="822.1" y="723.0" width="231.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="825.1" y="734.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 17.93%)</title><rect x="825.7" y="707.0" width="211.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="828.7" y="718.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.10%)</title><rect x="844.5" y="691.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.10%)</title><rect x="844.5" y="675.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.29%)</title><rect x="845.6" y="691.0" width="15.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="848.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 1.10%)</title><rect x="860.9" y="691.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="863.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.10%)</title><rect x="860.9" y="675.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="863.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.10%)</title><rect x="860.9" y="659.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.10%)</title><rect x="860.9" y="643.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (137 samples, 13.65%)</title><rect x="873.8" y="691.0" width="161.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.8" y="702.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (137 samples, 13.65%)</title><rect x="873.8" y="675.0" width="161.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="876.8" y="686.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.30%)</title><rect x="880.9" y="659.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="883.9" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="884.4" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.4" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (122 samples, 12.15%)</title><rect x="885.6" y="659.0" width="143.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="888.6" y="670.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="893.8" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="896.8" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.79%)</title><rect x="895.0" y="643.0" width="21.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="654.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.60%)</title><rect x="905.6" y="627.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="908.6" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="910.3" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.3" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="911.5" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.5" y="622.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="912.6" y="627.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="915.6" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.20%)</title><rect x="913.8" y="627.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.8" y="638.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="916.2" y="643.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.2" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="918.5" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.5" y="654.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.70%)</title><rect x="919.7" y="643.0" width="8.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="922.7" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 3.78%)</title><rect x="927.9" y="643.0" width="44.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="930.9" y="654.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (31 samples, 3.09%)</title><rect x="972.6" y="643.0" width="36.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="975.6" y="654.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.40%)</title><rect x="1009.0" y="643.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1012.0" y="654.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.20%)</title><rect x="1013.7" y="643.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1016.7" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.20%)</title><rect x="1016.1" y="643.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1019.1" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1018.4" y="643.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1021.4" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="1020.8" y="643.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1023.8" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1023.1" y="643.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1026.1" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.30%)</title><rect x="1024.3" y="643.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1027.3" y="654.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1027.8" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.8" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.40%)</title><rect x="1029.0" y="659.0" width="4.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1032.0" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1033.7" y="659.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.7" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 0.20%)</title><rect x="1034.9" y="691.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1037.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.39%)</title><rect x="1037.2" y="707.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1040.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.39%)</title><rect x="1037.2" y="691.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1040.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.39%)</title><rect x="1037.2" y="675.0" width="16.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1040.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.39%)</title><rect x="1037.2" y="659.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.2" y="670.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.10%)</title><rect x="1053.7" y="787.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1056.7" y="798.0"></text>
</g>
<g>
<title>start_thread (115 samples, 11.45%)</title><rect x="1054.8" y="787.0" width="135.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1057.8" y="798.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (115 samples, 11.45%)</title><rect x="1054.8" y="771.0" width="135.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1057.8" y="782.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.09%)</title><rect x="1054.8" y="755.0" width="24.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.8" y="766.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1054.8" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.8" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1054.8" y="723.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1057.8" y="734.0"></text>
</g>
<g>
<title>G1ParCopyHelper::G1ParCopyHelper(G1CollectedHeap*, G1ParScanThreadState*) (1 samples, 0.10%)</title><rect x="1056.0" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.0" y="750.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.20%)</title><rect x="1057.2" y="739.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1060.2" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.20%)</title><rect x="1057.2" y="723.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.2" y="734.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1057.2" y="707.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1060.2" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.69%)</title><rect x="1059.5" y="739.0" width="20.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.5" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.50%)</title><rect x="1059.5" y="723.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.5" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1059.5" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.5" y="718.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.40%)</title><rect x="1060.7" y="707.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1063.7" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 0.90%)</title><rect x="1065.4" y="723.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1068.4" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.40%)</title><rect x="1065.4" y="707.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.4" y="718.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.20%)</title><rect x="1065.4" y="691.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.4" y="702.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.20%)</title><rect x="1065.4" y="675.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.4" y="686.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1066.6" y="659.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.6" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1067.8" y="691.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.8" y="702.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1067.8" y="675.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.8" y="686.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.10%)</title><rect x="1067.8" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.8" y="670.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1067.8" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.8" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1067.8" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.8" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="1067.8" y="611.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.8" y="622.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.10%)</title><rect x="1068.9" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.9" y="670.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.10%)</title><rect x="1068.9" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.9" y="654.0"></text>
</g>
<g>
<title>metadata_Relocation::value() (1 samples, 0.10%)</title><rect x="1068.9" y="627.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.9" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.50%)</title><rect x="1070.1" y="707.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.1" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.50%)</title><rect x="1070.1" y="691.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.1" y="702.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1074.8" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.8" y="686.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1074.8" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.8" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.30%)</title><rect x="1076.0" y="723.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.0" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.30%)</title><rect x="1076.0" y="707.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.30%)</title><rect x="1076.0" y="691.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.0" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.30%)</title><rect x="1076.0" y="675.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.0" y="686.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.30%)</title><rect x="1076.0" y="659.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.0" y="670.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.30%)</title><rect x="1076.0" y="643.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.0" y="654.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.20%)</title><rect x="1077.2" y="627.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.2" y="638.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1078.3" y="611.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (91 samples, 9.06%)</title><rect x="1079.5" y="755.0" width="107.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.5" y="766.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 9.06%)</title><rect x="1079.5" y="739.0" width="107.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1082.5" y="750.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 9.06%)</title><rect x="1079.5" y="723.0" width="107.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.5" y="734.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (90 samples, 8.96%)</title><rect x="1079.5" y="707.0" width="105.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.5" y="718.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (90 samples, 8.96%)</title><rect x="1079.5" y="691.0" width="105.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.5" y="702.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (90 samples, 8.96%)</title><rect x="1079.5" y="675.0" width="105.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.5" y="686.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 4.28%)</title><rect x="1079.5" y="659.0" width="50.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.5" y="670.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1079.5" y="643.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.5" y="654.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1079.5" y="627.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.5" y="638.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.30%)</title><rect x="1080.7" y="643.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.7" y="654.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="1081.9" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.9" y="638.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1081.9" y="611.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.9" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1083.0" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.0" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1083.0" y="611.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.0" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.40%)</title><rect x="1084.2" y="643.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.2" y="654.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.10%)</title><rect x="1084.2" y="627.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.2" y="638.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1085.4" y="627.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.4" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1086.6" y="627.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.6" y="638.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1086.6" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.6" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1087.7" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="622.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1087.7" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.7" y="606.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.10%)</title><rect x="1087.7" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.7" y="590.0"></text>
</g>
<g>
<title>MachNode::MachNode() (1 samples, 0.10%)</title><rect x="1087.7" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.10%)</title><rect x="1088.9" y="643.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.9" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.10%)</title><rect x="1088.9" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.9" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1090.1" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.1" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1090.1" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.1" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1090.1" y="611.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.1" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1090.1" y="595.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.1" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 3.29%)</title><rect x="1091.3" y="643.0" width="38.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.3" y="654.0">Pha..</text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1092.5" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.20%)</title><rect x="1093.6" y="627.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.6" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.20%)</title><rect x="1093.6" y="611.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.30%)</title><rect x="1096.0" y="627.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.0" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.30%)</title><rect x="1096.0" y="611.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.50%)</title><rect x="1099.5" y="627.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="1104.2" y="611.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1104.2" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.40%)</title><rect x="1105.4" y="627.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.4" y="638.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.10%)</title><rect x="1106.6" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.20%)</title><rect x="1107.7" y="611.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.7" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1108.9" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1110.1" y="627.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.60%)</title><rect x="1111.3" y="627.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.3" y="638.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1116.0" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.0" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1117.1" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1118.3" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.3" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.20%)</title><rect x="1119.5" y="627.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1120.7" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.7" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.10%)</title><rect x="1121.8" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.8" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1123.0" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.0" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1123.0" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1124.2" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.2" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1124.2" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.2" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.30%)</title><rect x="1125.4" y="627.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="638.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1128.9" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.9" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 4.08%)</title><rect x="1130.1" y="659.0" width="48.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.1" y="670.0">Comp..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.30%)</title><rect x="1130.1" y="643.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1132.4" y="627.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1132.4" y="611.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.4" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1132.4" y="595.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1133.6" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1133.6" y="627.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="611.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="563.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="547.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="531.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="515.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="499.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="467.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="451.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="435.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="419.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="387.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="371.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="355.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="339.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="323.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="307.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="291.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="259.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="243.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="227.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="211.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="195.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="179.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="163.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.6" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="147.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="131.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.6" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1133.6" y="115.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.6" y="126.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.10%)</title><rect x="1133.6" y="99.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.6" y="110.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (30 samples, 2.99%)</title><rect x="1134.8" y="643.0" width="35.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="654.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1134.8" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.8" y="638.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1134.8" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1135.9" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1135.9" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1135.9" y="595.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 2.19%)</title><rect x="1137.1" y="627.0" width="25.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="638.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (22 samples, 2.19%)</title><rect x="1137.1" y="611.0" width="25.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (22 samples, 2.19%)</title><rect x="1137.1" y="595.0" width="25.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.30%)</title><rect x="1159.4" y="579.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.30%)</title><rect x="1163.0" y="627.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1165.3" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1166.5" y="627.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="638.0"></text>
</g>
<g>
<title>StartNode::pinned() const (1 samples, 0.10%)</title><rect x="1168.8" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.8" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1170.0" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1170.0" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1170.0" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.50%)</title><rect x="1171.2" y="643.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.50%)</title><rect x="1171.2" y="627.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1171.2" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1171.2" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1172.4" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="622.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1172.4" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.4" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.4" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1172.4" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1173.5" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.7" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.7" y="622.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.10%)</title><rect x="1174.7" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="606.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1175.9" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1175.9" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1177.1" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.10%)</title><rect x="1177.1" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1177.1" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.60%)</title><rect x="1178.2" y="659.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.60%)</title><rect x="1178.2" y="643.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.60%)</title><rect x="1178.2" y="627.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.60%)</title><rect x="1178.2" y="611.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.60%)</title><rect x="1178.2" y="595.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.50%)</title><rect x="1178.2" y="579.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.20%)</title><rect x="1178.2" y="563.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.20%)</title><rect x="1178.2" y="547.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.20%)</title><rect x="1178.2" y="531.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.20%)</title><rect x="1178.2" y="515.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.20%)</title><rect x="1178.2" y="499.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1178.2" y="483.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1179.4" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1179.4" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1179.4" y="451.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1179.4" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1179.4" y="419.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1180.6" y="563.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1180.6" y="547.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1180.6" y="531.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1180.6" y="515.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1180.6" y="499.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1180.6" y="483.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.6" y="467.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.6" y="451.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.6" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.6" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.6" y="403.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.6" y="387.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.6" y="371.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.6" y="355.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.6" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.6" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.6" y="307.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.6" y="291.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1180.6" y="275.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="467.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.8" y="419.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.8" y="403.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.8" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.8" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="355.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="339.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.8" y="323.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.8" y="307.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.8" y="291.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.8" y="275.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="259.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="243.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="254.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1181.8" y="227.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1181.8" y="211.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="222.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="195.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1181.8" y="179.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="190.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1181.8" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="547.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="531.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="499.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="483.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="467.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="451.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="435.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="419.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="403.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="371.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="355.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="339.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="323.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="307.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="291.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="275.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="259.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="243.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="227.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="211.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="195.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="179.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="163.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="147.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="131.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="115.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="99.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="83.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="67.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="51.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="62.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="35.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1184.1" y="579.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1184.1" y="547.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1184.1" y="531.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.10%)</title><rect x="1184.1" y="515.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.10%)</title><rect x="1184.1" y="499.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1184.1" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.10%)</title><rect x="1185.3" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.10%)</title><rect x="1185.3" y="691.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.10%)</title><rect x="1185.3" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.10%)</title><rect x="1185.3" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="670.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.10%)</title><rect x="1185.3" y="643.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.3" y="654.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1185.3" y="627.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.30%)</title><rect x="1186.5" y="755.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.30%)</title><rect x="1186.5" y="739.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.20%)</title><rect x="1186.5" y="723.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.20%)</title><rect x="1186.5" y="707.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.5" y="718.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.20%)</title><rect x="1186.5" y="691.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.20%)</title><rect x="1186.5" y="675.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.20%)</title><rect x="1186.5" y="659.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="670.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.10%)</title><rect x="1186.5" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::redirty_logged_cards() (1 samples, 0.10%)</title><rect x="1187.6" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="654.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.10%)</title><rect x="1187.6" y="627.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="638.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1187.6" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.6" y="622.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1187.6" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.6" y="606.0"></text>
</g>
<g>
<title>os::make_polling_page_unreadable() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
</g>
</svg>
