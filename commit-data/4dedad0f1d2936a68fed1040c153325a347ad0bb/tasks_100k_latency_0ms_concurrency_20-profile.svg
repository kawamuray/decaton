<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (188 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.53%)</title><rect x="10.0" y="1219.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.53%)</title><rect x="10.0" y="1203.0" width="6.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 14.36%)</title><rect x="16.3" y="1219.0" width="169.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1230.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 14.36%)</title><rect x="16.3" y="1203.0" width="169.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="1214.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.53%)</title><rect x="16.3" y="1187.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.53%)</title><rect x="16.3" y="1171.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.53%)</title><rect x="16.3" y="1155.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.53%)</title><rect x="16.3" y="1139.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 9.04%)</title><rect x="22.6" y="1187.0" width="106.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.6" y="1198.0">java/lang/Ite..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1146820434.accept (17 samples, 9.04%)</title><rect x="22.6" y="1171.0" width="106.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.6" y="1182.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 9.04%)</title><rect x="22.6" y="1155.0" width="106.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="1166.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 6.38%)</title><rect x="22.6" y="1139.0" width="75.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.6" y="1150.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 6.38%)</title><rect x="22.6" y="1123.0" width="75.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="1134.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 6.38%)</title><rect x="22.6" y="1107.0" width="75.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.6" y="1118.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 6.38%)</title><rect x="22.6" y="1091.0" width="75.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.6" y="1102.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 6.38%)</title><rect x="22.6" y="1075.0" width="75.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.6" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 6.38%)</title><rect x="22.6" y="1059.0" width="75.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.6" y="1070.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 4.79%)</title><rect x="35.1" y="1043.0" width="56.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.1" y="1054.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.06%)</title><rect x="35.1" y="1027.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.06%)</title><rect x="35.1" y="1011.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.06%)</title><rect x="35.1" y="995.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.72%)</title><rect x="47.7" y="1027.0" width="43.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.7" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.72%)</title><rect x="47.7" y="1011.0" width="43.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.7" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.72%)</title><rect x="47.7" y="995.0" width="43.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.7" y="1006.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.72%)</title><rect x="47.7" y="979.0" width="43.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.7" y="990.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 3.72%)</title><rect x="47.7" y="963.0" width="43.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.7" y="974.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 3.72%)</title><rect x="47.7" y="947.0" width="43.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="50.7" y="958.0">Unsa..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.53%)</title><rect x="47.7" y="931.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="50.7" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.13%)</title><rect x="53.9" y="931.0" width="25.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="56.9" y="942.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.06%)</title><rect x="79.0" y="931.0" width="12.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="82.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.53%)</title><rect x="91.6" y="1043.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.53%)</title><rect x="91.6" y="1027.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.53%)</title><rect x="91.6" y="1011.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.66%)</title><rect x="97.9" y="1139.0" width="31.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.9" y="1150.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.66%)</title><rect x="97.9" y="1123.0" width="31.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.9" y="1134.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.60%)</title><rect x="110.4" y="1107.0" width="18.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.60%)</title><rect x="110.4" y="1091.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.60%)</title><rect x="110.4" y="1075.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.79%)</title><rect x="129.3" y="1187.0" width="56.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.3" y="1198.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.79%)</title><rect x="129.3" y="1171.0" width="56.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.3" y="1182.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.13%)</title><rect x="129.3" y="1155.0" width="25.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.3" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.13%)</title><rect x="129.3" y="1139.0" width="25.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.3" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.13%)</title><rect x="129.3" y="1123.0" width="25.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.3" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.60%)</title><rect x="129.3" y="1107.0" width="18.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.60%)</title><rect x="129.3" y="1091.0" width="18.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="132.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.06%)</title><rect x="129.3" y="1075.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.53%)</title><rect x="135.5" y="1059.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.53%)</title><rect x="135.5" y="1043.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.53%)</title><rect x="135.5" y="1027.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.53%)</title><rect x="135.5" y="1011.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.53%)</title><rect x="135.5" y="995.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.53%)</title><rect x="135.5" y="979.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.53%)</title><rect x="135.5" y="963.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.53%)</title><rect x="141.8" y="1075.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.53%)</title><rect x="141.8" y="1059.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="144.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.53%)</title><rect x="141.8" y="1043.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.53%)</title><rect x="141.8" y="1027.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.53%)</title><rect x="148.1" y="1107.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.53%)</title><rect x="148.1" y="1091.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="148.1" y="1075.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="148.1" y="1059.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="148.1" y="1043.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.53%)</title><rect x="148.1" y="1027.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.06%)</title><rect x="154.4" y="1155.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.53%)</title><rect x="154.4" y="1139.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.53%)</title><rect x="154.4" y="1123.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.53%)</title><rect x="154.4" y="1107.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.53%)</title><rect x="154.4" y="1091.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/755195538.linkToTargetMethod (1 samples, 0.53%)</title><rect x="154.4" y="1075.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.53%)</title><rect x="154.4" y="1059.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$80/1417489370.get$Lambda (1 samples, 0.53%)</title><rect x="154.4" y="1043.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.53%)</title><rect x="160.6" y="1139.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.53%)</title><rect x="160.6" y="1123.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.53%)</title><rect x="160.6" y="1107.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.53%)</title><rect x="166.9" y="1155.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.53%)</title><rect x="166.9" y="1139.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="169.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.53%)</title><rect x="166.9" y="1123.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.53%)</title><rect x="166.9" y="1107.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.53%)</title><rect x="166.9" y="1091.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.53%)</title><rect x="173.2" y="1155.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.53%)</title><rect x="173.2" y="1139.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.53%)</title><rect x="173.2" y="1123.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.53%)</title><rect x="173.2" y="1107.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.53%)</title><rect x="173.2" y="1091.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.53%)</title><rect x="173.2" y="1075.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.53%)</title><rect x="173.2" y="1059.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.53%)</title><rect x="173.2" y="1043.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.53%)</title><rect x="173.2" y="1027.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.53%)</title><rect x="173.2" y="1011.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.53%)</title><rect x="179.5" y="1155.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.53%)</title><rect x="179.5" y="1139.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (57 samples, 30.32%)</title><rect x="185.7" y="1219.0" width="357.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.7" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (57 samples, 30.32%)</title><rect x="185.7" y="1203.0" width="357.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.7" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (57 samples, 30.32%)</title><rect x="185.7" y="1187.0" width="357.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.7" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/600378564.run (38 samples, 20.21%)</title><rect x="192.0" y="1171.0" width="238.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.0" y="1182.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 20.21%)</title><rect x="192.0" y="1155.0" width="238.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.0" y="1166.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 20.21%)</title><rect x="192.0" y="1139.0" width="238.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.0" y="1150.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 19.68%)</title><rect x="192.0" y="1123.0" width="232.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.0" y="1134.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 7.45%)</title><rect x="192.0" y="1107.0" width="87.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.0" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (14 samples, 7.45%)</title><rect x="192.0" y="1091.0" width="87.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.0" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 7.45%)</title><rect x="192.0" y="1075.0" width="87.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.0" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.45%)</title><rect x="192.0" y="1059.0" width="87.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.0" y="1070.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.45%)</title><rect x="192.0" y="1043.0" width="87.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.0" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 7.45%)</title><rect x="192.0" y="1027.0" width="87.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.0" y="1038.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.13%)</title><rect x="192.0" y="1011.0" width="25.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.0" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 2.13%)</title><rect x="192.0" y="995.0" width="25.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.0" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 2.13%)</title><rect x="192.0" y="979.0" width="25.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.0" y="990.0">c..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.60%)</title><rect x="198.3" y="963.0" width="18.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="201.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.06%)</title><rect x="204.6" y="947.0" width="12.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="207.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 5.32%)</title><rect x="217.1" y="1011.0" width="62.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.1" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.53%)</title><rect x="217.1" y="995.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.53%)</title><rect x="217.1" y="979.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.53%)</title><rect x="217.1" y="963.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.06%)</title><rect x="223.4" y="995.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.06%)</title><rect x="223.4" y="979.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.53%)</title><rect x="229.7" y="963.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 1.06%)</title><rect x="236.0" y="995.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 1.06%)</title><rect x="236.0" y="979.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.0" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.53%)</title><rect x="236.0" y="963.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="239.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.53%)</title><rect x="236.0" y="947.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="239.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.53%)</title><rect x="236.0" y="931.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="239.0" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.53%)</title><rect x="236.0" y="915.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="239.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.53%)</title><rect x="242.2" y="963.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.53%)</title><rect x="242.2" y="947.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.53%)</title><rect x="242.2" y="931.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.66%)</title><rect x="248.5" y="995.0" width="31.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.5" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.60%)</title><rect x="248.5" y="979.0" width="18.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.53%)</title><rect x="254.8" y="963.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.53%)</title><rect x="261.1" y="963.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.53%)</title><rect x="261.1" y="947.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.53%)</title><rect x="261.1" y="931.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.06%)</title><rect x="267.3" y="979.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.06%)</title><rect x="267.3" y="963.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.06%)</title><rect x="267.3" y="947.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.53%)</title><rect x="267.3" y="931.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.53%)</title><rect x="267.3" y="915.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.53%)</title><rect x="267.3" y="899.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.53%)</title><rect x="267.3" y="883.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.53%)</title><rect x="273.6" y="931.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="273.6" y="915.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="273.6" y="899.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.53%)</title><rect x="273.6" y="883.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.6" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.53%)</title><rect x="273.6" y="867.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.6" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.53%)</title><rect x="273.6" y="851.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.6" y="862.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.53%)</title><rect x="273.6" y="835.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (21 samples, 11.17%)</title><rect x="279.9" y="1107.0" width="131.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.9" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.53%)</title><rect x="279.9" y="1091.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.06%)</title><rect x="286.2" y="1091.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.2" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.06%)</title><rect x="286.2" y="1075.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.06%)</title><rect x="286.2" y="1059.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.2" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.53%)</title><rect x="286.2" y="1043.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.53%)</title><rect x="286.2" y="1027.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.53%)</title><rect x="286.2" y="1011.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.53%)</title><rect x="286.2" y="995.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.53%)</title><rect x="292.4" y="1043.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.53%)</title><rect x="292.4" y="1027.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.53%)</title><rect x="292.4" y="1011.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 6.38%)</title><rect x="298.7" y="1091.0" width="75.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.7" y="1102.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 6.38%)</title><rect x="298.7" y="1075.0" width="75.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.7" y="1086.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.66%)</title><rect x="305.0" y="1059.0" width="31.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="1070.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.13%)</title><rect x="311.3" y="1043.0" width="25.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.3" y="1054.0">j..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.53%)</title><rect x="311.3" y="1027.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="314.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.60%)</title><rect x="317.6" y="1027.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.06%)</title><rect x="317.6" y="1011.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.6" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.06%)</title><rect x="317.6" y="995.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.6" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.53%)</title><rect x="330.1" y="1011.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="333.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.53%)</title><rect x="336.4" y="1059.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.4" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.66%)</title><rect x="342.7" y="1059.0" width="31.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.7" y="1070.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.13%)</title><rect x="348.9" y="1043.0" width="25.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.9" y="1054.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.06%)</title><rect x="348.9" y="1027.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.06%)</title><rect x="348.9" y="1011.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.06%)</title><rect x="348.9" y="995.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.06%)</title><rect x="348.9" y="979.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.06%)</title><rect x="361.5" y="1027.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.13%)</title><rect x="374.0" y="1091.0" width="25.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.0" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.13%)</title><rect x="374.0" y="1075.0" width="25.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.0" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/168124410.process (2 samples, 1.06%)</title><rect x="380.3" y="1059.0" width="12.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.06%)</title><rect x="380.3" y="1043.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.06%)</title><rect x="380.3" y="1027.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.06%)</title><rect x="380.3" y="1011.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.06%)</title><rect x="380.3" y="995.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.06%)</title><rect x="380.3" y="979.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.06%)</title><rect x="380.3" y="963.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.53%)</title><rect x="392.9" y="1059.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.53%)</title><rect x="392.9" y="1043.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.9" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.53%)</title><rect x="392.9" y="1027.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.9" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.53%)</title><rect x="392.9" y="1011.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="392.9" y="995.0" width="6.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="395.9" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="392.9" y="979.0" width="6.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="395.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.53%)</title><rect x="399.1" y="1091.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.53%)</title><rect x="399.1" y="1075.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.53%)</title><rect x="405.4" y="1091.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.53%)</title><rect x="405.4" y="1075.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.06%)</title><rect x="411.7" y="1107.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="418.0" y="1091.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="421.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.53%)</title><rect x="424.3" y="1123.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.60%)</title><rect x="430.5" y="1171.0" width="18.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/600378564.run (1 samples, 0.53%)</title><rect x="443.1" y="1155.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 7.98%)</title><rect x="449.4" y="1171.0" width="94.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.4" y="1182.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 7.98%)</title><rect x="449.4" y="1155.0" width="94.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.4" y="1166.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 7.45%)</title><rect x="449.4" y="1139.0" width="87.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.4" y="1150.0">java/util/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.53%)</title><rect x="455.6" y="1123.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.06%)</title><rect x="461.9" y="1123.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.06%)</title><rect x="461.9" y="1107.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.06%)</title><rect x="461.9" y="1091.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.06%)</title><rect x="461.9" y="1075.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 5.32%)</title><rect x="474.5" y="1123.0" width="62.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.5" y="1134.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 5.32%)</title><rect x="474.5" y="1107.0" width="62.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.5" y="1118.0">sun/mi..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.53%)</title><rect x="474.5" y="1091.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="477.5" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (9 samples, 4.79%)</title><rect x="480.7" y="1091.0" width="56.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="483.7" y="1102.0">Unsafe..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.53%)</title><rect x="487.0" y="1075.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="490.0" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.06%)</title><rect x="493.3" y="1075.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="496.3" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.53%)</title><rect x="505.9" y="1075.0" width="6.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="508.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.53%)</title><rect x="512.1" y="1075.0" width="6.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="515.1" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 1.06%)</title><rect x="518.4" y="1075.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="521.4" y="1086.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.53%)</title><rect x="531.0" y="1075.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="534.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.53%)</title><rect x="537.2" y="1139.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.53%)</title><rect x="537.2" y="1123.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.53%)</title><rect x="537.2" y="1107.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="540.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.53%)</title><rect x="537.2" y="1091.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.2" y="1102.0"></text>
</g>
<g>
<title>start_thread (103 samples, 54.79%)</title><rect x="543.5" y="1219.0" width="646.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="546.5" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (103 samples, 54.79%)</title><rect x="543.5" y="1203.0" width="646.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="546.5" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 7.98%)</title><rect x="543.5" y="1187.0" width="94.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="546.5" y="1198.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 3.72%)</title><rect x="543.5" y="1171.0" width="43.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="546.5" y="1182.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.72%)</title><rect x="543.5" y="1155.0" width="43.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="546.5" y="1166.0">G1Pa..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.53%)</title><rect x="543.5" y="1139.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="546.5" y="1150.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 3.19%)</title><rect x="549.8" y="1139.0" width="37.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="552.8" y="1150.0">Spi..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 4.26%)</title><rect x="587.4" y="1171.0" width="50.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="590.4" y="1182.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.72%)</title><rect x="587.4" y="1155.0" width="44.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="590.4" y="1166.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.60%)</title><rect x="593.7" y="1139.0" width="18.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="596.7" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.53%)</title><rect x="606.3" y="1123.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.3" y="1134.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.53%)</title><rect x="606.3" y="1107.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.3" y="1118.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.53%)</title><rect x="606.3" y="1091.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="609.3" y="1102.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.60%)</title><rect x="612.6" y="1139.0" width="18.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="615.6" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.53%)</title><rect x="631.4" y="1155.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="634.4" y="1166.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.53%)</title><rect x="631.4" y="1139.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="634.4" y="1150.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 46.81%)</title><rect x="637.7" y="1187.0" width="552.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="640.7" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 46.81%)</title><rect x="637.7" y="1171.0" width="552.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.7" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 46.81%)</title><rect x="637.7" y="1155.0" width="552.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.7" y="1166.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 45.21%)</title><rect x="637.7" y="1139.0" width="533.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.7" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 45.21%)</title><rect x="637.7" y="1123.0" width="533.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.7" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 21.28%)</title><rect x="637.7" y="1107.0" width="251.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.7" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.53%)</title><rect x="637.7" y="1091.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.7" y="1102.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.53%)</title><rect x="637.7" y="1075.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="640.7" y="1086.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.53%)</title><rect x="637.7" y="1059.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="640.7" y="1070.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.53%)</title><rect x="637.7" y="1043.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.7" y="1054.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.53%)</title><rect x="637.7" y="1027.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="640.7" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.53%)</title><rect x="637.7" y="1011.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.7" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.53%)</title><rect x="637.7" y="995.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.7" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.60%)</title><rect x="643.9" y="1091.0" width="18.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.9" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.53%)</title><rect x="650.2" y="1075.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="653.2" y="1086.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.53%)</title><rect x="650.2" y="1059.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="653.2" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.53%)</title><rect x="650.2" y="1043.0" width="6.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="653.2" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.53%)</title><rect x="656.5" y="1075.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="659.5" y="1086.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.53%)</title><rect x="656.5" y="1059.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="659.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.06%)</title><rect x="662.8" y="1091.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.8" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.53%)</title><rect x="662.8" y="1075.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="665.8" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.53%)</title><rect x="669.0" y="1075.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="672.0" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.53%)</title><rect x="669.0" y="1059.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="672.0" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.53%)</title><rect x="669.0" y="1043.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="672.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.53%)</title><rect x="669.0" y="1027.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="672.0" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.53%)</title><rect x="669.0" y="1011.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.0" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.53%)</title><rect x="669.0" y="995.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.0" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.53%)</title><rect x="669.0" y="979.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="672.0" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.53%)</title><rect x="675.3" y="1091.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="678.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.53%)</title><rect x="675.3" y="1075.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="678.3" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.53%)</title><rect x="681.6" y="1091.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="684.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.53%)</title><rect x="681.6" y="1075.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 17.02%)</title><rect x="687.9" y="1091.0" width="200.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="690.9" y="1102.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.53%)</title><rect x="687.9" y="1075.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="690.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.06%)</title><rect x="694.1" y="1075.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="697.1" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="694.1" y="1059.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.53%)</title><rect x="700.4" y="1059.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.4" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="700.4" y="1043.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="703.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 3.19%)</title><rect x="706.7" y="1075.0" width="37.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="709.7" y="1086.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.53%)</title><rect x="738.1" y="1059.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="741.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.53%)</title><rect x="738.1" y="1043.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="741.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.72%)</title><rect x="744.4" y="1075.0" width="43.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="747.4" y="1086.0">Phas..</text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.53%)</title><rect x="763.2" y="1059.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="766.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.60%)</title><rect x="769.5" y="1059.0" width="18.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.53%)</title><rect x="788.3" y="1075.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="791.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.53%)</title><rect x="788.3" y="1059.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="791.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.53%)</title><rect x="794.6" y="1075.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="797.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.53%)</title><rect x="800.9" y="1075.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="803.9" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.53%)</title><rect x="800.9" y="1059.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="803.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.53%)</title><rect x="807.1" y="1075.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="810.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.13%)</title><rect x="813.4" y="1075.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="816.4" y="1086.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.06%)</title><rect x="826.0" y="1059.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.53%)</title><rect x="838.5" y="1075.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="841.5" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.53%)</title><rect x="838.5" y="1059.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.5" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.53%)</title><rect x="838.5" y="1043.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="841.5" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.53%)</title><rect x="838.5" y="1027.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="841.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="838.5" y="1011.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.60%)</title><rect x="844.8" y="1075.0" width="18.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.53%)</title><rect x="857.3" y="1059.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.60%)</title><rect x="863.6" y="1075.0" width="18.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.6" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.53%)</title><rect x="869.9" y="1059.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.9" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="869.9" y="1043.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.9" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.53%)</title><rect x="876.2" y="1059.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="879.2" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.53%)</title><rect x="876.2" y="1043.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.2" y="1054.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.53%)</title><rect x="882.4" y="1075.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.4" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 18.62%)</title><rect x="888.7" y="1107.0" width="219.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.7" y="1118.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.53%)</title><rect x="888.7" y="1091.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.53%)</title><rect x="888.7" y="1075.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.53%)</title><rect x="888.7" y="1059.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.7" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="888.7" y="1043.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.7" y="1054.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.53%)</title><rect x="888.7" y="1027.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="891.7" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.53%)</title><rect x="888.7" y="1011.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.7" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="888.7" y="995.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.06%)</title><rect x="895.0" y="1091.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.06%)</title><rect x="895.0" y="1075.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="901.3" y="1059.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="901.3" y="1043.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="904.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.06%)</title><rect x="907.6" y="1091.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.6" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.53%)</title><rect x="913.8" y="1075.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.8" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.53%)</title><rect x="913.8" y="1059.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="916.8" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.53%)</title><rect x="913.8" y="1043.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.8" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.53%)</title><rect x="913.8" y="1027.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.8" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.53%)</title><rect x="913.8" y="1011.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.8" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.53%)</title><rect x="913.8" y="995.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="916.8" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.53%)</title><rect x="913.8" y="979.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="916.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 9.57%)</title><rect x="920.1" y="1091.0" width="113.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.1" y="1102.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="920.1" y="1075.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.1" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="920.1" y="1059.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="920.1" y="1043.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="920.1" y="1027.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.53%)</title><rect x="920.1" y="1011.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="923.1" y="1022.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.53%)</title><rect x="920.1" y="995.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="923.1" y="1006.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.53%)</title><rect x="926.4" y="1075.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.53%)</title><rect x="932.7" y="1075.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.7" y="1086.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.53%)</title><rect x="932.7" y="1059.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 4.79%)</title><rect x="938.9" y="1075.0" width="56.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.9" y="1086.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 3.72%)</title><rect x="951.5" y="1059.0" width="43.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.5" y="1070.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 3.19%)</title><rect x="957.8" y="1043.0" width="37.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.8" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 3.19%)</title><rect x="957.8" y="1027.0" width="37.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.8" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.53%)</title><rect x="995.4" y="1075.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.53%)</title><rect x="995.4" y="1059.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.13%)</title><rect x="1001.7" y="1075.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.7" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 1.60%)</title><rect x="1008.0" y="1059.0" width="18.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 1.06%)</title><rect x="1008.0" y="1043.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 1.06%)</title><rect x="1008.0" y="1027.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1011.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.53%)</title><rect x="1020.5" y="1043.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.5" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.53%)</title><rect x="1020.5" y="1027.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.5" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1020.5" y="1011.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1023.5" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.53%)</title><rect x="1026.8" y="1075.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1029.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (3 samples, 1.60%)</title><rect x="1033.1" y="1091.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (3 samples, 1.60%)</title><rect x="1033.1" y="1075.0" width="18.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) [clone .constprop.239] (1 samples, 0.53%)</title><rect x="1045.6" y="1059.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 4.26%)</title><rect x="1051.9" y="1091.0" width="50.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.9" y="1102.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 4.26%)</title><rect x="1051.9" y="1075.0" width="50.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.9" y="1086.0">Phase..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1051.9" y="1059.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.9" y="1070.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1051.9" y="1043.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.9" y="1054.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.53%)</title><rect x="1051.9" y="1027.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1054.9" y="1038.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.53%)</title><rect x="1051.9" y="1011.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.9" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1058.2" y="1059.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.2" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.53%)</title><rect x="1064.5" y="1059.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.5" y="1070.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.53%)</title><rect x="1064.5" y="1043.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.53%)</title><rect x="1070.7" y="1059.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.7" y="1070.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 1.06%)</title><rect x="1077.0" y="1059.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.0" y="1070.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.53%)</title><rect x="1083.3" y="1043.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.3" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1089.6" y="1059.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.53%)</title><rect x="1089.6" y="1043.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.53%)</title><rect x="1089.6" y="1027.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.6" y="1038.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1095.9" y="1059.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.9" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.53%)</title><rect x="1102.1" y="1091.0" width="6.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1105.1" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.32%)</title><rect x="1108.4" y="1107.0" width="62.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.4" y="1118.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.32%)</title><rect x="1108.4" y="1091.0" width="62.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="1102.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.32%)</title><rect x="1108.4" y="1075.0" width="62.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.4" y="1086.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 4.79%)</title><rect x="1108.4" y="1059.0" width="56.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.4" y="1070.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 4.79%)</title><rect x="1108.4" y="1043.0" width="56.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.4" y="1054.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.26%)</title><rect x="1108.4" y="1027.0" width="50.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.4" y="1038.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.26%)</title><rect x="1108.4" y="1011.0" width="50.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.4" y="1022.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.26%)</title><rect x="1108.4" y="995.0" width="50.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.4" y="1006.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.26%)</title><rect x="1108.4" y="979.0" width="50.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="990.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.26%)</title><rect x="1108.4" y="963.0" width="50.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.4" y="974.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.26%)</title><rect x="1108.4" y="947.0" width="50.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.4" y="958.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.26%)</title><rect x="1108.4" y="931.0" width="50.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.4" y="942.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.06%)</title><rect x="1108.4" y="915.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.4" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.06%)</title><rect x="1108.4" y="899.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.4" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.06%)</title><rect x="1108.4" y="883.0" width="12.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.4" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.06%)</title><rect x="1108.4" y="867.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.4" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.06%)</title><rect x="1108.4" y="851.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.4" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.06%)</title><rect x="1108.4" y="835.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.06%)</title><rect x="1108.4" y="819.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.4" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1108.4" y="803.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.4" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="1114.7" y="803.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.53%)</title><rect x="1114.7" y="787.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.7" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1114.7" y="771.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.7" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1114.7" y="755.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1114.7" y="739.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1114.7" y="723.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1114.7" y="707.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.19%)</title><rect x="1121.0" y="915.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.0" y="926.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.19%)</title><rect x="1121.0" y="899.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.0" y="910.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.19%)</title><rect x="1121.0" y="883.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.0" y="894.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.19%)</title><rect x="1121.0" y="867.0" width="37.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.0" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.19%)</title><rect x="1121.0" y="851.0" width="37.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.0" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.19%)</title><rect x="1121.0" y="835.0" width="37.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.0" y="846.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.53%)</title><rect x="1121.0" y="819.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.0" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.53%)</title><rect x="1121.0" y="803.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.0" y="814.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.53%)</title><rect x="1121.0" y="787.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.13%)</title><rect x="1127.2" y="819.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="830.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.13%)</title><rect x="1127.2" y="803.0" width="25.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.13%)</title><rect x="1127.2" y="787.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.13%)</title><rect x="1127.2" y="771.0" width="25.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.2" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.13%)</title><rect x="1127.2" y="755.0" width="25.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.13%)</title><rect x="1127.2" y="739.0" width="25.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="750.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="723.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.2" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.53%)</title><rect x="1127.2" y="707.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.53%)</title><rect x="1127.2" y="691.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.53%)</title><rect x="1127.2" y="675.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.53%)</title><rect x="1127.2" y="659.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1127.2" y="643.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1127.2" y="627.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="1127.2" y="611.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="1127.2" y="595.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1133.5" y="723.0" width="18.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1133.5" y="707.0" width="18.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1133.5" y="691.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1133.5" y="675.0" width="18.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1133.5" y="659.0" width="18.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1133.5" y="643.0" width="18.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.53%)</title><rect x="1133.5" y="627.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.53%)</title><rect x="1133.5" y="611.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="622.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.53%)</title><rect x="1133.5" y="595.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.5" y="606.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="1133.5" y="579.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1139.8" y="627.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1139.8" y="611.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1139.8" y="595.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1139.8" y="579.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1139.8" y="563.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1139.8" y="547.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1139.8" y="531.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1139.8" y="515.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1139.8" y="499.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1139.8" y="483.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1139.8" y="467.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1139.8" y="451.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1139.8" y="435.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1139.8" y="419.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1139.8" y="403.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1139.8" y="387.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1139.8" y="371.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1139.8" y="355.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1139.8" y="339.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1139.8" y="323.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1139.8" y="307.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="291.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="275.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="259.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="243.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="227.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="211.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="195.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="179.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="163.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="147.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="131.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="142.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.53%)</title><rect x="1139.8" y="115.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.53%)</title><rect x="1139.8" y="99.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.53%)</title><rect x="1139.8" y="83.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.53%)</title><rect x="1139.8" y="67.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.53%)</title><rect x="1139.8" y="51.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.53%)</title><rect x="1139.8" y="35.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.53%)</title><rect x="1146.1" y="291.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.1" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.53%)</title><rect x="1146.1" y="275.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="286.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1146.1" y="259.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.1" y="270.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.53%)</title><rect x="1146.1" y="243.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.1" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1152.3" y="819.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1152.3" y="803.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1152.3" y="787.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="798.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.53%)</title><rect x="1152.3" y="771.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.53%)</title><rect x="1158.6" y="1027.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.6" y="1038.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.53%)</title><rect x="1158.6" y="1011.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.6" y="1022.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.53%)</title><rect x="1158.6" y="995.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="1006.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.53%)</title><rect x="1158.6" y="979.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.6" y="990.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.53%)</title><rect x="1158.6" y="963.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.6" y="974.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.53%)</title><rect x="1164.9" y="1059.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.60%)</title><rect x="1171.2" y="1139.0" width="18.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.60%)</title><rect x="1171.2" y="1123.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.60%)</title><rect x="1171.2" y="1107.0" width="18.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.53%)</title><rect x="1171.2" y="1091.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.53%)</title><rect x="1171.2" y="1075.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="1086.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.53%)</title><rect x="1171.2" y="1059.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.53%)</title><rect x="1171.2" y="1043.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="1054.0"></text>
</g>
<g>
<title>NullCheck::can_trap() const (1 samples, 0.53%)</title><rect x="1171.2" y="1027.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="1038.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 1.06%)</title><rect x="1177.4" y="1091.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 1.06%)</title><rect x="1177.4" y="1075.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1086.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1059.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1043.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1027.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="1038.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.53%)</title><rect x="1183.7" y="1059.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="1070.0"></text>
</g>
</g>
</svg>
