<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (1,008 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (256 samples, 25.40%)</title><rect x="10.0" y="803.0" width="299.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (256 samples, 25.40%)</title><rect x="10.0" y="787.0" width="299.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.20%)</title><rect x="10.0" y="771.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.20%)</title><rect x="10.0" y="755.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1663481084.accept (2 samples, 0.20%)</title><rect x="10.0" y="739.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.20%)</title><rect x="10.0" y="723.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.20%)</title><rect x="10.0" y="707.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.20%)</title><rect x="10.0" y="691.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.50%)</title><rect x="12.3" y="771.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.50%)</title><rect x="12.3" y="755.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.50%)</title><rect x="12.3" y="739.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.50%)</title><rect x="12.3" y="723.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.40%)</title><rect x="13.5" y="707.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="14.7" y="691.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="14.7" y="675.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="14.7" y="659.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="14.7" y="643.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="14.7" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$250/1613894540.test (1 samples, 0.10%)</title><rect x="14.7" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="15.9" y="659.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="17.0" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.10%)</title><rect x="17.0" y="659.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="17.0" y="643.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="17.0" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="17.0" y="611.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.30%)</title><rect x="18.2" y="771.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.30%)</title><rect x="18.2" y="755.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="19.4" y="739.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="19.4" y="723.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="19.4" y="707.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="19.4" y="691.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="19.4" y="675.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="19.4" y="659.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="19.4" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="20.5" y="707.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (182 samples, 18.06%)</title><rect x="21.7" y="771.0" width="213.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.7" y="782.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/425850938.accept (176 samples, 17.46%)</title><rect x="21.7" y="755.0" width="206.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.7" y="766.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$41 (174 samples, 17.26%)</title><rect x="24.0" y="739.0" width="203.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.0" y="750.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (146 samples, 14.48%)</title><rect x="24.0" y="723.0" width="171.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.0" y="734.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (146 samples, 14.48%)</title><rect x="24.0" y="707.0" width="171.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="718.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (146 samples, 14.48%)</title><rect x="24.0" y="691.0" width="171.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.0" y="702.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (146 samples, 14.48%)</title><rect x="24.0" y="675.0" width="171.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.0" y="686.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (146 samples, 14.48%)</title><rect x="24.0" y="659.0" width="171.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.0" y="670.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (146 samples, 14.48%)</title><rect x="24.0" y="643.0" width="171.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.0" y="654.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (93 samples, 9.23%)</title><rect x="24.0" y="627.0" width="108.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.0" y="638.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 2.08%)</title><rect x="24.0" y="611.0" width="24.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.0" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 2.08%)</title><rect x="24.0" y="595.0" width="24.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.79%)</title><rect x="27.6" y="579.0" width="21.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.6" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (18 samples, 1.79%)</title><rect x="27.6" y="563.0" width="21.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.6" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.60%)</title><rect x="48.6" y="611.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.60%)</title><rect x="48.6" y="595.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.60%)</title><rect x="48.6" y="579.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (66 samples, 6.55%)</title><rect x="55.7" y="611.0" width="77.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.7" y="622.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (66 samples, 6.55%)</title><rect x="55.7" y="595.0" width="77.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.7" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 6.45%)</title><rect x="55.7" y="579.0" width="76.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.7" y="590.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 6.45%)</title><rect x="55.7" y="563.0" width="76.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.7" y="574.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (64 samples, 6.35%)</title><rect x="56.8" y="547.0" width="74.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.8" y="558.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="56.8" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="59.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark (57 samples, 5.65%)</title><rect x="58.0" y="531.0" width="66.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="61.0" y="542.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.20%)</title><rect x="60.3" y="515.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="63.3" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="62.7" y="515.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="65.7" y="526.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 3.77%)</title><rect x="63.8" y="515.0" width="44.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="66.8" y="526.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.20%)</title><rect x="108.3" y="515.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="111.3" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.19%)</title><rect x="110.7" y="515.0" width="14.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="113.7" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.10%)</title><rect x="124.7" y="531.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="127.7" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.50%)</title><rect x="125.9" y="531.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="128.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="131.7" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="132.9" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.10%)</title><rect x="132.9" y="611.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.10%)</title><rect x="132.9" y="595.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.79%)</title><rect x="134.1" y="627.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.20%)</title><rect x="134.1" y="611.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.20%)</title><rect x="134.1" y="595.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="137.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.60%)</title><rect x="136.4" y="611.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.60%)</title><rect x="136.4" y="595.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="139.4" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="142.3" y="579.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="145.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="142.3" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="145.3" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="142.3" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="145.3" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="142.3" y="531.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="145.3" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="142.3" y="515.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="145.3" y="526.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="142.3" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="145.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (44 samples, 4.37%)</title><rect x="143.5" y="627.0" width="51.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.5" y="638.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (44 samples, 4.37%)</title><rect x="143.5" y="611.0" width="51.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.5" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (44 samples, 4.37%)</title><rect x="143.5" y="595.0" width="51.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.5" y="606.0">java/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="190.3" y="579.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.30%)</title><rect x="191.4" y="579.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (14 samples, 1.39%)</title><rect x="195.0" y="723.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 0.99%)</title><rect x="199.6" y="707.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.40%)</title><rect x="211.3" y="723.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.40%)</title><rect x="211.3" y="707.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.40%)</title><rect x="211.3" y="691.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (10 samples, 0.99%)</title><rect x="216.0" y="723.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 0.99%)</title><rect x="216.0" y="707.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.0" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.20%)</title><rect x="223.1" y="691.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.1" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.20%)</title><rect x="223.1" y="675.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.1" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.20%)</title><rect x="223.1" y="659.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.1" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.20%)</title><rect x="223.1" y="643.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.1" y="654.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="225.4" y="691.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="228.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="226.6" y="691.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="229.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.60%)</title><rect x="227.7" y="755.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.60%)</title><rect x="227.7" y="739.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.60%)</title><rect x="227.7" y="723.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.60%)</title><rect x="227.7" y="707.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.7" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.40%)</title><rect x="228.9" y="691.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.10%)</title><rect x="233.6" y="691.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="233.6" y="675.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 6.35%)</title><rect x="234.8" y="771.0" width="74.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.8" y="782.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 6.35%)</title><rect x="234.8" y="755.0" width="74.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.8" y="766.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 3.47%)</title><rect x="234.8" y="739.0" width="40.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.8" y="750.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.20%)</title><rect x="234.8" y="723.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.20%)</title><rect x="234.8" y="707.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.8" y="718.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="234.8" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="237.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="235.9" y="691.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 3.27%)</title><rect x="237.1" y="723.0" width="38.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.1" y="734.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="237.1" y="707.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="237.1" y="691.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.1" y="702.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="237.1" y="675.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="240.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 3.17%)</title><rect x="238.3" y="707.0" width="37.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.3" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 2.68%)</title><rect x="238.3" y="691.0" width="31.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.3" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.68%)</title><rect x="238.3" y="675.0" width="31.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.3" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (20 samples, 1.98%)</title><rect x="240.6" y="659.0" width="23.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.6" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.79%)</title><rect x="254.7" y="643.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.79%)</title><rect x="254.7" y="627.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.79%)</title><rect x="254.7" y="611.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.79%)</title><rect x="254.7" y="595.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.79%)</title><rect x="254.7" y="579.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.79%)</title><rect x="254.7" y="563.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.79%)</title><rect x="254.7" y="547.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 0.50%)</title><rect x="264.0" y="659.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.50%)</title><rect x="264.0" y="643.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.50%)</title><rect x="264.0" y="627.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.0" y="638.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.50%)</title><rect x="264.0" y="611.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.0" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="268.7" y="595.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="271.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.20%)</title><rect x="269.9" y="691.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.20%)</title><rect x="269.9" y="675.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="269.9" y="659.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="269.9" y="643.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="269.9" y="627.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="269.9" y="611.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.10%)</title><rect x="269.9" y="595.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="271.1" y="611.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.20%)</title><rect x="272.2" y="691.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.20%)</title><rect x="272.2" y="675.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.10%)</title><rect x="272.2" y="659.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="272.2" y="643.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.2" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="272.2" y="627.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="273.4" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="273.4" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="273.4" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="274.6" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.29%)</title><rect x="275.7" y="739.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (11 samples, 1.09%)</title><rect x="275.7" y="723.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.89%)</title><rect x="275.7" y="707.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.20%)</title><rect x="275.7" y="691.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/73771131.accept (2 samples, 0.20%)</title><rect x="275.7" y="675.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.20%)</title><rect x="275.7" y="659.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.20%)</title><rect x="275.7" y="643.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.7" y="654.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.10%)</title><rect x="276.9" y="627.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1975729474.apply (1 samples, 0.10%)</title><rect x="276.9" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.10%)</title><rect x="276.9" y="595.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="278.1" y="691.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.20%)</title><rect x="279.2" y="691.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.20%)</title><rect x="279.2" y="675.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.2" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.20%)</title><rect x="279.2" y="659.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.10%)</title><rect x="279.2" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="279.2" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="280.4" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="280.4" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="280.4" y="611.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.40%)</title><rect x="281.6" y="691.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.40%)</title><rect x="281.6" y="675.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="282.8" y="659.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="282.8" y="643.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="282.8" y="627.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="282.8" y="611.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="282.8" y="595.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.8" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="282.8" y="579.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.8" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="282.8" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.8" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="283.9" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="285.1" y="579.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="285.1" y="563.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="285.1" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.1" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="285.1" y="531.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="288.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.20%)</title><rect x="286.3" y="707.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.20%)</title><rect x="286.3" y="691.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="286.3" y="675.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="287.4" y="659.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="287.4" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="287.4" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="287.4" y="611.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.20%)</title><rect x="288.6" y="723.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="288.6" y="707.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="288.6" y="691.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.10%)</title><rect x="289.8" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.10%)</title><rect x="289.8" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.8" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.10%)</title><rect x="289.8" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="292.8" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.10%)</title><rect x="289.8" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="292.8" y="670.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="289.8" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="292.8" y="654.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="289.8" y="627.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="292.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.40%)</title><rect x="291.0" y="739.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.40%)</title><rect x="291.0" y="723.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="291.0" y="707.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="291.0" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.10%)</title><rect x="291.0" y="675.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.10%)</title><rect x="291.0" y="659.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.30%)</title><rect x="292.1" y="707.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.30%)</title><rect x="292.1" y="691.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.30%)</title><rect x="292.1" y="675.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.30%)</title><rect x="292.1" y="659.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.1" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="292.1" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="295.1" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="292.1" y="627.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="295.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.20%)</title><rect x="293.3" y="643.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.20%)</title><rect x="293.3" y="627.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.20%)</title><rect x="293.3" y="611.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.20%)</title><rect x="293.3" y="595.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.3" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="293.3" y="579.0" width="2.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="296.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.89%)</title><rect x="295.6" y="739.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="298.0" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="298.0" y="707.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.10%)</title><rect x="298.0" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.10%)</title><rect x="298.0" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.60%)</title><rect x="299.1" y="723.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.40%)</title><rect x="299.1" y="707.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="299.1" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="299.1" y="675.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="299.1" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="299.1" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.10%)</title><rect x="300.3" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.10%)</title><rect x="300.3" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.20%)</title><rect x="301.5" y="691.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="302.7" y="675.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.7" y="686.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="302.7" y="659.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="302.7" y="643.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="302.7" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.10%)</title><rect x="303.8" y="707.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="306.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="305.0" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="305.0" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="305.0" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="305.0" y="659.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="305.0" y="643.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="305.0" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="305.0" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.10%)</title><rect x="306.2" y="739.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="306.2" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.10%)</title><rect x="306.2" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.2" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="306.2" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="309.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="306.2" y="675.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="309.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.20%)</title><rect x="307.3" y="739.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="307.3" y="723.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="307.3" y="707.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="308.5" y="691.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="308.5" y="675.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="308.5" y="659.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.10%)</title><rect x="308.5" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (680 samples, 67.46%)</title><rect x="309.7" y="803.0" width="796.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.7" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (680 samples, 67.46%)</title><rect x="309.7" y="787.0" width="796.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.7" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (680 samples, 67.46%)</title><rect x="309.7" y="771.0" width="796.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.7" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1646407215.run (464 samples, 46.03%)</title><rect x="313.2" y="755.0" width="543.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.2" y="766.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1646407215..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39 (464 samples, 46.03%)</title><rect x="313.2" y="739.0" width="543.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.2" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$39</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (464 samples, 46.03%)</title><rect x="313.2" y="723.0" width="543.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.2" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (462 samples, 45.83%)</title><rect x="313.2" y="707.0" width="540.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.2" y="718.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.20%)</title><rect x="323.7" y="691.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (160 samples, 15.87%)</title><rect x="326.1" y="691.0" width="187.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.1" y="702.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (160 samples, 15.87%)</title><rect x="326.1" y="675.0" width="187.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.1" y="686.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (160 samples, 15.87%)</title><rect x="326.1" y="659.0" width="187.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.1" y="670.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (160 samples, 15.87%)</title><rect x="326.1" y="643.0" width="187.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.1" y="654.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (160 samples, 15.87%)</title><rect x="326.1" y="627.0" width="187.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.1" y="638.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (160 samples, 15.87%)</title><rect x="326.1" y="611.0" width="187.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.1" y="622.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (59 samples, 5.85%)</title><rect x="326.1" y="595.0" width="69.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.1" y="606.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 2.68%)</title><rect x="326.1" y="579.0" width="31.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.1" y="590.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (26 samples, 2.58%)</title><rect x="326.1" y="563.0" width="30.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.1" y="574.0">co..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="341.3" y="547.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="344.3" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.69%)</title><rect x="343.6" y="547.0" width="8.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="346.6" y="558.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="346.0" y="531.0" width="5.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="349.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.10%)</title><rect x="351.8" y="547.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.30%)</title><rect x="353.0" y="547.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="353.0" y="531.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.0" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="353.0" y="515.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="353.0" y="499.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="356.5" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="356.5" y="547.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="359.5" y="558.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.10%)</title><rect x="356.5" y="531.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="359.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (32 samples, 3.17%)</title><rect x="357.7" y="579.0" width="37.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.7" y="590.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.20%)</title><rect x="357.7" y="563.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (30 samples, 2.98%)</title><rect x="360.0" y="563.0" width="35.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.0" y="574.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.30%)</title><rect x="361.2" y="547.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.10%)</title><rect x="363.5" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (14 samples, 1.39%)</title><rect x="364.7" y="547.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (14 samples, 1.39%)</title><rect x="364.7" y="531.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.10%)</title><rect x="364.7" y="515.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.7" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="364.7" y="499.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="367.7" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="364.7" y="483.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="367.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (12 samples, 1.19%)</title><rect x="365.9" y="515.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="379.9" y="515.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="382.9" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="379.9" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="382.9" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="379.9" y="483.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="379.9" y="467.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="382.9" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="379.9" y="451.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="382.9" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="379.9" y="435.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="382.9" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="379.9" y="419.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="382.9" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="379.9" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="382.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (12 samples, 1.19%)</title><rect x="381.1" y="547.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (90 samples, 8.93%)</title><rect x="395.1" y="595.0" width="105.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.1" y="606.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.20%)</title><rect x="395.1" y="579.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.20%)</title><rect x="395.1" y="563.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.10%)</title><rect x="395.1" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.10%)</title><rect x="396.3" y="547.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.99%)</title><rect x="397.5" y="579.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.99%)</title><rect x="397.5" y="563.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="403.3" y="547.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.20%)</title><rect x="404.5" y="547.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.20%)</title><rect x="406.8" y="547.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.89%)</title><rect x="409.2" y="579.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.50%)</title><rect x="411.5" y="563.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.40%)</title><rect x="411.5" y="547.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.40%)</title><rect x="411.5" y="531.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.20%)</title><rect x="413.9" y="515.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="416.2" y="547.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.20%)</title><rect x="417.4" y="563.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.60%)</title><rect x="419.7" y="579.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.60%)</title><rect x="419.7" y="563.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.7" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="420.9" y="547.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="423.9" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="420.9" y="531.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="423.9" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="420.9" y="515.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="423.9" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="420.9" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="423.9" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="420.9" y="483.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="423.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="420.9" y="467.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="423.9" y="478.0"></text>
</g>
<g>
<title>VM_Operation::evaluate_concurrently() const (1 samples, 0.10%)</title><rect x="420.9" y="451.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="423.9" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="422.1" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="425.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="423.2" y="547.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="423.2" y="531.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="423.2" y="515.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 6.25%)</title><rect x="426.7" y="579.0" width="73.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.7" y="590.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.39%)</title><rect x="427.9" y="563.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.40%)</title><rect x="430.3" y="547.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.40%)</title><rect x="430.3" y="531.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.40%)</title><rect x="430.3" y="515.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.60%)</title><rect x="434.9" y="547.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="437.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="442.0" y="547.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="442.0" y="531.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 4.76%)</title><rect x="444.3" y="563.0" width="56.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.3" y="574.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (46 samples, 4.56%)</title><rect x="446.6" y="547.0" width="53.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.6" y="558.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 4.46%)</title><rect x="447.8" y="531.0" width="52.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.8" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.79%)</title><rect x="452.5" y="515.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="455.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.50%)</title><rect x="454.8" y="499.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.50%)</title><rect x="454.8" y="483.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.50%)</title><rect x="454.8" y="467.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.20%)</title><rect x="458.4" y="451.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="460.7" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.69%)</title><rect x="461.9" y="515.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.69%)</title><rect x="461.9" y="499.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.69%)</title><rect x="461.9" y="483.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.69%)</title><rect x="461.9" y="467.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.9" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.69%)</title><rect x="461.9" y="451.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="470.1" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (15 samples, 1.49%)</title><rect x="471.2" y="515.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (15 samples, 1.49%)</title><rect x="471.2" y="499.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="474.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (15 samples, 1.49%)</title><rect x="471.2" y="483.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (15 samples, 1.49%)</title><rect x="471.2" y="467.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.2" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (15 samples, 1.49%)</title><rect x="471.2" y="451.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="474.2" y="462.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (13 samples, 1.29%)</title><rect x="473.6" y="435.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.6" y="446.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor18.newInstance (5 samples, 0.50%)</title><rect x="482.9" y="419.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (10 samples, 0.99%)</title><rect x="488.8" y="515.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.99%)</title><rect x="488.8" y="499.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.99%)</title><rect x="488.8" y="483.0" width="11.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.09%)</title><rect x="500.5" y="595.0" width="12.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 1.09%)</title><rect x="500.5" y="579.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 1.09%)</title><rect x="500.5" y="563.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="503.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.10%)</title><rect x="502.8" y="547.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.40%)</title><rect x="504.0" y="547.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.40%)</title><rect x="508.7" y="547.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="511.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.40%)</title><rect x="508.7" y="531.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (275 samples, 27.28%)</title><rect x="513.4" y="691.0" width="321.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.4" y="702.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (55 samples, 5.46%)</title><rect x="516.9" y="675.0" width="64.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.9" y="686.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (55 samples, 5.46%)</title><rect x="516.9" y="659.0" width="64.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.9" y="670.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 5.06%)</title><rect x="521.6" y="643.0" width="59.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.6" y="654.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (32 samples, 3.17%)</title><rect x="523.9" y="627.0" width="37.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.9" y="638.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (32 samples, 3.17%)</title><rect x="523.9" y="611.0" width="37.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.9" y="622.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (32 samples, 3.17%)</title><rect x="523.9" y="595.0" width="37.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.9" y="606.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (32 samples, 3.17%)</title><rect x="523.9" y="579.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.9" y="590.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (32 samples, 3.17%)</title><rect x="523.9" y="563.0" width="37.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="526.9" y="574.0">jav..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 1.69%)</title><rect x="561.4" y="627.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="564.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.60%)</title><rect x="574.2" y="611.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="577.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.60%)</title><rect x="574.2" y="595.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.69%)</title><rect x="581.3" y="675.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="584.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.69%)</title><rect x="581.3" y="659.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.3" y="670.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.69%)</title><rect x="581.3" y="643.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="584.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (152 samples, 15.08%)</title><rect x="589.5" y="675.0" width="177.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="592.5" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (152 samples, 15.08%)</title><rect x="589.5" y="659.0" width="177.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.5" y="670.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.69%)</title><rect x="598.8" y="643.0" width="8.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="601.8" y="654.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="600.0" y="627.0" width="7.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="603.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 4.86%)</title><rect x="607.0" y="643.0" width="57.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.0" y="654.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="616.4" y="627.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.4" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="616.4" y="611.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="616.4" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="619.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="616.4" y="579.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="616.4" y="563.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="616.4" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="619.4" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="616.4" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 3.27%)</title><rect x="617.6" y="627.0" width="38.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.6" y="638.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 3.27%)</title><rect x="617.6" y="611.0" width="38.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.6" y="622.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.69%)</title><rect x="624.6" y="595.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.6" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.69%)</title><rect x="624.6" y="579.0" width="19.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.6" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.69%)</title><rect x="624.6" y="563.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.6" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.89%)</title><rect x="630.4" y="547.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.4" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="630.4" y="531.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="633.4" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="630.4" y="515.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="633.4" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.30%)</title><rect x="631.6" y="531.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="634.6" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="631.6" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="634.6" y="526.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="631.6" y="499.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.6" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.20%)</title><rect x="632.8" y="515.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="635.8" y="526.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.20%)</title><rect x="632.8" y="499.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.8" y="510.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="632.8" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="635.8" y="494.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="633.9" y="483.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="636.9" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.40%)</title><rect x="635.1" y="531.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="638.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.30%)</title><rect x="636.3" y="515.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="639.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="636.3" y="499.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="639.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="636.3" y="483.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="639.3" y="494.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="636.3" y="467.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="639.3" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="636.3" y="451.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="639.3" y="462.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.10%)</title><rect x="636.3" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="639.3" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="637.5" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.5" y="510.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="638.6" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="641.6" y="510.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.10%)</title><rect x="639.8" y="531.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="641.0" y="547.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="644.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="641.0" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.0" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="642.1" y="547.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="645.1" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.20%)</title><rect x="644.5" y="595.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="646.8" y="595.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="649.8" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="648.0" y="595.0" width="4.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="651.0" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="652.7" y="595.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="655.7" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="656.2" y="627.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="659.2" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.60%)</title><rect x="657.4" y="627.0" width="7.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="660.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="664.4" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.89%)</title><rect x="665.6" y="643.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="665.6" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="665.6" y="611.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.79%)</title><rect x="666.7" y="627.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.79%)</title><rect x="666.7" y="611.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="674.9" y="595.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.9" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (78 samples, 7.74%)</title><rect x="676.1" y="643.0" width="91.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="679.1" y="654.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 7.74%)</title><rect x="676.1" y="627.0" width="91.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.1" y="638.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.30%)</title><rect x="676.1" y="611.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.30%)</title><rect x="676.1" y="595.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.30%)</title><rect x="676.1" y="579.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.30%)</title><rect x="676.1" y="563.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (75 samples, 7.44%)</title><rect x="679.6" y="611.0" width="87.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="682.6" y="622.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 6.65%)</title><rect x="689.0" y="595.0" width="78.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.0" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 3.87%)</title><rect x="721.7" y="579.0" width="45.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="724.7" y="590.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.30%)</title><rect x="748.7" y="563.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.99%)</title><rect x="752.2" y="563.0" width="11.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.2" y="574.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="763.9" y="563.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="766.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (37 samples, 3.67%)</title><rect x="767.4" y="675.0" width="43.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.4" y="686.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (36 samples, 3.57%)</title><rect x="768.6" y="659.0" width="42.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.6" y="670.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="768.6" y="643.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="768.6" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="768.6" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/292278994.process (15 samples, 1.49%)</title><rect x="769.7" y="643.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (13 samples, 1.29%)</title><rect x="772.1" y="627.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="775.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (9 samples, 0.89%)</title><rect x="775.6" y="611.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 0.10%)</title><rect x="782.6" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.20%)</title><rect x="783.8" y="595.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="786.1" y="611.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="786.1" y="595.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="786.1" y="579.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="789.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="786.1" y="563.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.50%)</title><rect x="787.3" y="643.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.50%)</title><rect x="787.3" y="627.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="790.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.20%)</title><rect x="793.2" y="643.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.20%)</title><rect x="793.2" y="627.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1877685926.get$Lambda (2 samples, 0.20%)</title><rect x="793.2" y="611.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1877685926.&lt;init&gt; (1 samples, 0.10%)</title><rect x="794.3" y="595.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.3" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.50%)</title><rect x="795.5" y="643.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="798.5" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.40%)</title><rect x="796.7" y="627.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.7" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="796.7" y="611.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="799.7" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.30%)</title><rect x="797.8" y="611.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.79%)</title><rect x="801.3" y="643.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.20%)</title><rect x="808.4" y="627.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="811.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 2.08%)</title><rect x="810.7" y="675.0" width="24.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="813.7" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 2.08%)</title><rect x="810.7" y="659.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.7" y="670.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="814.2" y="643.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="817.2" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="814.2" y="627.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="817.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.59%)</title><rect x="816.6" y="643.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="819.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/623616838.accept (16 samples, 1.59%)</title><rect x="816.6" y="627.0" width="18.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (16 samples, 1.59%)</title><rect x="816.6" y="611.0" width="18.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (16 samples, 1.59%)</title><rect x="816.6" y="595.0" width="18.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="819.6" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (16 samples, 1.59%)</title><rect x="816.6" y="579.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.6" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.create (16 samples, 1.59%)</title><rect x="816.6" y="563.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.6" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 1.09%)</title><rect x="822.4" y="547.0" width="12.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="825.4" y="558.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 1.09%)</title><rect x="822.4" y="531.0" width="12.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="825.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.19%)</title><rect x="835.3" y="691.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="838.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.19%)</title><rect x="835.3" y="675.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="838.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="835.3" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="838.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.09%)</title><rect x="836.5" y="659.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/623616838.accept (11 samples, 1.09%)</title><rect x="836.5" y="643.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (11 samples, 1.09%)</title><rect x="836.5" y="627.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="839.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 1.09%)</title><rect x="836.5" y="611.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.5" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 1.09%)</title><rect x="836.5" y="595.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.5" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 1.09%)</title><rect x="836.5" y="579.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.5" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.40%)</title><rect x="849.3" y="691.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="852.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="849.3" y="675.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="852.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.20%)</title><rect x="854.0" y="707.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.0" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="854.0" y="691.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="857.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="854.0" y="675.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="857.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.89%)</title><rect x="856.4" y="755.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="859.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.89%)</title><rect x="856.4" y="739.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="859.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.89%)</title><rect x="856.4" y="723.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="859.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.89%)</title><rect x="856.4" y="707.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="859.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (2 samples, 0.20%)</title><rect x="864.6" y="691.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="867.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (204 samples, 20.24%)</title><rect x="866.9" y="755.0" width="238.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.9" y="766.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (204 samples, 20.24%)</title><rect x="866.9" y="739.0" width="238.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="869.9" y="750.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 18.25%)</title><rect x="871.6" y="723.0" width="215.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="874.6" y="734.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (19 samples, 1.88%)</title><rect x="882.1" y="707.0" width="22.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="885.1" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.29%)</title><rect x="904.4" y="707.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="907.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="904.4" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="905.5" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="908.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="905.5" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="908.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="905.5" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="908.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="905.5" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="905.5" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.09%)</title><rect x="906.7" y="691.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.09%)</title><rect x="906.7" y="675.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="909.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.09%)</title><rect x="906.7" y="659.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (143 samples, 14.19%)</title><rect x="919.6" y="707.0" width="167.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="922.6" y="718.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (142 samples, 14.09%)</title><rect x="920.8" y="691.0" width="166.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.8" y="702.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="930.1" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.1" y="686.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="931.3" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="934.3" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="932.5" y="675.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.5" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (126 samples, 12.50%)</title><rect x="934.8" y="675.0" width="147.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="937.8" y="686.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.30%)</title><rect x="937.1" y="659.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.1" y="670.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="940.7" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.7" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.98%)</title><rect x="941.8" y="659.0" width="23.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.8" y="670.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.50%)</title><rect x="947.7" y="643.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.7" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.30%)</title><rect x="950.0" y="627.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="953.0" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="953.5" y="643.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.5" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="955.9" y="643.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.9" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.69%)</title><rect x="957.0" y="643.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.0" y="654.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="965.2" y="659.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="968.2" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.20%)</title><rect x="966.4" y="659.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.4" y="670.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.10%)</title><rect x="968.8" y="659.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="971.8" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.58%)</title><rect x="969.9" y="659.0" width="30.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="972.9" y="670.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 5.75%)</title><rect x="1000.4" y="659.0" width="67.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1003.4" y="670.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="1068.3" y="659.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1071.3" y="670.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1069.4" y="659.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1072.4" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.30%)</title><rect x="1070.6" y="659.0" width="3.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1073.6" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.40%)</title><rect x="1074.1" y="659.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1077.1" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="1078.8" y="659.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.8" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1081.1" y="659.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1084.1" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.30%)</title><rect x="1082.3" y="675.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1085.3" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1085.8" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.59%)</title><rect x="1087.0" y="723.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1090.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.59%)</title><rect x="1087.0" y="707.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.59%)</title><rect x="1087.0" y="691.0" width="18.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1090.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.59%)</title><rect x="1087.0" y="675.0" width="18.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1090.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.20%)</title><rect x="1103.4" y="659.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1106.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1105.7" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1108.7" y="814.0"></text>
</g>
<g>
<title>start_thread (71 samples, 7.04%)</title><rect x="1106.9" y="803.0" width="83.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1109.9" y="814.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (71 samples, 7.04%)</title><rect x="1106.9" y="787.0" width="83.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1109.9" y="798.0">java_star..</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.38%)</title><rect x="1106.9" y="771.0" width="28.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.9" y="782.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.60%)</title><rect x="1106.9" y="755.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.9" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.60%)</title><rect x="1106.9" y="739.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.9" y="750.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.60%)</title><rect x="1106.9" y="723.0" width="7.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1109.9" y="734.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.79%)</title><rect x="1113.9" y="755.0" width="21.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="766.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.60%)</title><rect x="1113.9" y="739.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.20%)</title><rect x="1113.9" y="723.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1116.3" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.3" y="734.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.10%)</title><rect x="1116.3" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.3" y="718.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.30%)</title><rect x="1117.4" y="723.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1120.4" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.69%)</title><rect x="1120.9" y="739.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.9" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1120.9" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.9" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="1122.1" y="723.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.1" y="734.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.20%)</title><rect x="1122.1" y="707.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.1" y="718.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.20%)</title><rect x="1122.1" y="691.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.1" y="702.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.20%)</title><rect x="1122.1" y="675.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.1" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1124.4" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.4" y="718.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1124.4" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.4" y="702.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.10%)</title><rect x="1124.4" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.4" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="1125.6" y="723.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.6" y="734.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.30%)</title><rect x="1125.6" y="707.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.6" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.50%)</title><rect x="1129.1" y="739.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.1" y="750.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.50%)</title><rect x="1129.1" y="723.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.40%)</title><rect x="1129.1" y="707.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.1" y="718.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.40%)</title><rect x="1129.1" y="691.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.1" y="702.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.40%)</title><rect x="1129.1" y="675.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.1" y="686.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.40%)</title><rect x="1129.1" y="659.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.1" y="670.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.10%)</title><rect x="1132.6" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.6" y="654.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1132.6" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.6" y="638.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1133.8" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1133.8" y="691.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="702.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1133.8" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="1133.8" y="659.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (45 samples, 4.46%)</title><rect x="1135.0" y="771.0" width="52.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="782.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (45 samples, 4.46%)</title><rect x="1135.0" y="755.0" width="52.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.0" y="766.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (45 samples, 4.46%)</title><rect x="1135.0" y="739.0" width="52.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="750.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (45 samples, 4.46%)</title><rect x="1135.0" y="723.0" width="52.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.0" y="734.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (45 samples, 4.46%)</title><rect x="1135.0" y="707.0" width="52.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.0" y="718.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (45 samples, 4.46%)</title><rect x="1135.0" y="691.0" width="52.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.0" y="702.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (24 samples, 2.38%)</title><rect x="1135.0" y="675.0" width="28.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.0" y="686.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1135.0" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.0" y="670.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1135.0" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.0" y="654.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1136.2" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.2" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.20%)</title><rect x="1137.3" y="659.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.3" y="670.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1137.3" y="643.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.3" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1138.5" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.5" y="638.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1138.5" y="611.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.5" y="622.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1138.5" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.5" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1139.7" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.7" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1139.7" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.7" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1139.7" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.7" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 1.88%)</title><rect x="1140.8" y="659.0" width="22.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="670.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1140.8" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.20%)</title><rect x="1142.0" y="643.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.0" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1142.0" y="627.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.10%)</title><rect x="1144.3" y="643.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.3" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.40%)</title><rect x="1145.5" y="643.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.5" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.40%)</title><rect x="1145.5" y="627.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.5" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1149.0" y="611.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.30%)</title><rect x="1150.2" y="643.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.2" y="654.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1151.4" y="627.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="638.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.10%)</title><rect x="1152.5" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1153.7" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1154.9" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.9" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1154.9" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.9" y="638.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1156.1" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.1" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1156.1" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.1" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.10%)</title><rect x="1156.1" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.1" y="622.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1156.1" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.1" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1157.2" y="643.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.2" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1157.2" y="627.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.2" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.30%)</title><rect x="1158.4" y="643.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.4" y="654.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="627.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1160.7" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="622.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1161.9" y="643.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1164.9" y="654.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 1.59%)</title><rect x="1163.1" y="675.0" width="18.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1163.1" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 0.99%)</title><rect x="1164.2" y="659.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1164.2" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.2" y="654.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1164.2" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1165.4" y="643.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.69%)</title><rect x="1166.6" y="643.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.60%)</title><rect x="1167.8" y="627.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.50%)</title><rect x="1168.9" y="611.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1174.8" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1174.8" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.40%)</title><rect x="1176.0" y="659.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1177.1" y="643.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.20%)</title><rect x="1178.3" y="643.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.10%)</title><rect x="1178.3" y="627.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1179.5" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1180.6" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.10%)</title><rect x="1180.6" y="643.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.10%)</title><rect x="1180.6" y="627.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="638.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1180.6" y="611.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1181.8" y="675.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1181.8" y="659.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1181.8" y="643.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1181.8" y="627.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1181.8" y="611.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1181.8" y="595.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1181.8" y="579.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1181.8" y="563.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1181.8" y="547.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1181.8" y="531.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1181.8" y="515.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1181.8" y="499.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.8" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.8" y="451.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.8" y="435.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.8" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.8" y="403.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.8" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1183.0" y="483.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1183.0" y="467.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1183.0" y="451.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1183.0" y="435.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1183.0" y="419.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1183.0" y="403.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="371.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="339.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="323.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="307.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="243.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="227.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.10%)</title><rect x="1183.0" y="211.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.10%)</title><rect x="1183.0" y="195.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1183.0" y="179.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="190.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="163.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="174.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="147.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="158.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.10%)</title><rect x="1183.0" y="131.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="142.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1183.0" y="115.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="126.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1183.0" y="99.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1183.0" y="83.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="67.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="78.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.10%)</title><rect x="1183.0" y="51.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1183.0" y="35.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1186.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="339.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="323.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.1" y="291.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.1" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.1" y="259.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="243.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="227.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="211.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="195.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="179.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1184.1" y="163.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="147.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="131.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.10%)</title><rect x="1184.1" y="115.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1184.1" y="99.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.3" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1185.3" y="355.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="366.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1185.3" y="339.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="350.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1185.3" y="323.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1185.3" y="307.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.3" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1185.3" y="291.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="302.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1185.3" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.3" y="286.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1185.3" y="259.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1188.3" y="270.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.10%)</title><rect x="1186.5" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="686.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.10%)</title><rect x="1186.5" y="659.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="670.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.10%)</title><rect x="1186.5" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="654.0"></text>
</g>
<g>
<title>nmethod::copy_values(GrowableArray&lt;_jobject*&gt;*) (1 samples, 0.10%)</title><rect x="1186.5" y="627.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.7" y="771.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.7" y="755.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1187.7" y="739.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>os::vm_page_size() (1 samples, 0.10%)</title><rect x="1187.7" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_end(double, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>CommandLineFlagsEx::is_default(CommandLineFlag) (1 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
</g>
</svg>
