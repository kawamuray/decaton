<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (238 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.42%)</title><rect x="10.0" y="1219.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.42%)</title><rect x="10.0" y="1203.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 13.87%)</title><rect x="15.0" y="1219.0" width="163.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.0" y="1230.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (33 samples, 13.87%)</title><rect x="15.0" y="1203.0" width="163.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.0" y="1214.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.42%)</title><rect x="15.0" y="1187.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.42%)</title><rect x="15.0" y="1171.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/735929588.accept (1 samples, 0.42%)</title><rect x="15.0" y="1155.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.42%)</title><rect x="15.0" y="1139.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.42%)</title><rect x="15.0" y="1123.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.0" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.42%)</title><rect x="15.0" y="1107.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.42%)</title><rect x="19.9" y="1187.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.42%)</title><rect x="19.9" y="1171.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="1182.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.42%)</title><rect x="19.9" y="1155.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.42%)</title><rect x="19.9" y="1139.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.&lt;init&gt; (1 samples, 0.42%)</title><rect x="19.9" y="1123.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 7.56%)</title><rect x="24.9" y="1187.0" width="89.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.9" y="1198.0">java/lang/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/718070995.accept (18 samples, 7.56%)</title><rect x="24.9" y="1171.0" width="89.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.9" y="1182.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 7.56%)</title><rect x="24.9" y="1155.0" width="89.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.9" y="1166.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 5.46%)</title><rect x="24.9" y="1139.0" width="64.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.9" y="1150.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 5.46%)</title><rect x="24.9" y="1123.0" width="64.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.9" y="1134.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 5.46%)</title><rect x="24.9" y="1107.0" width="64.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.9" y="1118.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 5.46%)</title><rect x="24.9" y="1091.0" width="64.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.9" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 5.46%)</title><rect x="24.9" y="1075.0" width="64.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.9" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.42%)</title><rect x="39.7" y="1059.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (8 samples, 3.36%)</title><rect x="44.7" y="1059.0" width="39.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.7" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 2.52%)</title><rect x="44.7" y="1043.0" width="29.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.7" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.52%)</title><rect x="44.7" y="1027.0" width="29.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.52%)</title><rect x="44.7" y="1011.0" width="29.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.7" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.52%)</title><rect x="44.7" y="995.0" width="29.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.7" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.52%)</title><rect x="44.7" y="979.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.7" y="990.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (2 samples, 0.84%)</title><rect x="64.5" y="963.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.5" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.84%)</title><rect x="64.5" y="947.0" width="10.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="67.5" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.84%)</title><rect x="64.5" y="931.0" width="10.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="67.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.84%)</title><rect x="74.5" y="1043.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.84%)</title><rect x="74.5" y="1027.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.84%)</title><rect x="74.5" y="1011.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.84%)</title><rect x="74.5" y="995.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.5" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="84.4" y="1059.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="87.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.42%)</title><rect x="89.3" y="1139.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.42%)</title><rect x="89.3" y="1123.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.42%)</title><rect x="89.3" y="1107.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.68%)</title><rect x="94.3" y="1139.0" width="19.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.68%)</title><rect x="94.3" y="1123.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.42%)</title><rect x="104.2" y="1107.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.42%)</title><rect x="104.2" y="1091.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.42%)</title><rect x="104.2" y="1075.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.2" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="109.2" y="1107.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="112.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 5.46%)</title><rect x="114.1" y="1187.0" width="64.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.1" y="1198.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 5.46%)</title><rect x="114.1" y="1171.0" width="64.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.1" y="1182.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.52%)</title><rect x="114.1" y="1155.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.1" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.52%)</title><rect x="114.1" y="1139.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.1" y="1150.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.52%)</title><rect x="114.1" y="1123.0" width="29.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.1" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.10%)</title><rect x="114.1" y="1107.0" width="24.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.1" y="1118.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.10%)</title><rect x="114.1" y="1091.0" width="24.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.1" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.84%)</title><rect x="114.1" y="1075.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.26%)</title><rect x="124.0" y="1075.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.26%)</title><rect x="124.0" y="1059.0" width="14.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 1.26%)</title><rect x="124.0" y="1043.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 1.26%)</title><rect x="124.0" y="1027.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.42%)</title><rect x="133.9" y="1011.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.42%)</title><rect x="138.9" y="1107.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.42%)</title><rect x="138.9" y="1091.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.42%)</title><rect x="138.9" y="1075.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.42%)</title><rect x="138.9" y="1059.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.42%)</title><rect x="138.9" y="1043.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.42%)</title><rect x="138.9" y="1027.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.42%)</title><rect x="138.9" y="1011.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.42%)</title><rect x="138.9" y="995.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.26%)</title><rect x="143.9" y="1155.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.84%)</title><rect x="143.9" y="1139.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.84%)</title><rect x="143.9" y="1123.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.42%)</title><rect x="143.9" y="1107.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.42%)</title><rect x="148.8" y="1107.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.42%)</title><rect x="148.8" y="1091.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.42%)</title><rect x="148.8" y="1075.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.42%)</title><rect x="153.8" y="1139.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.42%)</title><rect x="153.8" y="1123.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.26%)</title><rect x="158.7" y="1155.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.84%)</title><rect x="158.7" y="1139.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.84%)</title><rect x="158.7" y="1123.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.84%)</title><rect x="158.7" y="1107.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.42%)</title><rect x="158.7" y="1091.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.42%)</title><rect x="158.7" y="1075.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.42%)</title><rect x="158.7" y="1059.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.42%)</title><rect x="158.7" y="1043.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.42%)</title><rect x="158.7" y="1027.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.42%)</title><rect x="158.7" y="1011.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.42%)</title><rect x="158.7" y="995.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.42%)</title><rect x="158.7" y="979.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.7" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.42%)</title><rect x="158.7" y="963.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.42%)</title><rect x="163.7" y="1091.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.42%)</title><rect x="163.7" y="1075.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.42%)</title><rect x="163.7" y="1059.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.42%)</title><rect x="163.7" y="1043.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.42%)</title><rect x="163.7" y="1027.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.42%)</title><rect x="163.7" y="1011.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.42%)</title><rect x="163.7" y="995.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.42%)</title><rect x="168.7" y="1139.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.42%)</title><rect x="168.7" y="1123.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.42%)</title><rect x="168.7" y="1107.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.42%)</title><rect x="168.7" y="1091.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.42%)</title><rect x="168.7" y="1075.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.42%)</title><rect x="168.7" y="1059.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.42%)</title><rect x="168.7" y="1043.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.42%)</title><rect x="173.6" y="1155.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.42%)</title><rect x="173.6" y="1139.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.42%)</title><rect x="173.6" y="1123.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.42%)</title><rect x="173.6" y="1107.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="173.6" y="1091.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (59 samples, 24.79%)</title><rect x="178.6" y="1219.0" width="292.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.6" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (59 samples, 24.79%)</title><rect x="178.6" y="1203.0" width="292.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.6" y="1214.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (59 samples, 24.79%)</title><rect x="178.6" y="1187.0" width="292.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="1198.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1804429109.run (36 samples, 15.13%)</title><rect x="183.5" y="1171.0" width="178.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.5" y="1182.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (36 samples, 15.13%)</title><rect x="183.5" y="1155.0" width="178.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.5" y="1166.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (36 samples, 15.13%)</title><rect x="183.5" y="1139.0" width="178.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.5" y="1150.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (35 samples, 14.71%)</title><rect x="183.5" y="1123.0" width="173.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.5" y="1134.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.42%)</title><rect x="188.5" y="1107.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (18 samples, 7.56%)</title><rect x="193.4" y="1107.0" width="89.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.4" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (18 samples, 7.56%)</title><rect x="193.4" y="1091.0" width="89.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.4" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (18 samples, 7.56%)</title><rect x="193.4" y="1075.0" width="89.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.4" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (18 samples, 7.56%)</title><rect x="193.4" y="1059.0" width="89.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.4" y="1070.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (18 samples, 7.56%)</title><rect x="193.4" y="1043.0" width="89.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.4" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (18 samples, 7.56%)</title><rect x="193.4" y="1027.0" width="89.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.4" y="1038.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.94%)</title><rect x="193.4" y="1011.0" width="34.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.4" y="1022.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="198.4" y="995.0" width="5.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="201.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.26%)</title><rect x="203.4" y="995.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.26%)</title><rect x="203.4" y="979.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.26%)</title><rect x="203.4" y="963.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.26%)</title><rect x="203.4" y="947.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.26%)</title><rect x="203.4" y="931.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.26%)</title><rect x="203.4" y="915.0" width="14.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.42%)</title><rect x="218.2" y="995.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.42%)</title><rect x="218.2" y="979.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.42%)</title><rect x="218.2" y="963.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.42%)</title><rect x="218.2" y="947.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.42%)</title><rect x="218.2" y="931.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.42%)</title><rect x="223.2" y="995.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="226.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 4.62%)</title><rect x="228.2" y="1011.0" width="54.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.2" y="1022.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.42%)</title><rect x="228.2" y="995.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.42%)</title><rect x="228.2" y="979.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.42%)</title><rect x="228.2" y="963.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.42%)</title><rect x="233.1" y="995.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.42%)</title><rect x="233.1" y="979.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.36%)</title><rect x="238.1" y="995.0" width="39.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.1" y="1006.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.26%)</title><rect x="238.1" y="979.0" width="14.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.84%)</title><rect x="243.0" y="963.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.84%)</title><rect x="243.0" y="947.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.84%)</title><rect x="243.0" y="931.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.10%)</title><rect x="252.9" y="979.0" width="24.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.9" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.10%)</title><rect x="252.9" y="963.0" width="24.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.10%)</title><rect x="252.9" y="947.0" width="24.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.9" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.84%)</title><rect x="257.9" y="931.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.42%)</title><rect x="257.9" y="915.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.42%)</title><rect x="257.9" y="899.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.42%)</title><rect x="257.9" y="883.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.42%)</title><rect x="257.9" y="867.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.42%)</title><rect x="257.9" y="851.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.42%)</title><rect x="257.9" y="835.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.42%)</title><rect x="257.9" y="819.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.42%)</title><rect x="262.9" y="915.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.42%)</title><rect x="262.9" y="899.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.84%)</title><rect x="267.8" y="931.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.84%)</title><rect x="267.8" y="915.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.84%)</title><rect x="267.8" y="899.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.84%)</title><rect x="267.8" y="883.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.8" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.84%)</title><rect x="267.8" y="867.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.8" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.84%)</title><rect x="267.8" y="851.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.8" y="862.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.84%)</title><rect x="267.8" y="835.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.42%)</title><rect x="277.7" y="995.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (15 samples, 6.30%)</title><rect x="282.7" y="1107.0" width="74.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.7" y="1118.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 1.68%)</title><rect x="282.7" y="1091.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.7" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.68%)</title><rect x="282.7" y="1075.0" width="19.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.7" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.26%)</title><rect x="287.6" y="1059.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.6" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.26%)</title><rect x="287.6" y="1043.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.42%)</title><rect x="297.6" y="1027.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.42%)</title><rect x="297.6" y="1011.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 3.36%)</title><rect x="302.5" y="1091.0" width="39.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="305.5" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 3.36%)</title><rect x="302.5" y="1075.0" width="39.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.5" y="1086.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.26%)</title><rect x="302.5" y="1059.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.26%)</title><rect x="302.5" y="1043.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.84%)</title><rect x="302.5" y="1027.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.42%)</title><rect x="307.5" y="1011.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.42%)</title><rect x="307.5" y="995.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.5" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="312.4" y="1027.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="315.4" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.10%)</title><rect x="317.4" y="1059.0" width="24.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.4" y="1070.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.10%)</title><rect x="317.4" y="1043.0" width="24.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.4" y="1054.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.42%)</title><rect x="317.4" y="1027.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.42%)</title><rect x="317.4" y="1011.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.42%)</title><rect x="317.4" y="995.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.42%)</title><rect x="317.4" y="979.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.68%)</title><rect x="322.4" y="1027.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.68%)</title><rect x="322.4" y="1011.0" width="19.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.42%)</title><rect x="327.3" y="995.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.42%)</title><rect x="327.3" y="979.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="330.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.84%)</title><rect x="332.3" y="995.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.42%)</title><rect x="332.3" y="979.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.42%)</title><rect x="337.2" y="979.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.84%)</title><rect x="342.2" y="1091.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.84%)</title><rect x="342.2" y="1075.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/407647810.process (1 samples, 0.42%)</title><rect x="342.2" y="1059.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.42%)</title><rect x="342.2" y="1043.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.42%)</title><rect x="342.2" y="1027.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.42%)</title><rect x="342.2" y="1011.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.42%)</title><rect x="342.2" y="995.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.42%)</title><rect x="342.2" y="979.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.42%)</title><rect x="342.2" y="963.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.42%)</title><rect x="342.2" y="947.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.42%)</title><rect x="347.1" y="1059.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.42%)</title><rect x="352.1" y="1091.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.1" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.42%)</title><rect x="352.1" y="1075.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.1" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.42%)</title><rect x="352.1" y="1059.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.1" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.&lt;init&gt; (1 samples, 0.42%)</title><rect x="352.1" y="1043.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.42%)</title><rect x="352.1" y="1027.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.1" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="352.1" y="1011.0" width="5.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="355.1" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="352.1" y="995.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="355.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.42%)</title><rect x="357.1" y="1123.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.1" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="357.1" y="1107.0" width="4.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="360.1" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="357.1" y="1091.0" width="4.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="360.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.84%)</title><rect x="362.0" y="1171.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.84%)</title><rect x="362.0" y="1155.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.0" y="1166.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.42%)</title><rect x="362.0" y="1139.0" width="5.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="365.0" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.42%)</title><rect x="367.0" y="1139.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="370.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.42%)</title><rect x="371.9" y="1171.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.42%)</title><rect x="376.9" y="1171.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.42%)</title><rect x="376.9" y="1155.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.42%)</title><rect x="376.9" y="1139.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.42%)</title><rect x="381.8" y="1171.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 7.14%)</title><rect x="386.8" y="1171.0" width="84.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.8" y="1182.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 7.14%)</title><rect x="386.8" y="1155.0" width="84.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.8" y="1166.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 5.88%)</title><rect x="401.7" y="1139.0" width="69.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.7" y="1150.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.42%)</title><rect x="401.7" y="1123.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.42%)</title><rect x="401.7" y="1107.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.42%)</title><rect x="401.7" y="1091.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.7" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.42%)</title><rect x="401.7" y="1075.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="404.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 5.46%)</title><rect x="406.6" y="1123.0" width="64.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.6" y="1134.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 5.46%)</title><rect x="406.6" y="1107.0" width="64.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.6" y="1118.0">sun/mis..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.42%)</title><rect x="406.6" y="1091.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="409.6" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.42%)</title><rect x="411.6" y="1091.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="414.6" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (11 samples, 4.62%)</title><rect x="416.6" y="1091.0" width="54.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="419.6" y="1102.0">Unsaf..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.42%)</title><rect x="416.6" y="1075.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="419.6" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.42%)</title><rect x="421.5" y="1075.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="424.5" y="1086.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.42%)</title><rect x="426.5" y="1075.0" width="4.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="429.5" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.26%)</title><rect x="431.4" y="1075.0" width="14.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="434.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.10%)</title><rect x="446.3" y="1075.0" width="24.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="449.3" y="1086.0">_..</text>
</g>
<g>
<title>start_thread (145 samples, 60.92%)</title><rect x="471.1" y="1219.0" width="718.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="474.1" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (145 samples, 60.92%)</title><rect x="471.1" y="1203.0" width="718.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="474.1" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 5.46%)</title><rect x="471.1" y="1187.0" width="64.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="474.1" y="1198.0">GangWor..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 5.46%)</title><rect x="471.1" y="1171.0" width="64.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.1" y="1182.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 5.04%)</title><rect x="471.1" y="1155.0" width="59.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="474.1" y="1166.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.10%)</title><rect x="471.1" y="1139.0" width="24.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="474.1" y="1150.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.42%)</title><rect x="490.9" y="1123.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="493.9" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.42%)</title><rect x="490.9" y="1107.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.9" y="1118.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (6 samples, 2.52%)</title><rect x="495.9" y="1139.0" width="29.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.9" y="1150.0">Ge..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.42%)</title><rect x="525.6" y="1139.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="528.6" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.42%)</title><rect x="530.6" y="1155.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.6" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.42%)</title><rect x="530.6" y="1139.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="533.6" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.42%)</title><rect x="530.6" y="1123.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="533.6" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.42%)</title><rect x="530.6" y="1107.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="533.6" y="1118.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.42%)</title><rect x="530.6" y="1091.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="533.6" y="1102.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.42%)</title><rect x="530.6" y="1075.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="533.6" y="1086.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.42%)</title><rect x="530.6" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.6" y="1070.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.42%)</title><rect x="530.6" y="1043.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.6" y="1054.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.42%)</title><rect x="530.6" y="1027.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.6" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (132 samples, 55.46%)</title><rect x="535.5" y="1187.0" width="654.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="538.5" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (132 samples, 55.46%)</title><rect x="535.5" y="1171.0" width="654.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.5" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (132 samples, 55.46%)</title><rect x="535.5" y="1155.0" width="654.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="538.5" y="1166.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (129 samples, 54.20%)</title><rect x="535.5" y="1139.0" width="639.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.5" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (129 samples, 54.20%)</title><rect x="535.5" y="1123.0" width="639.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="538.5" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 23.11%)</title><rect x="535.5" y="1107.0" width="272.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.5" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.26%)</title><rect x="535.5" y="1091.0" width="14.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="538.5" y="1102.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 1.26%)</title><rect x="535.5" y="1075.0" width="14.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.5" y="1086.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.42%)</title><rect x="535.5" y="1059.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.5" y="1070.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.42%)</title><rect x="535.5" y="1043.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.5" y="1054.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.42%)</title><rect x="535.5" y="1027.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="538.5" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.42%)</title><rect x="535.5" y="1011.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="538.5" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.42%)</title><rect x="535.5" y="995.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="538.5" y="1006.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.84%)</title><rect x="540.5" y="1059.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="543.5" y="1070.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.42%)</title><rect x="540.5" y="1043.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="543.5" y="1054.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.42%)</title><rect x="540.5" y="1027.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="543.5" y="1038.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::ValueRecorder(Arena*) (1 samples, 0.42%)</title><rect x="545.5" y="1043.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="548.5" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.68%)</title><rect x="550.4" y="1091.0" width="19.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="553.4" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.42%)</title><rect x="560.3" y="1075.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="563.3" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.42%)</title><rect x="560.3" y="1059.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="563.3" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.42%)</title><rect x="560.3" y="1043.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="563.3" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.42%)</title><rect x="565.3" y="1075.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="568.3" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.42%)</title><rect x="565.3" y="1059.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="568.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.52%)</title><rect x="570.3" y="1091.0" width="29.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="573.3" y="1102.0">Ma..</text>
</g>
<g>
<title>CmpL3Node::Opcode() const (1 samples, 0.42%)</title><rect x="570.3" y="1075.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="573.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.10%)</title><rect x="575.2" y="1075.0" width="24.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.2" y="1086.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.26%)</title><rect x="575.2" y="1059.0" width="14.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="578.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.42%)</title><rect x="590.1" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="593.1" y="1070.0"></text>
</g>
<g>
<title>addP_rRegNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.42%)</title><rect x="590.1" y="1043.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="593.1" y="1054.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.42%)</title><rect x="595.0" y="1059.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.26%)</title><rect x="600.0" y="1091.0" width="14.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="603.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.26%)</title><rect x="600.0" y="1075.0" width="14.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="603.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.42%)</title><rect x="600.0" y="1059.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="603.0" y="1070.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.42%)</title><rect x="600.0" y="1043.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="603.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.84%)</title><rect x="605.0" y="1059.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.42%)</title><rect x="614.9" y="1091.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="617.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 15.97%)</title><rect x="619.8" y="1091.0" width="188.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="622.8" y="1102.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.42%)</title><rect x="619.8" y="1075.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="622.8" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.42%)</title><rect x="624.8" y="1075.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="627.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.84%)</title><rect x="629.7" y="1075.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="632.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.26%)</title><rect x="639.7" y="1075.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="642.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="639.7" y="1059.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="642.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.84%)</title><rect x="644.6" y="1059.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="647.6" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="649.6" y="1043.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="652.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.10%)</title><rect x="654.5" y="1075.0" width="24.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="657.5" y="1086.0">P..</text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.42%)</title><rect x="669.4" y="1059.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="672.4" y="1070.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.42%)</title><rect x="674.4" y="1059.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="677.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.94%)</title><rect x="679.3" y="1075.0" width="34.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.3" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 2.10%)</title><rect x="689.2" y="1059.0" width="24.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.2" y="1070.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.42%)</title><rect x="699.2" y="1043.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="702.2" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.84%)</title><rect x="704.1" y="1043.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.42%)</title><rect x="714.0" y="1075.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.42%)</title><rect x="714.0" y="1059.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="717.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.42%)</title><rect x="719.0" y="1075.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="722.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.84%)</title><rect x="723.9" y="1075.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="726.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.84%)</title><rect x="733.9" y="1075.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.84%)</title><rect x="733.9" y="1059.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="736.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.42%)</title><rect x="738.8" y="1043.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="741.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 2.10%)</title><rect x="743.8" y="1075.0" width="24.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.8" y="1086.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.42%)</title><rect x="743.8" y="1059.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.42%)</title><rect x="743.8" y="1043.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.42%)</title><rect x="743.8" y="1027.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="746.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="743.8" y="1011.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="746.8" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.68%)</title><rect x="748.7" y="1059.0" width="19.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="751.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.42%)</title><rect x="748.7" y="1043.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.7" y="1054.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.42%)</title><rect x="748.7" y="1027.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="751.7" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.84%)</title><rect x="753.7" y="1043.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.7" y="1054.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.42%)</title><rect x="753.7" y="1027.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="756.7" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.42%)</title><rect x="758.7" y="1027.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.42%)</title><rect x="763.6" y="1043.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="766.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.84%)</title><rect x="768.6" y="1075.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.6" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.42%)</title><rect x="773.5" y="1059.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="776.5" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 2.52%)</title><rect x="778.5" y="1075.0" width="29.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="781.5" y="1086.0">Ph..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.42%)</title><rect x="783.4" y="1059.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="786.4" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.84%)</title><rect x="788.4" y="1059.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.4" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (2 samples, 0.84%)</title><rect x="798.3" y="1059.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="801.3" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (66 samples, 27.73%)</title><rect x="808.2" y="1107.0" width="327.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="811.2" y="1118.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.26%)</title><rect x="808.2" y="1091.0" width="14.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="811.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 1.26%)</title><rect x="808.2" y="1075.0" width="14.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="811.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.26%)</title><rect x="808.2" y="1059.0" width="14.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="811.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="1043.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="811.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="1027.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="1011.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="995.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="811.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="979.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="963.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="947.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="811.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.42%)</title><rect x="808.2" y="931.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.2" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append_if_missing(Node* const&amp;) (1 samples, 0.42%)</title><rect x="813.2" y="1043.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="816.2" y="1054.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.42%)</title><rect x="818.2" y="1043.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="821.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.84%)</title><rect x="823.1" y="1091.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.1" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.42%)</title><rect x="828.1" y="1075.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="831.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (49 samples, 20.59%)</title><rect x="833.0" y="1091.0" width="243.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.0" y="1102.0">PhaseIdealLoop::build_and_optimi..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.42%)</title><rect x="833.0" y="1075.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.84%)</title><rect x="838.0" y="1075.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="841.0" y="1086.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.84%)</title><rect x="838.0" y="1059.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.84%)</title><rect x="847.9" y="1075.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="850.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (38 samples, 15.97%)</title><rect x="857.8" y="1075.0" width="188.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="860.8" y="1086.0">PhaseIdealLoop::build_lo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 15.13%)</title><rect x="867.7" y="1059.0" width="178.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.7" y="1070.0">PhaseIdealLoop::build_l..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.42%)</title><rect x="882.6" y="1043.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="885.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (32 samples, 13.45%)</title><rect x="887.6" y="1043.0" width="158.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.6" y="1054.0">PhaseIdealLoop::get_..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 1.68%)</title><rect x="897.5" y="1027.0" width="19.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.84%)</title><rect x="907.4" y="1011.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.42%)</title><rect x="912.4" y="995.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (26 samples, 10.92%)</title><rect x="917.3" y="1027.0" width="128.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="920.3" y="1038.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.84%)</title><rect x="1046.2" y="1075.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.42%)</title><rect x="1051.2" y="1059.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.42%)</title><rect x="1051.2" y="1043.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.68%)</title><rect x="1056.1" y="1075.0" width="19.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.68%)</title><rect x="1056.1" y="1059.0" width="19.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.1" y="1070.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1056.1" y="1043.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.1" y="1054.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1056.1" y="1027.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.1" y="1038.0"></text>
</g>
<g>
<title>CastIINode::Opcode() const (1 samples, 0.42%)</title><rect x="1061.1" y="1043.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.1" y="1054.0"></text>
</g>
<g>
<title>IfFalseNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1066.1" y="1043.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.1" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1071.0" y="1043.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.42%)</title><rect x="1076.0" y="1091.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.42%)</title><rect x="1076.0" y="1075.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.36%)</title><rect x="1080.9" y="1091.0" width="39.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.9" y="1102.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 2.94%)</title><rect x="1085.9" y="1075.0" width="34.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.9" y="1086.0">Ph..</text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1085.9" y="1059.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.9" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1085.9" y="1043.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.9" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1085.9" y="1027.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.9" y="1038.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.42%)</title><rect x="1085.9" y="1011.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1088.9" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 1.26%)</title><rect x="1090.8" y="1059.0" width="14.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="1070.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.42%)</title><rect x="1090.8" y="1043.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1090.8" y="1027.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.8" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1090.8" y="1011.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.84%)</title><rect x="1095.8" y="1043.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.8" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1100.8" y="1027.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.8" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1100.8" y="1011.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1105.7" y="1059.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="1070.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1110.7" y="1059.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.7" y="1070.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.42%)</title><rect x="1110.7" y="1043.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="1054.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1115.6" y="1059.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.6" y="1070.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.42%)</title><rect x="1115.6" y="1043.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.6" y="1054.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.42%)</title><rect x="1115.6" y="1027.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.6" y="1038.0"></text>
</g>
<g>
<title>TypeRawPtr::add_offset(long) const (1 samples, 0.42%)</title><rect x="1115.6" y="1011.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.6" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.42%)</title><rect x="1120.6" y="1091.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.42%)</title><rect x="1120.6" y="1075.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.42%)</title><rect x="1120.6" y="1059.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.6" y="1070.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1120.6" y="1043.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="1054.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.84%)</title><rect x="1125.5" y="1091.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.5" y="1102.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.84%)</title><rect x="1125.5" y="1075.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.5" y="1086.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.42%)</title><rect x="1125.5" y="1059.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.5" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.42%)</title><rect x="1130.5" y="1059.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.5" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.42%)</title><rect x="1130.5" y="1043.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.94%)</title><rect x="1135.5" y="1107.0" width="34.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.5" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.94%)</title><rect x="1135.5" y="1091.0" width="34.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.5" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.94%)</title><rect x="1135.5" y="1075.0" width="34.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.5" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.94%)</title><rect x="1135.5" y="1059.0" width="34.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.42%)</title><rect x="1135.5" y="1043.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.5" y="1054.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.42%)</title><rect x="1135.5" y="1027.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.52%)</title><rect x="1140.4" y="1043.0" width="29.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.4" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.52%)</title><rect x="1140.4" y="1027.0" width="29.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.4" y="1038.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.52%)</title><rect x="1140.4" y="1011.0" width="29.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.4" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.52%)</title><rect x="1140.4" y="995.0" width="29.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.4" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.52%)</title><rect x="1140.4" y="979.0" width="29.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.4" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.10%)</title><rect x="1140.4" y="963.0" width="24.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.10%)</title><rect x="1140.4" y="947.0" width="24.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.4" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.10%)</title><rect x="1140.4" y="931.0" width="24.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.4" y="942.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.68%)</title><rect x="1140.4" y="915.0" width="19.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.68%)</title><rect x="1140.4" y="899.0" width="19.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.68%)</title><rect x="1140.4" y="883.0" width="19.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.68%)</title><rect x="1140.4" y="867.0" width="19.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.68%)</title><rect x="1140.4" y="851.0" width="19.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.68%)</title><rect x="1140.4" y="835.0" width="19.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.68%)</title><rect x="1140.4" y="819.0" width="19.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.68%)</title><rect x="1140.4" y="803.0" width="19.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.68%)</title><rect x="1140.4" y="787.0" width="19.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.68%)</title><rect x="1140.4" y="771.0" width="19.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.68%)</title><rect x="1140.4" y="755.0" width="19.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.68%)</title><rect x="1140.4" y="739.0" width="19.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.84%)</title><rect x="1140.4" y="723.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.4" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.84%)</title><rect x="1140.4" y="707.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.84%)</title><rect x="1140.4" y="691.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.84%)</title><rect x="1140.4" y="675.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.84%)</title><rect x="1140.4" y="659.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.84%)</title><rect x="1140.4" y="643.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.4" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.84%)</title><rect x="1140.4" y="627.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.84%)</title><rect x="1140.4" y="611.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.4" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.42%)</title><rect x="1145.4" y="595.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.42%)</title><rect x="1145.4" y="579.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1145.4" y="563.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.4" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1145.4" y="547.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.4" y="558.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.42%)</title><rect x="1145.4" y="531.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.4" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.42%)</title><rect x="1145.4" y="515.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.4" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.42%)</title><rect x="1145.4" y="499.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="510.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.42%)</title><rect x="1145.4" y="483.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.4" y="494.0"></text>
</g>
<g>
<title>methodHandle::remove() (1 samples, 0.42%)</title><rect x="1145.4" y="467.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.3" y="723.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.3" y="707.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.3" y="691.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.3" y="675.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.3" y="659.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.3" y="643.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.3" y="627.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.3" y="611.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.3" y="595.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.3" y="579.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.3" y="563.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.3" y="547.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.3" y="531.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.3" y="515.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.3" y="499.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.3" y="483.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.3" y="467.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.3" y="451.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.3" y="435.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.3" y="419.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.3" y="403.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.3" y="387.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.3" y="371.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.3" y="355.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.3" y="339.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.3" y="323.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.3" y="307.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.3" y="291.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.3" y="275.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.3" y="259.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.3" y="243.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.3" y="227.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.3" y="211.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.3" y="195.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.3" y="179.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.42%)</title><rect x="1150.3" y="163.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.42%)</title><rect x="1150.3" y="147.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.42%)</title><rect x="1150.3" y="131.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.42%)</title><rect x="1150.3" y="115.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.3" y="126.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.42%)</title><rect x="1150.3" y="99.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1150.3" y="83.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.3" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1150.3" y="67.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="78.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.42%)</title><rect x="1150.3" y="51.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="62.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.42%)</title><rect x="1150.3" y="35.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.3" y="723.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.3" y="707.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1155.3" y="691.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.3" y="675.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1155.3" y="659.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1155.3" y="643.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1155.3" y="627.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.3" y="611.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1155.3" y="595.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.3" y="579.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1155.3" y="563.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1155.3" y="547.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1155.3" y="531.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="542.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.3" y="515.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="526.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.42%)</title><rect x="1155.3" y="499.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="510.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.42%)</title><rect x="1155.3" y="483.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="494.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.42%)</title><rect x="1155.3" y="467.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.3" y="478.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.42%)</title><rect x="1155.3" y="451.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="462.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.42%)</title><rect x="1155.3" y="435.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.3" y="915.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.3" y="899.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1160.3" y="883.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1160.3" y="867.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1160.3" y="851.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1160.3" y="835.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1160.3" y="819.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1160.3" y="803.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1160.3" y="787.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1160.3" y="771.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1160.3" y="755.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1160.3" y="739.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.42%)</title><rect x="1160.3" y="723.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.42%)</title><rect x="1160.3" y="707.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.42%)</title><rect x="1160.3" y="691.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.3" y="702.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.42%)</title><rect x="1160.3" y="675.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.42%)</title><rect x="1160.3" y="659.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="670.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1160.3" y="643.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.3" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1160.3" y="627.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.42%)</title><rect x="1160.3" y="611.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.3" y="622.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.42%)</title><rect x="1165.2" y="963.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.2" y="974.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.42%)</title><rect x="1165.2" y="947.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.2" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.42%)</title><rect x="1170.2" y="1107.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.2" y="1118.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.42%)</title><rect x="1170.2" y="1091.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.2" y="1102.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.42%)</title><rect x="1170.2" y="1075.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="1086.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.42%)</title><rect x="1170.2" y="1059.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="1070.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.42%)</title><rect x="1170.2" y="1043.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.26%)</title><rect x="1175.1" y="1139.0" width="14.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.1" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.26%)</title><rect x="1175.1" y="1123.0" width="14.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.26%)</title><rect x="1175.1" y="1107.0" width="14.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.1" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.84%)</title><rect x="1175.1" y="1091.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.1" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.84%)</title><rect x="1175.1" y="1075.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="1086.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.42%)</title><rect x="1175.1" y="1059.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.42%)</title><rect x="1175.1" y="1043.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.42%)</title><rect x="1175.1" y="1027.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::volatile_field_store(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*) (1 samples, 0.42%)</title><rect x="1175.1" y="1011.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.1" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.42%)</title><rect x="1175.1" y="995.0" width="5.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1178.1" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.42%)</title><rect x="1180.1" y="1059.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="1070.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.42%)</title><rect x="1180.1" y="1043.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.42%)</title><rect x="1180.1" y="1027.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="1038.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.42%)</title><rect x="1185.0" y="1091.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.42%)</title><rect x="1185.0" y="1075.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="1086.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.42%)</title><rect x="1185.0" y="1059.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.0" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.42%)</title><rect x="1185.0" y="1043.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.0" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.42%)</title><rect x="1185.0" y="1027.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="1038.0"></text>
</g>
</g>
</svg>
