<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (157 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 17.83%)</title><rect x="10.0" y="739.0" width="210.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 17.83%)</title><rect x="10.0" y="723.0" width="210.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.27%)</title><rect x="10.0" y="707.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.27%)</title><rect x="10.0" y="691.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/548151818.accept (2 samples, 1.27%)</title><rect x="10.0" y="675.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 1.27%)</title><rect x="10.0" y="659.0" width="15.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.27%)</title><rect x="10.0" y="643.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.64%)</title><rect x="17.5" y="627.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.64%)</title><rect x="25.0" y="707.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.64%)</title><rect x="25.0" y="691.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.64%)</title><rect x="25.0" y="675.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.64%)</title><rect x="25.0" y="659.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.64%)</title><rect x="25.0" y="643.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.64%)</title><rect x="25.0" y="627.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.64%)</title><rect x="25.0" y="611.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.64%)</title><rect x="25.0" y="595.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.64%)</title><rect x="25.0" y="579.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.64%)</title><rect x="25.0" y="563.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.64%)</title><rect x="25.0" y="547.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/901695544.get (1 samples, 0.64%)</title><rect x="25.0" y="531.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (20 samples, 12.74%)</title><rect x="32.5" y="707.0" width="150.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.5" y="718.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1503268746.accept (19 samples, 12.10%)</title><rect x="32.5" y="691.0" width="142.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="702.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 12.10%)</title><rect x="32.5" y="675.0" width="142.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.5" y="686.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 10.19%)</title><rect x="32.5" y="659.0" width="120.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="670.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 10.19%)</title><rect x="32.5" y="643.0" width="120.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.5" y="654.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 10.19%)</title><rect x="32.5" y="627.0" width="120.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.5" y="638.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 10.19%)</title><rect x="32.5" y="611.0" width="120.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.5" y="622.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 10.19%)</title><rect x="32.5" y="595.0" width="120.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.5" y="606.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 10.19%)</title><rect x="32.5" y="579.0" width="120.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.5" y="590.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 8.92%)</title><rect x="32.5" y="563.0" width="105.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.5" y="574.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.91%)</title><rect x="32.5" y="547.0" width="22.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.5" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.91%)</title><rect x="32.5" y="531.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.5" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.27%)</title><rect x="40.1" y="515.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 1.27%)</title><rect x="40.1" y="499.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 7.01%)</title><rect x="55.1" y="547.0" width="82.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.1" y="558.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 7.01%)</title><rect x="55.1" y="531.0" width="82.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.1" y="542.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 6.37%)</title><rect x="55.1" y="515.0" width="75.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.1" y="526.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 6.37%)</title><rect x="55.1" y="499.0" width="75.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.1" y="510.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 6.37%)</title><rect x="55.1" y="483.0" width="75.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.1" y="494.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 5.73%)</title><rect x="55.1" y="467.0" width="67.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="58.1" y="478.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 4.46%)</title><rect x="55.1" y="451.0" width="52.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="58.1" y="462.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.27%)</title><rect x="107.7" y="451.0" width="15.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="110.7" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.64%)</title><rect x="122.7" y="467.0" width="7.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="125.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.64%)</title><rect x="130.3" y="515.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.27%)</title><rect x="137.8" y="563.0" width="15.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.27%)</title><rect x="137.8" y="547.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.27%)</title><rect x="137.8" y="531.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.64%)</title><rect x="152.8" y="659.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.64%)</title><rect x="152.8" y="643.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.64%)</title><rect x="152.8" y="627.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.27%)</title><rect x="160.3" y="659.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.27%)</title><rect x="160.3" y="643.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.64%)</title><rect x="175.4" y="691.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.64%)</title><rect x="175.4" y="675.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.64%)</title><rect x="175.4" y="659.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.64%)</title><rect x="175.4" y="643.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.64%)</title><rect x="175.4" y="627.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 3.18%)</title><rect x="182.9" y="707.0" width="37.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.9" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 3.18%)</title><rect x="182.9" y="691.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.9" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.91%)</title><rect x="182.9" y="675.0" width="22.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.9" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.91%)</title><rect x="182.9" y="659.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.9" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.91%)</title><rect x="182.9" y="643.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.9" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.91%)</title><rect x="182.9" y="627.0" width="22.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="185.9" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.91%)</title><rect x="182.9" y="611.0" width="22.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.9" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.64%)</title><rect x="182.9" y="595.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.27%)</title><rect x="190.4" y="595.0" width="15.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.27%)</title><rect x="190.4" y="579.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 1.27%)</title><rect x="190.4" y="563.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.4" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 1.27%)</title><rect x="190.4" y="547.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.4" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.64%)</title><rect x="197.9" y="531.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.64%)</title><rect x="197.9" y="515.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.64%)</title><rect x="197.9" y="499.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.64%)</title><rect x="197.9" y="483.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.9" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.64%)</title><rect x="197.9" y="467.0" width="7.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="200.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.64%)</title><rect x="205.4" y="675.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.64%)</title><rect x="205.4" y="659.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.64%)</title><rect x="205.4" y="643.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.64%)</title><rect x="205.4" y="627.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.64%)</title><rect x="205.4" y="611.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.64%)</title><rect x="205.4" y="595.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.64%)</title><rect x="212.9" y="675.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$100 (1 samples, 0.64%)</title><rect x="212.9" y="659.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (57 samples, 36.31%)</title><rect x="220.4" y="739.0" width="428.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.4" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (57 samples, 36.31%)</title><rect x="220.4" y="723.0" width="428.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.4" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (57 samples, 36.31%)</title><rect x="220.4" y="707.0" width="428.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.4" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1978585736.run (30 samples, 19.11%)</title><rect x="228.0" y="691.0" width="225.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.0" y="702.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (30 samples, 19.11%)</title><rect x="228.0" y="675.0" width="225.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.0" y="686.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (30 samples, 19.11%)</title><rect x="228.0" y="659.0" width="225.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.0" y="670.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (30 samples, 19.11%)</title><rect x="228.0" y="643.0" width="225.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.0" y="654.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 7.01%)</title><rect x="243.0" y="627.0" width="82.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.0" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 7.01%)</title><rect x="243.0" y="611.0" width="82.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.0" y="622.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 7.01%)</title><rect x="243.0" y="595.0" width="82.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.0" y="606.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 7.01%)</title><rect x="243.0" y="579.0" width="82.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.0" y="590.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 7.01%)</title><rect x="243.0" y="563.0" width="82.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.0" y="574.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 7.01%)</title><rect x="243.0" y="547.0" width="82.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.0" y="558.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.27%)</title><rect x="243.0" y="531.0" width="15.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.64%)</title><rect x="250.5" y="515.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 5.73%)</title><rect x="258.0" y="531.0" width="67.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.0" y="542.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 1.27%)</title><rect x="258.0" y="515.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.64%)</title><rect x="265.5" y="499.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.64%)</title><rect x="273.1" y="515.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.64%)</title><rect x="273.1" y="499.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.82%)</title><rect x="280.6" y="515.0" width="45.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.6" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 3.82%)</title><rect x="280.6" y="499.0" width="45.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.6" y="510.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 3.82%)</title><rect x="280.6" y="483.0" width="45.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.6" y="494.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 3.82%)</title><rect x="280.6" y="467.0" width="45.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.6" y="478.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.91%)</title><rect x="280.6" y="451.0" width="22.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="283.6" y="462.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.27%)</title><rect x="280.6" y="435.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.27%)</title><rect x="280.6" y="419.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.27%)</title><rect x="280.6" y="403.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.64%)</title><rect x="288.1" y="387.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.64%)</title><rect x="288.1" y="371.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.64%)</title><rect x="295.6" y="435.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.64%)</title><rect x="303.1" y="451.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.64%)</title><rect x="303.1" y="435.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.64%)</title><rect x="303.1" y="419.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.64%)</title><rect x="303.1" y="403.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.1" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.64%)</title><rect x="303.1" y="387.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.64%)</title><rect x="310.6" y="451.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.64%)</title><rect x="310.6" y="435.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.64%)</title><rect x="310.6" y="419.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.64%)</title><rect x="318.2" y="451.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.64%)</title><rect x="318.2" y="435.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 10.83%)</title><rect x="325.7" y="627.0" width="127.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.7" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.64%)</title><rect x="325.7" y="611.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="328.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.64%)</title><rect x="325.7" y="595.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.7" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.64%)</title><rect x="325.7" y="579.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 7.01%)</title><rect x="333.2" y="611.0" width="82.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.2" y="622.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 7.01%)</title><rect x="333.2" y="595.0" width="82.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.2" y="606.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.55%)</title><rect x="333.2" y="579.0" width="30.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.2" y="590.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.91%)</title><rect x="340.7" y="563.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.7" y="574.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.27%)</title><rect x="348.2" y="547.0" width="15.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.2" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.64%)</title><rect x="355.7" y="531.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.7" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.64%)</title><rect x="355.7" y="515.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.64%)</title><rect x="363.2" y="579.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.64%)</title><rect x="363.2" y="563.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.64%)</title><rect x="363.2" y="547.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.2" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.82%)</title><rect x="370.8" y="579.0" width="45.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.8" y="590.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.82%)</title><rect x="370.8" y="563.0" width="45.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.8" y="574.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 3.82%)</title><rect x="370.8" y="547.0" width="45.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.8" y="558.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 3.18%)</title><rect x="378.3" y="531.0" width="37.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="381.3" y="542.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.27%)</title><rect x="400.8" y="515.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.64%)</title><rect x="400.8" y="499.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.8" y="510.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.64%)</title><rect x="408.3" y="499.0" width="7.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="411.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.55%)</title><rect x="415.9" y="611.0" width="30.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="418.9" y="622.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.55%)</title><rect x="415.9" y="595.0" width="30.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.9" y="606.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/969553632.process (2 samples, 1.27%)</title><rect x="430.9" y="579.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.27%)</title><rect x="430.9" y="563.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.27%)</title><rect x="430.9" y="547.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.27%)</title><rect x="430.9" y="531.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.27%)</title><rect x="430.9" y="515.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.27%)</title><rect x="430.9" y="499.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.27%)</title><rect x="430.9" y="483.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.9" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.64%)</title><rect x="438.4" y="467.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.4" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.64%)</title><rect x="438.4" y="451.0" width="7.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="441.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.64%)</title><rect x="445.9" y="611.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.64%)</title><rect x="453.4" y="691.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.64%)</title><rect x="453.4" y="675.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.4" y="686.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.64%)</title><rect x="453.4" y="659.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="456.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.64%)</title><rect x="461.0" y="691.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.64%)</title><rect x="468.5" y="691.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.64%)</title><rect x="468.5" y="675.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.64%)</title><rect x="468.5" y="659.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="471.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 14.65%)</title><rect x="476.0" y="691.0" width="172.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.0" y="702.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (22 samples, 14.01%)</title><rect x="483.5" y="675.0" width="165.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.5" y="686.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 14.01%)</title><rect x="483.5" y="659.0" width="165.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="486.5" y="670.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.64%)</title><rect x="483.5" y="643.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 13.38%)</title><rect x="491.0" y="643.0" width="157.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.0" y="654.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (21 samples, 13.38%)</title><rect x="491.0" y="627.0" width="157.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="494.0" y="638.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (21 samples, 13.38%)</title><rect x="491.0" y="611.0" width="157.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="494.0" y="622.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.64%)</title><rect x="491.0" y="595.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="494.0" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.64%)</title><rect x="498.5" y="595.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.5" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.55%)</title><rect x="506.1" y="595.0" width="30.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="509.1" y="606.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (11 samples, 7.01%)</title><rect x="536.1" y="595.0" width="82.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="539.1" y="606.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.64%)</title><rect x="618.8" y="595.0" width="7.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="621.8" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.64%)</title><rect x="626.3" y="595.0" width="7.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="629.3" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.64%)</title><rect x="633.8" y="595.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="636.8" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.64%)</title><rect x="641.3" y="595.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="644.3" y="606.0"></text>
</g>
<g>
<title>start_thread (72 samples, 45.86%)</title><rect x="648.9" y="739.0" width="541.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="651.9" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (72 samples, 45.86%)</title><rect x="648.9" y="723.0" width="541.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="651.9" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 3.82%)</title><rect x="648.9" y="707.0" width="45.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="651.9" y="718.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (6 samples, 3.82%)</title><rect x="648.9" y="691.0" width="45.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.9" y="702.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 3.18%)</title><rect x="648.9" y="675.0" width="37.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="651.9" y="686.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.27%)</title><rect x="648.9" y="659.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="651.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.64%)</title><rect x="656.4" y="643.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="659.4" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.27%)</title><rect x="663.9" y="659.0" width="15.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="666.9" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.64%)</title><rect x="671.4" y="643.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="674.4" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.64%)</title><rect x="678.9" y="659.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="681.9" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.64%)</title><rect x="686.4" y="675.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="689.4" y="686.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.64%)</title><rect x="686.4" y="659.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="689.4" y="670.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.64%)</title><rect x="686.4" y="643.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="689.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.64%)</title><rect x="686.4" y="627.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="689.4" y="638.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.64%)</title><rect x="686.4" y="611.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="689.4" y="622.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.64%)</title><rect x="686.4" y="595.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="689.4" y="606.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.64%)</title><rect x="686.4" y="579.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="689.4" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (66 samples, 42.04%)</title><rect x="693.9" y="707.0" width="496.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="696.9" y="718.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (66 samples, 42.04%)</title><rect x="693.9" y="691.0" width="496.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="696.9" y="702.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (66 samples, 42.04%)</title><rect x="693.9" y="675.0" width="496.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="696.9" y="686.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (61 samples, 38.85%)</title><rect x="693.9" y="659.0" width="458.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="696.9" y="670.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (61 samples, 38.85%)</title><rect x="693.9" y="643.0" width="458.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="696.9" y="654.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 19.75%)</title><rect x="693.9" y="627.0" width="233.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="696.9" y="638.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.64%)</title><rect x="693.9" y="611.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="696.9" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.64%)</title><rect x="693.9" y="595.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="696.9" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.64%)</title><rect x="693.9" y="579.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.9" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.91%)</title><rect x="701.5" y="611.0" width="22.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="704.5" y="622.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.91%)</title><rect x="701.5" y="595.0" width="22.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="704.5" y="606.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.27%)</title><rect x="709.0" y="579.0" width="15.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="712.0" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.64%)</title><rect x="709.0" y="563.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="712.0" y="574.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.64%)</title><rect x="709.0" y="547.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="712.0" y="558.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.64%)</title><rect x="716.5" y="563.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.5" y="574.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.64%)</title><rect x="716.5" y="547.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="719.5" y="558.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.64%)</title><rect x="716.5" y="531.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="719.5" y="542.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.64%)</title><rect x="716.5" y="515.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.5" y="526.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.64%)</title><rect x="716.5" y="499.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="719.5" y="510.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.64%)</title><rect x="724.0" y="611.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="727.0" y="622.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.64%)</title><rect x="724.0" y="595.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="727.0" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.64%)</title><rect x="731.5" y="611.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="734.5" y="622.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.64%)</title><rect x="731.5" y="595.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="734.5" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.27%)</title><rect x="739.0" y="611.0" width="15.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="742.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.27%)</title><rect x="739.0" y="595.0" width="15.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="742.0" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.64%)</title><rect x="746.6" y="579.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="749.6" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.64%)</title><rect x="746.6" y="563.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="749.6" y="574.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.64%)</title><rect x="746.6" y="547.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="749.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (23 samples, 14.65%)</title><rect x="754.1" y="611.0" width="172.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="757.1" y="622.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.64%)</title><rect x="754.1" y="595.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="757.1" y="606.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.64%)</title><rect x="754.1" y="579.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="757.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.27%)</title><rect x="761.6" y="595.0" width="15.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="764.6" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.27%)</title><rect x="761.6" y="579.0" width="15.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="764.6" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="769.1" y="563.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.1" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.91%)</title><rect x="776.6" y="595.0" width="22.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="779.6" y="606.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.64%)</title><rect x="791.7" y="579.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.7" y="590.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.64%)</title><rect x="791.7" y="563.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.27%)</title><rect x="799.2" y="595.0" width="15.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="802.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.64%)</title><rect x="806.7" y="579.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="809.7" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="806.7" y="563.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="809.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.64%)</title><rect x="814.2" y="595.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.64%)</title><rect x="821.7" y="595.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 3.18%)</title><rect x="829.2" y="595.0" width="37.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="832.2" y="606.0">Pha..</text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 1.91%)</title><rect x="844.3" y="579.0" width="22.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.3" y="590.0">R..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.27%)</title><rect x="866.8" y="595.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.8" y="606.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.64%)</title><rect x="874.3" y="579.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.3" y="590.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.64%)</title><rect x="881.8" y="595.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="884.8" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.64%)</title><rect x="881.8" y="579.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="884.8" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.64%)</title><rect x="881.8" y="563.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="884.8" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.64%)</title><rect x="889.4" y="595.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.4" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="889.4" y="579.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.4" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.64%)</title><rect x="896.9" y="595.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="899.9" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="896.9" y="579.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.9" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.27%)</title><rect x="904.4" y="595.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.4" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.27%)</title><rect x="904.4" y="579.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.4" y="590.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.64%)</title><rect x="911.9" y="563.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.9" y="574.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.64%)</title><rect x="919.4" y="595.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.4" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 12.10%)</title><rect x="926.9" y="627.0" width="142.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="929.9" y="638.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 2.55%)</title><rect x="926.9" y="611.0" width="30.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.9" y="622.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 2.55%)</title><rect x="926.9" y="595.0" width="30.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.9" y="606.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.91%)</title><rect x="934.5" y="579.0" width="22.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.5" y="590.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="942.0" y="563.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="942.0" y="547.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="942.0" y="531.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="945.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="942.0" y="515.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="945.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.64%)</title><rect x="942.0" y="499.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.0" y="510.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.64%)</title><rect x="942.0" y="483.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.0" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.64%)</title><rect x="949.5" y="563.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.5" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.64%)</title><rect x="957.0" y="611.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 7.01%)</title><rect x="964.5" y="611.0" width="82.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.5" y="622.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.27%)</title><rect x="964.5" y="595.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.64%)</title><rect x="979.6" y="595.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.64%)</title><rect x="979.6" y="579.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 3.18%)</title><rect x="987.1" y="595.0" width="37.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.1" y="606.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.27%)</title><rect x="1009.6" y="579.0" width="15.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.64%)</title><rect x="1017.1" y="563.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.64%)</title><rect x="1017.1" y="547.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.64%)</title><rect x="1017.1" y="531.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.64%)</title><rect x="1024.6" y="595.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.64%)</title><rect x="1024.6" y="579.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.64%)</title><rect x="1032.2" y="595.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1035.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.64%)</title><rect x="1032.2" y="579.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.64%)</title><rect x="1032.2" y="563.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.2" y="574.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.64%)</title><rect x="1032.2" y="547.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.64%)</title><rect x="1039.7" y="595.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.7" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.64%)</title><rect x="1039.7" y="579.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.7" y="590.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1039.7" y="563.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.7" y="574.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.64%)</title><rect x="1039.7" y="547.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.7" y="558.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.64%)</title><rect x="1039.7" y="531.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.7" y="542.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.64%)</title><rect x="1039.7" y="515.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.7" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.64%)</title><rect x="1039.7" y="499.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.7" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.27%)</title><rect x="1047.2" y="611.0" width="15.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1050.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.27%)</title><rect x="1047.2" y="595.0" width="15.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.2" y="606.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.64%)</title><rect x="1054.7" y="579.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.7" y="590.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.64%)</title><rect x="1062.2" y="611.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 7.01%)</title><rect x="1069.7" y="627.0" width="82.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.7" y="638.0">ParseGene..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 7.01%)</title><rect x="1069.7" y="611.0" width="82.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.7" y="622.0">Parse::Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 7.01%)</title><rect x="1069.7" y="595.0" width="82.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.7" y="606.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 7.01%)</title><rect x="1069.7" y="579.0" width="82.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.7" y="590.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.64%)</title><rect x="1069.7" y="563.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.7" y="574.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.64%)</title><rect x="1069.7" y="547.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.7" y="558.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.64%)</title><rect x="1069.7" y="531.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.7" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1069.7" y="515.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.7" y="526.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1069.7" y="499.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.7" y="510.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.64%)</title><rect x="1069.7" y="483.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.7" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.64%)</title><rect x="1069.7" y="467.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.7" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.64%)</title><rect x="1069.7" y="451.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.7" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.64%)</title><rect x="1069.7" y="435.0" width="7.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1072.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 6.37%)</title><rect x="1077.3" y="563.0" width="75.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.3" y="574.0">Parse::d..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.64%)</title><rect x="1077.3" y="547.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.64%)</title><rect x="1077.3" y="531.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.3" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1077.3" y="515.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.3" y="526.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1077.3" y="499.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.3" y="510.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1077.3" y="483.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.3" y="494.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.64%)</title><rect x="1077.3" y="467.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.3" y="478.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.64%)</title><rect x="1077.3" y="451.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.3" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.64%)</title><rect x="1077.3" y="435.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.3" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.64%)</title><rect x="1077.3" y="419.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.3" y="430.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.64%)</title><rect x="1077.3" y="403.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.3" y="414.0"></text>
</g>
<g>
<title>TypeOopPtr::eq_speculative(TypeOopPtr const*) const (1 samples, 0.64%)</title><rect x="1077.3" y="387.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 5.10%)</title><rect x="1084.8" y="547.0" width="60.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.8" y="558.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.82%)</title><rect x="1084.8" y="531.0" width="45.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.8" y="542.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.82%)</title><rect x="1084.8" y="515.0" width="45.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.8" y="526.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.82%)</title><rect x="1084.8" y="499.0" width="45.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.8" y="510.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.82%)</title><rect x="1084.8" y="483.0" width="45.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.8" y="494.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.82%)</title><rect x="1084.8" y="467.0" width="45.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.8" y="478.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.18%)</title><rect x="1084.8" y="451.0" width="37.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.8" y="462.0">Par..</text>
</g>
<g>
<title>CallGenerator::for_direct_call(ciMethod*, bool) (1 samples, 0.64%)</title><rect x="1084.8" y="435.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.91%)</title><rect x="1092.3" y="435.0" width="22.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="446.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.91%)</title><rect x="1092.3" y="419.0" width="22.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.3" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.91%)</title><rect x="1092.3" y="403.0" width="22.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.3" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.91%)</title><rect x="1092.3" y="387.0" width="22.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.91%)</title><rect x="1092.3" y="371.0" width="22.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.3" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.91%)</title><rect x="1092.3" y="355.0" width="22.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.3" y="366.0">P..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.64%)</title><rect x="1092.3" y="339.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.3" y="350.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.64%)</title><rect x="1092.3" y="323.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.3" y="334.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1092.3" y="307.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1099.8" y="339.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1099.8" y="323.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1099.8" y="307.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1099.8" y="291.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1099.8" y="275.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1099.8" y="259.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1099.8" y="243.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1099.8" y="227.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1099.8" y="211.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1099.8" y="195.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1099.8" y="179.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1099.8" y="163.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1099.8" y="147.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1099.8" y="131.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1099.8" y="115.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1099.8" y="99.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1099.8" y="83.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::shared_lock(Node*) (1 samples, 0.64%)</title><rect x="1099.8" y="67.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.8" y="78.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.64%)</title><rect x="1099.8" y="51.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.8" y="62.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.64%)</title><rect x="1099.8" y="35.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1107.3" y="339.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1107.3" y="323.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1107.3" y="307.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1107.3" y="291.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1107.3" y="275.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1107.3" y="259.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.64%)</title><rect x="1107.3" y="243.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.3" y="254.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.64%)</title><rect x="1107.3" y="227.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.3" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1114.8" y="435.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1114.8" y="419.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1114.8" y="403.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.8" y="414.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.64%)</title><rect x="1114.8" y="387.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.64%)</title><rect x="1122.4" y="451.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.4" y="462.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.64%)</title><rect x="1122.4" y="435.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.4" y="446.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.64%)</title><rect x="1122.4" y="419.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.4" y="430.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.64%)</title><rect x="1122.4" y="403.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.4" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1129.9" y="531.0" width="15.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1129.9" y="515.0" width="15.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.27%)</title><rect x="1129.9" y="499.0" width="15.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.27%)</title><rect x="1129.9" y="483.0" width="15.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.27%)</title><rect x="1129.9" y="467.0" width="15.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.27%)</title><rect x="1129.9" y="451.0" width="15.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.27%)</title><rect x="1129.9" y="435.0" width="15.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1129.9" y="419.0" width="15.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.27%)</title><rect x="1129.9" y="403.0" width="15.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.27%)</title><rect x="1129.9" y="387.0" width="15.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.27%)</title><rect x="1129.9" y="371.0" width="15.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.27%)</title><rect x="1129.9" y="355.0" width="15.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.27%)</title><rect x="1129.9" y="339.0" width="15.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1129.9" y="323.0" width="15.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.27%)</title><rect x="1129.9" y="307.0" width="15.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.27%)</title><rect x="1129.9" y="291.0" width="15.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.27%)</title><rect x="1129.9" y="275.0" width="15.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.27%)</title><rect x="1129.9" y="259.0" width="15.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.27%)</title><rect x="1129.9" y="243.0" width="15.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1129.9" y="227.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1129.9" y="211.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1129.9" y="195.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="206.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.64%)</title><rect x="1129.9" y="179.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="190.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.64%)</title><rect x="1129.9" y="163.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.9" y="174.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.64%)</title><rect x="1129.9" y="147.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="158.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.64%)</title><rect x="1129.9" y="131.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.9" y="142.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.64%)</title><rect x="1129.9" y="115.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.9" y="126.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.64%)</title><rect x="1129.9" y="99.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.9" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1137.4" y="227.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.4" y="238.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1137.4" y="211.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.4" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.64%)</title><rect x="1137.4" y="195.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.4" y="206.0"></text>
</g>
<g>
<title>ciMethod::is_method_handle_intrinsic() const (1 samples, 0.64%)</title><rect x="1144.9" y="547.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.9" y="558.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.91%)</title><rect x="1152.4" y="659.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="670.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.91%)</title><rect x="1152.4" y="643.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="654.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.91%)</title><rect x="1152.4" y="627.0" width="22.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="638.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.91%)</title><rect x="1152.4" y="611.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="622.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.27%)</title><rect x="1152.4" y="595.0" width="15.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="606.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.64%)</title><rect x="1152.4" y="579.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="590.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.64%)</title><rect x="1152.4" y="563.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.64%)</title><rect x="1152.4" y="547.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.64%)</title><rect x="1152.4" y="531.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.64%)</title><rect x="1152.4" y="515.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.64%)</title><rect x="1152.4" y="499.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.64%)</title><rect x="1152.4" y="483.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.64%)</title><rect x="1152.4" y="467.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.64%)</title><rect x="1152.4" y="451.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.64%)</title><rect x="1152.4" y="435.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.64%)</title><rect x="1152.4" y="419.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.4" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.64%)</title><rect x="1152.4" y="403.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.4" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.64%)</title><rect x="1152.4" y="387.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.64%)</title><rect x="1152.4" y="371.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="382.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.64%)</title><rect x="1152.4" y="355.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="366.0"></text>
</g>
<g>
<title>BlockListBuilder::set_entries(int) (1 samples, 0.64%)</title><rect x="1152.4" y="339.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="350.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) [clone .constprop.410] (1 samples, 0.64%)</title><rect x="1152.4" y="323.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="334.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.64%)</title><rect x="1152.4" y="307.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.4" y="318.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.64%)</title><rect x="1159.9" y="579.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.9" y="590.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.64%)</title><rect x="1159.9" y="563.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="574.0"></text>
</g>
<g>
<title>NullCheck::input_values_do(ValueVisitor*) (1 samples, 0.64%)</title><rect x="1159.9" y="547.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.9" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.64%)</title><rect x="1167.5" y="595.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="606.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.64%)</title><rect x="1167.5" y="579.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.64%)</title><rect x="1167.5" y="563.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.64%)</title><rect x="1167.5" y="547.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (2 samples, 1.27%)</title><rect x="1175.0" y="659.0" width="15.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>Arena::Arena(MemoryType) (1 samples, 0.64%)</title><rect x="1175.0" y="643.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.64%)</title><rect x="1175.0" y="627.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.64%)</title><rect x="1182.5" y="643.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.64%)</title><rect x="1182.5" y="627.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.64%)</title><rect x="1182.5" y="611.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
</g>
</svg>
