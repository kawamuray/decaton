<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (1,068 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (258 samples, 24.16%)</title><rect x="10.0" y="1203.0" width="285.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (258 samples, 24.16%)</title><rect x="10.0" y="1187.0" width="285.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.19%)</title><rect x="10.0" y="1171.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.19%)</title><rect x="10.0" y="1155.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1231602494.accept (2 samples, 0.19%)</title><rect x="10.0" y="1139.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.19%)</title><rect x="10.0" y="1123.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.19%)</title><rect x="10.0" y="1107.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.19%)</title><rect x="10.0" y="1091.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="11.1" y="1075.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.47%)</title><rect x="12.2" y="1171.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.47%)</title><rect x="12.2" y="1155.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.37%)</title><rect x="13.3" y="1139.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.37%)</title><rect x="13.3" y="1123.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.37%)</title><rect x="13.3" y="1107.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.37%)</title><rect x="13.3" y="1091.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.37%)</title><rect x="13.3" y="1075.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (3 samples, 0.28%)</title><rect x="13.3" y="1059.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.19%)</title><rect x="14.4" y="1043.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.19%)</title><rect x="14.4" y="1027.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/997899493.test (2 samples, 0.19%)</title><rect x="14.4" y="1011.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$44 (1 samples, 0.09%)</title><rect x="15.5" y="995.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.09%)</title><rect x="15.5" y="979.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.09%)</title><rect x="15.5" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.6" y="1059.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.6" y="1043.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="16.6" y="1027.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (193 samples, 18.07%)</title><rect x="17.7" y="1171.0" width="213.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="1182.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/425729114.accept (187 samples, 17.51%)</title><rect x="18.8" y="1155.0" width="206.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="1166.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (187 samples, 17.51%)</title><rect x="18.8" y="1139.0" width="206.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.8" y="1150.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="18.8" y="1123.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (152 samples, 14.23%)</title><rect x="19.9" y="1123.0" width="168.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.9" y="1134.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (152 samples, 14.23%)</title><rect x="19.9" y="1107.0" width="168.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="1118.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (152 samples, 14.23%)</title><rect x="19.9" y="1091.0" width="168.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="1102.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (152 samples, 14.23%)</title><rect x="19.9" y="1075.0" width="168.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1086.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (152 samples, 14.23%)</title><rect x="19.9" y="1059.0" width="168.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="1070.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (152 samples, 14.23%)</title><rect x="19.9" y="1043.0" width="168.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.9" y="1054.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (97 samples, 9.08%)</title><rect x="19.9" y="1027.0" width="107.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.9" y="1038.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.97%)</title><rect x="19.9" y="1011.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.97%)</title><rect x="19.9" y="995.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.59%)</title><rect x="24.4" y="979.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.59%)</title><rect x="24.4" y="963.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.47%)</title><rect x="43.1" y="1011.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.47%)</title><rect x="43.1" y="995.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.28%)</title><rect x="44.3" y="979.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="990.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.19%)</title><rect x="45.4" y="963.0" width="2.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="48.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="47.6" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (71 samples, 6.65%)</title><rect x="48.7" y="1011.0" width="78.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.7" y="1022.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (71 samples, 6.65%)</title><rect x="48.7" y="995.0" width="78.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.7" y="1006.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 6.46%)</title><rect x="48.7" y="979.0" width="76.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.7" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 6.46%)</title><rect x="48.7" y="963.0" width="76.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.7" y="974.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (67 samples, 6.27%)</title><rect x="50.9" y="947.0" width="74.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.9" y="958.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="52.0" y="931.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="55.0" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="53.1" y="931.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="56.1" y="942.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="54.2" y="931.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="57.2" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 5.81%)</title><rect x="55.3" y="931.0" width="68.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="58.3" y="942.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="56.4" y="915.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="59.4" y="926.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="57.5" y="915.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="60.5" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.84%)</title><rect x="58.6" y="915.0" width="45.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="61.6" y="926.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.37%)</title><rect x="103.9" y="915.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="106.9" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.31%)</title><rect x="108.3" y="915.0" width="15.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="111.3" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="123.8" y="931.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="126.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.19%)</title><rect x="124.9" y="979.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (43 samples, 4.03%)</title><rect x="127.1" y="1027.0" width="47.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="130.1" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (43 samples, 4.03%)</title><rect x="127.1" y="1011.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.1" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (43 samples, 4.03%)</title><rect x="127.1" y="995.0" width="47.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.1" y="1006.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.19%)</title><rect x="168.0" y="979.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.0" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="170.2" y="979.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="173.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.75%)</title><rect x="174.6" y="1027.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (8 samples, 0.75%)</title><rect x="174.6" y="1011.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.75%)</title><rect x="174.6" y="995.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.28%)</title><rect x="180.1" y="979.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.37%)</title><rect x="183.5" y="1027.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.37%)</title><rect x="183.5" y="1011.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.37%)</title><rect x="183.5" y="995.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="183.5" y="979.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.28%)</title><rect x="184.6" y="979.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.37%)</title><rect x="187.9" y="1123.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.37%)</title><rect x="187.9" y="1107.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.37%)</title><rect x="192.3" y="1123.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.37%)</title><rect x="192.3" y="1107.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.37%)</title><rect x="192.3" y="1091.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (26 samples, 2.43%)</title><rect x="196.7" y="1123.0" width="28.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.7" y="1134.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.43%)</title><rect x="196.7" y="1107.0" width="28.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.7" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.84%)</title><rect x="212.2" y="1091.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.47%)</title><rect x="213.3" y="1075.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.47%)</title><rect x="213.3" y="1059.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.47%)</title><rect x="213.3" y="1043.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.3" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="217.7" y="1027.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="220.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="218.8" y="1075.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.8" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="222.1" y="1091.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="225.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.37%)</title><rect x="225.4" y="1155.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.37%)</title><rect x="225.4" y="1139.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.37%)</title><rect x="225.4" y="1123.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.37%)</title><rect x="225.4" y="1107.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.4" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.28%)</title><rect x="225.4" y="1091.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="228.8" y="1091.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="228.8" y="1075.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="229.9" y="1155.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="229.9" y="1139.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.43%)</title><rect x="231.0" y="1171.0" width="64.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.0" y="1182.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.34%)</title><rect x="232.1" y="1155.0" width="63.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.1" y="1166.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 3.75%)</title><rect x="232.1" y="1139.0" width="44.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.1" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="232.1" y="1123.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="232.1" y="1107.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="232.1" y="1091.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (39 samples, 3.65%)</title><rect x="233.2" y="1123.0" width="43.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.2" y="1134.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="233.2" y="1107.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="233.2" y="1091.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="233.2" y="1075.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (38 samples, 3.56%)</title><rect x="234.3" y="1107.0" width="42.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.3" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 3.28%)</title><rect x="234.3" y="1091.0" width="38.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.3" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 3.28%)</title><rect x="234.3" y="1075.0" width="38.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.3" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 1.03%)</title><rect x="238.7" y="1059.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.37%)</title><rect x="245.3" y="1043.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.37%)</title><rect x="245.3" y="1027.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.37%)</title><rect x="245.3" y="1011.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.37%)</title><rect x="245.3" y="995.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.37%)</title><rect x="245.3" y="979.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.37%)</title><rect x="245.3" y="963.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.37%)</title><rect x="245.3" y="947.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="249.8" y="1043.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="249.8" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="249.8" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (19 samples, 1.78%)</title><rect x="250.9" y="1059.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (18 samples, 1.69%)</title><rect x="252.0" y="1043.0" width="19.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (18 samples, 1.69%)</title><rect x="252.0" y="1027.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.0" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (18 samples, 1.69%)</title><rect x="252.0" y="1011.0" width="19.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.0" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (14 samples, 1.31%)</title><rect x="255.3" y="995.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (14 samples, 1.31%)</title><rect x="255.3" y="979.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (14 samples, 1.31%)</title><rect x="255.3" y="963.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (14 samples, 1.31%)</title><rect x="255.3" y="947.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.3" y="958.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="269.6" y="931.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="272.6" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="270.7" y="995.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="273.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="271.9" y="1059.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="273.0" y="1091.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.19%)</title><rect x="273.0" y="1075.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="273.0" y="1059.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="273.0" y="1043.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="273.0" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.1" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.1" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.1" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="274.1" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="275.2" y="1091.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="275.2" y="1075.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.2" y="1059.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.2" y="1043.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.2" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="275.2" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="278.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.47%)</title><rect x="276.3" y="1139.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.37%)</title><rect x="276.3" y="1123.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.37%)</title><rect x="276.3" y="1107.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="276.3" y="1091.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/905663373.accept (1 samples, 0.09%)</title><rect x="276.3" y="1075.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="276.3" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="276.3" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="276.3" y="1027.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="276.3" y="1011.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="276.3" y="995.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="277.4" y="1091.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="277.4" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="277.4" y="1059.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="277.4" y="1043.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="277.4" y="1027.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="277.4" y="1011.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="277.4" y="995.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="277.4" y="979.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.4" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="277.4" y="963.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="280.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.19%)</title><rect x="278.5" y="1091.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.19%)</title><rect x="278.5" y="1075.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="278.5" y="1059.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="278.5" y="1043.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="278.5" y="1027.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="278.5" y="1011.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="278.5" y="995.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="278.5" y="979.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="279.6" y="979.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="280.7" y="1123.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="280.7" y="1107.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="280.7" y="1091.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="280.7" y="1075.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="280.7" y="1059.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="280.7" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="280.7" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="280.7" y="1011.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.28%)</title><rect x="281.8" y="1139.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.19%)</title><rect x="281.8" y="1123.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.19%)</title><rect x="281.8" y="1107.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="281.8" y="1091.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="281.8" y="1075.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="281.8" y="1059.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="281.8" y="1043.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="281.8" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="281.8" y="1011.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="281.8" y="995.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.8" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="281.8" y="979.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="284.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="282.9" y="1091.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="282.9" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.9" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="282.9" y="1059.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="282.9" y="1043.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.9" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="282.9" y="1027.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="284.0" y="1123.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="284.0" y="1107.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="284.0" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="284.0" y="1075.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="284.0" y="1059.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="284.0" y="1043.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="284.0" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.66%)</title><rect x="285.1" y="1139.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.66%)</title><rect x="285.1" y="1123.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="285.1" y="1107.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="285.1" y="1091.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1225435910.accept (1 samples, 0.09%)</title><rect x="285.1" y="1075.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1225435910.accept (1 samples, 0.09%)</title><rect x="286.2" y="1091.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="286.2" y="1075.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="286.2" y="1059.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="286.2" y="1043.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="286.2" y="1027.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.2" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.09%)</title><rect x="287.3" y="1107.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.3" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="288.4" y="1107.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.4" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.09%)</title><rect x="288.4" y="1091.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="288.4" y="1075.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.19%)</title><rect x="289.5" y="1107.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="289.5" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="289.5" y="1075.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="289.5" y="1059.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.09%)</title><rect x="289.5" y="1043.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="290.6" y="1091.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="290.6" y="1075.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="290.6" y="1059.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="290.6" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="290.6" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="290.6" y="1011.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.6" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="290.6" y="995.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="290.6" y="979.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.6" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="290.6" y="963.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.09%)</title><rect x="291.7" y="1107.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.09%)</title><rect x="291.7" y="1091.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.19%)</title><rect x="292.8" y="1139.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="292.8" y="1123.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="292.8" y="1107.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="292.8" y="1091.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="292.8" y="1075.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="292.8" y="1059.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="294.0" y="1075.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="294.0" y="1059.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="294.0" y="1043.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (688 samples, 64.42%)</title><rect x="295.1" y="1203.0" width="760.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.1" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (687 samples, 64.33%)</title><rect x="296.2" y="1187.0" width="759.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="299.2" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (687 samples, 64.33%)</title><rect x="296.2" y="1171.0" width="759.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.2" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062141.run (457 samples, 42.79%)</title><rect x="299.5" y="1155.0" width="504.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.5" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/23506..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (457 samples, 42.79%)</title><rect x="299.5" y="1139.0" width="504.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.5" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (457 samples, 42.79%)</title><rect x="299.5" y="1123.0" width="504.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.5" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (448 samples, 41.95%)</title><rect x="299.5" y="1107.0" width="495.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.5" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.19%)</title><rect x="307.2" y="1091.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="309.4" y="1091.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="309.4" y="1075.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1730052184.get (1 samples, 0.09%)</title><rect x="309.4" y="1059.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="309.4" y="1043.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.4" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="309.4" y="1027.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="309.4" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="312.4" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="309.4" y="995.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="312.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="309.4" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="312.4" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="309.4" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="312.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (136 samples, 12.73%)</title><rect x="310.5" y="1091.0" width="150.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.5" y="1102.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (136 samples, 12.73%)</title><rect x="310.5" y="1075.0" width="150.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.5" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (136 samples, 12.73%)</title><rect x="310.5" y="1059.0" width="150.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.5" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 12.73%)</title><rect x="310.5" y="1043.0" width="150.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.5" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 12.73%)</title><rect x="310.5" y="1027.0" width="150.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.5" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (136 samples, 12.73%)</title><rect x="310.5" y="1011.0" width="150.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.5" y="1022.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 4.12%)</title><rect x="310.5" y="995.0" width="48.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.5" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (20 samples, 1.87%)</title><rect x="310.5" y="979.0" width="22.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.5" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (19 samples, 1.78%)</title><rect x="310.5" y="963.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.5" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.75%)</title><rect x="320.5" y="947.0" width="8.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="323.5" y="958.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="323.8" y="931.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="326.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.19%)</title><rect x="329.3" y="947.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="329.3" y="931.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="329.3" y="915.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="329.3" y="899.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="331.5" y="963.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="331.5" y="947.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (24 samples, 2.25%)</title><rect x="332.6" y="979.0" width="26.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.6" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (6 samples, 0.56%)</title><rect x="332.6" y="963.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="338.1" y="947.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (18 samples, 1.69%)</title><rect x="339.3" y="963.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.19%)</title><rect x="341.5" y="947.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.66%)</title><rect x="343.7" y="947.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="346.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.66%)</title><rect x="343.7" y="931.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (7 samples, 0.66%)</title><rect x="343.7" y="915.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.66%)</title><rect x="351.4" y="947.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.19%)</title><rect x="356.9" y="931.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.9" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="356.9" y="915.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.9" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="356.9" y="899.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="359.9" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="356.9" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="359.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="358.0" y="899.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="361.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="358.0" y="883.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="361.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="358.0" y="867.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="361.0" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="358.0" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="361.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="358.0" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="361.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (85 samples, 7.96%)</title><rect x="359.1" y="995.0" width="94.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.1" y="1006.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (8 samples, 0.75%)</title><rect x="359.1" y="979.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (8 samples, 0.75%)</title><rect x="359.1" y="963.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.28%)</title><rect x="360.2" y="947.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.19%)</title><rect x="361.3" y="931.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 0.37%)</title><rect x="363.6" y="947.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.75%)</title><rect x="368.0" y="979.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.75%)</title><rect x="368.0" y="963.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.09%)</title><rect x="374.6" y="947.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.09%)</title><rect x="375.7" y="947.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.94%)</title><rect x="376.8" y="979.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.75%)</title><rect x="377.9" y="963.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.75%)</title><rect x="377.9" y="947.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.66%)</title><rect x="379.0" y="931.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="384.6" y="915.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="386.8" y="963.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.94%)</title><rect x="387.9" y="979.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="387.9" y="963.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.84%)</title><rect x="389.0" y="963.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="392.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="397.8" y="947.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="397.8" y="931.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="397.8" y="915.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="397.8" y="899.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="400.8" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="397.8" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="400.8" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="397.8" y="867.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="400.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (49 samples, 4.59%)</title><rect x="398.9" y="979.0" width="54.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.9" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.50%)</title><rect x="400.0" y="963.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.47%)</title><rect x="406.6" y="947.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.47%)</title><rect x="406.6" y="931.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.47%)</title><rect x="406.6" y="915.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.47%)</title><rect x="412.2" y="947.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (32 samples, 3.00%)</title><rect x="417.7" y="963.0" width="35.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.7" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (30 samples, 2.81%)</title><rect x="419.9" y="947.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.9" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (30 samples, 2.81%)</title><rect x="419.9" y="931.0" width="33.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.9" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.84%)</title><rect x="428.7" y="915.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="431.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.19%)</title><rect x="431.0" y="899.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.28%)</title><rect x="433.2" y="899.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.28%)</title><rect x="433.2" y="883.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.28%)</title><rect x="433.2" y="867.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="436.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="434.3" y="851.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="437.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="436.5" y="899.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="436.5" y="883.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="437.6" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.56%)</title><rect x="438.7" y="915.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="441.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.37%)</title><rect x="440.9" y="899.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.37%)</title><rect x="440.9" y="883.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.37%)</title><rect x="440.9" y="867.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.37%)</title><rect x="440.9" y="851.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.37%)</title><rect x="445.3" y="915.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.37%)</title><rect x="445.3" y="899.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.37%)</title><rect x="445.3" y="883.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="448.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="448.6" y="867.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="451.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="448.6" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="451.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="448.6" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="451.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="448.6" y="819.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="451.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="448.6" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="451.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.28%)</title><rect x="449.7" y="915.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.28%)</title><rect x="449.7" y="899.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.66%)</title><rect x="453.1" y="995.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.66%)</title><rect x="453.1" y="979.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.66%)</title><rect x="453.1" y="963.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.28%)</title><rect x="453.1" y="947.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="456.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.09%)</title><rect x="456.4" y="947.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.28%)</title><rect x="457.5" y="947.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.28%)</title><rect x="457.5" y="931.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 26.22%)</title><rect x="460.8" y="1091.0" width="309.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.8" y="1102.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 4.96%)</title><rect x="460.8" y="1075.0" width="58.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.8" y="1086.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 4.87%)</title><rect x="461.9" y="1059.0" width="57.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.9" y="1070.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 4.31%)</title><rect x="468.5" y="1043.0" width="50.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.5" y="1054.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.75%)</title><rect x="469.6" y="1027.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.75%)</title><rect x="469.6" y="1011.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.75%)</title><rect x="469.6" y="995.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.75%)</title><rect x="469.6" y="979.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.37%)</title><rect x="474.0" y="963.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.28%)</title><rect x="475.1" y="947.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="478.1" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 3.46%)</title><rect x="478.5" y="1027.0" width="40.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.5" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.84%)</title><rect x="509.4" y="1011.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="509.4" y="995.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.75%)</title><rect x="510.5" y="995.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="516.0" y="979.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.0" y="990.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.19%)</title><rect x="517.1" y="979.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="520.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.56%)</title><rect x="519.3" y="1075.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="522.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.47%)</title><rect x="520.4" y="1059.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.47%)</title><rect x="520.4" y="1043.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (149 samples, 13.95%)</title><rect x="526.0" y="1075.0" width="164.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="529.0" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 13.95%)</title><rect x="526.0" y="1059.0" width="164.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.0" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="537.0" y="1043.0" width="5.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="540.0" y="1054.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="537.0" y="1027.0" width="5.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="540.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 5.15%)</title><rect x="542.5" y="1043.0" width="60.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.5" y="1054.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (53 samples, 4.96%)</title><rect x="543.7" y="1027.0" width="58.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="546.7" y="1038.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 3.18%)</title><rect x="560.2" y="1011.0" width="37.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="563.2" y="1022.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="574.6" y="995.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 1.40%)</title><rect x="575.7" y="995.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (15 samples, 1.40%)</title><rect x="575.7" y="979.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="578.7" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 1.40%)</title><rect x="575.7" y="963.0" width="16.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 1.03%)</title><rect x="580.1" y="947.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="583.1" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="582.3" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="585.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.28%)</title><rect x="583.4" y="931.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="586.4" y="942.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="584.5" y="915.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="587.5" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="585.6" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.6" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.47%)</title><rect x="586.7" y="931.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="589.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.28%)</title><rect x="589.0" y="915.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="592.0" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.19%)</title><rect x="589.0" y="899.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="592.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="590.1" y="883.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="593.1" y="894.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="590.1" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="593.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="590.1" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="593.1" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="590.1" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="593.1" y="846.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="590.1" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="593.1" y="830.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="590.1" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="593.1" y="814.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="591.2" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.2" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.37%)</title><rect x="592.3" y="995.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.3" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="596.7" y="995.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="599.7" y="1006.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="597.8" y="1011.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="600.8" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="598.9" y="1011.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="601.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="602.2" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="602.2" y="1011.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="602.2" y="995.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="603.3" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.28%)</title><rect x="604.4" y="1043.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.28%)</title><rect x="604.4" y="1027.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="607.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="604.4" y="1011.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.4" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 7.02%)</title><rect x="607.7" y="1043.0" width="82.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.7" y="1054.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (72 samples, 6.74%)</title><rect x="611.0" y="1027.0" width="79.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.0" y="1038.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.66%)</title><rect x="611.0" y="1011.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.66%)</title><rect x="611.0" y="995.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.66%)</title><rect x="611.0" y="979.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="614.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.66%)</title><rect x="611.0" y="963.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 6.09%)</title><rect x="618.8" y="1011.0" width="71.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="621.8" y="1022.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 5.62%)</title><rect x="624.3" y="995.0" width="66.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.3" y="1006.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 3.18%)</title><rect x="653.0" y="979.0" width="37.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.0" y="990.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.28%)</title><rect x="674.0" y="963.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.94%)</title><rect x="677.3" y="963.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.3" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="687.3" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="690.3" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="687.3" y="931.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.3" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="687.3" y="915.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.3" y="926.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.19%)</title><rect x="688.4" y="963.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="691.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 5.06%)</title><rect x="690.6" y="1075.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.6" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 5.06%)</title><rect x="690.6" y="1059.0" width="59.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.6" y="1070.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="690.6" y="1043.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.6" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="690.6" y="1027.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="693.6" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="690.6" y="1011.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="693.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="690.6" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.6" y="1006.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="690.6" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="693.6" y="990.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="690.6" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="693.6" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="691.7" y="995.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="694.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/770306532.process (28 samples, 2.62%)</title><rect x="692.8" y="1043.0" width="30.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.8" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (26 samples, 2.43%)</title><rect x="695.0" y="1027.0" width="28.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.0" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.87%)</title><rect x="697.2" y="1011.0" width="22.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="700.2" y="1022.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.28%)</title><rect x="708.3" y="995.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.28%)</title><rect x="708.3" y="979.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.3" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.28%)</title><rect x="708.3" y="963.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.28%)</title><rect x="708.3" y="947.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.28%)</title><rect x="708.3" y="931.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.19%)</title><rect x="709.4" y="915.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="712.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.56%)</title><rect x="711.6" y="995.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.6" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.47%)</title><rect x="712.7" y="979.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="715.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="713.8" y="963.0" width="4.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="716.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="718.2" y="995.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.37%)</title><rect x="719.3" y="1011.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.37%)</title><rect x="719.3" y="995.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="722.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.37%)</title><rect x="719.3" y="979.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.37%)</title><rect x="719.3" y="963.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="722.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.09%)</title><rect x="723.7" y="1043.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="726.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="724.9" y="1043.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="727.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="724.9" y="1027.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.66%)</title><rect x="727.1" y="1043.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.66%)</title><rect x="727.1" y="1027.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$270/1490415490.get$Lambda (7 samples, 0.66%)</title><rect x="727.1" y="1011.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="730.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$270/1490415490.&lt;init&gt; (7 samples, 0.66%)</title><rect x="727.1" y="995.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.19%)</title><rect x="734.8" y="1043.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.56%)</title><rect x="737.0" y="1043.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.56%)</title><rect x="737.0" y="1027.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.0" y="1038.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.47%)</title><rect x="737.0" y="1011.0" width="5.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="740.0" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="742.5" y="1011.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="745.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="743.6" y="1043.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="743.6" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="746.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.47%)</title><rect x="744.7" y="1043.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="746.9" y="1027.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="749.9" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="746.9" y="1011.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="749.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="746.9" y="995.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="749.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="746.9" y="979.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="748.1" y="1027.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.1" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (2 samples, 0.19%)</title><rect x="748.1" y="1011.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="748.1" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="751.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="749.2" y="995.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="749.2" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="752.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="750.3" y="1075.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="750.3" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="753.3" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="750.3" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="753.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="750.3" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.59%)</title><rect x="751.4" y="1075.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.4" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="754.7" y="1059.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="757.7" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="755.8" y="1059.0" width="5.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="758.8" y="1070.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="755.8" y="1043.0" width="5.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="758.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.75%)</title><rect x="761.3" y="1059.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.56%)</title><rect x="763.5" y="1043.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1850473500.accept (6 samples, 0.56%)</title><rect x="763.5" y="1027.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 0.56%)</title><rect x="763.5" y="1011.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.5" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.56%)</title><rect x="763.5" y="995.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="766.5" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.56%)</title><rect x="763.5" y="979.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.5" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="764.6" y="963.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="767.6" y="974.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="764.6" y="947.0" width="4.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="767.6" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="769.0" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="772.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.87%)</title><rect x="770.1" y="1091.0" width="22.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.1" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.69%)</title><rect x="772.4" y="1075.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="775.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.40%)</title><rect x="775.7" y="1059.0" width="16.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1850473500.accept (1 samples, 0.09%)</title><rect x="775.7" y="1043.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.09%)</title><rect x="775.7" y="1027.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.7" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="775.7" y="1011.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="778.7" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="775.7" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$293/726233009.accept (14 samples, 1.31%)</title><rect x="776.8" y="1043.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (14 samples, 1.31%)</title><rect x="776.8" y="1027.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="779.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/753457048.complete (14 samples, 1.31%)</title><rect x="776.8" y="1011.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (14 samples, 1.31%)</title><rect x="776.8" y="995.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 1.31%)</title><rect x="776.8" y="979.0" width="15.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.8" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.31%)</title><rect x="776.8" y="963.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.31%)</title><rect x="776.8" y="947.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.8" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 1.31%)</title><rect x="776.8" y="931.0" width="15.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.8" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (14 samples, 1.31%)</title><rect x="776.8" y="915.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="791.1" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.1" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.19%)</title><rect x="792.2" y="1091.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="795.2" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="792.2" y="1075.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="795.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (9 samples, 0.84%)</title><rect x="794.5" y="1107.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.5" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="798.9" y="1091.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="801.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="800.0" y="1075.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="803.0" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="803.3" y="1091.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.47%)</title><rect x="804.4" y="1155.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="807.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.47%)</title><rect x="804.4" y="1139.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.47%)</title><rect x="804.4" y="1123.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.47%)</title><rect x="804.4" y="1107.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.09%)</title><rect x="808.8" y="1091.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (222 samples, 20.79%)</title><rect x="809.9" y="1155.0" width="245.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.9" y="1166.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (222 samples, 20.79%)</title><rect x="809.9" y="1139.0" width="245.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.9" y="1150.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.09%)</title><rect x="819.9" y="1123.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (207 samples, 19.38%)</title><rect x="821.0" y="1123.0" width="228.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.0" y="1134.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (24 samples, 2.25%)</title><rect x="828.7" y="1107.0" width="26.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.7" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.47%)</title><rect x="855.2" y="1107.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.47%)</title><rect x="855.2" y="1091.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.47%)</title><rect x="855.2" y="1075.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.47%)</title><rect x="855.2" y="1059.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="858.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (171 samples, 16.01%)</title><rect x="860.7" y="1107.0" width="189.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.7" y="1118.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (170 samples, 15.92%)</title><rect x="861.9" y="1091.0" width="187.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="864.9" y="1102.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="864.1" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.1" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.37%)</title><rect x="865.2" y="1075.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="868.2" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.28%)</title><rect x="869.6" y="1075.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="872.6" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 14.23%)</title><rect x="872.9" y="1075.0" width="167.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="875.9" y="1086.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="879.5" y="1059.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.5" y="1070.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.19%)</title><rect x="881.7" y="1059.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="884.7" y="1070.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="884.0" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="887.0" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (31 samples, 2.90%)</title><rect x="885.1" y="1059.0" width="34.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.1" y="1070.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 1.03%)</title><rect x="899.4" y="1043.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="902.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.56%)</title><rect x="903.8" y="1027.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="906.8" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (6 samples, 0.56%)</title><rect x="903.8" y="1011.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="906.8" y="1022.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="910.5" y="1027.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="913.5" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.28%)</title><rect x="911.6" y="1043.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.6" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.37%)</title><rect x="914.9" y="1043.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.28%)</title><rect x="919.3" y="1059.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.3" y="1070.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.19%)</title><rect x="922.6" y="1059.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="925.6" y="1070.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.66%)</title><rect x="924.8" y="1059.0" width="7.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="927.8" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.62%)</title><rect x="932.6" y="1059.0" width="30.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="935.6" y="1070.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 5.34%)</title><rect x="963.5" y="1059.0" width="63.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="966.5" y="1070.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.19%)</title><rect x="1026.5" y="1059.0" width="2.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1029.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.19%)</title><rect x="1028.7" y="1059.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1031.7" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.28%)</title><rect x="1030.9" y="1059.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1033.9" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="1034.2" y="1059.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1037.2" y="1070.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1036.4" y="1059.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1039.4" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.28%)</title><rect x="1037.5" y="1059.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.28%)</title><rect x="1040.8" y="1075.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1043.8" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.47%)</title><rect x="1044.2" y="1075.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.47%)</title><rect x="1049.7" y="1123.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.47%)</title><rect x="1049.7" y="1107.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.37%)</title><rect x="1049.7" y="1091.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1052.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="1054.1" y="1091.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1057.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="1054.1" y="1075.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1057.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="1054.1" y="1059.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.1" y="1070.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.09%)</title><rect x="1055.2" y="1203.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1058.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1056.3" y="1203.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1056.3" y="1187.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1056.3" y="1171.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1059.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1056.3" y="1155.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1059.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1056.3" y="1139.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1059.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1056.3" y="1123.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1059.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1056.3" y="1107.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1059.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1056.3" y="1091.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1056.3" y="1075.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.3" y="1086.0"></text>
</g>
<g>
<title>start_thread (120 samples, 11.24%)</title><rect x="1057.4" y="1203.0" width="132.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1060.4" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (120 samples, 11.24%)</title><rect x="1057.4" y="1187.0" width="132.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1060.4" y="1198.0">java_start(Threa..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.87%)</title><rect x="1057.4" y="1171.0" width="22.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.4" y="1182.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.47%)</title><rect x="1057.4" y="1155.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1060.4" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.47%)</title><rect x="1057.4" y="1139.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.4" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1057.4" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.4" y="1134.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.37%)</title><rect x="1058.5" y="1123.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1061.5" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.31%)</title><rect x="1062.9" y="1155.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.9" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.56%)</title><rect x="1062.9" y="1139.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.9" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1062.9" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.9" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1064.0" y="1123.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="1134.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.37%)</title><rect x="1065.1" y="1123.0" width="4.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1068.1" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.75%)</title><rect x="1069.6" y="1139.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.6" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.75%)</title><rect x="1069.6" y="1123.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.6" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.66%)</title><rect x="1069.6" y="1107.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.6" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.66%)</title><rect x="1069.6" y="1091.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.6" y="1102.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.66%)</title><rect x="1069.6" y="1075.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.6" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.66%)</title><rect x="1069.6" y="1059.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.6" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1070.7" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.7" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.47%)</title><rect x="1071.8" y="1043.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.8" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1071.8" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.8" y="1038.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1072.9" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.9" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1074.0" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.09%)</title><rect x="1075.1" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.1" y="1038.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1076.2" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.2" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1077.3" y="1107.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.3" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1077.3" y="1091.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.3" y="1102.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="1077.3" y="1075.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.3" y="1086.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1078.4" y="1155.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.4" y="1166.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1078.4" y="1139.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.4" y="1150.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.09%)</title><rect x="1078.4" y="1123.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1081.4" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (98 samples, 9.18%)</title><rect x="1079.5" y="1171.0" width="108.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.5" y="1182.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (98 samples, 9.18%)</title><rect x="1079.5" y="1155.0" width="108.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.5" y="1166.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (98 samples, 9.18%)</title><rect x="1079.5" y="1139.0" width="108.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.5" y="1150.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (97 samples, 9.08%)</title><rect x="1079.5" y="1123.0" width="107.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.5" y="1134.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (96 samples, 8.99%)</title><rect x="1079.5" y="1107.0" width="106.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.5" y="1118.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (96 samples, 8.99%)</title><rect x="1079.5" y="1091.0" width="106.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.5" y="1102.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 5.62%)</title><rect x="1079.5" y="1075.0" width="66.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.5" y="1086.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.28%)</title><rect x="1079.5" y="1059.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.5" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1079.5" y="1043.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1082.5" y="1054.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.19%)</title><rect x="1080.6" y="1043.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.6" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.19%)</title><rect x="1080.6" y="1027.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.6" y="1038.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1081.7" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.7" y="1022.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.09%)</title><rect x="1081.7" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.7" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1082.8" y="1059.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.8" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.19%)</title><rect x="1082.8" y="1043.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.8" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.19%)</title><rect x="1082.8" y="1027.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.47%)</title><rect x="1085.0" y="1059.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.0" y="1070.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1085.0" y="1043.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1086.1" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.28%)</title><rect x="1087.2" y="1043.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.2" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.19%)</title><rect x="1088.4" y="1027.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.4" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1090.6" y="1059.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1090.6" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1090.6" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 4.49%)</title><rect x="1091.7" y="1059.0" width="53.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.7" y="1070.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1091.7" y="1043.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.7" y="1054.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.09%)</title><rect x="1092.8" y="1043.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.8" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.28%)</title><rect x="1093.9" y="1043.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.19%)</title><rect x="1097.2" y="1043.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.2" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1097.2" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1098.3" y="1027.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.37%)</title><rect x="1099.4" y="1043.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.4" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1099.4" y="1027.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.28%)</title><rect x="1100.5" y="1027.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1102.7" y="1011.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.84%)</title><rect x="1103.8" y="1043.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.09%)</title><rect x="1111.6" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.09%)</title><rect x="1111.6" y="1011.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.6" y="1022.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.09%)</title><rect x="1112.7" y="1027.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.94%)</title><rect x="1113.8" y="1043.0" width="11.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.28%)</title><rect x="1117.1" y="1027.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.1" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1120.4" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.28%)</title><rect x="1121.5" y="1027.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1122.6" y="1011.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.37%)</title><rect x="1124.8" y="1043.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.19%)</title><rect x="1129.2" y="1043.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1131.4" y="1043.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.4" y="1054.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1132.5" y="1027.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1135.5" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1133.7" y="1043.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.7" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1133.7" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.7" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1133.7" y="1011.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.7" y="1022.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1133.7" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1133.7" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.7" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1134.8" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1135.9" y="1043.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.9" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.56%)</title><rect x="1137.0" y="1043.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.0" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1142.5" y="1027.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1142.5" y="1011.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.5" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1143.6" y="1043.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.6" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1144.7" y="1059.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1147.7" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 2.53%)</title><rect x="1145.8" y="1075.0" width="29.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="1086.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.28%)</title><rect x="1145.8" y="1059.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.28%)</title><rect x="1145.8" y="1043.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.19%)</title><rect x="1145.8" y="1027.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (2 samples, 0.19%)</title><rect x="1145.8" y="1011.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.09%)</title><rect x="1146.9" y="995.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.09%)</title><rect x="1146.9" y="979.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ideal_graph(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1148.0" y="1027.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ptr_compare(Node*) (1 samples, 0.09%)</title><rect x="1148.0" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.28%)</title><rect x="1149.1" y="1059.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.1" y="1070.0"></text>
</g>
<g>
<title>URShiftINode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1151.3" y="1043.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.3" y="1054.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.09%)</title><rect x="1151.3" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.3" y="1038.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1151.3" y="1011.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (14 samples, 1.31%)</title><rect x="1152.4" y="1059.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1152.4" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.37%)</title><rect x="1153.5" y="1043.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1158.0" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1158.0" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.56%)</title><rect x="1159.1" y="1043.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.37%)</title><rect x="1161.3" y="1027.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.28%)</title><rect x="1162.4" y="1011.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1164.6" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1165.7" y="1043.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1166.8" y="1043.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1166.8" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1167.9" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1167.9" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.47%)</title><rect x="1169.0" y="1059.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.0" y="1070.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1169.0" y="1043.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.28%)</title><rect x="1170.1" y="1043.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1170.1" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1170.1" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.1" y="995.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="979.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="990.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1171.2" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="1038.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.3" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="1038.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1172.3" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="1022.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.4" y="1043.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1174.5" y="1059.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1177.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.75%)</title><rect x="1175.6" y="1075.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.75%)</title><rect x="1175.6" y="1059.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.75%)</title><rect x="1175.6" y="1043.0" width="8.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.75%)</title><rect x="1175.6" y="1027.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.75%)</title><rect x="1175.6" y="1011.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.75%)</title><rect x="1175.6" y="995.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.75%)</title><rect x="1175.6" y="979.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.75%)</title><rect x="1175.6" y="963.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.66%)</title><rect x="1175.6" y="947.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.66%)</title><rect x="1175.6" y="931.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.66%)</title><rect x="1175.6" y="915.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.66%)</title><rect x="1175.6" y="899.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.66%)</title><rect x="1175.6" y="883.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.66%)</title><rect x="1175.6" y="867.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.66%)</title><rect x="1175.6" y="851.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.66%)</title><rect x="1175.6" y="835.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1175.6" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1175.6" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="787.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.56%)</title><rect x="1176.7" y="819.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.47%)</title><rect x="1176.7" y="803.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1176.7" y="787.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1176.7" y="771.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1176.7" y="755.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1176.7" y="739.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1176.7" y="723.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1176.7" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>LoadNode::cmp(Node const&amp;) const (1 samples, 0.09%)</title><rect x="1176.7" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1176.7" y="643.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.37%)</title><rect x="1177.8" y="707.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1177.8" y="691.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1177.8" y="675.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1177.8" y="659.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1177.8" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1177.8" y="627.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1177.8" y="611.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1177.8" y="595.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1177.8" y="579.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1177.8" y="563.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1177.8" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1177.8" y="531.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1177.8" y="515.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1177.8" y="499.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1177.8" y="483.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1177.8" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1179.0" y="563.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1179.0" y="547.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1179.0" y="531.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1179.0" y="515.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="483.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="451.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.0" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.0" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.0" y="355.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.0" y="339.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.0" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.0" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.09%)</title><rect x="1179.0" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1179.0" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1179.0" y="259.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="254.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="227.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="238.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1179.0" y="211.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1179.0" y="195.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="435.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="419.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="403.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="371.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="307.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="243.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="227.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="195.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="179.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.1" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.1" y="131.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.1" y="115.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.1" y="99.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.1" y="83.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.1" y="67.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1180.1" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="62.0"></text>
</g>
<g>
<title>PhaseValues::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1180.1" y="35.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.2" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.2" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.2" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.2" y="643.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.2" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.2" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.2" y="595.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.2" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.2" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.2" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.2" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.2" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.2" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.2" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.2" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.2" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.2" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.2" y="419.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.2" y="403.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.2" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.2" y="371.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.2" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.2" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.2" y="323.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.2" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.2" y="291.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.2" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.2" y="259.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1181.2" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="254.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.09%)</title><rect x="1181.2" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1181.2" y="211.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="222.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1181.2" y="195.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="206.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1181.2" y="179.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="190.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1181.2" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="174.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1181.2" y="147.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.09%)</title><rect x="1182.3" y="803.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.09%)</title><rect x="1182.3" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="798.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.09%)</title><rect x="1182.3" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.09%)</title><rect x="1182.3" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, long) (1 samples, 0.09%)</title><rect x="1182.3" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.3" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1183.4" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="958.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1183.4" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="942.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1183.4" y="915.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="926.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1183.4" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="910.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1183.4" y="883.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="894.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1183.4" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="878.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.5" y="1075.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.5" y="1059.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.6" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.6" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.6" y="1091.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.6" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.6" y="1059.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1185.6" y="1043.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="1054.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.6" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.6" y="1038.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1185.6" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1185.6" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1185.6" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.6" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1185.6" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.6" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1185.6" y="947.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1185.6" y="931.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1185.6" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1185.6" y="899.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.6" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1185.6" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.6" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1185.6" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.6" y="878.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.7" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.7" y="1107.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.7" y="1091.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.7" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.7" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="1086.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.09%)</title><rect x="1186.7" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1070.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="1171.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="1182.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="1155.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="1166.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.19%)</title><rect x="1187.8" y="1139.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="1150.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.19%)</title><rect x="1187.8" y="1123.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="1134.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.19%)</title><rect x="1187.8" y="1107.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.19%)</title><rect x="1187.8" y="1091.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.8" y="1075.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.09%)</title><rect x="1187.8" y="1059.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::clear() (1 samples, 0.09%)</title><rect x="1187.8" y="1043.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1187.8" y="1027.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.8" y="1038.0"></text>
</g>
<g>
<title>OldRegionSetMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="1188.9" y="1075.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="1086.0"></text>
</g>
</g>
</svg>
