<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1990" onload="init(evt)" viewBox="0 0 1200 1990" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1973"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1973"> </text>
<g id="frames">
<g>
<title>all (1,417 samples, 100.00%)</title><rect x="10.0" y="1939.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1950.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="10.8" y="1923.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.8" y="1934.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.8" y="1907.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.8" y="1918.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.07%)</title><rect x="10.8" y="1891.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.8" y="1902.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.07%)</title><rect x="10.8" y="1875.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.8" y="1886.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="11.7" y="1907.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (267 samples, 18.84%)</title><rect x="12.5" y="1923.0" width="222.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="1934.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (267 samples, 18.84%)</title><rect x="12.5" y="1907.0" width="222.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.5" y="1918.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.14%)</title><rect x="13.3" y="1891.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.14%)</title><rect x="13.3" y="1875.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (2 samples, 0.14%)</title><rect x="13.3" y="1859.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.14%)</title><rect x="13.3" y="1843.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.14%)</title><rect x="13.3" y="1827.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.3" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.14%)</title><rect x="13.3" y="1811.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.28%)</title><rect x="15.0" y="1891.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.28%)</title><rect x="15.0" y="1875.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="15.0" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="15.0" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="15.0" y="1827.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.0" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="15.8" y="1859.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="15.8" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="15.8" y="1827.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="15.8" y="1811.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="15.8" y="1795.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="15.8" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="16.7" y="1843.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="16.7" y="1827.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="16.7" y="1811.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="16.7" y="1795.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="16.7" y="1779.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.7" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="16.7" y="1763.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="16.7" y="1747.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/461655725.test (1 samples, 0.07%)</title><rect x="16.7" y="1731.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="1742.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="17.5" y="1731.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.5" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.14%)</title><rect x="18.3" y="1891.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.14%)</title><rect x="18.3" y="1875.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="18.3" y="1859.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="18.3" y="1843.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="18.3" y="1827.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="18.3" y="1811.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="18.3" y="1795.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="18.3" y="1779.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="18.3" y="1763.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="18.3" y="1747.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/2016030116.test (1 samples, 0.07%)</title><rect x="18.3" y="1731.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.3" y="1742.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="19.2" y="1731.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.2" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="20.0" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.0" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (207 samples, 14.61%)</title><rect x="20.8" y="1891.0" width="172.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.8" y="1902.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (198 samples, 13.97%)</title><rect x="23.3" y="1875.0" width="164.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1886.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (198 samples, 13.97%)</title><rect x="23.3" y="1859.0" width="164.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.3" y="1870.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="23.3" y="1843.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (167 samples, 11.79%)</title><rect x="24.2" y="1843.0" width="139.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.2" y="1854.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (167 samples, 11.79%)</title><rect x="24.2" y="1827.0" width="139.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.2" y="1838.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (167 samples, 11.79%)</title><rect x="24.2" y="1811.0" width="139.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.2" y="1822.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (167 samples, 11.79%)</title><rect x="24.2" y="1795.0" width="139.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.2" y="1806.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (167 samples, 11.79%)</title><rect x="24.2" y="1779.0" width="139.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.2" y="1790.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 9.88%)</title><rect x="45.0" y="1763.0" width="116.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.0" y="1774.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 8.05%)</title><rect x="65.8" y="1747.0" width="94.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.8" y="1758.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.48%)</title><rect x="75.8" y="1731.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.8" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.48%)</title><rect x="75.8" y="1715.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.8" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.48%)</title><rect x="75.8" y="1699.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 5.72%)</title><rect x="93.3" y="1731.0" width="67.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.3" y="1742.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 5.72%)</title><rect x="93.3" y="1715.0" width="67.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.3" y="1726.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 5.72%)</title><rect x="93.3" y="1699.0" width="67.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.3" y="1710.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 5.72%)</title><rect x="93.3" y="1683.0" width="67.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.3" y="1694.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 5.36%)</title><rect x="97.4" y="1667.0" width="63.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.4" y="1678.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 4.94%)</title><rect x="98.3" y="1651.0" width="58.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="101.3" y="1662.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="98.3" y="1635.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="101.3" y="1646.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.21%)</title><rect x="99.9" y="1635.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="102.9" y="1646.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 2.75%)</title><rect x="102.4" y="1635.0" width="32.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="105.4" y="1646.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.28%)</title><rect x="134.9" y="1635.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="137.9" y="1646.0"></text>
</g>
<g>
<title>pthread_mutex_lock (22 samples, 1.55%)</title><rect x="138.2" y="1635.0" width="18.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="141.2" y="1646.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.21%)</title><rect x="156.6" y="1651.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="159.6" y="1662.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="159.1" y="1651.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="162.1" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="160.7" y="1747.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.7" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="160.7" y="1731.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.7" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="160.7" y="1715.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.7" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="160.7" y="1699.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="163.7" y="1710.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="161.6" y="1763.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="164.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.07%)</title><rect x="163.2" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.07%)</title><rect x="163.2" y="1827.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.07%)</title><rect x="164.1" y="1843.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="164.1" y="1827.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="164.1" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 1.98%)</title><rect x="164.9" y="1843.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.9" y="1854.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 1.98%)</title><rect x="164.9" y="1827.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.9" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.71%)</title><rect x="175.7" y="1811.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.35%)</title><rect x="176.5" y="1795.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.35%)</title><rect x="176.5" y="1779.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.35%)</title><rect x="176.5" y="1763.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.5" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="179.0" y="1747.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="182.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="180.7" y="1795.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="183.7" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.35%)</title><rect x="184.0" y="1811.0" width="4.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="187.0" y="1822.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="188.2" y="1875.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="191.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.21%)</title><rect x="189.9" y="1875.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.21%)</title><rect x="189.9" y="1859.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.21%)</title><rect x="189.9" y="1843.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.21%)</title><rect x="189.9" y="1827.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.9" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.14%)</title><rect x="190.7" y="1811.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="192.4" y="1875.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.53%)</title><rect x="193.2" y="1891.0" width="41.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.2" y="1902.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.53%)</title><rect x="193.2" y="1875.0" width="41.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.2" y="1886.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.40%)</title><rect x="193.2" y="1859.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.2" y="1870.0">or..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.07%)</title><rect x="193.2" y="1843.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="194.0" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="194.0" y="1827.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="197.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="194.0" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.07%)</title><rect x="194.0" y="1795.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (32 samples, 2.26%)</title><rect x="194.9" y="1843.0" width="26.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.9" y="1854.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 2.26%)</title><rect x="194.9" y="1827.0" width="26.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.9" y="1838.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 1.98%)</title><rect x="194.9" y="1811.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.9" y="1822.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 1.98%)</title><rect x="194.9" y="1795.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.9" y="1806.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="197.4" y="1779.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.4" y="1790.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="197.4" y="1763.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.4" y="1774.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.07%)</title><rect x="197.4" y="1747.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.4" y="1758.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="197.4" y="1731.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.4" y="1742.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="197.4" y="1715.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 0.99%)</title><rect x="198.2" y="1779.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.64%)</title><rect x="202.4" y="1763.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.64%)</title><rect x="202.4" y="1747.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.64%)</title><rect x="202.4" y="1731.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.64%)</title><rect x="202.4" y="1715.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.64%)</title><rect x="202.4" y="1699.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.64%)</title><rect x="202.4" y="1683.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.4" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.64%)</title><rect x="202.4" y="1667.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.4" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.71%)</title><rect x="209.9" y="1779.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.71%)</title><rect x="209.9" y="1763.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.71%)</title><rect x="209.9" y="1747.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.9" y="1758.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.71%)</title><rect x="209.9" y="1731.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.9" y="1742.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.42%)</title><rect x="213.2" y="1715.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.14%)</title><rect x="218.2" y="1811.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.14%)</title><rect x="218.2" y="1795.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="218.2" y="1779.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="218.2" y="1763.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="219.0" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="219.0" y="1763.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="219.0" y="1747.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="219.9" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="219.9" y="1795.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="219.9" y="1779.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.9" y="1763.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.9" y="1747.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.9" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="219.9" y="1731.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="222.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="220.7" y="1811.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="220.7" y="1795.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="220.7" y="1779.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.7" y="1790.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="220.7" y="1763.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.7" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="220.7" y="1747.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.71%)</title><rect x="221.5" y="1859.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.64%)</title><rect x="222.4" y="1843.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.64%)</title><rect x="222.4" y="1827.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.28%)</title><rect x="222.4" y="1811.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (3 samples, 0.21%)</title><rect x="223.2" y="1795.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.14%)</title><rect x="224.0" y="1779.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="224.0" y="1763.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="224.8" y="1763.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="224.8" y="1747.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="224.8" y="1731.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.8" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="225.7" y="1811.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="225.7" y="1795.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.7" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="225.7" y="1779.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.7" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="225.7" y="1763.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.7" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="225.7" y="1747.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.7" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="226.5" y="1731.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.5" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="227.3" y="1811.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="227.3" y="1795.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.3" y="1806.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="227.3" y="1779.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="227.3" y="1763.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.3" y="1774.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="227.3" y="1747.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.3" y="1758.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="227.3" y="1731.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="228.2" y="1811.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="228.2" y="1795.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="228.2" y="1779.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="228.2" y="1763.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="228.2" y="1747.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.2" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="228.2" y="1731.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.2" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="228.2" y="1715.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.2" y="1726.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="228.2" y="1699.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.2" y="1710.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="228.2" y="1683.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.2" y="1694.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.07%)</title><rect x="228.2" y="1667.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.2" y="1678.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="229.0" y="1699.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.0" y="1710.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="229.0" y="1683.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.0" y="1694.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.07%)</title><rect x="229.0" y="1667.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.0" y="1678.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.07%)</title><rect x="229.0" y="1651.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.0" y="1662.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="229.0" y="1635.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.0" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="229.0" y="1619.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.21%)</title><rect x="229.8" y="1859.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.21%)</title><rect x="229.8" y="1843.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.21%)</title><rect x="229.8" y="1827.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="229.8" y="1811.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="229.8" y="1795.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="229.8" y="1779.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="230.7" y="1811.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.14%)</title><rect x="230.7" y="1795.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="230.7" y="1779.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="230.7" y="1763.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="233.7" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="230.7" y="1747.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="233.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.21%)</title><rect x="232.3" y="1859.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.21%)</title><rect x="232.3" y="1843.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.21%)</title><rect x="232.3" y="1827.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="232.3" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="232.3" y="1795.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="232.3" y="1779.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="233.2" y="1811.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.2" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="233.2" y="1795.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="233.2" y="1779.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="233.2" y="1763.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="233.2" y="1747.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.2" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="233.2" y="1731.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.2" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="233.2" y="1715.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.2" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="233.2" y="1699.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.2" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="233.2" y="1683.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.2" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="233.2" y="1667.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.2" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/895331028.get (1 samples, 0.07%)</title><rect x="233.2" y="1651.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.2" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="234.0" y="1715.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.0" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="234.0" y="1699.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.0" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="234.0" y="1683.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.0" y="1694.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="234.0" y="1667.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="237.0" y="1678.0"></text>
</g>
<g>
<title>java/lang/Thread.run (730 samples, 51.52%)</title><rect x="234.8" y="1923.0" width="607.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.8" y="1934.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (730 samples, 51.52%)</title><rect x="234.8" y="1907.0" width="607.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.8" y="1918.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (730 samples, 51.52%)</title><rect x="234.8" y="1891.0" width="607.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.8" y="1902.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (492 samples, 34.72%)</title><rect x="236.5" y="1875.0" width="409.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.5" y="1886.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$La..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (492 samples, 34.72%)</title><rect x="236.5" y="1859.0" width="409.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.5" y="1870.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (492 samples, 34.72%)</title><rect x="236.5" y="1843.0" width="409.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.5" y="1854.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (486 samples, 34.30%)</title><rect x="236.5" y="1827.0" width="404.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.5" y="1838.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="244.0" y="1811.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="247.0" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 10.02%)</title><rect x="244.8" y="1811.0" width="118.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.8" y="1822.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (142 samples, 10.02%)</title><rect x="244.8" y="1795.0" width="118.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.8" y="1806.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (142 samples, 10.02%)</title><rect x="244.8" y="1779.0" width="118.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.8" y="1790.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="244.8" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="247.8" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="244.8" y="1747.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="247.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="244.8" y="1731.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="247.8" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 9.95%)</title><rect x="245.7" y="1763.0" width="117.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.7" y="1774.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 9.95%)</title><rect x="245.7" y="1747.0" width="117.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.7" y="1758.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (141 samples, 9.95%)</title><rect x="245.7" y="1731.0" width="117.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.7" y="1742.0">com/fasterxml/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="253.2" y="1715.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="256.2" y="1726.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.49%)</title><rect x="254.0" y="1715.0" width="5.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="257.0" y="1726.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="254.0" y="1699.0" width="5.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="257.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (33 samples, 2.33%)</title><rect x="259.8" y="1715.0" width="27.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.8" y="1726.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 2.33%)</title><rect x="259.8" y="1699.0" width="27.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.8" y="1710.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="259.8" y="1683.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="262.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (32 samples, 2.26%)</title><rect x="260.7" y="1683.0" width="26.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.7" y="1694.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (30 samples, 2.12%)</title><rect x="260.7" y="1667.0" width="24.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.7" y="1678.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (30 samples, 2.12%)</title><rect x="260.7" y="1651.0" width="24.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.7" y="1662.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.14%)</title><rect x="285.6" y="1667.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.14%)</title><rect x="285.6" y="1651.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.14%)</title><rect x="285.6" y="1635.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.6" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="285.6" y="1619.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.6" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="285.6" y="1603.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.6" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="285.6" y="1587.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="288.6" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="285.6" y="1571.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="288.6" y="1582.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="285.6" y="1555.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="288.6" y="1566.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="286.5" y="1555.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="289.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (81 samples, 5.72%)</title><rect x="287.3" y="1715.0" width="67.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.3" y="1726.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (16 samples, 1.13%)</title><rect x="287.3" y="1699.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (16 samples, 1.13%)</title><rect x="287.3" y="1683.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="299.0" y="1667.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.78%)</title><rect x="300.6" y="1699.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.78%)</title><rect x="300.6" y="1683.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.64%)</title><rect x="301.5" y="1667.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.56%)</title><rect x="302.3" y="1651.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.3" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="307.3" y="1635.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="310.3" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="307.3" y="1619.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="310.3" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="307.3" y="1603.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="310.3" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="308.1" y="1635.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="309.0" y="1667.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.28%)</title><rect x="309.8" y="1699.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.28%)</title><rect x="309.8" y="1683.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.21%)</title><rect x="310.6" y="1667.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (50 samples, 3.53%)</title><rect x="313.1" y="1699.0" width="41.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.1" y="1710.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 0.99%)</title><rect x="314.0" y="1683.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="314.0" y="1667.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="314.0" y="1651.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="314.0" y="1635.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.78%)</title><rect x="314.8" y="1667.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="317.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="323.9" y="1667.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="323.9" y="1651.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="324.8" y="1667.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 2.47%)</title><rect x="325.6" y="1683.0" width="29.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.6" y="1694.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 2.47%)</title><rect x="325.6" y="1667.0" width="29.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.6" y="1678.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (32 samples, 2.26%)</title><rect x="328.1" y="1651.0" width="26.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.1" y="1662.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.92%)</title><rect x="329.8" y="1635.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.8" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.49%)</title><rect x="330.6" y="1619.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.6" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.49%)</title><rect x="330.6" y="1603.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="333.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.49%)</title><rect x="330.6" y="1587.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="333.6" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.49%)</title><rect x="330.6" y="1571.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.6" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.35%)</title><rect x="332.3" y="1555.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.28%)</title><rect x="333.1" y="1539.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.1" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.28%)</title><rect x="333.1" y="1523.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.1" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.07%)</title><rect x="336.4" y="1619.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.28%)</title><rect x="337.3" y="1619.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.3" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.28%)</title><rect x="337.3" y="1603.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="340.3" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.21%)</title><rect x="338.1" y="1587.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.1" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.14%)</title><rect x="340.6" y="1635.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.6" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.14%)</title><rect x="340.6" y="1619.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.6" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.14%)</title><rect x="340.6" y="1603.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.14%)</title><rect x="340.6" y="1587.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.6" y="1598.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.14%)</title><rect x="340.6" y="1571.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.6" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="342.3" y="1635.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.3" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.35%)</title><rect x="343.1" y="1635.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.35%)</title><rect x="343.1" y="1619.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.1" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="343.1" y="1603.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.28%)</title><rect x="343.9" y="1603.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.9" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.28%)</title><rect x="343.9" y="1587.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.9" y="1598.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.28%)</title><rect x="343.9" y="1571.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.9" y="1582.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.28%)</title><rect x="343.9" y="1555.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="346.9" y="1566.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.28%)</title><rect x="343.9" y="1539.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="346.9" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.28%)</title><rect x="347.3" y="1635.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.3" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.28%)</title><rect x="347.3" y="1619.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.3" y="1630.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.28%)</title><rect x="347.3" y="1603.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.3" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.35%)</title><rect x="350.6" y="1635.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.6" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="353.9" y="1619.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.9" y="1630.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="353.9" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="356.9" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="353.9" y="1587.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="356.9" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="354.8" y="1715.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.56%)</title><rect x="356.4" y="1715.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.56%)</title><rect x="356.4" y="1699.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.56%)</title><rect x="356.4" y="1683.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.56%)</title><rect x="356.4" y="1667.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.4" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.56%)</title><rect x="356.4" y="1651.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.4" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (315 samples, 22.23%)</title><rect x="363.1" y="1811.0" width="262.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.1" y="1822.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (55 samples, 3.88%)</title><rect x="363.1" y="1795.0" width="45.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.1" y="1806.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="363.1" y="1779.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.1" y="1790.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (54 samples, 3.81%)</title><rect x="363.9" y="1779.0" width="45.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.9" y="1790.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 3.53%)</title><rect x="367.2" y="1763.0" width="41.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.2" y="1774.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.42%)</title><rect x="367.2" y="1747.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.42%)</title><rect x="367.2" y="1731.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.2" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.42%)</title><rect x="367.2" y="1715.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.2" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.42%)</title><rect x="367.2" y="1699.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.2" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (44 samples, 3.11%)</title><rect x="372.2" y="1747.0" width="36.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.2" y="1758.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.71%)</title><rect x="400.6" y="1731.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="400.6" y="1715.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.6" y="1726.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="400.6" y="1699.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.6" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.64%)</title><rect x="401.4" y="1715.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.4" y="1726.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="406.4" y="1699.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="409.4" y="1710.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="408.1" y="1699.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="411.1" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.56%)</title><rect x="408.9" y="1795.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.49%)</title><rect x="409.7" y="1779.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.7" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.49%)</title><rect x="409.7" y="1763.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (169 samples, 11.93%)</title><rect x="415.5" y="1795.0" width="140.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.5" y="1806.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (169 samples, 11.93%)</title><rect x="415.5" y="1779.0" width="140.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.5" y="1790.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.42%)</title><rect x="429.7" y="1763.0" width="5.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="432.7" y="1774.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="431.4" y="1747.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="434.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (50 samples, 3.53%)</title><rect x="434.7" y="1763.0" width="41.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.7" y="1774.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (49 samples, 3.46%)</title><rect x="435.5" y="1747.0" width="40.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.5" y="1758.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 2.47%)</title><rect x="441.4" y="1731.0" width="29.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.4" y="1742.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 1.76%)</title><rect x="447.2" y="1715.0" width="20.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.2" y="1726.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 1.76%)</title><rect x="447.2" y="1699.0" width="20.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="450.2" y="1710.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 1.76%)</title><rect x="447.2" y="1683.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.2" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="453.9" y="1667.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="456.9" y="1678.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.42%)</title><rect x="454.7" y="1667.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="457.7" y="1678.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.14%)</title><rect x="454.7" y="1651.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="457.7" y="1662.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="454.7" y="1635.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="457.7" y="1646.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="455.5" y="1635.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="458.5" y="1646.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="455.5" y="1619.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.5" y="1630.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="455.5" y="1603.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="458.5" y="1614.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.28%)</title><rect x="456.4" y="1651.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="459.4" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="457.2" y="1635.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="460.2" y="1646.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="457.2" y="1619.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="460.2" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="457.2" y="1603.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="460.2" y="1614.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="458.0" y="1619.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="461.0" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="458.8" y="1635.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="461.8" y="1646.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.71%)</title><rect x="459.7" y="1667.0" width="8.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="462.7" y="1678.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="468.0" y="1715.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.0" y="1726.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="469.7" y="1715.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="472.7" y="1726.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.49%)</title><rect x="470.5" y="1731.0" width="5.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="473.5" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="476.3" y="1763.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.28%)</title><rect x="477.2" y="1763.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.28%)</title><rect x="477.2" y="1747.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="477.2" y="1731.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.2" y="1742.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (91 samples, 6.42%)</title><rect x="480.5" y="1763.0" width="75.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.5" y="1774.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (91 samples, 6.42%)</title><rect x="480.5" y="1747.0" width="75.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.5" y="1758.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.42%)</title><rect x="480.5" y="1731.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.5" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.42%)</title><rect x="480.5" y="1715.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.5" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.42%)</title><rect x="480.5" y="1699.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="483.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.42%)</title><rect x="480.5" y="1683.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.5" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="484.7" y="1667.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="487.7" y="1678.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (85 samples, 6.00%)</title><rect x="485.5" y="1731.0" width="70.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.5" y="1742.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (75 samples, 5.29%)</title><rect x="493.8" y="1715.0" width="62.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="496.8" y="1726.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 3.03%)</title><rect x="520.5" y="1699.0" width="35.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.5" y="1710.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.28%)</title><rect x="542.1" y="1683.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="545.1" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.78%)</title><rect x="545.5" y="1683.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.5" y="1694.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="554.6" y="1683.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="557.6" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 3.81%)</title><rect x="556.3" y="1795.0" width="44.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.3" y="1806.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 3.81%)</title><rect x="556.3" y="1779.0" width="44.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.3" y="1790.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (28 samples, 1.98%)</title><rect x="557.1" y="1763.0" width="23.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="560.1" y="1774.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (28 samples, 1.98%)</title><rect x="557.1" y="1747.0" width="23.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="560.1" y="1758.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 1.69%)</title><rect x="559.6" y="1731.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.6" y="1742.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="567.9" y="1715.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="570.9" y="1726.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="567.9" y="1699.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.9" y="1710.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.14%)</title><rect x="567.9" y="1683.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.9" y="1694.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="568.8" y="1667.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="571.8" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="568.8" y="1651.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="571.8" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 0.85%)</title><rect x="569.6" y="1715.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.6" y="1726.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="570.4" y="1699.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="573.4" y="1710.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.71%)</title><rect x="571.3" y="1699.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="574.3" y="1710.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.71%)</title><rect x="571.3" y="1683.0" width="8.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="574.3" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="579.6" y="1731.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="579.6" y="1715.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.6" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="579.6" y="1699.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="579.6" y="1683.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.6" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="580.4" y="1763.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.4" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.14%)</title><rect x="580.4" y="1747.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (11 samples, 0.78%)</title><rect x="582.1" y="1763.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (11 samples, 0.78%)</title><rect x="582.1" y="1747.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.1" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/2128316475.get$Lambda (11 samples, 0.78%)</title><rect x="582.1" y="1731.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.1" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/2128316475.&lt;init&gt; (10 samples, 0.71%)</title><rect x="582.9" y="1715.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="585.9" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="590.4" y="1699.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="593.4" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="590.4" y="1683.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.4" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="590.4" y="1667.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="593.4" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="590.4" y="1651.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.4" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="590.4" y="1635.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="593.4" y="1646.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.49%)</title><rect x="591.3" y="1763.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="594.3" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.42%)</title><rect x="592.1" y="1747.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="595.1" y="1758.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.21%)</title><rect x="592.1" y="1731.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="595.1" y="1742.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.21%)</title><rect x="594.6" y="1731.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.6" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="597.1" y="1763.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.1" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.28%)</title><rect x="597.9" y="1763.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.9" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.21%)</title><rect x="598.8" y="1747.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.8" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="600.4" y="1731.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="603.4" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="600.4" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.4" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="600.4" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="603.4" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="600.4" y="1683.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.4" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="601.2" y="1795.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="601.2" y="1779.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="604.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="601.2" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="604.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="601.2" y="1747.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="604.2" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 1.98%)</title><rect x="602.1" y="1795.0" width="23.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.1" y="1806.0">j..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.64%)</title><rect x="608.7" y="1779.0" width="7.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="611.7" y="1790.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="610.4" y="1763.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="613.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.78%)</title><rect x="616.2" y="1779.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.78%)</title><rect x="616.2" y="1763.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="619.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/313244923.accept (11 samples, 0.78%)</title><rect x="616.2" y="1747.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.2" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (11 samples, 0.78%)</title><rect x="616.2" y="1731.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="619.2" y="1742.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 0.78%)</title><rect x="616.2" y="1715.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="619.2" y="1726.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (11 samples, 0.78%)</title><rect x="616.2" y="1699.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.2" y="1710.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="620.4" y="1683.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="623.4" y="1694.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="621.2" y="1683.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="624.2" y="1694.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="621.2" y="1667.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="624.2" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.06%)</title><rect x="625.4" y="1811.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.14%)</title><rect x="627.1" y="1795.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.78%)</title><rect x="628.7" y="1795.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="631.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.56%)</title><rect x="631.2" y="1779.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.2" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1909310332.accept (8 samples, 0.56%)</title><rect x="631.2" y="1763.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="634.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (8 samples, 0.56%)</title><rect x="631.2" y="1747.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.2" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/80425629.complete (8 samples, 0.56%)</title><rect x="631.2" y="1731.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.2" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (8 samples, 0.56%)</title><rect x="631.2" y="1715.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.2" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.56%)</title><rect x="631.2" y="1699.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.2" y="1710.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.56%)</title><rect x="631.2" y="1683.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.2" y="1694.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.56%)</title><rect x="631.2" y="1667.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.2" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.56%)</title><rect x="631.2" y="1651.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.2" y="1662.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.56%)</title><rect x="631.2" y="1635.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.2" y="1646.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="637.9" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="637.9" y="1795.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="637.9" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="637.9" y="1763.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="637.9" y="1747.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.9" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="637.9" y="1731.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.9" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="637.9" y="1715.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.9" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.21%)</title><rect x="638.7" y="1811.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="641.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="638.7" y="1795.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="641.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="641.2" y="1827.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.2" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="641.2" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.2" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="641.2" y="1795.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="641.2" y="1779.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="644.2" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.35%)</title><rect x="642.1" y="1827.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.1" y="1838.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="643.7" y="1811.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="646.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="643.7" y="1795.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="646.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.42%)</title><rect x="646.2" y="1875.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.42%)</title><rect x="646.2" y="1859.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="649.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.42%)</title><rect x="646.2" y="1843.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.42%)</title><rect x="646.2" y="1827.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="649.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (2 samples, 0.14%)</title><rect x="649.5" y="1811.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (230 samples, 16.23%)</title><rect x="651.2" y="1875.0" width="191.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.2" y="1886.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (228 samples, 16.09%)</title><rect x="652.9" y="1859.0" width="189.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.9" y="1870.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (203 samples, 14.33%)</title><rect x="654.5" y="1843.0" width="169.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.5" y="1854.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (29 samples, 2.05%)</title><rect x="662.9" y="1827.0" width="24.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.9" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.71%)</title><rect x="687.0" y="1827.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.0" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="687.0" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="690.0" y="1822.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="687.0" y="1795.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.0" y="1806.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="687.0" y="1779.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="690.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.64%)</title><rect x="687.9" y="1811.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.64%)</title><rect x="687.9" y="1795.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.64%)</title><rect x="687.9" y="1779.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 10.87%)</title><rect x="695.3" y="1827.0" width="128.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.3" y="1838.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (154 samples, 10.87%)</title><rect x="695.3" y="1811.0" width="128.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.3" y="1822.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.14%)</title><rect x="702.0" y="1795.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.0" y="1806.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.28%)</title><rect x="703.7" y="1795.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="706.7" y="1806.0"></text>
</g>
<g>
<title>Unsafe_Park (140 samples, 9.88%)</title><rect x="707.0" y="1795.0" width="116.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="710.0" y="1806.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="707.8" y="1779.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="710.8" y="1790.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="708.7" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="711.7" y="1790.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.69%)</title><rect x="709.5" y="1779.0" width="20.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="712.5" y="1790.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.71%)</title><rect x="717.0" y="1763.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="720.0" y="1774.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.35%)</title><rect x="717.8" y="1747.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="720.8" y="1758.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="721.2" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="724.2" y="1742.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="722.0" y="1747.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="725.0" y="1758.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="723.7" y="1747.0" width="1.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="726.7" y="1758.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="725.3" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="728.3" y="1774.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.28%)</title><rect x="726.2" y="1763.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="729.2" y="1774.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="729.5" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.5" y="1790.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="730.3" y="1779.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.3" y="1790.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.49%)</title><rect x="731.2" y="1779.0" width="5.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="734.2" y="1790.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.33%)</title><rect x="737.0" y="1779.0" width="27.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="740.0" y="1790.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 3.67%)</title><rect x="764.5" y="1779.0" width="43.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="767.5" y="1790.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.35%)</title><rect x="807.8" y="1779.0" width="4.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="810.8" y="1790.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.21%)</title><rect x="811.9" y="1779.0" width="2.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="814.9" y="1790.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="814.4" y="1779.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="817.4" y="1790.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.28%)</title><rect x="815.3" y="1779.0" width="3.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="818.3" y="1790.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="818.6" y="1779.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="821.6" y="1790.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="819.4" y="1779.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="822.4" y="1790.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="820.3" y="1779.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="823.3" y="1790.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="821.9" y="1779.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="824.9" y="1790.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="822.8" y="1779.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="825.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.62%)</title><rect x="823.6" y="1843.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.62%)</title><rect x="823.6" y="1827.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="826.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.62%)</title><rect x="823.6" y="1811.0" width="19.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.62%)</title><rect x="823.6" y="1795.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="826.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.07%)</title><rect x="841.9" y="1779.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="842.7" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="842.7" y="1907.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="842.7" y="1891.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="845.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="842.7" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="842.7" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="842.7" y="1843.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="845.7" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="842.7" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.7" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="842.7" y="1811.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.7" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="842.7" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="845.7" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="842.7" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="845.7" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="842.7" y="1763.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.7" y="1774.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.07%)</title><rect x="842.7" y="1747.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="845.7" y="1758.0"></text>
</g>
<g>
<title>start_thread (414 samples, 29.22%)</title><rect x="843.6" y="1923.0" width="344.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="846.6" y="1934.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (414 samples, 29.22%)</title><rect x="843.6" y="1907.0" width="344.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="846.6" y="1918.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.55%)</title><rect x="843.6" y="1891.0" width="18.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="846.6" y="1902.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.21%)</title><rect x="843.6" y="1875.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.6" y="1886.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.21%)</title><rect x="843.6" y="1859.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.6" y="1870.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="843.6" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.6" y="1854.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="844.4" y="1843.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="847.4" y="1854.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.34%)</title><rect x="846.1" y="1875.0" width="15.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.1" y="1886.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.35%)</title><rect x="846.1" y="1859.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="849.1" y="1870.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="846.9" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="849.9" y="1854.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.07%)</title><rect x="846.9" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="849.9" y="1838.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="847.7" y="1843.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="850.7" y="1854.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.49%)</title><rect x="850.2" y="1859.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.2" y="1870.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="850.2" y="1843.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="853.2" y="1854.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="850.2" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="853.2" y="1838.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="850.2" y="1811.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="853.2" y="1822.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="850.2" y="1795.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.2" y="1806.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="851.1" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.1" y="1838.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="851.1" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.1" y="1822.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.07%)</title><rect x="851.1" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.1" y="1806.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.07%)</title><rect x="851.1" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.1" y="1790.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.35%)</title><rect x="851.9" y="1843.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="854.9" y="1854.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="851.9" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.9" y="1838.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.28%)</title><rect x="852.7" y="1827.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="855.7" y="1838.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="856.1" y="1859.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.1" y="1870.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="856.1" y="1843.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="859.1" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.49%)</title><rect x="856.1" y="1827.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="859.1" y="1838.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.49%)</title><rect x="856.1" y="1811.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="859.1" y="1822.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.49%)</title><rect x="856.1" y="1795.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.1" y="1806.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.49%)</title><rect x="856.1" y="1779.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="859.1" y="1790.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.07%)</title><rect x="856.9" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.9" y="1774.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.35%)</title><rect x="857.7" y="1763.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.7" y="1774.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.07%)</title><rect x="860.2" y="1747.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="863.2" y="1758.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="860.2" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="863.2" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.07%)</title><rect x="861.1" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.1" y="1758.0"></text>
</g>
<g>
<title>JavaThread::run() (389 samples, 27.45%)</title><rect x="861.9" y="1891.0" width="323.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.9" y="1902.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (389 samples, 27.45%)</title><rect x="861.9" y="1875.0" width="323.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.9" y="1886.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (388 samples, 27.38%)</title><rect x="861.9" y="1859.0" width="323.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="864.9" y="1870.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (387 samples, 27.31%)</title><rect x="861.9" y="1843.0" width="322.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="864.9" y="1854.0">CompileBroker::invoke_compiler_on_method(Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (387 samples, 27.31%)</title><rect x="861.9" y="1827.0" width="322.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="864.9" y="1838.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (387 samples, 27.31%)</title><rect x="861.9" y="1811.0" width="322.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.9" y="1822.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (80 samples, 5.65%)</title><rect x="861.9" y="1795.0" width="66.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.9" y="1806.0">Compile..</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.07%)</title><rect x="861.9" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.9" y="1790.0"></text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.28%)</title><rect x="862.7" y="1779.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="865.7" y="1790.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.21%)</title><rect x="863.6" y="1763.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.6" y="1774.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="864.4" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="867.4" y="1758.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="864.4" y="1731.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="867.4" y="1742.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="864.4" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="867.4" y="1726.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="865.2" y="1747.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="868.2" y="1758.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.14%)</title><rect x="866.1" y="1779.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.1" y="1790.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="866.1" y="1763.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.1" y="1774.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="866.1" y="1747.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.1" y="1758.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="866.1" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="869.1" y="1742.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="866.9" y="1763.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.9" y="1774.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="866.9" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="869.9" y="1758.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.49%)</title><rect x="867.7" y="1779.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.7" y="1790.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.49%)</title><rect x="867.7" y="1763.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="870.7" y="1774.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.28%)</title><rect x="868.6" y="1747.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.6" y="1758.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.14%)</title><rect x="871.9" y="1747.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.9" y="1758.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="871.9" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.9" y="1742.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="871.9" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="874.9" y="1726.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="871.9" y="1699.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="874.9" y="1710.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="871.9" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.9" y="1694.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="871.9" y="1667.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.9" y="1678.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="872.7" y="1731.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.7" y="1742.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.21%)</title><rect x="873.6" y="1779.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.6" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.21%)</title><rect x="873.6" y="1763.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.6" y="1774.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="873.6" y="1747.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="876.6" y="1758.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="873.6" y="1731.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.6" y="1742.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="874.4" y="1731.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="877.4" y="1742.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="874.4" y="1715.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.4" y="1726.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="874.4" y="1699.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.4" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="875.2" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="878.2" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (63 samples, 4.45%)</title><rect x="876.1" y="1779.0" width="52.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="879.1" y="1790.0">Phase..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="876.1" y="1763.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="879.1" y="1774.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="876.9" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="879.9" y="1774.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.07%)</title><rect x="877.7" y="1763.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.7" y="1774.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.21%)</title><rect x="878.6" y="1763.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="881.6" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.14%)</title><rect x="881.1" y="1763.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.1" y="1774.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.07%)</title><rect x="881.9" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="884.9" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.14%)</title><rect x="882.7" y="1763.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="885.7" y="1774.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.14%)</title><rect x="882.7" y="1747.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.7" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.78%)</title><rect x="884.4" y="1763.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.4" y="1774.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.07%)</title><rect x="891.9" y="1747.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.9" y="1758.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="892.7" y="1747.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="895.7" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.56%)</title><rect x="893.5" y="1763.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="896.5" y="1774.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.14%)</title><rect x="895.2" y="1747.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.2" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.28%)</title><rect x="896.9" y="1747.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="899.9" y="1758.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="899.4" y="1731.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="902.4" y="1742.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="900.2" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.2" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="900.2" y="1747.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.2" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.07%)</title><rect x="901.0" y="1763.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="904.0" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.14%)</title><rect x="901.9" y="1763.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="904.9" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="903.5" y="1763.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="906.5" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.35%)</title><rect x="904.4" y="1763.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="907.4" y="1774.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="905.2" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="908.2" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.21%)</title><rect x="906.0" y="1747.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.0" y="1758.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.56%)</title><rect x="908.5" y="1763.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="911.5" y="1774.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.49%)</title><rect x="909.4" y="1747.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.4" y="1758.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 0.49%)</title><rect x="909.4" y="1731.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.4" y="1742.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="909.4" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.4" y="1726.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 0.42%)</title><rect x="910.2" y="1715.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.2" y="1726.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="915.2" y="1763.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.2" y="1774.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="916.0" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.0" y="1758.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.21%)</title><rect x="916.9" y="1763.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.9" y="1774.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="918.5" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.5" y="1758.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="919.4" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.4" y="1774.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="919.4" y="1747.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.4" y="1758.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.56%)</title><rect x="920.2" y="1763.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.2" y="1774.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.28%)</title><rect x="923.5" y="1747.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.5" y="1758.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="925.2" y="1731.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.2" y="1742.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.07%)</title><rect x="926.9" y="1763.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.9" y="1774.0"></text>
</g>
<g>
<title>rRegIOper::in_RegMask(int) const (1 samples, 0.07%)</title><rect x="927.7" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.7" y="1774.0"></text>
</g>
<g>
<title>Compile::Optimize() (292 samples, 20.61%)</title><rect x="928.5" y="1795.0" width="243.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.5" y="1806.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="928.5" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.5" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="928.5" y="1763.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.5" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="928.5" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.5" y="1758.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="928.5" y="1731.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (17 samples, 1.20%)</title><rect x="929.4" y="1779.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="932.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (17 samples, 1.20%)</title><rect x="929.4" y="1763.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="930.2" y="1747.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="930.2" y="1731.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.2" y="1742.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="930.2" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.2" y="1726.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="930.2" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.2" y="1710.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="930.2" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.2" y="1694.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::initialize() (1 samples, 0.07%)</title><rect x="930.2" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.2" y="1678.0"></text>
</g>
<g>
<title>MethodData::next_extra(DataLayout*) (1 samples, 0.07%)</title><rect x="930.2" y="1651.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (15 samples, 1.06%)</title><rect x="931.0" y="1747.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (14 samples, 0.99%)</title><rect x="931.8" y="1731.0" width="11.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.8" y="1742.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="931.8" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.8" y="1726.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="931.8" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="932.7" y="1715.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="935.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1683.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1667.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1651.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1635.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1603.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1571.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1555.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1507.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="935.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1491.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1475.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1459.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1443.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="932.7" y="1427.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.7" y="1438.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="932.7" y="1411.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.7" y="1422.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="932.7" y="1395.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="935.7" y="1406.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="932.7" y="1379.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="935.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1699.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="936.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1683.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1667.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1651.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1635.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1619.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="936.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1603.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1587.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1571.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="933.5" y="1555.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="936.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="933.5" y="1539.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.5" y="1550.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.07%)</title><rect x="933.5" y="1523.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="936.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1539.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="937.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.3" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1507.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.3" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1491.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.3" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1475.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.3" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="937.3" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.3" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1427.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="937.3" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1411.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.3" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1395.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.3" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1379.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="937.3" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1363.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.3" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="934.3" y="1347.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.3" y="1358.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="934.3" y="1331.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.3" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.71%)</title><rect x="935.2" y="1715.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="935.2" y="1699.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.2" y="1710.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.14%)</title><rect x="935.2" y="1683.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.56%)</title><rect x="936.8" y="1699.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.56%)</title><rect x="936.8" y="1683.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="936.8" y="1667.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.8" y="1678.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.14%)</title><rect x="936.8" y="1651.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.42%)</title><rect x="938.5" y="1667.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.5" y="1651.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1635.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1619.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1603.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1587.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1571.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1555.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1539.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="941.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1523.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="938.5" y="1507.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.5" y="1518.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="938.5" y="1491.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.5" y="1502.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="938.5" y="1475.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.5" y="1486.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.07%)</title><rect x="938.5" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1635.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1619.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1587.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1571.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1555.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.3" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1539.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="939.3" y="1523.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.3" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="939.3" y="1507.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.3" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1651.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1635.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1619.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1603.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1587.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1571.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1555.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1539.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1523.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1507.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="943.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1491.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="940.2" y="1475.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1459.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1443.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1427.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1411.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1395.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1379.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="940.2" y="1363.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1347.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1315.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="943.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1299.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1283.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1267.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="940.2" y="1251.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="943.2" y="1262.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="940.2" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.2" y="1246.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="940.2" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="943.2" y="1230.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.07%)</title><rect x="940.2" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="943.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1347.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1331.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1315.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1299.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1283.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1267.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1251.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1235.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1219.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1203.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1187.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1171.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1155.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1139.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1123.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1107.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1091.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1075.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="941.0" y="1059.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="941.0" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.0" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="941.0" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.0" y="1038.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="941.0" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="963.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="915.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="899.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="851.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="723.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="691.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="675.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="643.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="611.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="579.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="563.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="547.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="499.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="483.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="467.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="435.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="419.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="387.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="371.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="355.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="323.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="307.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="291.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="275.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="259.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="227.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="211.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="195.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="179.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="163.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="147.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="131.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="115.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="99.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="83.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="67.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="51.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.8" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="941.8" y="35.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.8" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1459.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1443.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1427.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1411.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="945.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1379.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="945.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="945.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="942.7" y="1347.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="945.7" y="1358.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="942.7" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.7" y="1342.0"></text>
</g>
<g>
<title>DecodeNNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="943.5" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="946.5" y="1790.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="944.3" y="1779.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="947.3" y="1790.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="945.2" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.2" y="1790.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="945.2" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.2" y="1774.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="945.2" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.2" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (240 samples, 16.94%)</title><rect x="946.0" y="1779.0" width="199.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="949.0" y="1790.0">PhaseIdealLoop::build_and_..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="946.0" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.0" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.21%)</title><rect x="946.8" y="1763.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.8" y="1774.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.14%)</title><rect x="947.7" y="1747.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.7" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.49%)</title><rect x="949.3" y="1763.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="952.3" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="952.7" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="955.7" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="953.5" y="1747.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.5" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (219 samples, 15.46%)</title><rect x="955.2" y="1763.0" width="182.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.2" y="1774.0">PhaseIdealLoop::build_lo..</text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.07%)</title><rect x="960.2" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.2" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (212 samples, 14.96%)</title><rect x="961.0" y="1747.0" width="176.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.0" y="1758.0">PhaseIdealLoop::build_l..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.64%)</title><rect x="961.8" y="1731.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.8" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (202 samples, 14.26%)</title><rect x="969.3" y="1731.0" width="168.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.3" y="1742.0">PhaseIdealLoop::get_la..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1105.9" y="1715.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.9" y="1726.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1105.9" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.9" y="1710.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1105.9" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.9" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.14%)</title><rect x="1106.7" y="1715.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.7" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1107.6" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1107.6" y="1683.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.6" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (32 samples, 2.26%)</title><rect x="1108.4" y="1715.0" width="26.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.4" y="1726.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.21%)</title><rect x="1135.0" y="1715.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.0" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.07%)</title><rect x="1137.5" y="1763.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.5" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1138.4" y="1763.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.4" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1139.2" y="1747.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.2" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.21%)</title><rect x="1140.0" y="1763.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.0" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1141.7" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.7" y="1758.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1142.5" y="1763.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.5" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1142.5" y="1747.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.5" y="1758.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1142.5" y="1731.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="1742.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1143.4" y="1731.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.4" y="1742.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1143.4" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.4" y="1726.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1144.2" y="1715.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.2" y="1726.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1145.0" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 1.91%)</title><rect x="1145.9" y="1779.0" width="22.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.9" y="1790.0">P..</text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1145.9" y="1763.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.9" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.83%)</title><rect x="1146.7" y="1763.0" width="21.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.7" y="1774.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1147.5" y="1747.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.5" y="1758.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1147.5" y="1731.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.5" y="1742.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1147.5" y="1715.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.5" y="1726.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1147.5" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.5" y="1710.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1148.4" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.4" y="1726.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1148.4" y="1699.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.4" y="1710.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1148.4" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="1694.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1148.4" y="1667.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.4" y="1678.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1148.4" y="1651.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.4" y="1662.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.14%)</title><rect x="1149.2" y="1731.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.2" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.14%)</title><rect x="1149.2" y="1715.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.2" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="1149.2" y="1699.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="1710.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.9" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.9" y="1758.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.07%)</title><rect x="1151.7" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.7" y="1758.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1152.5" y="1747.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.5" y="1758.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1152.5" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="1742.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1152.5" y="1715.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="1726.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1152.5" y="1699.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (9 samples, 0.64%)</title><rect x="1153.4" y="1747.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.4" y="1758.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (2 samples, 0.14%)</title><rect x="1155.9" y="1731.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="1742.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1157.5" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1742.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.07%)</title><rect x="1158.4" y="1731.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1159.2" y="1731.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.2" y="1742.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1160.9" y="1747.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="1758.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (4 samples, 0.28%)</title><rect x="1160.9" y="1731.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="1742.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1163.4" y="1715.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="1726.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1163.4" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.4" y="1710.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1163.4" y="1683.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1694.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1164.2" y="1747.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="1758.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.14%)</title><rect x="1164.2" y="1731.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1164.2" y="1715.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.2" y="1726.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1164.2" y="1699.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.2" y="1710.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1165.0" y="1715.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="1726.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1165.9" y="1747.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.14%)</title><rect x="1165.9" y="1731.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.9" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.9" y="1715.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.9" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.9" y="1699.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.9" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.9" y="1683.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.9" y="1667.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.9" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1651.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.9" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.9" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1619.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1603.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1571.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.9" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.9" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.9" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1165.9" y="1523.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.9" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.7" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.7" y="1662.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.7" y="1635.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="1646.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1167.5" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="1758.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1167.5" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.5" y="1715.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1167.5" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.5" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1168.3" y="1779.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1168.3" y="1763.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1747.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1758.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="1742.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1168.3" y="1715.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1171.3" y="1726.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1168.3" y="1699.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="1710.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1168.3" y="1683.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="1694.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1168.3" y="1667.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="1678.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1168.3" y="1651.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.21%)</title><rect x="1169.2" y="1779.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.2" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1169.2" y="1763.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1169.2" y="1747.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="1758.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.2" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.2" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.2" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1169.2" y="1699.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="1710.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1169.2" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="1694.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.0" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.8" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.8" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.99%)</title><rect x="1171.7" y="1795.0" width="11.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.7" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.99%)</title><rect x="1171.7" y="1779.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.99%)</title><rect x="1171.7" y="1763.0" width="11.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.99%)</title><rect x="1171.7" y="1747.0" width="11.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.99%)</title><rect x="1171.7" y="1731.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.85%)</title><rect x="1171.7" y="1715.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="1726.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1171.7" y="1699.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.7" y="1710.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1171.7" y="1683.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="1694.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1171.7" y="1667.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.7" y="1678.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1171.7" y="1651.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.7" y="1662.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.56%)</title><rect x="1172.5" y="1699.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.56%)</title><rect x="1172.5" y="1683.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.56%)</title><rect x="1172.5" y="1667.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.56%)</title><rect x="1172.5" y="1651.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.56%)</title><rect x="1172.5" y="1635.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.49%)</title><rect x="1172.5" y="1619.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.5" y="1603.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.5" y="1587.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.5" y="1571.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.5" y="1555.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.5" y="1539.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.5" y="1523.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.5" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.5" y="1491.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.5" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.5" y="1459.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.5" y="1443.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.5" y="1427.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.5" y="1411.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.5" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.5" y="1379.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.5" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.5" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.5" y="1331.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.5" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.5" y="1299.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.5" y="1283.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.5" y="1267.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.5" y="1251.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.5" y="1235.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.5" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.5" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.5" y="1187.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.5" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.5" y="1155.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1172.5" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1150.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.5" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="1134.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.5" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.5" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.5" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.5" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.5" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.5" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.5" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1172.5" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1172.5" y="979.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.5" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.5" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1172.5" y="931.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1172.5" y="915.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="926.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1172.5" y="899.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="910.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="1172.5" y="883.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1173.3" y="1603.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1173.3" y="1587.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1173.3" y="1571.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1173.3" y="1555.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1173.3" y="1539.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1173.3" y="1523.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.42%)</title><rect x="1173.3" y="1507.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1173.3" y="1491.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1173.3" y="1475.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1173.3" y="1459.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1173.3" y="1443.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1173.3" y="1427.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.42%)</title><rect x="1173.3" y="1411.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1173.3" y="1395.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1173.3" y="1379.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1173.3" y="1363.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1173.3" y="1347.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1173.3" y="1331.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1173.3" y="1315.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1326.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="1299.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1310.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.3" y="1283.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1294.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.3" y="1267.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.3" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.3" y="1235.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.3" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.3" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.3" y="1187.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="1171.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="1182.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1173.3" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.3" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.3" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.3" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1173.3" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1174.2" y="1299.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1174.2" y="1283.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1174.2" y="1267.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1278.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.07%)</title><rect x="1174.2" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="1262.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1174.2" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1246.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1219.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="1230.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.2" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="1214.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1174.2" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1198.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.2" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1174.2" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.0" y="1251.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.0" y="1235.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.0" y="1219.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.0" y="1203.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.0" y="1187.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.0" y="1171.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.0" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.0" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="1118.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.0" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="1102.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1175.0" y="1075.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="1086.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1175.8" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="1166.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.8" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1175.8" y="1123.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.8" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1175.8" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.7" y="1299.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.7" y="1283.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.7" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.7" y="1251.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.7" y="1235.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.7" y="1219.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.7" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.7" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.7" y="1171.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="1182.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.07%)</title><rect x="1176.7" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="1176.7" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.07%)</title><rect x="1176.7" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.07%)</title><rect x="1176.7" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.5" y="1363.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.5" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.5" y="1331.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.5" y="1315.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.5" y="1299.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.5" y="1267.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.5" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.5" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.5" y="1219.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.5" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.5" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.5" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.5" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.5" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.5" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.5" y="1091.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.5" y="1075.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1177.5" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1178.3" y="1619.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1630.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.3" y="1603.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="1614.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1178.3" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="1598.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1178.3" y="1571.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="1582.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.07%)</title><rect x="1178.3" y="1555.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="1566.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1179.2" y="1699.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="1710.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.07%)</title><rect x="1179.2" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="1694.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1667.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.0" y="1683.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.0" y="1667.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.0" y="1651.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.0" y="1635.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.0" y="1619.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.0" y="1603.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.0" y="1587.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.0" y="1571.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.0" y="1555.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.0" y="1539.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.0" y="1523.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.0" y="1507.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.0" y="1491.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.0" y="1475.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.0" y="1459.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.0" y="1443.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.0" y="1427.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.0" y="1411.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="1422.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.0" y="1395.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.0" y="1379.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.0" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.0" y="1347.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.0" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.0" y="1299.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.0" y="1283.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.0" y="1267.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.0" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.0" y="1235.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1180.0" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="1230.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1180.0" y="1203.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="1214.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.0" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1180.0" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1180.0" y="1155.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1183.0" y="1166.0"></text>
</g>
<g>
<title>SafePointNode::next_exception() const (1 samples, 0.07%)</title><rect x="1180.8" y="1427.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="1715.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1726.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="1710.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1181.7" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="1694.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1181.7" y="1667.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="1678.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1181.7" y="1651.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="1662.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1181.7" y="1635.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="1646.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="1619.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="1630.0"></text>
</g>
<g>
<title>__GI_qsort (1 samples, 0.07%)</title><rect x="1181.7" y="1603.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1184.7" y="1614.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.5" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="1726.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1183.3" y="1795.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1806.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1184.2" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1854.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1184.2" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="1838.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1184.2" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1822.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1184.2" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1806.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1185.0" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.0" y="1870.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1185.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="1854.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1185.0" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="1838.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.07%)</title><rect x="1185.0" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="1822.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1185.0" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="1806.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1185.0" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="1790.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1185.8" y="1891.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="1902.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1185.8" y="1875.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="1886.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.14%)</title><rect x="1185.8" y="1859.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="1870.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.14%)</title><rect x="1185.8" y="1843.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.8" y="1854.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.14%)</title><rect x="1185.8" y="1827.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.14%)</title><rect x="1185.8" y="1811.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.14%)</title><rect x="1185.8" y="1795.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (2 samples, 0.14%)</title><rect x="1185.8" y="1779.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1790.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.07%)</title><rect x="1185.8" y="1763.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1774.0"></text>
</g>
<g>
<title>G1CopyingKeepAliveClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="1185.8" y="1747.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="1758.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.07%)</title><rect x="1186.7" y="1763.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1774.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1186.7" y="1747.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="1758.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1186.7" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1742.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.07%)</title><rect x="1186.7" y="1715.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="1726.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.07%)</title><rect x="1187.5" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="1902.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 0.14%)</title><rect x="1188.3" y="1923.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.07%)</title><rect x="1188.3" y="1907.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.07%)</title><rect x="1189.2" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.2" y="1854.0"></text>
</g>
</g>
</svg>
