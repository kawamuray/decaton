<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (272 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2035.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2019.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2003.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1987.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1971.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1955.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1939.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1923.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1907.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1891.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1875.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1859.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1843.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1827.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1811.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1795.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1779.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1763.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1747.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1731.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1715.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1699.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1683.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1667.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1651.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1635.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1619.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1603.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1587.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1571.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1555.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1539.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1523.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1507.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1491.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1475.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1459.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1443.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1427.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1411.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1395.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1379.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1363.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1347.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1331.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1315.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1299.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1283.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1267.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1251.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1235.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1219.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1203.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1187.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1171.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1155.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1139.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1123.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1107.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1091.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1075.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1059.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1043.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1027.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1011.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="995.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="979.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="963.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="947.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="931.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="915.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="899.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="883.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="867.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="851.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="835.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="819.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="803.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="787.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="771.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="755.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="739.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="723.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="707.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="691.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="675.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="659.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="643.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="627.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="611.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="595.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="579.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="563.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="547.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="531.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="515.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="499.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="483.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="467.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="451.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="435.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="419.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="403.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="387.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="371.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="355.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="339.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="323.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="307.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="291.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="275.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="259.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="243.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="227.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="211.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="195.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="179.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="163.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="147.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="131.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="115.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="99.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="83.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="67.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="51.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.37%)</title><rect x="10.0" y="35.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="14.3" y="2035.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.3" y="2046.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="14.3" y="2019.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.3" y="2030.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="14.3" y="2003.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.3" y="2014.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="14.3" y="1987.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.3" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.37%)</title><rect x="14.3" y="1971.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.3" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 8.46%)</title><rect x="18.7" y="2035.0" width="99.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.7" y="2046.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.74%)</title><rect x="18.7" y="2019.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.7" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.74%)</title><rect x="18.7" y="2003.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.74%)</title><rect x="18.7" y="1987.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.74%)</title><rect x="18.7" y="1971.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.74%)</title><rect x="18.7" y="1955.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="18.7" y="1939.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="18.7" y="1923.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="18.7" y="1907.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.74%)</title><rect x="18.7" y="1891.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.74%)</title><rect x="18.7" y="1875.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.74%)</title><rect x="18.7" y="1859.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="18.7" y="1843.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.37%)</title><rect x="18.7" y="1827.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.37%)</title><rect x="18.7" y="1811.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.37%)</title><rect x="18.7" y="1795.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.37%)</title><rect x="18.7" y="1779.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.37%)</title><rect x="18.7" y="1763.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.37%)</title><rect x="18.7" y="1747.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.37%)</title><rect x="23.0" y="1843.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.37%)</title><rect x="23.0" y="1827.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.&lt;init&gt; (1 samples, 0.37%)</title><rect x="23.0" y="1811.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.0" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.72%)</title><rect x="27.4" y="2019.0" width="91.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="2030.0">com/linecor..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 3.31%)</title><rect x="27.4" y="2003.0" width="39.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="2014.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/520692097.accept (9 samples, 3.31%)</title><rect x="27.4" y="1987.0" width="39.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1998.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (9 samples, 3.31%)</title><rect x="27.4" y="1971.0" width="39.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.4" y="1982.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.84%)</title><rect x="27.4" y="1955.0" width="21.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.4" y="1966.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.84%)</title><rect x="27.4" y="1939.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.4" y="1950.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.84%)</title><rect x="27.4" y="1923.0" width="21.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.4" y="1934.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.84%)</title><rect x="27.4" y="1907.0" width="21.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.4" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.84%)</title><rect x="27.4" y="1891.0" width="21.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.4" y="1902.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.84%)</title><rect x="27.4" y="1875.0" width="21.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 1.84%)</title><rect x="27.4" y="1859.0" width="21.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.4" y="1870.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 1.84%)</title><rect x="27.4" y="1843.0" width="21.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.4" y="1854.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 1.84%)</title><rect x="27.4" y="1827.0" width="21.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.4" y="1838.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.74%)</title><rect x="40.4" y="1811.0" width="8.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="43.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.47%)</title><rect x="49.0" y="1955.0" width="17.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.0" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.47%)</title><rect x="49.0" y="1939.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.10%)</title><rect x="53.4" y="1923.0" width="13.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.74%)</title><rect x="53.4" y="1907.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.74%)</title><rect x="53.4" y="1891.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.74%)</title><rect x="53.4" y="1875.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.37%)</title><rect x="57.7" y="1859.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="60.7" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.37%)</title><rect x="57.7" y="1843.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="60.7" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="57.7" y="1827.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="60.7" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.37%)</title><rect x="57.7" y="1811.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="60.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="62.1" y="1907.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.41%)</title><rect x="66.4" y="2003.0" width="52.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.4" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.41%)</title><rect x="66.4" y="1987.0" width="52.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.4" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.94%)</title><rect x="66.4" y="1971.0" width="34.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.4" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="66.4" y="1955.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="66.4" y="1939.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.37%)</title><rect x="66.4" y="1923.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.37%)</title><rect x="66.4" y="1907.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.37%)</title><rect x="66.4" y="1891.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="66.4" y="1875.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.4" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="66.4" y="1859.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.37%)</title><rect x="70.7" y="1923.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.37%)</title><rect x="70.7" y="1907.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="70.7" y="1891.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="70.7" y="1875.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.37%)</title><rect x="70.7" y="1859.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.37%)</title><rect x="70.7" y="1843.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.21%)</title><rect x="75.1" y="1955.0" width="26.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.1" y="1966.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.37%)</title><rect x="75.1" y="1939.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.37%)</title><rect x="75.1" y="1923.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.37%)</title><rect x="79.4" y="1939.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (1 samples, 0.37%)</title><rect x="79.4" y="1923.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.37%)</title><rect x="83.8" y="1939.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.10%)</title><rect x="88.1" y="1939.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.37%)</title><rect x="88.1" y="1923.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.37%)</title><rect x="88.1" y="1907.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.37%)</title><rect x="88.1" y="1891.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.37%)</title><rect x="88.1" y="1875.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.37%)</title><rect x="88.1" y="1859.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (1 samples, 0.37%)</title><rect x="88.1" y="1843.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.37%)</title><rect x="88.1" y="1827.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.37%)</title><rect x="88.1" y="1811.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.74%)</title><rect x="92.4" y="1923.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.74%)</title><rect x="92.4" y="1907.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.37%)</title><rect x="92.4" y="1891.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.4" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.37%)</title><rect x="92.4" y="1875.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.37%)</title><rect x="92.4" y="1859.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="96.8" y="1891.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="96.8" y="1875.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="96.8" y="1859.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.37%)</title><rect x="96.8" y="1843.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.8" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.37%)</title><rect x="96.8" y="1827.0" width="4.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="99.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.10%)</title><rect x="101.1" y="1971.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.10%)</title><rect x="101.1" y="1955.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.74%)</title><rect x="101.1" y="1939.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.37%)</title><rect x="105.4" y="1923.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.37%)</title><rect x="105.4" y="1907.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.4" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.37%)</title><rect x="105.4" y="1891.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="108.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.37%)</title><rect x="105.4" y="1875.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.4" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.37%)</title><rect x="105.4" y="1859.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.37%)</title><rect x="109.8" y="1939.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.37%)</title><rect x="109.8" y="1923.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="109.8" y="1907.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.37%)</title><rect x="109.8" y="1891.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.37%)</title><rect x="109.8" y="1875.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="112.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="109.8" y="1859.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="112.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="109.8" y="1843.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.8" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.37%)</title><rect x="109.8" y="1827.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="112.8" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.37%)</title><rect x="109.8" y="1811.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="112.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.37%)</title><rect x="114.1" y="1971.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.37%)</title><rect x="114.1" y="1955.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.1" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.37%)</title><rect x="114.1" y="1939.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.37%)</title><rect x="114.1" y="1923.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.1" y="1934.0"></text>
</g>
<g>
<title>java/lang/Thread.run (153 samples, 56.25%)</title><rect x="118.5" y="2035.0" width="663.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/761336491.run (1 samples, 0.37%)</title><rect x="118.5" y="2019.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.5" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (1 samples, 0.37%)</title><rect x="118.5" y="2003.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="121.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.37%)</title><rect x="118.5" y="1987.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.37%)</title><rect x="118.5" y="1971.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (152 samples, 55.88%)</title><rect x="122.8" y="2019.0" width="659.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.8" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (152 samples, 55.88%)</title><rect x="122.8" y="2003.0" width="659.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="125.8" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/761336491.run (150 samples, 55.15%)</title><rect x="127.1" y="1987.0" width="650.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.1" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/761336491.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (150 samples, 55.15%)</title><rect x="127.1" y="1971.0" width="650.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.1" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (150 samples, 55.15%)</title><rect x="127.1" y="1955.0" width="650.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.1" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (149 samples, 54.78%)</title><rect x="127.1" y="1939.0" width="646.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.1" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (35 samples, 12.87%)</title><rect x="140.1" y="1923.0" width="151.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.1" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (35 samples, 12.87%)</title><rect x="140.1" y="1907.0" width="151.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.1" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (35 samples, 12.87%)</title><rect x="140.1" y="1891.0" width="151.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.1" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 12.87%)</title><rect x="140.1" y="1875.0" width="151.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.1" y="1886.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 12.87%)</title><rect x="140.1" y="1859.0" width="151.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.1" y="1870.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (35 samples, 12.87%)</title><rect x="140.1" y="1843.0" width="151.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.1" y="1854.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 5.15%)</title><rect x="140.1" y="1827.0" width="60.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.1" y="1838.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.47%)</title><rect x="157.5" y="1811.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.47%)</title><rect x="157.5" y="1795.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.47%)</title><rect x="157.5" y="1779.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="160.5" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.47%)</title><rect x="157.5" y="1763.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.47%)</title><rect x="157.5" y="1747.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.5" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.47%)</title><rect x="157.5" y="1731.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.21%)</title><rect x="174.9" y="1811.0" width="26.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.9" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.21%)</title><rect x="174.9" y="1795.0" width="26.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.9" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.37%)</title><rect x="196.5" y="1779.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.37%)</title><rect x="196.5" y="1763.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 7.72%)</title><rect x="200.9" y="1827.0" width="91.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.9" y="1838.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.74%)</title><rect x="200.9" y="1811.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.37%)</title><rect x="209.6" y="1811.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.37%)</title><rect x="209.6" y="1795.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 1.84%)</title><rect x="213.9" y="1811.0" width="21.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.9" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.84%)</title><rect x="213.9" y="1795.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.9" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 1.47%)</title><rect x="213.9" y="1779.0" width="17.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 1.47%)</title><rect x="213.9" y="1763.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.74%)</title><rect x="222.6" y="1747.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.37%)</title><rect x="231.2" y="1779.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.78%)</title><rect x="235.6" y="1811.0" width="56.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.6" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.21%)</title><rect x="235.6" y="1795.0" width="26.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.6" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="252.9" y="1779.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="252.9" y="1763.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="252.9" y="1747.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.37%)</title><rect x="257.3" y="1779.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.57%)</title><rect x="261.6" y="1795.0" width="30.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.6" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.57%)</title><rect x="261.6" y="1779.0" width="30.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.6" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.57%)</title><rect x="261.6" y="1763.0" width="30.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.6" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.74%)</title><rect x="266.0" y="1747.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.10%)</title><rect x="274.6" y="1747.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.10%)</title><rect x="274.6" y="1731.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.10%)</title><rect x="274.6" y="1715.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.10%)</title><rect x="274.6" y="1699.0" width="13.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.10%)</title><rect x="274.6" y="1683.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.37%)</title><rect x="287.6" y="1747.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.6" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="287.6" y="1731.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="287.6" y="1715.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.6" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (105 samples, 38.60%)</title><rect x="292.0" y="1923.0" width="455.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.0" y="1934.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 6.25%)</title><rect x="292.0" y="1907.0" width="73.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.0" y="1918.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 6.25%)</title><rect x="292.0" y="1891.0" width="73.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.0" y="1902.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (17 samples, 6.25%)</title><rect x="292.0" y="1875.0" width="73.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.0" y="1886.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 3.31%)</title><rect x="296.3" y="1859.0" width="39.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.3" y="1870.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 3.31%)</title><rect x="296.3" y="1843.0" width="39.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.3" y="1854.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 1.47%)</title><rect x="318.0" y="1827.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.47%)</title><rect x="318.0" y="1811.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 1.47%)</title><rect x="318.0" y="1795.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.0" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.57%)</title><rect x="335.4" y="1859.0" width="30.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="338.4" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.57%)</title><rect x="335.4" y="1843.0" width="30.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.4" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.37%)</title><rect x="339.7" y="1827.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.84%)</title><rect x="344.0" y="1827.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.0" y="1838.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 8.82%)</title><rect x="365.7" y="1907.0" width="104.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.7" y="1918.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 8.82%)</title><rect x="365.7" y="1891.0" width="104.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.7" y="1902.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 4.04%)</title><rect x="370.1" y="1875.0" width="47.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.1" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.31%)</title><rect x="374.4" y="1859.0" width="39.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.4" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.94%)</title><rect x="378.7" y="1843.0" width="34.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 2.57%)</title><rect x="378.7" y="1827.0" width="30.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.7" y="1838.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 2.57%)</title><rect x="378.7" y="1811.0" width="30.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.7" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 2.57%)</title><rect x="378.7" y="1795.0" width="30.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.7" y="1806.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.47%)</title><rect x="391.8" y="1779.0" width="17.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.74%)</title><rect x="391.8" y="1763.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="394.8" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.37%)</title><rect x="391.8" y="1747.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="394.8" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.37%)</title><rect x="396.1" y="1747.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="399.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.37%)</title><rect x="396.1" y="1731.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="399.1" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.37%)</title><rect x="396.1" y="1715.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="399.1" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.74%)</title><rect x="400.4" y="1763.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="403.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.74%)</title><rect x="400.4" y="1747.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.4" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="404.8" y="1731.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="407.8" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="409.1" y="1827.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="412.1" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="413.5" y="1859.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="416.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.37%)</title><rect x="417.8" y="1875.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.37%)</title><rect x="417.8" y="1859.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="417.8" y="1843.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="417.8" y="1827.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.8" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 4.04%)</title><rect x="422.1" y="1875.0" width="47.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.1" y="1886.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.68%)</title><rect x="426.5" y="1859.0" width="43.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.5" y="1870.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.10%)</title><rect x="426.5" y="1843.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.10%)</title><rect x="426.5" y="1827.0" width="13.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.37%)</title><rect x="435.1" y="1811.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.37%)</title><rect x="435.1" y="1795.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.1" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.37%)</title><rect x="435.1" y="1779.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.1" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.57%)</title><rect x="439.5" y="1843.0" width="30.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.5" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.21%)</title><rect x="443.8" y="1827.0" width="26.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.8" y="1838.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.37%)</title><rect x="443.8" y="1811.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.37%)</title><rect x="443.8" y="1795.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.84%)</title><rect x="448.2" y="1811.0" width="21.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.2" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.37%)</title><rect x="465.5" y="1795.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 22.79%)</title><rect x="469.9" y="1907.0" width="268.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.9" y="1918.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 22.43%)</title><rect x="474.2" y="1891.0" width="264.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.2" y="1902.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2032810883.process (54 samples, 19.85%)</title><rect x="478.5" y="1875.0" width="234.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.5" y="1886.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (54 samples, 19.85%)</title><rect x="478.5" y="1859.0" width="234.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.5" y="1870.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (54 samples, 19.85%)</title><rect x="478.5" y="1843.0" width="234.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.5" y="1854.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (52 samples, 19.12%)</title><rect x="487.2" y="1827.0" width="225.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.2" y="1838.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 18.75%)</title><rect x="487.2" y="1811.0" width="221.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.2" y="1822.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (43 samples, 15.81%)</title><rect x="517.6" y="1795.0" width="186.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="520.6" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.37%)</title><rect x="547.9" y="1779.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="550.9" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.10%)</title><rect x="552.3" y="1779.0" width="13.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="555.3" y="1790.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.10%)</title><rect x="552.3" y="1763.0" width="13.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="555.3" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 1.47%)</title><rect x="565.3" y="1779.0" width="17.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="568.3" y="1790.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (28 samples, 10.29%)</title><rect x="582.6" y="1779.0" width="121.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="585.6" y="1790.0">os::sleep(Threa..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.74%)</title><rect x="600.0" y="1763.0" width="8.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="603.0" y="1774.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 5.51%)</title><rect x="608.7" y="1763.0" width="65.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="611.7" y="1774.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.37%)</title><rect x="673.8" y="1763.0" width="4.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="676.8" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.37%)</title><rect x="678.1" y="1763.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="681.1" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.37%)</title><rect x="682.4" y="1763.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="685.4" y="1774.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.10%)</title><rect x="686.8" y="1763.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="689.8" y="1774.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.37%)</title><rect x="699.8" y="1763.0" width="4.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="702.8" y="1774.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.37%)</title><rect x="704.1" y="1795.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.1" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="708.5" y="1811.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="711.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="708.5" y="1795.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="711.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.74%)</title><rect x="712.8" y="1875.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.74%)</title><rect x="712.8" y="1859.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="715.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1734711397.get$Lambda (2 samples, 0.74%)</title><rect x="712.8" y="1843.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="715.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1734711397.&lt;init&gt; (2 samples, 0.74%)</title><rect x="712.8" y="1827.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.37%)</title><rect x="721.5" y="1875.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.37%)</title><rect x="721.5" y="1859.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.37%)</title><rect x="721.5" y="1843.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.74%)</title><rect x="725.8" y="1875.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="728.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.37%)</title><rect x="730.1" y="1859.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.37%)</title><rect x="734.5" y="1875.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.74%)</title><rect x="738.8" y="1907.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.21%)</title><rect x="747.5" y="1923.0" width="26.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.5" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.47%)</title><rect x="756.2" y="1907.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.47%)</title><rect x="756.2" y="1891.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/995680967.accept (4 samples, 1.47%)</title><rect x="756.2" y="1875.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="759.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (4 samples, 1.47%)</title><rect x="756.2" y="1859.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="759.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1263741752.complete (4 samples, 1.47%)</title><rect x="756.2" y="1843.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (4 samples, 1.47%)</title><rect x="756.2" y="1827.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.47%)</title><rect x="756.2" y="1811.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.2" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.47%)</title><rect x="756.2" y="1795.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.47%)</title><rect x="756.2" y="1779.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="759.2" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.47%)</title><rect x="756.2" y="1763.0" width="17.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.2" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.47%)</title><rect x="756.2" y="1747.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.2" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.37%)</title><rect x="773.5" y="1939.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.37%)</title><rect x="777.9" y="1987.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.9" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.37%)</title><rect x="777.9" y="1971.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.9" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.37%)</title><rect x="777.9" y="1955.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.37%)</title><rect x="777.9" y="1939.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.74%)</title><rect x="782.2" y="2035.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.2" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.37%)</title><rect x="786.5" y="2019.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.5" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="786.5" y="2003.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.5" y="2014.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.37%)</title><rect x="786.5" y="1987.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="789.5" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.37%)</title><rect x="786.5" y="1971.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.37%)</title><rect x="786.5" y="1955.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.37%)</title><rect x="786.5" y="1939.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.37%)</title><rect x="786.5" y="1923.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.37%)</title><rect x="786.5" y="1907.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.5" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.37%)</title><rect x="786.5" y="1891.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.5" y="1902.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.37%)</title><rect x="786.5" y="1875.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="789.5" y="1886.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.37%)</title><rect x="786.5" y="1859.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.5" y="1870.0"></text>
</g>
<g>
<title>start_thread (92 samples, 33.82%)</title><rect x="790.9" y="2035.0" width="399.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="793.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (92 samples, 33.82%)</title><rect x="790.9" y="2019.0" width="399.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="793.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.41%)</title><rect x="790.9" y="2003.0" width="52.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="793.9" y="2014.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 4.41%)</title><rect x="790.9" y="1987.0" width="52.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="793.9" y="1998.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.41%)</title><rect x="790.9" y="1971.0" width="52.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="793.9" y="1982.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.94%)</title><rect x="790.9" y="1955.0" width="34.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="793.9" y="1966.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 2.21%)</title><rect x="795.2" y="1939.0" width="26.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.2" y="1950.0">G..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.37%)</title><rect x="812.6" y="1923.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="815.6" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.37%)</title><rect x="812.6" y="1907.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="815.6" y="1918.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.37%)</title><rect x="816.9" y="1923.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.9" y="1934.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.37%)</title><rect x="821.2" y="1939.0" width="4.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="824.2" y="1950.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.37%)</title><rect x="825.6" y="1955.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="828.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.10%)</title><rect x="829.9" y="1955.0" width="13.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="832.9" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (80 samples, 29.41%)</title><rect x="842.9" y="2003.0" width="347.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="845.9" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (80 samples, 29.41%)</title><rect x="842.9" y="1987.0" width="347.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="845.9" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (80 samples, 29.41%)</title><rect x="842.9" y="1971.0" width="347.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.9" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 29.41%)</title><rect x="842.9" y="1955.0" width="347.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.9" y="1966.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 28.68%)</title><rect x="842.9" y="1939.0" width="338.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.9" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 28.68%)</title><rect x="842.9" y="1923.0" width="338.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="845.9" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 17.28%)</title><rect x="842.9" y="1907.0" width="203.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="845.9" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.37%)</title><rect x="842.9" y="1891.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="845.9" y="1902.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.37%)</title><rect x="842.9" y="1875.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="845.9" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.37%)</title><rect x="842.9" y="1859.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="845.9" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.74%)</title><rect x="847.3" y="1891.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="850.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.37%)</title><rect x="847.3" y="1875.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.37%)</title><rect x="847.3" y="1859.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="847.3" y="1843.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.3" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="851.6" y="1875.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.6" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="851.6" y="1859.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.47%)</title><rect x="856.0" y="1891.0" width="17.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.0" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.37%)</title><rect x="856.0" y="1875.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.0" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.10%)</title><rect x="860.3" y="1875.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="863.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.74%)</title><rect x="860.3" y="1859.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="863.3" y="1870.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.37%)</title><rect x="869.0" y="1859.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.0" y="1870.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.37%)</title><rect x="869.0" y="1843.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="872.0" y="1854.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.37%)</title><rect x="869.0" y="1827.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.0" y="1838.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.37%)</title><rect x="869.0" y="1811.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.0" y="1822.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.37%)</title><rect x="869.0" y="1795.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.0" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.37%)</title><rect x="873.3" y="1891.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.3" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.37%)</title><rect x="873.3" y="1875.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.37%)</title><rect x="873.3" y="1859.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.3" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.37%)</title><rect x="873.3" y="1843.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="876.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 14.34%)</title><rect x="877.6" y="1891.0" width="169.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="880.6" y="1902.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.37%)</title><rect x="882.0" y="1875.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="885.0" y="1886.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.37%)</title><rect x="886.3" y="1875.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.3" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.37%)</title><rect x="890.7" y="1875.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.37%)</title><rect x="895.0" y="1875.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.37%)</title><rect x="895.0" y="1859.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.74%)</title><rect x="899.3" y="1875.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.74%)</title><rect x="899.3" y="1859.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="902.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="903.7" y="1843.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="906.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 3.31%)</title><rect x="908.0" y="1875.0" width="39.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="911.0" y="1886.0">Pha..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.37%)</title><rect x="938.4" y="1859.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.4" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="942.7" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.21%)</title><rect x="947.1" y="1875.0" width="26.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.1" y="1886.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.47%)</title><rect x="947.1" y="1859.0" width="17.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="950.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="960.1" y="1843.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="963.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="964.4" y="1859.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.4" y="1870.0"></text>
</g>
<g>
<title>checkCastPPNode::rule() const (1 samples, 0.37%)</title><rect x="968.8" y="1859.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.37%)</title><rect x="973.1" y="1875.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.37%)</title><rect x="973.1" y="1859.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.10%)</title><rect x="977.4" y="1875.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.37%)</title><rect x="986.1" y="1859.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="989.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.31%)</title><rect x="990.4" y="1875.0" width="39.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="993.4" y="1886.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.31%)</title><rect x="990.4" y="1859.0" width="39.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.4" y="1870.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 3.31%)</title><rect x="990.4" y="1843.0" width="39.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.4" y="1854.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.74%)</title><rect x="990.4" y="1827.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.4" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 2.57%)</title><rect x="999.1" y="1827.0" width="30.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.1" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.74%)</title><rect x="1029.5" y="1875.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.5" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.74%)</title><rect x="1038.2" y="1875.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.2" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 9.56%)</title><rect x="1046.8" y="1907.0" width="112.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.8" y="1918.0">Compile::Optim..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 8.09%)</title><rect x="1046.8" y="1891.0" width="95.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.8" y="1902.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.10%)</title><rect x="1046.8" y="1875.0" width="13.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1049.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 6.99%)</title><rect x="1059.9" y="1875.0" width="82.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.9" y="1886.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 6.25%)</title><rect x="1068.5" y="1859.0" width="73.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.5" y="1870.0">PhaseIde..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.37%)</title><rect x="1072.9" y="1843.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 5.51%)</title><rect x="1077.2" y="1843.0" width="65.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.2" y="1854.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.37%)</title><rect x="1137.9" y="1827.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.74%)</title><rect x="1142.3" y="1891.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.74%)</title><rect x="1142.3" y="1875.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="1886.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.37%)</title><rect x="1142.3" y="1859.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.37%)</title><rect x="1146.6" y="1859.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="1870.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.37%)</title><rect x="1146.6" y="1843.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.6" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.37%)</title><rect x="1146.6" y="1827.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="1838.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.37%)</title><rect x="1146.6" y="1811.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.37%)</title><rect x="1146.6" y="1795.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.6" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.37%)</title><rect x="1146.6" y="1779.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.6" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.37%)</title><rect x="1146.6" y="1763.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.37%)</title><rect x="1151.0" y="1891.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.37%)</title><rect x="1151.0" y="1875.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.37%)</title><rect x="1151.0" y="1859.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.0" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.37%)</title><rect x="1155.3" y="1891.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1158.3" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.47%)</title><rect x="1159.6" y="1907.0" width="17.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.47%)</title><rect x="1159.6" y="1891.0" width="17.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.47%)</title><rect x="1159.6" y="1875.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.47%)</title><rect x="1159.6" y="1859.0" width="17.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.47%)</title><rect x="1159.6" y="1843.0" width="17.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.47%)</title><rect x="1159.6" y="1827.0" width="17.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.10%)</title><rect x="1159.6" y="1811.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.10%)</title><rect x="1159.6" y="1795.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.10%)</title><rect x="1159.6" y="1779.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.10%)</title><rect x="1159.6" y="1763.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.10%)</title><rect x="1159.6" y="1747.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.10%)</title><rect x="1159.6" y="1731.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1159.6" y="1715.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1159.6" y="1699.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1159.6" y="1683.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1159.6" y="1667.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1159.6" y="1651.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1159.6" y="1635.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="1646.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1159.6" y="1619.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1630.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1159.6" y="1603.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1614.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1159.6" y="1587.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.6" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.37%)</title><rect x="1159.6" y="1571.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.37%)</title><rect x="1159.6" y="1555.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1159.6" y="1539.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1159.6" y="1523.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.37%)</title><rect x="1159.6" y="1507.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.37%)</title><rect x="1159.6" y="1491.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1502.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1159.6" y="1475.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1159.6" y="1459.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1159.6" y="1443.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1454.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.37%)</title><rect x="1159.6" y="1427.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1164.0" y="1715.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1164.0" y="1699.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1164.0" y="1683.0" width="8.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1164.0" y="1667.0" width="8.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1164.0" y="1651.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1164.0" y="1635.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="1646.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.37%)</title><rect x="1164.0" y="1619.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.0" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1619.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1603.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1587.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="1571.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="1555.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="1539.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1523.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1507.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1491.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="1475.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="1459.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="1443.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1427.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1411.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1395.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="1379.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="1363.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="1347.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1331.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1315.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1299.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="1283.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="1267.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="1251.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1235.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1219.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1203.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="1187.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="1171.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="1155.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1139.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1123.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1107.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="1091.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="1075.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="1059.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="1043.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="1027.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="1011.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="995.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="979.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="963.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1168.3" y="947.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.3" y="931.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.3" y="915.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1168.3" y="899.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1168.3" y="883.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1168.3" y="867.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1168.3" y="851.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1168.3" y="835.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.37%)</title><rect x="1168.3" y="819.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.37%)</title><rect x="1168.3" y="803.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.37%)</title><rect x="1168.3" y="787.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.37%)</title><rect x="1168.3" y="771.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.6" y="1811.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.6" y="1795.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.6" y="1779.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.6" y="1763.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.6" y="1747.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.6" y="1731.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1172.6" y="1715.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.6" y="1699.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.6" y="1683.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.6" y="1667.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.6" y="1651.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.6" y="1635.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1172.6" y="1619.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.6" y="1603.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.6" y="1587.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.6" y="1571.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.6" y="1555.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.6" y="1539.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1172.6" y="1523.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.6" y="1507.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.6" y="1491.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.6" y="1475.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.6" y="1459.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.6" y="1443.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1172.6" y="1427.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="1438.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1172.6" y="1411.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1422.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.37%)</title><rect x="1172.6" y="1395.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1406.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.37%)</title><rect x="1172.6" y="1379.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="1390.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.37%)</title><rect x="1172.6" y="1363.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1374.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.37%)</title><rect x="1177.0" y="1907.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1177.0" y="1891.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="1902.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1177.0" y="1875.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.37%)</title><rect x="1177.0" y="1859.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="1870.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.37%)</title><rect x="1177.0" y="1843.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="1854.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.37%)</title><rect x="1177.0" y="1827.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="1838.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.74%)</title><rect x="1181.3" y="1939.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.74%)</title><rect x="1181.3" y="1923.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.74%)</title><rect x="1181.3" y="1907.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.74%)</title><rect x="1181.3" y="1891.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.37%)</title><rect x="1181.3" y="1875.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1886.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.37%)</title><rect x="1181.3" y="1859.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1870.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.37%)</title><rect x="1181.3" y="1843.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1854.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.37%)</title><rect x="1181.3" y="1827.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1838.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.37%)</title><rect x="1185.7" y="1875.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.37%)</title><rect x="1185.7" y="1859.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="1870.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.37%)</title><rect x="1185.7" y="1843.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="1854.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.37%)</title><rect x="1185.7" y="1827.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="1838.0"></text>
</g>
</g>
</svg>
