<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (228 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 7.02%)</title><rect x="10.0" y="931.0" width="82.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.44%)</title><rect x="10.0" y="915.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.44%)</title><rect x="10.0" y="899.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.44%)</title><rect x="10.0" y="883.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.44%)</title><rect x="10.0" y="867.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.44%)</title><rect x="10.0" y="851.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.44%)</title><rect x="10.0" y="835.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.44%)</title><rect x="10.0" y="819.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.44%)</title><rect x="10.0" y="803.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.44%)</title><rect x="10.0" y="787.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.44%)</title><rect x="10.0" y="771.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.44%)</title><rect x="10.0" y="755.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.44%)</title><rect x="10.0" y="739.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.44%)</title><rect x="10.0" y="723.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (15 samples, 6.58%)</title><rect x="15.2" y="915.0" width="77.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.2" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.88%)</title><rect x="15.2" y="899.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.88%)</title><rect x="15.2" y="883.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/377705444.accept (2 samples, 0.88%)</title><rect x="15.2" y="867.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.88%)</title><rect x="15.2" y="851.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.88%)</title><rect x="15.2" y="835.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.2" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.88%)</title><rect x="15.2" y="819.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (2 samples, 0.88%)</title><rect x="15.2" y="803.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.44%)</title><rect x="25.5" y="899.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.44%)</title><rect x="25.5" y="883.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.44%)</title><rect x="25.5" y="867.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.44%)</title><rect x="25.5" y="851.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.44%)</title><rect x="25.5" y="835.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.44%)</title><rect x="25.5" y="819.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.44%)</title><rect x="25.5" y="803.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.44%)</title><rect x="25.5" y="787.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.44%)</title><rect x="25.5" y="771.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.44%)</title><rect x="25.5" y="755.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$252/1092730147.test (1 samples, 0.44%)</title><rect x="25.5" y="739.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.75%)</title><rect x="30.7" y="899.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/833707408.accept (3 samples, 1.32%)</title><rect x="30.7" y="883.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (3 samples, 1.32%)</title><rect x="30.7" y="867.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.44%)</title><rect x="30.7" y="851.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.44%)</title><rect x="30.7" y="835.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.44%)</title><rect x="30.7" y="819.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.44%)</title><rect x="30.7" y="803.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.44%)</title><rect x="30.7" y="787.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.44%)</title><rect x="30.7" y="771.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.88%)</title><rect x="35.9" y="851.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.9" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.88%)</title><rect x="35.9" y="835.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.9" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.44%)</title><rect x="41.1" y="819.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.1" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.44%)</title><rect x="41.1" y="803.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.1" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.44%)</title><rect x="41.1" y="787.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.1" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.44%)</title><rect x="41.1" y="771.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.44%)</title><rect x="41.1" y="755.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="44.1" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.44%)</title><rect x="41.1" y="739.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="44.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="41.1" y="723.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="44.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.44%)</title><rect x="41.1" y="707.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="44.1" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.44%)</title><rect x="41.1" y="691.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="44.1" y="702.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.44%)</title><rect x="41.1" y="675.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="44.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.44%)</title><rect x="41.1" y="659.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.1" y="670.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.44%)</title><rect x="41.1" y="643.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="44.1" y="654.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.44%)</title><rect x="41.1" y="627.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="44.1" y="638.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.44%)</title><rect x="41.1" y="611.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="44.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.44%)</title><rect x="46.2" y="883.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.51%)</title><rect x="51.4" y="899.0" width="41.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.4" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.51%)</title><rect x="51.4" y="883.0" width="41.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.4" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.75%)</title><rect x="51.4" y="867.0" width="20.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.44%)</title><rect x="51.4" y="851.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.44%)</title><rect x="51.4" y="835.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.44%)</title><rect x="51.4" y="819.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.44%)</title><rect x="51.4" y="803.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.44%)</title><rect x="51.4" y="787.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.44%)</title><rect x="51.4" y="771.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.44%)</title><rect x="51.4" y="755.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.44%)</title><rect x="51.4" y="739.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.44%)</title><rect x="51.4" y="723.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.44%)</title><rect x="51.4" y="707.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.4" y="718.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.44%)</title><rect x="51.4" y="691.0" width="5.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="54.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.32%)</title><rect x="56.6" y="851.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.32%)</title><rect x="56.6" y="835.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.32%)</title><rect x="56.6" y="819.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.32%)</title><rect x="56.6" y="803.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.44%)</title><rect x="56.6" y="787.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.44%)</title><rect x="56.6" y="771.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.44%)</title><rect x="56.6" y="755.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.44%)</title><rect x="56.6" y="739.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.88%)</title><rect x="61.8" y="787.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.88%)</title><rect x="61.8" y="771.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.88%)</title><rect x="61.8" y="755.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.8" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.88%)</title><rect x="61.8" y="739.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.88%)</title><rect x="72.1" y="867.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.88%)</title><rect x="72.1" y="851.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.88%)</title><rect x="72.1" y="835.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.44%)</title><rect x="72.1" y="819.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.44%)</title><rect x="72.1" y="803.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.44%)</title><rect x="77.3" y="819.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.44%)</title><rect x="77.3" y="803.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.44%)</title><rect x="77.3" y="787.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.44%)</title><rect x="77.3" y="771.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.44%)</title><rect x="77.3" y="755.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.44%)</title><rect x="77.3" y="739.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.44%)</title><rect x="77.3" y="723.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.3" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.44%)</title><rect x="77.3" y="707.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.3" y="718.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.44%)</title><rect x="77.3" y="691.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.44%)</title><rect x="77.3" y="675.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.44%)</title><rect x="77.3" y="659.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.44%)</title><rect x="77.3" y="643.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.3" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.44%)</title><rect x="77.3" y="627.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="80.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.44%)</title><rect x="82.5" y="867.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.44%)</title><rect x="82.5" y="851.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.44%)</title><rect x="82.5" y="835.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.44%)</title><rect x="82.5" y="819.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.connectionDelay (1 samples, 0.44%)</title><rect x="82.5" y="803.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.44%)</title><rect x="87.6" y="867.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.44%)</title><rect x="87.6" y="851.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.44%)</title><rect x="87.6" y="835.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.44%)</title><rect x="87.6" y="819.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.44%)</title><rect x="87.6" y="803.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.44%)</title><rect x="87.6" y="787.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.44%)</title><rect x="87.6" y="771.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.44%)</title><rect x="87.6" y="755.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.44%)</title><rect x="87.6" y="739.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.6" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.44%)</title><rect x="87.6" y="723.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.6" y="734.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.44%)</title><rect x="87.6" y="707.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.44%)</title><rect x="87.6" y="691.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.44%)</title><rect x="87.6" y="675.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/55027081.test (1 samples, 0.44%)</title><rect x="87.6" y="659.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.44%)</title><rect x="87.6" y="643.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/304828041.test (1 samples, 0.44%)</title><rect x="87.6" y="627.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (146 samples, 64.04%)</title><rect x="92.8" y="931.0" width="755.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.8" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (146 samples, 64.04%)</title><rect x="92.8" y="915.0" width="755.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.8" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (146 samples, 64.04%)</title><rect x="92.8" y="899.0" width="755.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.8" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955340677.run (137 samples, 60.09%)</title><rect x="92.8" y="883.0" width="709.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.8" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955340677.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (137 samples, 60.09%)</title><rect x="92.8" y="867.0" width="709.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.8" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (137 samples, 60.09%)</title><rect x="92.8" y="851.0" width="709.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.8" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (131 samples, 57.46%)</title><rect x="92.8" y="835.0" width="678.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.8" y="846.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 11.40%)</title><rect x="92.8" y="819.0" width="134.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.8" y="830.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 11.40%)</title><rect x="92.8" y="803.0" width="134.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.8" y="814.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 11.40%)</title><rect x="92.8" y="787.0" width="134.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.8" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 11.40%)</title><rect x="92.8" y="771.0" width="134.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.8" y="782.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 11.40%)</title><rect x="92.8" y="755.0" width="134.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.8" y="766.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 11.40%)</title><rect x="92.8" y="739.0" width="134.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.8" y="750.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 4.82%)</title><rect x="92.8" y="723.0" width="56.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.8" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 3.07%)</title><rect x="92.8" y="707.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.8" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 3.07%)</title><rect x="92.8" y="691.0" width="36.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.8" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 3.07%)</title><rect x="92.8" y="675.0" width="36.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.8" y="686.0">com..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 3.07%)</title><rect x="92.8" y="659.0" width="36.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.8" y="670.0">jav..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.75%)</title><rect x="129.0" y="707.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.75%)</title><rect x="129.0" y="691.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.88%)</title><rect x="129.0" y="675.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.88%)</title><rect x="129.0" y="659.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.44%)</title><rect x="129.0" y="643.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.44%)</title><rect x="134.2" y="643.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.88%)</title><rect x="139.4" y="675.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.88%)</title><rect x="139.4" y="659.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (12 samples, 5.26%)</title><rect x="149.7" y="723.0" width="62.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.7" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.88%)</title><rect x="149.7" y="707.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.88%)</title><rect x="149.7" y="691.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.88%)</title><rect x="149.7" y="675.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.88%)</title><rect x="149.7" y="659.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (1 samples, 0.44%)</title><rect x="149.7" y="643.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.44%)</title><rect x="154.9" y="643.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.44%)</title><rect x="160.1" y="707.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.44%)</title><rect x="160.1" y="691.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.44%)</title><rect x="165.3" y="707.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.44%)</title><rect x="165.3" y="691.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.44%)</title><rect x="165.3" y="675.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.44%)</title><rect x="165.3" y="659.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.3" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="165.3" y="643.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="168.3" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="165.3" y="627.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="168.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="165.3" y="611.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="168.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="165.3" y="595.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="168.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.51%)</title><rect x="170.4" y="707.0" width="41.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.4" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.44%)</title><rect x="175.6" y="691.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.44%)</title><rect x="175.6" y="675.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.63%)</title><rect x="180.8" y="691.0" width="31.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.8" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.63%)</title><rect x="180.8" y="675.0" width="31.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.8" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.63%)</title><rect x="180.8" y="659.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.8" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.19%)</title><rect x="186.0" y="643.0" width="25.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.0" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.88%)</title><rect x="186.0" y="627.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.88%)</title><rect x="186.0" y="611.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.88%)</title><rect x="186.0" y="595.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.44%)</title><rect x="191.1" y="579.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.88%)</title><rect x="196.3" y="627.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.44%)</title><rect x="206.7" y="627.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.32%)</title><rect x="211.8" y="723.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.32%)</title><rect x="211.8" y="707.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.32%)</title><rect x="211.8" y="691.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.32%)</title><rect x="211.8" y="675.0" width="15.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.32%)</title><rect x="211.8" y="659.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.44%)</title><rect x="222.2" y="643.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (105 samples, 46.05%)</title><rect x="227.4" y="819.0" width="543.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.4" y="830.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 7.02%)</title><rect x="232.5" y="803.0" width="82.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.5" y="814.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.44%)</title><rect x="237.7" y="787.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.7" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 6.14%)</title><rect x="242.9" y="787.0" width="72.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.9" y="798.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 4.39%)</title><rect x="263.6" y="771.0" width="51.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.6" y="782.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.88%)</title><rect x="263.6" y="755.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.88%)</title><rect x="263.6" y="739.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.88%)</title><rect x="263.6" y="723.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.88%)</title><rect x="263.6" y="707.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 3.51%)</title><rect x="273.9" y="755.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.9" y="766.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.75%)</title><rect x="294.6" y="739.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.75%)</title><rect x="294.6" y="723.0" width="20.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.44%)</title><rect x="310.2" y="707.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.44%)</title><rect x="315.4" y="803.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 10.96%)</title><rect x="320.5" y="803.0" width="129.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.5" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (25 samples, 10.96%)</title><rect x="320.5" y="787.0" width="129.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.5" y="798.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.95%)</title><rect x="320.5" y="771.0" width="46.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.5" y="782.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.44%)</title><rect x="320.5" y="755.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.5" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.44%)</title><rect x="320.5" y="739.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.63%)</title><rect x="325.7" y="755.0" width="31.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.7" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.63%)</title><rect x="325.7" y="739.0" width="31.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.7" y="750.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.32%)</title><rect x="330.9" y="723.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.32%)</title><rect x="330.9" y="707.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.9" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.32%)</title><rect x="330.9" y="691.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="333.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.32%)</title><rect x="330.9" y="675.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="333.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.44%)</title><rect x="330.9" y="659.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="333.9" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.44%)</title><rect x="330.9" y="643.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="333.9" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.88%)</title><rect x="336.1" y="659.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="339.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.88%)</title><rect x="336.1" y="643.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="339.1" y="654.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.44%)</title><rect x="341.2" y="627.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="344.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.44%)</title><rect x="346.4" y="723.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.44%)</title><rect x="351.6" y="723.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.88%)</title><rect x="356.8" y="755.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.88%)</title><rect x="356.8" y="739.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.8" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.88%)</title><rect x="356.8" y="723.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.44%)</title><rect x="361.9" y="707.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="364.9" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.44%)</title><rect x="361.9" y="691.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="364.9" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.44%)</title><rect x="361.9" y="675.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="364.9" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.44%)</title><rect x="361.9" y="659.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="364.9" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.44%)</title><rect x="361.9" y="643.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="364.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 1.32%)</title><rect x="367.1" y="771.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.44%)</title><rect x="367.1" y="755.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.44%)</title><rect x="367.1" y="739.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="367.1" y="723.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="370.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="367.1" y="707.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="370.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="367.1" y="691.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="370.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="367.1" y="675.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="370.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.44%)</title><rect x="367.1" y="659.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="370.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.88%)</title><rect x="372.3" y="755.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="375.3" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.88%)</title><rect x="372.3" y="739.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="375.3" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 5.70%)</title><rect x="382.6" y="771.0" width="67.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.6" y="782.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 5.70%)</title><rect x="382.6" y="755.0" width="67.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.6" y="766.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.88%)</title><rect x="382.6" y="739.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.88%)</title><rect x="382.6" y="723.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.88%)</title><rect x="382.6" y="707.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.88%)</title><rect x="382.6" y="691.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.88%)</title><rect x="382.6" y="675.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.88%)</title><rect x="382.6" y="659.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.6" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 4.82%)</title><rect x="393.0" y="739.0" width="56.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.0" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 4.39%)</title><rect x="398.2" y="723.0" width="51.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.2" y="734.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.19%)</title><rect x="424.0" y="707.0" width="25.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.0" y="718.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.44%)</title><rect x="439.6" y="691.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.6" y="702.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.44%)</title><rect x="444.7" y="691.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="447.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 26.32%)</title><rect x="449.9" y="803.0" width="310.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.9" y="814.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 26.32%)</title><rect x="449.9" y="787.0" width="310.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.9" y="798.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/2144072261.process (56 samples, 24.56%)</title><rect x="449.9" y="771.0" width="289.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.9" y="782.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (56 samples, 24.56%)</title><rect x="449.9" y="755.0" width="289.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.9" y="766.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (54 samples, 23.68%)</title><rect x="449.9" y="739.0" width="279.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.9" y="750.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.44%)</title><rect x="449.9" y="723.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.9" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.44%)</title><rect x="449.9" y="707.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.9" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.44%)</title><rect x="449.9" y="691.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.9" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.44%)</title><rect x="449.9" y="675.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.9" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.44%)</title><rect x="449.9" y="659.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.9" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.44%)</title><rect x="449.9" y="643.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.9" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.44%)</title><rect x="449.9" y="627.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.9" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.44%)</title><rect x="449.9" y="611.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.9" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.44%)</title><rect x="449.9" y="595.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.9" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (1 samples, 0.44%)</title><rect x="449.9" y="579.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.9" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (1 samples, 0.44%)</title><rect x="449.9" y="563.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.9" y="574.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.44%)</title><rect x="449.9" y="547.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.9" y="558.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.44%)</title><rect x="449.9" y="531.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (50 samples, 21.93%)</title><rect x="455.1" y="723.0" width="258.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.1" y="734.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 21.49%)</title><rect x="460.3" y="707.0" width="253.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.3" y="718.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 16.23%)</title><rect x="522.4" y="691.0" width="191.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="525.4" y="702.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.88%)</title><rect x="527.5" y="675.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="530.5" y="686.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.44%)</title><rect x="537.9" y="675.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="540.9" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.32%)</title><rect x="543.1" y="675.0" width="15.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="546.1" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.44%)</title><rect x="553.4" y="659.0" width="5.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="556.4" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.44%)</title><rect x="558.6" y="675.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="561.6" y="686.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 12.72%)</title><rect x="563.8" y="675.0" width="150.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="566.8" y="686.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 3.07%)</title><rect x="579.3" y="659.0" width="36.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="582.3" y="670.0">__l..</text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.88%)</title><rect x="615.5" y="659.0" width="10.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="618.5" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.95%)</title><rect x="625.9" y="659.0" width="46.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="628.9" y="670.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.44%)</title><rect x="672.5" y="659.0" width="5.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="675.5" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.44%)</title><rect x="677.6" y="659.0" width="5.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="680.6" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.32%)</title><rect x="682.8" y="659.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="685.8" y="670.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (3 samples, 1.32%)</title><rect x="698.3" y="659.0" width="15.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="701.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.32%)</title><rect x="713.9" y="723.0" width="15.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.44%)</title><rect x="724.2" y="707.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="727.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.44%)</title><rect x="724.2" y="691.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="727.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.88%)</title><rect x="729.4" y="739.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.88%)</title><rect x="729.4" y="723.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.88%)</title><rect x="729.4" y="707.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.44%)</title><rect x="739.7" y="771.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="742.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.44%)</title><rect x="739.7" y="755.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.44%)</title><rect x="744.9" y="771.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.44%)</title><rect x="744.9" y="755.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.88%)</title><rect x="750.1" y="771.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="753.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.88%)</title><rect x="760.4" y="803.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.88%)</title><rect x="760.4" y="787.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="763.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.63%)</title><rect x="770.8" y="835.0" width="31.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="773.8" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.63%)</title><rect x="770.8" y="819.0" width="31.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.8" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.32%)</title><rect x="786.3" y="803.0" width="15.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/497777863.accept (3 samples, 1.32%)</title><rect x="786.3" y="787.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="789.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (3 samples, 1.32%)</title><rect x="786.3" y="771.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.32%)</title><rect x="786.3" y="755.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.3" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.32%)</title><rect x="786.3" y="739.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.3" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.32%)</title><rect x="786.3" y="723.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.88%)</title><rect x="801.8" y="883.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="804.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.88%)</title><rect x="801.8" y="867.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.88%)</title><rect x="801.8" y="851.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.88%)</title><rect x="801.8" y="835.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 3.07%)</title><rect x="812.2" y="883.0" width="36.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.2" y="894.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 3.07%)</title><rect x="812.2" y="867.0" width="36.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="815.2" y="878.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.19%)</title><rect x="822.5" y="851.0" width="25.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.5" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.19%)</title><rect x="822.5" y="835.0" width="25.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="825.5" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.19%)</title><rect x="822.5" y="819.0" width="25.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.5" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.19%)</title><rect x="822.5" y="803.0" width="25.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.5" y="814.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.44%)</title><rect x="848.4" y="931.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.access$1600 (1 samples, 0.44%)</title><rect x="848.4" y="915.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.44%)</title><rect x="853.6" y="931.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.44%)</title><rect x="853.6" y="915.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.44%)</title><rect x="853.6" y="899.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.44%)</title><rect x="853.6" y="883.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="856.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.44%)</title><rect x="853.6" y="867.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="856.6" y="878.0"></text>
</g>
<g>
<title>start_thread (64 samples, 28.07%)</title><rect x="858.8" y="931.0" width="331.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="861.8" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (64 samples, 28.07%)</title><rect x="858.8" y="915.0" width="331.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="861.8" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 1.75%)</title><rect x="858.8" y="899.0" width="20.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.8" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 1.75%)</title><rect x="858.8" y="883.0" width="20.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="861.8" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.75%)</title><rect x="858.8" y="867.0" width="20.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.8" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.75%)</title><rect x="858.8" y="851.0" width="20.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.8" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.44%)</title><rect x="874.3" y="835.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.44%)</title><rect x="874.3" y="819.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.3" y="830.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.44%)</title><rect x="874.3" y="803.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.3" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (60 samples, 26.32%)</title><rect x="879.5" y="899.0" width="310.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.5" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 26.32%)</title><rect x="879.5" y="883.0" width="310.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.5" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 26.32%)</title><rect x="879.5" y="867.0" width="310.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.5" y="878.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 26.32%)</title><rect x="879.5" y="851.0" width="310.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.5" y="862.0">CompileBroker::invoke_compiler_on_method(C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (57 samples, 25.00%)</title><rect x="879.5" y="835.0" width="295.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.5" y="846.0">C2Compiler::compile_method(ciEnv*, ciMet..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (57 samples, 25.00%)</title><rect x="879.5" y="819.0" width="295.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.5" y="830.0">Compile::Compile(ciEnv*, C2Compiler*, ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 11.40%)</title><rect x="879.5" y="803.0" width="134.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.5" y="814.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.44%)</title><rect x="879.5" y="787.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.5" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.44%)</title><rect x="879.5" y="771.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.5" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.32%)</title><rect x="884.6" y="787.0" width="15.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.6" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.44%)</title><rect x="884.6" y="771.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="887.6" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.88%)</title><rect x="889.8" y="771.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.8" y="782.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.44%)</title><rect x="889.8" y="755.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.8" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.44%)</title><rect x="895.0" y="755.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.44%)</title><rect x="895.0" y="739.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.44%)</title><rect x="895.0" y="723.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.44%)</title><rect x="900.2" y="787.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.44%)</title><rect x="900.2" y="771.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="903.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.44%)</title><rect x="900.2" y="755.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="903.2" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.44%)</title><rect x="900.2" y="739.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.2" y="750.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.44%)</title><rect x="900.2" y="723.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.2" y="734.0"></text>
</g>
<g>
<title>MachCallNode::bottom_type() const (1 samples, 0.44%)</title><rect x="900.2" y="707.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 9.21%)</title><rect x="905.4" y="787.0" width="108.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="908.4" y="798.0">PhaseChaitin:..</text>
</g>
<g>
<title>MachIdealNode::oper_input_base() const (1 samples, 0.44%)</title><rect x="905.4" y="771.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.44%)</title><rect x="910.5" y="771.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="913.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.44%)</title><rect x="910.5" y="755.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.44%)</title><rect x="910.5" y="739.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.75%)</title><rect x="915.7" y="771.0" width="20.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.44%)</title><rect x="931.2" y="755.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.44%)</title><rect x="931.2" y="739.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.88%)</title><rect x="936.4" y="771.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.44%)</title><rect x="936.4" y="755.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.44%)</title><rect x="941.6" y="755.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.44%)</title><rect x="946.8" y="771.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.44%)</title><rect x="951.9" y="771.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.32%)</title><rect x="957.1" y="771.0" width="15.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.88%)</title><rect x="962.3" y="755.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.3" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.88%)</title><rect x="972.6" y="771.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="975.6" y="782.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.44%)</title><rect x="972.6" y="755.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.6" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.44%)</title><rect x="977.8" y="755.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.44%)</title><rect x="977.8" y="739.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.44%)</title><rect x="983.0" y="771.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.0" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.44%)</title><rect x="983.0" y="755.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.0" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.75%)</title><rect x="988.2" y="771.0" width="20.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.2" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.44%)</title><rect x="1003.7" y="755.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.7" y="766.0"></text>
</g>
<g>
<title>VectorSet::set(unsigned int) (1 samples, 0.44%)</title><rect x="1008.9" y="771.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.9" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 11.40%)</title><rect x="1014.0" y="803.0" width="134.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.0" y="814.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.44%)</title><rect x="1014.0" y="787.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.0" y="798.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1014.0" y="771.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1017.0" y="782.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1014.0" y="755.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.0" y="766.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.44%)</title><rect x="1014.0" y="739.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.0" y="750.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.44%)</title><rect x="1014.0" y="723.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1017.0" y="734.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.44%)</title><rect x="1014.0" y="707.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1017.0" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.44%)</title><rect x="1019.2" y="787.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.2" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.44%)</title><rect x="1019.2" y="771.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 8.77%)</title><rect x="1024.4" y="787.0" width="103.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1027.4" y="798.0">PhaseIdealLo..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.44%)</title><rect x="1024.4" y="771.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.88%)</title><rect x="1029.6" y="771.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.44%)</title><rect x="1039.9" y="771.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 6.58%)</title><rect x="1045.1" y="771.0" width="77.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.1" y="782.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 6.14%)</title><rect x="1050.3" y="755.0" width="72.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.3" y="766.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 6.14%)</title><rect x="1050.3" y="739.0" width="72.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.3" y="750.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.44%)</title><rect x="1112.4" y="723.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.44%)</title><rect x="1117.5" y="723.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.44%)</title><rect x="1122.7" y="771.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.75%)</title><rect x="1127.9" y="787.0" width="20.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.44%)</title><rect x="1127.9" y="771.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.32%)</title><rect x="1133.1" y="771.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="782.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1133.1" y="755.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="766.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.44%)</title><rect x="1133.1" y="739.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.1" y="750.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.44%)</title><rect x="1133.1" y="723.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.1" y="734.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.44%)</title><rect x="1133.1" y="707.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.1" y="718.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.44%)</title><rect x="1138.2" y="755.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.2" y="766.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1143.4" y="755.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.4" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.44%)</title><rect x="1143.4" y="739.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="723.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="707.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="691.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="675.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="659.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="643.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="627.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="611.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="595.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.4" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="579.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="563.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.4" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="547.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.4" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.44%)</title><rect x="1143.4" y="531.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.4" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.44%)</title><rect x="1143.4" y="515.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.75%)</title><rect x="1148.6" y="803.0" width="20.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.75%)</title><rect x="1148.6" y="787.0" width="20.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.75%)</title><rect x="1148.6" y="771.0" width="20.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.75%)</title><rect x="1148.6" y="755.0" width="20.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.75%)</title><rect x="1148.6" y="739.0" width="20.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.44%)</title><rect x="1148.6" y="723.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.44%)</title><rect x="1148.6" y="707.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.44%)</title><rect x="1148.6" y="691.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.44%)</title><rect x="1148.6" y="675.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.6" y="686.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1148.6" y="659.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.32%)</title><rect x="1153.8" y="723.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.32%)</title><rect x="1153.8" y="707.0" width="15.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.32%)</title><rect x="1153.8" y="691.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.32%)</title><rect x="1153.8" y="675.0" width="15.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.32%)</title><rect x="1153.8" y="659.0" width="15.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.32%)</title><rect x="1153.8" y="643.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.32%)</title><rect x="1153.8" y="627.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1153.8" y="611.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1153.8" y="595.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1153.8" y="579.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1153.8" y="563.0" width="10.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1153.8" y="547.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1153.8" y="531.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1153.8" y="515.0" width="10.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1153.8" y="499.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1153.8" y="483.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1153.8" y="467.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1153.8" y="451.0" width="10.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1153.8" y="435.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.8" y="419.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1153.8" y="403.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1153.8" y="387.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1153.8" y="371.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1153.8" y="355.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1153.8" y="339.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1153.8" y="323.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1153.8" y="307.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1153.8" y="291.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1153.8" y="275.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1153.8" y="259.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1153.8" y="243.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.44%)</title><rect x="1153.8" y="227.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.44%)</title><rect x="1153.8" y="211.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.44%)</title><rect x="1153.8" y="195.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.44%)</title><rect x="1153.8" y="179.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.44%)</title><rect x="1153.8" y="163.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.8" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.44%)</title><rect x="1153.8" y="147.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.44%)</title><rect x="1153.8" y="131.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.44%)</title><rect x="1153.8" y="115.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.44%)</title><rect x="1153.8" y="99.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.44%)</title><rect x="1153.8" y="83.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.44%)</title><rect x="1153.8" y="67.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.8" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.44%)</title><rect x="1153.8" y="51.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.8" y="62.0"></text>
</g>
<g>
<title>ciConstantPoolCache::insert(int, void*) (1 samples, 0.44%)</title><rect x="1153.8" y="35.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.8" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.44%)</title><rect x="1158.9" y="419.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1158.9" y="403.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1158.9" y="387.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="398.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.44%)</title><rect x="1158.9" y="371.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1164.1" y="611.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1164.1" y="595.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1164.1" y="579.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1164.1" y="563.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1164.1" y="547.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1164.1" y="531.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1164.1" y="515.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1164.1" y="499.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1164.1" y="483.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1164.1" y="467.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1164.1" y="451.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1164.1" y="435.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1164.1" y="419.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.44%)</title><rect x="1164.1" y="403.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.1" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.44%)</title><rect x="1164.1" y="387.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.44%)</title><rect x="1164.1" y="371.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.44%)</title><rect x="1164.1" y="355.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.44%)</title><rect x="1164.1" y="339.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.44%)</title><rect x="1164.1" y="323.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.44%)</title><rect x="1164.1" y="307.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.44%)</title><rect x="1164.1" y="291.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.44%)</title><rect x="1164.1" y="275.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="286.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.44%)</title><rect x="1164.1" y="259.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.44%)</title><rect x="1164.1" y="243.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.44%)</title><rect x="1164.1" y="227.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="238.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.44%)</title><rect x="1164.1" y="211.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1164.1" y="195.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.44%)</title><rect x="1164.1" y="179.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.44%)</title><rect x="1164.1" y="163.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.44%)</title><rect x="1164.1" y="147.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="158.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.44%)</title><rect x="1164.1" y="131.0" width="5.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1167.1" y="142.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.44%)</title><rect x="1169.3" y="803.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.3" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.44%)</title><rect x="1169.3" y="787.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.3" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.32%)</title><rect x="1174.5" y="835.0" width="15.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.32%)</title><rect x="1174.5" y="819.0" width="15.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.32%)</title><rect x="1174.5" y="803.0" width="15.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.32%)</title><rect x="1174.5" y="787.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.44%)</title><rect x="1174.5" y="771.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.44%)</title><rect x="1174.5" y="755.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.44%)</title><rect x="1174.5" y="739.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>Assembler::pusha() (1 samples, 0.44%)</title><rect x="1174.5" y="723.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.88%)</title><rect x="1179.6" y="771.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="782.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.88%)</title><rect x="1179.6" y="755.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="766.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.44%)</title><rect x="1179.6" y="739.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="750.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.44%)</title><rect x="1179.6" y="723.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.44%)</title><rect x="1184.8" y="739.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="750.0"></text>
</g>
</g>
</svg>
