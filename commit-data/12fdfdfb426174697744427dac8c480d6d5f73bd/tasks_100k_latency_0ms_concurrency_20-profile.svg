<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (149 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 18.12%)</title><rect x="10.0" y="931.0" width="213.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 18.12%)</title><rect x="10.0" y="915.0" width="213.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 12.08%)</title><rect x="10.0" y="899.0" width="142.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/lang/Iterable..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1887569456.accept (18 samples, 12.08%)</title><rect x="10.0" y="883.0" width="142.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 12.08%)</title><rect x="10.0" y="867.0" width="142.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 8.72%)</title><rect x="10.0" y="851.0" width="103.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 8.72%)</title><rect x="10.0" y="835.0" width="103.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 8.72%)</title><rect x="10.0" y="819.0" width="103.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 8.72%)</title><rect x="10.0" y="803.0" width="103.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="814.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 8.72%)</title><rect x="10.0" y="787.0" width="103.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="798.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 8.72%)</title><rect x="10.0" y="771.0" width="103.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="782.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 6.71%)</title><rect x="10.0" y="755.0" width="79.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.34%)</title><rect x="10.0" y="739.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 1.34%)</title><rect x="10.0" y="723.0" width="15.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.67%)</title><rect x="17.9" y="707.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 5.37%)</title><rect x="25.8" y="739.0" width="63.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.8" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 5.37%)</title><rect x="25.8" y="723.0" width="63.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.8" y="734.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 5.37%)</title><rect x="25.8" y="707.0" width="63.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="718.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 5.37%)</title><rect x="25.8" y="691.0" width="63.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.8" y="702.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 5.37%)</title><rect x="25.8" y="675.0" width="63.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.8" y="686.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 5.37%)</title><rect x="25.8" y="659.0" width="63.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="28.8" y="670.0">Unsafe_..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.67%)</title><rect x="25.8" y="643.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="28.8" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.68%)</title><rect x="33.8" y="643.0" width="31.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="36.8" y="654.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.67%)</title><rect x="65.4" y="643.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="68.4" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.34%)</title><rect x="73.4" y="643.0" width="15.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="76.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.34%)</title><rect x="89.2" y="755.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.34%)</title><rect x="89.2" y="739.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.34%)</title><rect x="89.2" y="723.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.67%)</title><rect x="105.0" y="755.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.67%)</title><rect x="105.0" y="739.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.67%)</title><rect x="105.0" y="723.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="108.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 3.36%)</title><rect x="113.0" y="851.0" width="39.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="116.0" y="862.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 3.36%)</title><rect x="113.0" y="835.0" width="39.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.0" y="846.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 2.01%)</title><rect x="128.8" y="819.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.8" y="830.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.34%)</title><rect x="136.7" y="803.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.7" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.34%)</title><rect x="136.7" y="787.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.04%)</title><rect x="152.6" y="899.0" width="71.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.6" y="910.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.04%)</title><rect x="152.6" y="883.0" width="71.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.6" y="894.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.68%)</title><rect x="152.6" y="867.0" width="31.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.6" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.68%)</title><rect x="152.6" y="851.0" width="31.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.6" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.68%)</title><rect x="152.6" y="835.0" width="31.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.6" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.34%)</title><rect x="152.6" y="819.0" width="15.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="155.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.34%)</title><rect x="152.6" y="803.0" width="15.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.67%)</title><rect x="152.6" y="787.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.67%)</title><rect x="152.6" y="771.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.67%)</title><rect x="152.6" y="755.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.67%)</title><rect x="152.6" y="739.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.67%)</title><rect x="152.6" y="723.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.67%)</title><rect x="152.6" y="707.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.67%)</title><rect x="152.6" y="691.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.67%)</title><rect x="160.5" y="787.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.67%)</title><rect x="160.5" y="771.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.67%)</title><rect x="160.5" y="755.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.5" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.67%)</title><rect x="160.5" y="739.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.67%)</title><rect x="168.4" y="819.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.67%)</title><rect x="168.4" y="803.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.67%)</title><rect x="168.4" y="787.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.67%)</title><rect x="176.3" y="819.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.67%)</title><rect x="176.3" y="803.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.67%)</title><rect x="176.3" y="787.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.67%)</title><rect x="176.3" y="771.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.3" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.67%)</title><rect x="176.3" y="755.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.67%)</title><rect x="176.3" y="739.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="179.3" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.67%)</title><rect x="176.3" y="723.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.34%)</title><rect x="184.2" y="867.0" width="15.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.34%)</title><rect x="184.2" y="851.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.67%)</title><rect x="184.2" y="835.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.67%)</title><rect x="184.2" y="819.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.67%)</title><rect x="184.2" y="803.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.67%)</title><rect x="184.2" y="787.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.2" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.67%)</title><rect x="184.2" y="771.0" width="7.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="187.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.67%)</title><rect x="192.1" y="835.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.67%)</title><rect x="192.1" y="819.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.67%)</title><rect x="200.1" y="867.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.67%)</title><rect x="200.1" y="851.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.67%)</title><rect x="200.1" y="835.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.67%)</title><rect x="200.1" y="819.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.67%)</title><rect x="200.1" y="803.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.67%)</title><rect x="200.1" y="787.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.67%)</title><rect x="200.1" y="771.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.67%)</title><rect x="200.1" y="755.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.67%)</title><rect x="200.1" y="739.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.67%)</title><rect x="200.1" y="723.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.67%)</title><rect x="200.1" y="707.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.67%)</title><rect x="208.0" y="867.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.67%)</title><rect x="208.0" y="851.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.67%)</title><rect x="208.0" y="835.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.67%)</title><rect x="208.0" y="819.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.0" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.67%)</title><rect x="208.0" y="803.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.67%)</title><rect x="208.0" y="787.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.67%)</title><rect x="208.0" y="771.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.67%)</title><rect x="208.0" y="755.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.67%)</title><rect x="215.9" y="867.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.67%)</title><rect x="215.9" y="851.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (57 samples, 38.26%)</title><rect x="223.8" y="931.0" width="451.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.8" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (57 samples, 38.26%)</title><rect x="223.8" y="915.0" width="451.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.8" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (57 samples, 38.26%)</title><rect x="223.8" y="899.0" width="451.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.8" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/771225357.run (43 samples, 28.86%)</title><rect x="239.7" y="883.0" width="340.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.7" y="894.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (42 samples, 28.19%)</title><rect x="247.6" y="867.0" width="332.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.6" y="878.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (42 samples, 28.19%)</title><rect x="247.6" y="851.0" width="332.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.6" y="862.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (40 samples, 26.85%)</title><rect x="247.6" y="835.0" width="316.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.6" y="846.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.67%)</title><rect x="255.5" y="819.0" width="7.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="258.5" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.67%)</title><rect x="255.5" y="803.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="258.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 8.72%)</title><rect x="263.4" y="819.0" width="103.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.4" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (13 samples, 8.72%)</title><rect x="263.4" y="803.0" width="103.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.4" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (13 samples, 8.72%)</title><rect x="263.4" y="787.0" width="103.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.4" y="798.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 8.72%)</title><rect x="263.4" y="771.0" width="103.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="266.4" y="782.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 8.72%)</title><rect x="263.4" y="755.0" width="103.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.4" y="766.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 8.72%)</title><rect x="263.4" y="739.0" width="103.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.4" y="750.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 3.36%)</title><rect x="263.4" y="723.0" width="39.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.4" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.34%)</title><rect x="263.4" y="707.0" width="15.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.34%)</title><rect x="263.4" y="691.0" width="15.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.34%)</title><rect x="263.4" y="675.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.34%)</title><rect x="263.4" y="659.0" width="15.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 2.01%)</title><rect x="279.3" y="707.0" width="23.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.3" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 2.01%)</title><rect x="279.3" y="691.0" width="23.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.3" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.67%)</title><rect x="279.3" y="675.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.67%)</title><rect x="279.3" y="659.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.67%)</title><rect x="279.3" y="643.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 1.34%)</title><rect x="287.2" y="675.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.67%)</title><rect x="287.2" y="659.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.67%)</title><rect x="295.1" y="659.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.67%)</title><rect x="295.1" y="643.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.1" y="654.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.67%)</title><rect x="295.1" y="627.0" width="7.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="298.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.70%)</title><rect x="303.0" y="723.0" width="55.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.0" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 2.68%)</title><rect x="303.0" y="707.0" width="31.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.0" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 2.68%)</title><rect x="303.0" y="691.0" width="31.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.0" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 2.68%)</title><rect x="303.0" y="675.0" width="31.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.0" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 2.68%)</title><rect x="303.0" y="659.0" width="31.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.0" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 2.68%)</title><rect x="303.0" y="643.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.0" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 2.01%)</title><rect x="334.7" y="707.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.7" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 2.01%)</title><rect x="334.7" y="691.0" width="23.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.7" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 2.01%)</title><rect x="334.7" y="675.0" width="23.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.7" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 2.01%)</title><rect x="334.7" y="659.0" width="23.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.7" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.67%)</title><rect x="334.7" y="643.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.67%)</title><rect x="334.7" y="627.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.67%)</title><rect x="334.7" y="611.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.67%)</title><rect x="334.7" y="595.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.67%)</title><rect x="334.7" y="579.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.67%)</title><rect x="334.7" y="563.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.67%)</title><rect x="334.7" y="547.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.67%)</title><rect x="334.7" y="531.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 1.34%)</title><rect x="342.6" y="643.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 1.34%)</title><rect x="342.6" y="627.0" width="15.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.67%)</title><rect x="358.5" y="723.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.67%)</title><rect x="358.5" y="707.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.67%)</title><rect x="358.5" y="691.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="361.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.67%)</title><rect x="358.5" y="675.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.67%)</title><rect x="358.5" y="659.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.67%)</title><rect x="358.5" y="643.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (25 samples, 16.78%)</title><rect x="366.4" y="819.0" width="198.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.4" y="830.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 4.03%)</title><rect x="366.4" y="803.0" width="47.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.4" y="814.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 4.03%)</title><rect x="366.4" y="787.0" width="47.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.4" y="798.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 4.03%)</title><rect x="366.4" y="771.0" width="47.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.4" y="782.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 4.03%)</title><rect x="366.4" y="755.0" width="47.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.4" y="766.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.34%)</title><rect x="398.1" y="739.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.34%)</title><rect x="398.1" y="723.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.67%)</title><rect x="406.0" y="707.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.67%)</title><rect x="413.9" y="803.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.9" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.67%)</title><rect x="413.9" y="787.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="416.9" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.67%)</title><rect x="413.9" y="771.0" width="7.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="416.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 8.72%)</title><rect x="421.8" y="803.0" width="103.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="424.8" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 8.72%)</title><rect x="421.8" y="787.0" width="103.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.8" y="798.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 4.03%)</title><rect x="429.7" y="771.0" width="47.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="432.7" y="782.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 4.03%)</title><rect x="429.7" y="755.0" width="47.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="432.7" y="766.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.68%)</title><rect x="437.7" y="739.0" width="31.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.7" y="750.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 2.01%)</title><rect x="437.7" y="723.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="440.7" y="734.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 2.01%)</title><rect x="437.7" y="707.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.7" y="718.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.67%)</title><rect x="453.5" y="691.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="456.5" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.67%)</title><rect x="453.5" y="675.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="456.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.67%)</title><rect x="461.4" y="723.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.4" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.67%)</title><rect x="469.3" y="739.0" width="7.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="472.3" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 4.03%)</title><rect x="477.2" y="771.0" width="47.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="480.2" y="782.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 4.03%)</title><rect x="477.2" y="755.0" width="47.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.2" y="766.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 4.03%)</title><rect x="477.2" y="739.0" width="47.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.2" y="750.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 4.03%)</title><rect x="477.2" y="723.0" width="47.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.2" y="734.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 3.36%)</title><rect x="485.2" y="707.0" width="39.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.2" y="718.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.67%)</title><rect x="501.0" y="691.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.67%)</title><rect x="508.9" y="691.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.9" y="702.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.67%)</title><rect x="516.8" y="691.0" width="8.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="519.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.36%)</title><rect x="524.8" y="803.0" width="39.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.8" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.36%)</title><rect x="524.8" y="787.0" width="39.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.8" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/593819147.process (1 samples, 0.67%)</title><rect x="524.8" y="771.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.67%)</title><rect x="524.8" y="755.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.67%)</title><rect x="524.8" y="739.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="527.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.67%)</title><rect x="524.8" y="723.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="527.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.67%)</title><rect x="524.8" y="707.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.67%)</title><rect x="524.8" y="691.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.8" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.67%)</title><rect x="524.8" y="675.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="527.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.67%)</title><rect x="532.7" y="771.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.67%)</title><rect x="532.7" y="755.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="535.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.67%)</title><rect x="540.6" y="771.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.67%)</title><rect x="540.6" y="755.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.6" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.67%)</title><rect x="540.6" y="739.0" width="7.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="543.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 1.34%)</title><rect x="548.5" y="771.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.67%)</title><rect x="556.4" y="755.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 1.34%)</title><rect x="564.4" y="835.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="567.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.67%)</title><rect x="580.2" y="883.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.67%)</title><rect x="580.2" y="867.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.2" y="878.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.67%)</title><rect x="580.2" y="851.0" width="7.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="583.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.67%)</title><rect x="588.1" y="883.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 6.71%)</title><rect x="596.0" y="883.0" width="79.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.0" y="894.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 6.71%)</title><rect x="596.0" y="867.0" width="79.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.0" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (8 samples, 5.37%)</title><rect x="604.0" y="851.0" width="63.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.0" y="862.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.34%)</title><rect x="611.9" y="835.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="614.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.34%)</title><rect x="611.9" y="819.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="614.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 3.36%)</title><rect x="627.7" y="835.0" width="39.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.7" y="846.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (5 samples, 3.36%)</title><rect x="627.7" y="819.0" width="39.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.7" y="830.0">sun..</text>
</g>
<g>
<title>Unsafe_Park (5 samples, 3.36%)</title><rect x="627.7" y="803.0" width="39.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="630.7" y="814.0">Uns..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.67%)</title><rect x="635.6" y="787.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="638.6" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.67%)</title><rect x="643.6" y="787.0" width="7.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="646.6" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.34%)</title><rect x="651.5" y="787.0" width="15.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="654.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.67%)</title><rect x="667.3" y="851.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.67%)</title><rect x="667.3" y="835.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.3" y="846.0"></text>
</g>
<g>
<title>start_thread (65 samples, 43.62%)</title><rect x="675.2" y="931.0" width="514.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="678.2" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (65 samples, 43.62%)</title><rect x="675.2" y="915.0" width="514.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="678.2" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 7.38%)</title><rect x="675.2" y="899.0" width="87.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="678.2" y="910.0">GangWorker..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.67%)</title><rect x="675.2" y="883.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="678.2" y="894.0"></text>
</g>
<g>
<title>CardTableModRefBS::clear(MemRegion) (1 samples, 0.67%)</title><rect x="675.2" y="867.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="678.2" y="878.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.67%)</title><rect x="675.2" y="851.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="678.2" y="862.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.67%)</title><rect x="683.2" y="883.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="686.2" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.67%)</title><rect x="683.2" y="867.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="686.2" y="878.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.67%)</title><rect x="683.2" y="851.0" width="7.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="686.2" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 6.04%)</title><rect x="691.1" y="883.0" width="71.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.1" y="894.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 4.70%)</title><rect x="691.1" y="867.0" width="55.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="694.1" y="878.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.67%)</title><rect x="691.1" y="851.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="694.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.67%)</title><rect x="691.1" y="835.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.1" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.34%)</title><rect x="699.0" y="851.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.0" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.67%)</title><rect x="706.9" y="835.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="709.9" y="846.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.67%)</title><rect x="706.9" y="819.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="709.9" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.34%)</title><rect x="714.8" y="851.0" width="15.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="717.8" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.34%)</title><rect x="730.7" y="851.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="733.7" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.34%)</title><rect x="746.5" y="867.0" width="15.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="749.5" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.34%)</title><rect x="746.5" y="851.0" width="15.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="749.5" y="862.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.34%)</title><rect x="746.5" y="835.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="749.5" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.34%)</title><rect x="746.5" y="819.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="749.5" y="830.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.34%)</title><rect x="746.5" y="803.0" width="15.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="749.5" y="814.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.34%)</title><rect x="746.5" y="787.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="749.5" y="798.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.67%)</title><rect x="746.5" y="771.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="749.5" y="782.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.67%)</title><rect x="746.5" y="755.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.5" y="766.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.67%)</title><rect x="754.4" y="771.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (54 samples, 36.24%)</title><rect x="762.3" y="899.0" width="427.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="765.3" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 36.24%)</title><rect x="762.3" y="883.0" width="427.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.3" y="894.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (53 samples, 35.57%)</title><rect x="762.3" y="867.0" width="419.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="765.3" y="878.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (49 samples, 32.89%)</title><rect x="762.3" y="851.0" width="388.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="765.3" y="862.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (49 samples, 32.89%)</title><rect x="762.3" y="835.0" width="388.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="765.3" y="846.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 17.45%)</title><rect x="762.3" y="819.0" width="206.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="765.3" y="830.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.67%)</title><rect x="762.3" y="803.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="765.3" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.67%)</title><rect x="762.3" y="787.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="765.3" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.34%)</title><rect x="770.3" y="803.0" width="15.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.3" y="814.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.67%)</title><rect x="778.2" y="787.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.2" y="798.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.67%)</title><rect x="778.2" y="771.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="781.2" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.68%)</title><rect x="786.1" y="803.0" width="31.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="789.1" y="814.0">Ma..</text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.67%)</title><rect x="786.1" y="787.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="789.1" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.34%)</title><rect x="794.0" y="787.0" width="15.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="797.0" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.67%)</title><rect x="809.9" y="787.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="812.9" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.67%)</title><rect x="809.9" y="771.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="812.9" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="809.9" y="755.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="812.9" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.67%)</title><rect x="809.9" y="739.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.9" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.67%)</title><rect x="809.9" y="723.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.9" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.67%)</title><rect x="809.9" y="707.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="812.9" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.67%)</title><rect x="809.9" y="691.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.9" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.67%)</title><rect x="809.9" y="675.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="812.9" y="686.0"></text>
</g>
<g>
<title>Node::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.67%)</title><rect x="817.8" y="803.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="820.8" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.67%)</title><rect x="825.7" y="803.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.7" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.67%)</title><rect x="825.7" y="787.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="828.7" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.67%)</title><rect x="833.6" y="803.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.67%)</title><rect x="833.6" y="787.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.6" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.67%)</title><rect x="833.6" y="771.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="836.6" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.67%)</title><rect x="833.6" y="755.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 10.74%)</title><rect x="841.5" y="803.0" width="126.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="844.5" y="814.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.67%)</title><rect x="841.5" y="787.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.5" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.67%)</title><rect x="841.5" y="771.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.67%)</title><rect x="841.5" y="755.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.67%)</title><rect x="849.5" y="787.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="852.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 2.01%)</title><rect x="857.4" y="787.0" width="23.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="860.4" y="798.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.67%)</title><rect x="873.2" y="771.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 2.68%)</title><rect x="881.1" y="787.0" width="31.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="884.1" y="798.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.67%)</title><rect x="897.0" y="771.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.67%)</title><rect x="904.9" y="771.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="907.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.67%)</title><rect x="904.9" y="755.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="907.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.67%)</title><rect x="912.8" y="787.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.8" y="798.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.67%)</title><rect x="912.8" y="771.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.67%)</title><rect x="920.7" y="787.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.67%)</title><rect x="928.7" y="787.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.7" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.67%)</title><rect x="928.7" y="771.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.7" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 2.01%)</title><rect x="936.6" y="787.0" width="23.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.6" y="798.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.67%)</title><rect x="952.4" y="771.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.4" y="782.0"></text>
</g>
<g>
<title>compareAndSwapINode::ideal_Opcode() const (1 samples, 0.67%)</title><rect x="960.3" y="787.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.3" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 10.74%)</title><rect x="968.3" y="819.0" width="126.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.3" y="830.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.67%)</title><rect x="968.3" y="803.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.3" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.67%)</title><rect x="976.2" y="803.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.67%)</title><rect x="976.2" y="787.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.67%)</title><rect x="976.2" y="771.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.67%)</title><rect x="976.2" y="755.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 6.71%)</title><rect x="984.1" y="803.0" width="79.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.1" y="814.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.34%)</title><rect x="984.1" y="787.0" width="15.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.67%)</title><rect x="992.0" y="771.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.68%)</title><rect x="999.9" y="787.0" width="31.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1002.9" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.68%)</title><rect x="999.9" y="771.0" width="31.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.9" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 2.68%)</title><rect x="999.9" y="755.0" width="31.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.9" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.67%)</title><rect x="999.9" y="739.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.67%)</title><rect x="999.9" y="723.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 2.01%)</title><rect x="1007.9" y="739.0" width="23.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.9" y="750.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.34%)</title><rect x="1031.6" y="787.0" width="15.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.6" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.34%)</title><rect x="1047.4" y="787.0" width="15.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.4" y="798.0"></text>
</g>
<g>
<title>CmpLNode::sub(Type const*, Type const*) const (1 samples, 0.67%)</title><rect x="1047.4" y="771.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.67%)</title><rect x="1055.4" y="771.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.67%)</title><rect x="1055.4" y="755.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1058.4" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.67%)</title><rect x="1055.4" y="739.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.4" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.68%)</title><rect x="1063.3" y="803.0" width="31.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.3" y="814.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.68%)</title><rect x="1063.3" y="787.0" width="31.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.3" y="798.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.67%)</title><rect x="1071.2" y="771.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.2" y="782.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.67%)</title><rect x="1079.1" y="771.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.1" y="782.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.67%)</title><rect x="1087.0" y="771.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 4.03%)</title><rect x="1095.0" y="819.0" width="47.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.0" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 4.03%)</title><rect x="1095.0" y="803.0" width="47.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.0" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 4.03%)</title><rect x="1095.0" y="787.0" width="47.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.0" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 4.03%)</title><rect x="1095.0" y="771.0" width="47.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.0" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 4.03%)</title><rect x="1095.0" y="755.0" width="47.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.0" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 4.03%)</title><rect x="1095.0" y="739.0" width="47.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.0" y="750.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.36%)</title><rect x="1095.0" y="723.0" width="39.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.0" y="734.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.36%)</title><rect x="1095.0" y="707.0" width="39.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.0" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.36%)</title><rect x="1095.0" y="691.0" width="39.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.0" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.36%)</title><rect x="1095.0" y="675.0" width="39.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.0" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.36%)</title><rect x="1095.0" y="659.0" width="39.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.0" y="670.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.36%)</title><rect x="1095.0" y="643.0" width="39.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.0" y="654.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.36%)</title><rect x="1095.0" y="627.0" width="39.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.0" y="638.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.36%)</title><rect x="1095.0" y="611.0" width="39.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.0" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.36%)</title><rect x="1095.0" y="595.0" width="39.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.0" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.36%)</title><rect x="1095.0" y="579.0" width="39.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.0" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.36%)</title><rect x="1095.0" y="563.0" width="39.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.0" y="574.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.36%)</title><rect x="1095.0" y="547.0" width="39.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.0" y="558.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.68%)</title><rect x="1095.0" y="531.0" width="31.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.0" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.68%)</title><rect x="1095.0" y="515.0" width="31.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.0" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.68%)</title><rect x="1095.0" y="499.0" width="31.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.0" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.68%)</title><rect x="1095.0" y="483.0" width="31.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.0" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.68%)</title><rect x="1095.0" y="467.0" width="31.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.0" y="478.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.68%)</title><rect x="1095.0" y="451.0" width="31.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.0" y="462.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.01%)</title><rect x="1095.0" y="435.0" width="23.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.0" y="446.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.01%)</title><rect x="1095.0" y="419.0" width="23.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.0" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.01%)</title><rect x="1095.0" y="403.0" width="23.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.0" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.01%)</title><rect x="1095.0" y="387.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.0" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.01%)</title><rect x="1095.0" y="371.0" width="23.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.0" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.34%)</title><rect x="1095.0" y="355.0" width="15.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.34%)</title><rect x="1095.0" y="339.0" width="15.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.34%)</title><rect x="1095.0" y="323.0" width="15.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.34%)</title><rect x="1095.0" y="307.0" width="15.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1095.0" y="291.0" width="15.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1095.0" y="275.0" width="15.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.34%)</title><rect x="1095.0" y="259.0" width="15.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.0" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.67%)</title><rect x="1095.0" y="243.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.0" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.67%)</title><rect x="1095.0" y="227.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.0" y="238.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.67%)</title><rect x="1095.0" y="211.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.0" y="222.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.67%)</title><rect x="1095.0" y="195.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.0" y="206.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.67%)</title><rect x="1095.0" y="179.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1102.9" y="243.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1102.9" y="227.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1102.9" y="211.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1102.9" y="195.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1102.9" y="179.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.67%)</title><rect x="1102.9" y="163.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.67%)</title><rect x="1102.9" y="147.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.67%)</title><rect x="1102.9" y="131.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.9" y="142.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.67%)</title><rect x="1102.9" y="115.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.9" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.67%)</title><rect x="1102.9" y="99.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.9" y="110.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.67%)</title><rect x="1102.9" y="83.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.9" y="94.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.67%)</title><rect x="1102.9" y="67.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.9" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.67%)</title><rect x="1102.9" y="51.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.9" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.67%)</title><rect x="1102.9" y="35.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.67%)</title><rect x="1110.8" y="355.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.8" y="366.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.67%)</title><rect x="1110.8" y="339.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.8" y="350.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.67%)</title><rect x="1110.8" y="323.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.8" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.67%)</title><rect x="1110.8" y="307.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.8" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.67%)</title><rect x="1110.8" y="291.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.8" y="302.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.67%)</title><rect x="1110.8" y="275.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.8" y="286.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.67%)</title><rect x="1110.8" y="259.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.8" y="270.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.67%)</title><rect x="1110.8" y="243.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.8" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1118.7" y="435.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1118.7" y="419.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1118.7" y="403.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1118.7" y="387.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1118.7" y="371.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1118.7" y="355.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1118.7" y="339.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="350.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.67%)</title><rect x="1118.7" y="323.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.7" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1126.6" y="531.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="542.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1126.6" y="515.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.67%)</title><rect x="1126.6" y="499.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.6" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="723.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="707.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="691.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="675.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="659.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="643.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="627.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="611.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="595.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="579.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="563.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="547.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="531.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="515.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="499.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="483.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="467.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="451.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="435.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.67%)</title><rect x="1134.6" y="419.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.67%)</title><rect x="1134.6" y="403.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="414.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.67%)</title><rect x="1134.6" y="387.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="398.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="371.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="382.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long*, unsigned long) (1 samples, 0.67%)</title><rect x="1134.6" y="355.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="366.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.67%)</title><rect x="1142.5" y="819.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.5" y="830.0"></text>
</g>
<g>
<title>ReplacedNodes::reset() (1 samples, 0.67%)</title><rect x="1142.5" y="803.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.5" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.01%)</title><rect x="1150.4" y="851.0" width="23.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="862.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.01%)</title><rect x="1150.4" y="835.0" width="23.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="846.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.01%)</title><rect x="1150.4" y="819.0" width="23.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="830.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 2.01%)</title><rect x="1150.4" y="803.0" width="23.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="814.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.34%)</title><rect x="1150.4" y="787.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.34%)</title><rect x="1150.4" y="771.0" width="15.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.34%)</title><rect x="1150.4" y="755.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.34%)</title><rect x="1150.4" y="739.0" width="15.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.67%)</title><rect x="1150.4" y="723.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.67%)</title><rect x="1150.4" y="707.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.67%)</title><rect x="1150.4" y="691.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.67%)</title><rect x="1150.4" y="675.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.67%)</title><rect x="1150.4" y="659.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.67%)</title><rect x="1150.4" y="643.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.67%)</title><rect x="1150.4" y="627.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::if_zero(ValueType*, Instruction::Condition) (1 samples, 0.67%)</title><rect x="1150.4" y="611.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.67%)</title><rect x="1150.4" y="595.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="606.0"></text>
</g>
<g>
<title>Constant::hash() const (1 samples, 0.67%)</title><rect x="1150.4" y="579.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.4" y="590.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(IRScope*, ValueStack*) (1 samples, 0.67%)</title><rect x="1158.3" y="723.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.67%)</title><rect x="1166.2" y="787.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.67%)</title><rect x="1166.2" y="771.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.2" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.67%)</title><rect x="1166.2" y="755.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="766.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.67%)</title><rect x="1174.2" y="851.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.67%)</title><rect x="1174.2" y="835.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.67%)</title><rect x="1174.2" y="819.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.67%)</title><rect x="1174.2" y="803.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.67%)</title><rect x="1174.2" y="787.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.67%)</title><rect x="1174.2" y="771.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.67%)</title><rect x="1174.2" y="755.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.67%)</title><rect x="1182.1" y="867.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="878.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio() (1 samples, 0.67%)</title><rect x="1182.1" y="851.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="862.0"></text>
</g>
</g>
</svg>
