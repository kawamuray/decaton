<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (213 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (34 samples, 15.96%)</title><rect x="10.0" y="803.0" width="188.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 15.96%)</title><rect x="10.0" y="787.0" width="188.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (23 samples, 10.80%)</title><rect x="10.0" y="771.0" width="127.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/96093084.accept (21 samples, 9.86%)</title><rect x="10.0" y="755.0" width="116.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (21 samples, 9.86%)</title><rect x="10.0" y="739.0" width="116.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 6.57%)</title><rect x="10.0" y="723.0" width="77.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 6.57%)</title><rect x="10.0" y="707.0" width="77.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 6.57%)</title><rect x="10.0" y="691.0" width="77.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="702.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 6.57%)</title><rect x="10.0" y="675.0" width="77.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 6.57%)</title><rect x="10.0" y="659.0" width="77.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 6.10%)</title><rect x="15.5" y="643.0" width="72.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.5" y="654.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 3.76%)</title><rect x="15.5" y="627.0" width="44.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.5" y="638.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 3.76%)</title><rect x="15.5" y="611.0" width="44.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 3.76%)</title><rect x="15.5" y="595.0" width="44.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.5" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 3.76%)</title><rect x="15.5" y="579.0" width="44.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.5" y="590.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 3.76%)</title><rect x="15.5" y="563.0" width="44.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.5" y="574.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 3.76%)</title><rect x="15.5" y="547.0" width="44.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="558.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 2.82%)</title><rect x="15.5" y="531.0" width="33.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.5" y="542.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.41%)</title><rect x="15.5" y="515.0" width="16.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="18.5" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 1.41%)</title><rect x="32.2" y="515.0" width="16.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="35.2" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.47%)</title><rect x="48.8" y="531.0" width="5.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="51.8" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.47%)</title><rect x="54.3" y="531.0" width="5.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="57.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.35%)</title><rect x="59.9" y="627.0" width="27.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.9" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.35%)</title><rect x="59.9" y="611.0" width="27.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.9" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.35%)</title><rect x="59.9" y="595.0" width="27.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.9" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.35%)</title><rect x="59.9" y="579.0" width="27.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.9" y="590.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.47%)</title><rect x="87.6" y="723.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.47%)</title><rect x="87.6" y="707.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 2.82%)</title><rect x="93.1" y="723.0" width="33.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.1" y="734.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.82%)</title><rect x="93.1" y="707.0" width="33.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.1" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.41%)</title><rect x="109.7" y="691.0" width="16.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="112.7" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.41%)</title><rect x="109.7" y="675.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.7" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.41%)</title><rect x="109.7" y="659.0" width="16.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.7" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.47%)</title><rect x="120.8" y="643.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="123.8" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="126.3" y="755.0" width="5.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="129.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.47%)</title><rect x="131.9" y="755.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.47%)</title><rect x="131.9" y="739.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.47%)</title><rect x="131.9" y="723.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.47%)</title><rect x="131.9" y="707.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.47%)</title><rect x="131.9" y="691.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.47%)</title><rect x="131.9" y="675.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.16%)</title><rect x="137.4" y="771.0" width="61.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.4" y="782.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.16%)</title><rect x="137.4" y="755.0" width="61.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.4" y="766.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.88%)</title><rect x="137.4" y="739.0" width="22.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.4" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.88%)</title><rect x="137.4" y="723.0" width="22.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.4" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.88%)</title><rect x="137.4" y="707.0" width="22.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.4" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.88%)</title><rect x="137.4" y="691.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.4" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.88%)</title><rect x="137.4" y="675.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.4" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.94%)</title><rect x="143.0" y="659.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.94%)</title><rect x="143.0" y="643.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.47%)</title><rect x="148.5" y="627.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.47%)</title><rect x="148.5" y="611.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.47%)</title><rect x="148.5" y="595.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="151.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.47%)</title><rect x="154.0" y="659.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.47%)</title><rect x="154.0" y="643.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.47%)</title><rect x="154.0" y="627.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.0" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.47%)</title><rect x="154.0" y="611.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="157.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.94%)</title><rect x="159.6" y="739.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.47%)</title><rect x="159.6" y="723.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.47%)</title><rect x="159.6" y="707.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.47%)</title><rect x="159.6" y="691.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="159.6" y="675.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.47%)</title><rect x="159.6" y="659.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.47%)</title><rect x="159.6" y="643.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.47%)</title><rect x="159.6" y="627.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="162.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.47%)</title><rect x="159.6" y="611.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.47%)</title><rect x="159.6" y="595.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.6" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.47%)</title><rect x="159.6" y="579.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="162.6" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="159.6" y="563.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="162.6" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="159.6" y="547.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="162.6" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.47%)</title><rect x="159.6" y="531.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="162.6" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.47%)</title><rect x="159.6" y="515.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="162.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.47%)</title><rect x="165.1" y="723.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.47%)</title><rect x="165.1" y="707.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.1" y="718.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.47%)</title><rect x="165.1" y="691.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="168.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.41%)</title><rect x="170.7" y="739.0" width="16.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.94%)</title><rect x="170.7" y="723.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.94%)</title><rect x="170.7" y="707.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.47%)</title><rect x="170.7" y="691.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.47%)</title><rect x="170.7" y="675.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.47%)</title><rect x="170.7" y="659.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="170.7" y="643.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="170.7" y="627.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="170.7" y="611.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.47%)</title><rect x="176.2" y="691.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.ready (1 samples, 0.47%)</title><rect x="176.2" y="675.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.2" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.47%)</title><rect x="176.2" y="659.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="179.2" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="176.2" y="643.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="179.2" y="654.0"></text>
</g>
<g>
<title>CompiledIC::CompiledIC(nmethod*, NativeCall*) (1 samples, 0.47%)</title><rect x="176.2" y="627.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="179.2" y="638.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.47%)</title><rect x="176.2" y="611.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="179.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.47%)</title><rect x="181.7" y="723.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.47%)</title><rect x="181.7" y="707.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.47%)</title><rect x="181.7" y="691.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.47%)</title><rect x="181.7" y="675.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.47%)</title><rect x="181.7" y="659.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.47%)</title><rect x="181.7" y="643.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.47%)</title><rect x="181.7" y="627.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.47%)</title><rect x="181.7" y="611.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.47%)</title><rect x="181.7" y="595.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.94%)</title><rect x="187.3" y="739.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.94%)</title><rect x="187.3" y="723.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.47%)</title><rect x="187.3" y="707.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.47%)</title><rect x="187.3" y="691.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.47%)</title><rect x="187.3" y="675.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="187.3" y="659.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.47%)</title><rect x="192.8" y="707.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.47%)</title><rect x="192.8" y="691.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.8" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.47%)</title><rect x="192.8" y="675.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.47%)</title><rect x="192.8" y="659.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.47%)</title><rect x="192.8" y="643.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.47%)</title><rect x="192.8" y="627.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.47%)</title><rect x="192.8" y="611.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (49 samples, 23.00%)</title><rect x="198.4" y="803.0" width="271.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.4" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (49 samples, 23.00%)</title><rect x="198.4" y="787.0" width="271.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.4" y="798.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (49 samples, 23.00%)</title><rect x="198.4" y="771.0" width="271.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.4" y="782.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/367668173.run (31 samples, 14.55%)</title><rect x="209.4" y="755.0" width="171.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="212.4" y="766.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (31 samples, 14.55%)</title><rect x="209.4" y="739.0" width="171.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.4" y="750.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (31 samples, 14.55%)</title><rect x="209.4" y="723.0" width="171.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.4" y="734.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (28 samples, 13.15%)</title><rect x="209.4" y="707.0" width="155.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.4" y="718.0">com/linecorp/decaton..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="215.0" y="691.0" width="5.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="218.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 4.69%)</title><rect x="220.5" y="691.0" width="55.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.5" y="702.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 4.69%)</title><rect x="220.5" y="675.0" width="55.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.5" y="686.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 4.69%)</title><rect x="220.5" y="659.0" width="55.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="670.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.69%)</title><rect x="220.5" y="643.0" width="55.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.5" y="654.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.69%)</title><rect x="220.5" y="627.0" width="55.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.5" y="638.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 4.69%)</title><rect x="220.5" y="611.0" width="55.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.88%)</title><rect x="220.5" y="595.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.5" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.47%)</title><rect x="237.1" y="579.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 1.88%)</title><rect x="242.7" y="595.0" width="22.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.7" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.88%)</title><rect x="242.7" y="579.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.7" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.88%)</title><rect x="242.7" y="563.0" width="22.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.7" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.88%)</title><rect x="242.7" y="547.0" width="22.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.7" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.88%)</title><rect x="242.7" y="531.0" width="22.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.7" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.47%)</title><rect x="253.8" y="515.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.47%)</title><rect x="253.8" y="499.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.47%)</title><rect x="259.3" y="515.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.47%)</title><rect x="259.3" y="499.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.47%)</title><rect x="259.3" y="483.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.94%)</title><rect x="264.8" y="595.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.94%)</title><rect x="264.8" y="579.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.94%)</title><rect x="264.8" y="563.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.94%)</title><rect x="264.8" y="547.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.94%)</title><rect x="264.8" y="531.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (16 samples, 7.51%)</title><rect x="275.9" y="691.0" width="88.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.9" y="702.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.35%)</title><rect x="287.0" y="675.0" width="27.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.0" y="686.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.88%)</title><rect x="292.5" y="659.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.5" y="670.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.88%)</title><rect x="292.5" y="643.0" width="22.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.5" y="654.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.47%)</title><rect x="292.5" y="627.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.47%)</title><rect x="292.5" y="611.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="298.1" y="627.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.47%)</title><rect x="298.1" y="611.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.47%)</title><rect x="298.1" y="595.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.94%)</title><rect x="303.6" y="627.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.47%)</title><rect x="309.2" y="611.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="314.7" y="675.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="314.7" y="659.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.47%)</title><rect x="314.7" y="643.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (7 samples, 3.29%)</title><rect x="320.2" y="675.0" width="38.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.2" y="686.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (7 samples, 3.29%)</title><rect x="320.2" y="659.0" width="38.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.2" y="670.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.94%)</title><rect x="320.2" y="643.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.2" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="325.8" y="627.0" width="5.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="328.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="325.8" y="611.0" width="5.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="328.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.94%)</title><rect x="331.3" y="643.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.47%)</title><rect x="336.9" y="627.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.9" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.41%)</title><rect x="342.4" y="643.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.4" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.41%)</title><rect x="342.4" y="627.0" width="16.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.41%)</title><rect x="342.4" y="611.0" width="16.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="345.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.41%)</title><rect x="342.4" y="595.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.94%)</title><rect x="347.9" y="579.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="350.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.47%)</title><rect x="353.5" y="563.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.47%)</title><rect x="359.0" y="675.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.47%)</title><rect x="359.0" y="659.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.47%)</title><rect x="359.0" y="643.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/1766583870.accept (1 samples, 0.47%)</title><rect x="359.0" y="627.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (1 samples, 0.47%)</title><rect x="359.0" y="611.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.47%)</title><rect x="359.0" y="595.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.0" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.47%)</title><rect x="359.0" y="579.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="362.0" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.47%)</title><rect x="359.0" y="563.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.0" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="359.0" y="547.0" width="5.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="362.0" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="359.0" y="531.0" width="5.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="362.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.47%)</title><rect x="364.6" y="707.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.94%)</title><rect x="370.1" y="707.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="373.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.94%)</title><rect x="370.1" y="691.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="373.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.94%)</title><rect x="370.1" y="675.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/1766583870.accept (2 samples, 0.94%)</title><rect x="370.1" y="659.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (2 samples, 0.94%)</title><rect x="370.1" y="643.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="373.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.94%)</title><rect x="370.1" y="627.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.1" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.94%)</title><rect x="370.1" y="611.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.1" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.94%)</title><rect x="370.1" y="595.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.47%)</title><rect x="381.2" y="755.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.47%)</title><rect x="381.2" y="739.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.2" y="750.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.47%)</title><rect x="381.2" y="723.0" width="5.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="384.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.47%)</title><rect x="381.2" y="707.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="384.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.94%)</title><rect x="386.7" y="755.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 6.10%)</title><rect x="397.8" y="755.0" width="72.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.8" y="766.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 6.10%)</title><rect x="397.8" y="739.0" width="72.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.8" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 6.10%)</title><rect x="397.8" y="723.0" width="72.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.8" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.47%)</title><rect x="408.9" y="707.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.47%)</title><rect x="408.9" y="691.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.47%)</title><rect x="408.9" y="675.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.47%)</title><rect x="408.9" y="659.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 4.69%)</title><rect x="414.4" y="707.0" width="55.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.4" y="718.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 4.69%)</title><rect x="414.4" y="691.0" width="55.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.4" y="702.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 3.76%)</title><rect x="425.5" y="675.0" width="44.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="428.5" y="686.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.47%)</title><rect x="425.5" y="659.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="428.5" y="670.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.94%)</title><rect x="431.0" y="659.0" width="11.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="434.0" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.41%)</title><rect x="442.1" y="659.0" width="16.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="445.1" y="670.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.47%)</title><rect x="458.7" y="659.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="461.7" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.47%)</title><rect x="464.3" y="659.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="467.3" y="670.0"></text>
</g>
<g>
<title>start_thread (130 samples, 61.03%)</title><rect x="469.8" y="803.0" width="720.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="472.8" y="814.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (130 samples, 61.03%)</title><rect x="469.8" y="787.0" width="720.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="472.8" y="798.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 6.57%)</title><rect x="469.8" y="771.0" width="77.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="472.8" y="782.0">GangWorke..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (14 samples, 6.57%)</title><rect x="469.8" y="755.0" width="77.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="472.8" y="766.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 5.63%)</title><rect x="469.8" y="739.0" width="66.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="472.8" y="750.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.94%)</title><rect x="486.4" y="723.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="489.4" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.47%)</title><rect x="492.0" y="707.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.0" y="718.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (6 samples, 2.82%)</title><rect x="497.5" y="723.0" width="33.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="500.5" y="734.0">Ge..</text>
</g>
<g>
<title>SpinPause (1 samples, 0.47%)</title><rect x="530.8" y="723.0" width="5.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="533.8" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.94%)</title><rect x="536.3" y="739.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.3" y="750.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.94%)</title><rect x="536.3" y="723.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="539.3" y="734.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.94%)</title><rect x="536.3" y="707.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.3" y="718.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.94%)</title><rect x="536.3" y="691.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.3" y="702.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.47%)</title><rect x="541.8" y="675.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="544.8" y="686.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_size(oopDesc*) const (1 samples, 0.47%)</title><rect x="541.8" y="659.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="544.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (116 samples, 54.46%)</title><rect x="547.4" y="771.0" width="642.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="550.4" y="782.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (116 samples, 54.46%)</title><rect x="547.4" y="755.0" width="642.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="550.4" y="766.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (116 samples, 54.46%)</title><rect x="547.4" y="739.0" width="642.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="550.4" y="750.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (114 samples, 53.52%)</title><rect x="547.4" y="723.0" width="631.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="550.4" y="734.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (114 samples, 53.52%)</title><rect x="547.4" y="707.0" width="631.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="550.4" y="718.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 26.76%)</title><rect x="547.4" y="691.0" width="315.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="550.4" y="702.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.94%)</title><rect x="547.4" y="675.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.4" y="686.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.94%)</title><rect x="547.4" y="659.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="550.4" y="670.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.94%)</title><rect x="547.4" y="643.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="550.4" y="654.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.94%)</title><rect x="547.4" y="627.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.4" y="638.0"></text>
</g>
<g>
<title>MachPrologNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.47%)</title><rect x="547.4" y="611.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="550.4" y="622.0"></text>
</g>
<g>
<title>MacroAssembler::verified_entry(int, int, bool) (1 samples, 0.47%)</title><rect x="547.4" y="595.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="550.4" y="606.0"></text>
</g>
<g>
<title>MacroAssembler::bang_stack_with_offset(int) (1 samples, 0.47%)</title><rect x="547.4" y="579.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="550.4" y="590.0"></text>
</g>
<g>
<title>loadUSNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.47%)</title><rect x="552.9" y="611.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="555.9" y="622.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.47%)</title><rect x="558.5" y="675.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="561.5" y="686.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.47%)</title><rect x="558.5" y="659.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.5" y="670.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.47%)</title><rect x="564.0" y="675.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.0" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.82%)</title><rect x="569.5" y="675.0" width="33.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="572.5" y="686.0">Ma..</text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.47%)</title><rect x="569.5" y="659.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="572.5" y="670.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.47%)</title><rect x="575.1" y="659.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="578.1" y="670.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.88%)</title><rect x="580.6" y="659.0" width="22.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="583.6" y="670.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.47%)</title><rect x="586.2" y="643.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.2" y="654.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.47%)</title><rect x="591.7" y="643.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="594.7" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.47%)</title><rect x="597.2" y="643.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="600.2" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.47%)</title><rect x="597.2" y="627.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.2" y="638.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.47%)</title><rect x="597.2" y="611.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.2" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.41%)</title><rect x="602.8" y="675.0" width="16.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="605.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.41%)</title><rect x="602.8" y="659.0" width="16.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="605.8" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="608.3" y="643.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.3" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="613.8" y="643.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 20.66%)</title><rect x="619.4" y="675.0" width="243.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="622.4" y="686.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.47%)</title><rect x="619.4" y="659.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="622.4" y="670.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.94%)</title><rect x="624.9" y="659.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.94%)</title><rect x="636.0" y="659.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="639.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.47%)</title><rect x="641.5" y="643.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="644.5" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="641.5" y="627.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="644.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.88%)</title><rect x="647.1" y="659.0" width="22.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.1" y="670.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.47%)</title><rect x="658.2" y="643.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.2" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.47%)</title><rect x="663.7" y="643.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="666.7" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="663.7" y="627.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="666.7" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.82%)</title><rect x="669.2" y="659.0" width="33.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="672.2" y="670.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.47%)</title><rect x="691.4" y="643.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.4" y="654.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.47%)</title><rect x="696.9" y="643.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="699.9" y="654.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.47%)</title><rect x="696.9" y="627.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="699.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.35%)</title><rect x="702.5" y="659.0" width="27.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="705.5" y="670.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.47%)</title><rect x="708.0" y="643.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.41%)</title><rect x="713.6" y="643.0" width="16.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="716.6" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="724.6" y="627.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.47%)</title><rect x="730.2" y="659.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.47%)</title><rect x="735.7" y="659.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.7" y="670.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.47%)</title><rect x="735.7" y="643.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="738.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (6 samples, 2.82%)</title><rect x="741.3" y="659.0" width="33.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="744.3" y="670.0">Ph..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="752.3" y="643.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="755.3" y="654.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.47%)</title><rect x="757.9" y="643.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="760.9" y="654.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (2 samples, 0.94%)</title><rect x="763.4" y="643.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="766.4" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.41%)</title><rect x="774.5" y="659.0" width="16.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="777.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.94%)</title><rect x="780.0" y="643.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.0" y="654.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.41%)</title><rect x="791.1" y="659.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.1" y="670.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.41%)</title><rect x="791.1" y="643.0" width="16.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.1" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.41%)</title><rect x="791.1" y="627.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.1" y="638.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.47%)</title><rect x="791.1" y="611.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.1" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="791.1" y="595.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="794.1" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.47%)</title><rect x="796.7" y="611.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="799.7" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.47%)</title><rect x="802.2" y="611.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="805.2" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.41%)</title><rect x="807.7" y="659.0" width="16.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.7" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="818.8" y="643.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="821.8" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 1.41%)</title><rect x="824.4" y="659.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="827.4" y="670.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 1.41%)</title><rect x="824.4" y="643.0" width="16.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.4" y="654.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.88%)</title><rect x="841.0" y="659.0" width="22.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.0" y="670.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.94%)</title><rect x="852.1" y="643.0" width="11.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="855.1" y="654.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.47%)</title><rect x="857.6" y="627.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.6" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 23.00%)</title><rect x="863.1" y="691.0" width="271.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.1" y="702.0">Compile::Optimize()</text>
</g>
<g>
<title>CmpNode::bottom_type() const (1 samples, 0.47%)</title><rect x="863.1" y="675.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 1.88%)</title><rect x="868.7" y="675.0" width="22.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="871.7" y="686.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 1.88%)</title><rect x="868.7" y="659.0" width="22.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.7" y="670.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.47%)</title><rect x="874.2" y="643.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="877.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.47%)</title><rect x="874.2" y="627.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.2" y="638.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray() (1 samples, 0.47%)</title><rect x="874.2" y="611.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.94%)</title><rect x="879.8" y="643.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.94%)</title><rect x="879.8" y="627.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.94%)</title><rect x="879.8" y="611.0" width="11.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.47%)</title><rect x="879.8" y="595.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.8" y="606.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.47%)</title><rect x="879.8" y="579.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.8" y="590.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.47%)</title><rect x="879.8" y="563.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="595.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="579.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="888.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="563.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="547.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="531.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="515.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="499.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="483.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="888.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="467.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="451.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.3" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="435.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.3" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="419.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.3" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="403.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="888.3" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="387.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.3" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="371.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.3" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="355.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.3" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="339.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="888.3" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="323.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.3" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="307.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="888.3" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.47%)</title><rect x="885.3" y="291.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.3" y="302.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.94%)</title><rect x="890.8" y="675.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="893.8" y="686.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.47%)</title><rect x="896.4" y="659.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="899.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (32 samples, 15.02%)</title><rect x="901.9" y="675.0" width="177.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.9" y="686.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 2.35%)</title><rect x="901.9" y="659.0" width="27.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.9" y="670.0">P..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.94%)</title><rect x="918.5" y="643.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.94%)</title><rect x="929.6" y="659.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 8.92%)</title><rect x="940.7" y="659.0" width="105.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="943.7" y="670.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 7.51%)</title><rect x="957.3" y="643.0" width="88.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.3" y="654.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 7.51%)</title><rect x="957.3" y="627.0" width="88.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.3" y="638.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (14 samples, 6.57%)</title><rect x="968.4" y="611.0" width="77.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.4" y="622.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.41%)</title><rect x="1046.0" y="659.0" width="16.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.94%)</title><rect x="1051.5" y="643.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="1062.6" y="659.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.6" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.94%)</title><rect x="1068.1" y="659.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.1" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.47%)</title><rect x="1068.1" y="643.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.1" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1068.1" y="627.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.1" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1068.1" y="611.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.1" y="622.0"></text>
</g>
<g>
<title>RegionNode::hash() const (1 samples, 0.47%)</title><rect x="1073.7" y="643.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.76%)</title><rect x="1079.2" y="675.0" width="44.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.2" y="686.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="1079.2" y="659.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.2" y="670.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.47%)</title><rect x="1079.2" y="643.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.2" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 3.29%)</title><rect x="1084.7" y="659.0" width="38.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.7" y="670.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1084.7" y="643.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.7" y="654.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.47%)</title><rect x="1084.7" y="627.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.7" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.94%)</title><rect x="1090.3" y="643.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.3" y="654.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1090.3" y="627.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.3" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1090.3" y="611.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.3" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1090.3" y="595.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.3" y="606.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.47%)</title><rect x="1095.8" y="627.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.8" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.47%)</title><rect x="1095.8" y="611.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.8" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="1095.8" y="595.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.8" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1101.4" y="643.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 1.41%)</title><rect x="1106.9" y="643.0" width="16.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.9" y="654.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.47%)</title><rect x="1118.0" y="627.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.0" y="638.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.47%)</title><rect x="1118.0" y="611.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.0" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.47%)</title><rect x="1123.5" y="675.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.47%)</title><rect x="1123.5" y="659.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.5" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.47%)</title><rect x="1123.5" y="643.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.47%)</title><rect x="1123.5" y="627.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.47%)</title><rect x="1123.5" y="611.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.5" y="622.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.47%)</title><rect x="1129.1" y="675.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.1" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.47%)</title><rect x="1129.1" y="659.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.82%)</title><rect x="1134.6" y="691.0" width="33.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.82%)</title><rect x="1134.6" y="675.0" width="33.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.6" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.82%)</title><rect x="1134.6" y="659.0" width="33.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.6" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.82%)</title><rect x="1134.6" y="643.0" width="33.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.6" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.82%)</title><rect x="1134.6" y="627.0" width="33.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.6" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.82%)</title><rect x="1134.6" y="611.0" width="33.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.6" y="622.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.88%)</title><rect x="1134.6" y="595.0" width="22.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="606.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.88%)</title><rect x="1134.6" y="579.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.6" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.88%)</title><rect x="1134.6" y="563.0" width="22.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.88%)</title><rect x="1134.6" y="547.0" width="22.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.6" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.88%)</title><rect x="1134.6" y="531.0" width="22.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.6" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.88%)</title><rect x="1134.6" y="515.0" width="22.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.6" y="526.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1134.6" y="499.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1134.6" y="483.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.6" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="1134.6" y="467.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="1134.6" y="451.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.6" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="1134.6" y="435.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1134.6" y="419.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.47%)</title><rect x="1134.6" y="403.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.41%)</title><rect x="1140.1" y="499.0" width="16.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.41%)</title><rect x="1140.1" y="483.0" width="16.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.41%)</title><rect x="1140.1" y="467.0" width="16.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.41%)</title><rect x="1140.1" y="451.0" width="16.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.41%)</title><rect x="1140.1" y="435.0" width="16.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1140.1" y="419.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="403.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="387.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1140.1" y="371.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1140.1" y="355.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1140.1" y="339.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1140.1" y="323.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1140.1" y="307.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1140.1" y="291.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1140.1" y="275.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1140.1" y="259.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1140.1" y="243.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1140.1" y="227.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1140.1" y="211.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1140.1" y="195.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1140.1" y="179.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1140.1" y="163.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1140.1" y="147.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1140.1" y="131.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1140.1" y="115.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1140.1" y="99.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1140.1" y="83.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1140.1" y="67.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1140.1" y="51.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="62.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.47%)</title><rect x="1140.1" y="35.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.47%)</title><rect x="1145.7" y="323.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.47%)</title><rect x="1151.2" y="419.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.47%)</title><rect x="1151.2" y="403.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="414.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.47%)</title><rect x="1151.2" y="387.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.47%)</title><rect x="1151.2" y="371.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="382.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1151.2" y="355.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="366.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1151.2" y="339.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.47%)</title><rect x="1151.2" y="323.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="334.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.47%)</title><rect x="1151.2" y="307.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1156.8" y="595.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1156.8" y="579.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1156.8" y="563.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1156.8" y="547.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1156.8" y="531.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1156.8" y="515.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1156.8" y="499.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1156.8" y="483.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1156.8" y="467.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1156.8" y="451.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1156.8" y="435.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1156.8" y="419.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1156.8" y="403.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1156.8" y="387.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1156.8" y="371.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1156.8" y="355.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1156.8" y="339.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1156.8" y="323.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1156.8" y="307.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="318.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1156.8" y="291.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="302.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.47%)</title><rect x="1156.8" y="275.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.8" y="286.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1156.8" y="259.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.8" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1156.8" y="243.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.8" y="254.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.47%)</title><rect x="1156.8" y="227.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="238.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.47%)</title><rect x="1156.8" y="211.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="222.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.47%)</title><rect x="1156.8" y="195.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1162.3" y="595.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.3" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1162.3" y="579.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1162.3" y="563.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1162.3" y="547.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.3" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.47%)</title><rect x="1162.3" y="531.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.3" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="1162.3" y="515.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.3" y="526.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.47%)</title><rect x="1162.3" y="499.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.3" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="1162.3" y="483.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.3" y="494.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.47%)</title><rect x="1162.3" y="467.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.3" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.47%)</title><rect x="1162.3" y="451.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="462.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.47%)</title><rect x="1162.3" y="435.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.3" y="446.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.94%)</title><rect x="1167.8" y="691.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="702.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.94%)</title><rect x="1167.8" y="675.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="686.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.94%)</title><rect x="1178.9" y="723.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.94%)</title><rect x="1178.9" y="707.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.94%)</title><rect x="1178.9" y="691.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.94%)</title><rect x="1178.9" y="675.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.47%)</title><rect x="1178.9" y="659.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.47%)</title><rect x="1178.9" y="643.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.47%)</title><rect x="1178.9" y="627.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.47%)</title><rect x="1178.9" y="611.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.47%)</title><rect x="1178.9" y="595.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.47%)</title><rect x="1178.9" y="579.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1178.9" y="563.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1178.9" y="547.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1178.9" y="531.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.47%)</title><rect x="1178.9" y="515.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.47%)</title><rect x="1178.9" y="499.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.47%)</title><rect x="1178.9" y="483.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.47%)</title><rect x="1178.9" y="467.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1178.9" y="451.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1178.9" y="435.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.47%)</title><rect x="1178.9" y="419.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.47%)</title><rect x="1178.9" y="403.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.47%)</title><rect x="1184.5" y="659.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.47%)</title><rect x="1184.5" y="643.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.47%)</title><rect x="1184.5" y="627.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
</g>
</svg>
