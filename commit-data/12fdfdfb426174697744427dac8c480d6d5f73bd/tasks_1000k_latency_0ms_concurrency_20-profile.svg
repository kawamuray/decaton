<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (939 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (268 samples, 28.54%)</title><rect x="10.0" y="803.0" width="336.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (267 samples, 28.43%)</title><rect x="10.0" y="787.0" width="335.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.64%)</title><rect x="10.0" y="771.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.64%)</title><rect x="10.0" y="755.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/377705444.accept (5 samples, 0.53%)</title><rect x="11.3" y="739.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.53%)</title><rect x="11.3" y="723.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.21%)</title><rect x="15.0" y="707.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.11%)</title><rect x="16.3" y="691.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.11%)</title><rect x="16.3" y="675.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (202 samples, 21.51%)</title><rect x="17.5" y="771.0" width="253.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.5" y="782.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/833707408.accept (193 samples, 20.55%)</title><rect x="17.5" y="755.0" width="242.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="766.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (192 samples, 20.45%)</title><rect x="18.8" y="739.0" width="241.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="750.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (160 samples, 17.04%)</title><rect x="18.8" y="723.0" width="201.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.8" y="734.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (160 samples, 17.04%)</title><rect x="18.8" y="707.0" width="201.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.8" y="718.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (160 samples, 17.04%)</title><rect x="18.8" y="691.0" width="201.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.8" y="702.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 17.04%)</title><rect x="18.8" y="675.0" width="201.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.8" y="686.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 17.04%)</title><rect x="18.8" y="659.0" width="201.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="670.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (160 samples, 17.04%)</title><rect x="18.8" y="643.0" width="201.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.8" y="654.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 11.08%)</title><rect x="18.8" y="627.0" width="130.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.8" y="638.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 2.02%)</title><rect x="18.8" y="611.0" width="23.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.8" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 2.02%)</title><rect x="18.8" y="595.0" width="23.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 2.02%)</title><rect x="18.8" y="579.0" width="23.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetWaitStatus (6 samples, 0.64%)</title><rect x="26.3" y="563.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (7 samples, 0.75%)</title><rect x="33.9" y="563.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (85 samples, 9.05%)</title><rect x="42.7" y="611.0" width="106.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.7" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (85 samples, 9.05%)</title><rect x="42.7" y="595.0" width="106.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.7" y="606.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (77 samples, 8.20%)</title><rect x="42.7" y="579.0" width="96.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.7" y="590.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetWaitStatus (1 samples, 0.11%)</title><rect x="42.7" y="563.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 8.09%)</title><rect x="43.9" y="563.0" width="95.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.9" y="574.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 8.09%)</title><rect x="43.9" y="547.0" width="95.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.9" y="558.0">sun/misc/Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="45.2" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="48.2" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 7.03%)</title><rect x="46.4" y="531.0" width="83.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="49.4" y="542.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="49.0" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="52.0" y="526.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 4.69%)</title><rect x="50.2" y="515.0" width="55.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="53.2" y="526.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.64%)</title><rect x="105.5" y="515.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="108.5" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.38%)</title><rect x="113.0" y="515.0" width="16.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="116.0" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.32%)</title><rect x="129.4" y="531.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="132.4" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.53%)</title><rect x="133.2" y="531.0" width="6.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="136.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (8 samples, 0.85%)</title><rect x="139.4" y="579.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="147.0" y="563.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.11%)</title><rect x="148.2" y="563.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (9 samples, 0.96%)</title><rect x="149.5" y="627.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (9 samples, 0.96%)</title><rect x="149.5" y="611.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (9 samples, 0.96%)</title><rect x="149.5" y="595.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.96%)</title><rect x="149.5" y="579.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="154.5" y="563.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.5" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.43%)</title><rect x="155.8" y="563.0" width="5.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="158.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 5.01%)</title><rect x="160.8" y="627.0" width="59.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.8" y="638.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 5.01%)</title><rect x="160.8" y="611.0" width="59.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.8" y="622.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 5.01%)</title><rect x="160.8" y="595.0" width="59.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.8" y="606.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 5.01%)</title><rect x="160.8" y="579.0" width="59.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.8" y="590.0">java/u..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.11%)</title><rect x="217.3" y="563.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.3" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="218.6" y="563.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="221.6" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.11%)</title><rect x="219.9" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.11%)</title><rect x="219.9" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.32%)</title><rect x="221.1" y="723.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.32%)</title><rect x="221.1" y="707.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.32%)</title><rect x="221.1" y="691.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.98%)</title><rect x="224.9" y="723.0" width="35.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.9" y="734.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.98%)</title><rect x="224.9" y="707.0" width="35.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.9" y="718.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.96%)</title><rect x="242.5" y="691.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.5" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.21%)</title><rect x="242.5" y="675.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.5" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.21%)</title><rect x="242.5" y="659.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.5" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.21%)</title><rect x="242.5" y="643.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.43%)</title><rect x="245.0" y="675.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.32%)</title><rect x="250.0" y="675.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.0" y="686.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.11%)</title><rect x="253.8" y="691.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="256.8" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.43%)</title><rect x="255.0" y="691.0" width="5.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="258.0" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="260.1" y="755.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="263.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.11%)</title><rect x="261.3" y="755.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.11%)</title><rect x="261.3" y="739.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.64%)</title><rect x="262.6" y="755.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.64%)</title><rect x="262.6" y="739.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.64%)</title><rect x="262.6" y="723.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.64%)</title><rect x="262.6" y="707.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.11%)</title><rect x="268.9" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.11%)</title><rect x="268.9" y="675.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.11%)</title><rect x="270.1" y="755.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 6.28%)</title><rect x="271.4" y="771.0" width="74.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.4" y="782.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 6.28%)</title><rect x="271.4" y="755.0" width="74.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.4" y="766.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.83%)</title><rect x="271.4" y="739.0" width="45.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.4" y="750.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="271.4" y="723.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="271.4" y="707.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.11%)</title><rect x="271.4" y="691.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.11%)</title><rect x="271.4" y="675.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.11%)</title><rect x="271.4" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/328795576.linkToTargetMethod (1 samples, 0.11%)</title><rect x="271.4" y="643.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.4" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2027474690.invokeStatic_JJ_L (1 samples, 0.11%)</title><rect x="271.4" y="627.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.73%)</title><rect x="272.6" y="723.0" width="44.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.6" y="734.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.73%)</title><rect x="272.6" y="707.0" width="44.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.6" y="718.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 3.51%)</title><rect x="272.6" y="691.0" width="41.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.6" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 3.51%)</title><rect x="272.6" y="675.0" width="41.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.6" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.70%)</title><rect x="275.2" y="659.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.53%)</title><rect x="287.7" y="643.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.53%)</title><rect x="287.7" y="627.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.53%)</title><rect x="287.7" y="611.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.53%)</title><rect x="287.7" y="595.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.53%)</title><rect x="287.7" y="579.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.53%)</title><rect x="287.7" y="563.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.53%)</title><rect x="287.7" y="547.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.11%)</title><rect x="294.0" y="643.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.11%)</title><rect x="294.0" y="627.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.11%)</title><rect x="294.0" y="611.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.11%)</title><rect x="294.0" y="595.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.11%)</title><rect x="294.0" y="579.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="294.0" y="563.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="297.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.49%)</title><rect x="295.3" y="659.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.11%)</title><rect x="296.5" y="643.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.28%)</title><rect x="297.8" y="643.0" width="15.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="297.8" y="627.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="300.8" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="297.8" y="611.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.8" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="297.8" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="300.8" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="297.8" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.8" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="297.8" y="563.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.85%)</title><rect x="299.0" y="627.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.0" y="638.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.85%)</title><rect x="299.0" y="611.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.0" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.43%)</title><rect x="304.1" y="595.0" width="5.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="307.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.32%)</title><rect x="309.1" y="627.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.1" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.32%)</title><rect x="309.1" y="611.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.11%)</title><rect x="312.9" y="659.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.11%)</title><rect x="314.1" y="691.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.11%)</title><rect x="314.1" y="675.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="314.1" y="659.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="314.1" y="643.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="314.1" y="627.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="314.1" y="611.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="317.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.11%)</title><rect x="314.1" y="595.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.11%)</title><rect x="314.1" y="579.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="317.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.11%)</title><rect x="315.4" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2300 (1 samples, 0.11%)</title><rect x="315.4" y="675.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.11%)</title><rect x="315.4" y="659.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.11%)</title><rect x="315.4" y="643.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 1.17%)</title><rect x="316.6" y="739.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.96%)</title><rect x="316.6" y="723.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.75%)</title><rect x="316.6" y="707.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.21%)</title><rect x="316.6" y="691.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/336586564.accept (2 samples, 0.21%)</title><rect x="316.6" y="675.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.21%)</title><rect x="316.6" y="659.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.21%)</title><rect x="316.6" y="643.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.21%)</title><rect x="316.6" y="627.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.21%)</title><rect x="316.6" y="611.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="316.6" y="595.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="317.9" y="579.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.11%)</title><rect x="317.9" y="563.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="319.1" y="691.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="322.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="319.1" y="675.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="319.1" y="659.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="319.1" y="643.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="319.1" y="627.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="319.1" y="611.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="319.1" y="595.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.11%)</title><rect x="319.1" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/965708272.get (1 samples, 0.11%)</title><rect x="319.1" y="563.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="322.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.21%)</title><rect x="320.4" y="691.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.21%)</title><rect x="320.4" y="675.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.4" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.21%)</title><rect x="320.4" y="659.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.11%)</title><rect x="320.4" y="643.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.4" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.11%)</title><rect x="320.4" y="627.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.4" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.11%)</title><rect x="320.4" y="611.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.4" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.11%)</title><rect x="321.7" y="643.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.21%)</title><rect x="322.9" y="691.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.21%)</title><rect x="322.9" y="675.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.21%)</title><rect x="322.9" y="659.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.21%)</title><rect x="322.9" y="643.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.21%)</title><rect x="322.9" y="627.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="322.9" y="611.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="322.9" y="595.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.9" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.11%)</title><rect x="322.9" y="579.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.9" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.11%)</title><rect x="322.9" y="563.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.9" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.11%)</title><rect x="322.9" y="547.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.9" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="324.2" y="579.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.2" y="590.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.11%)</title><rect x="324.2" y="563.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.11%)</title><rect x="324.2" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/482323044.apply (1 samples, 0.11%)</title><rect x="324.2" y="531.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.11%)</title><rect x="324.2" y="515.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.21%)</title><rect x="325.4" y="707.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.11%)</title><rect x="325.4" y="691.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="325.4" y="675.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.11%)</title><rect x="326.7" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="326.7" y="675.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="326.7" y="659.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="326.7" y="643.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.21%)</title><rect x="327.9" y="723.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.11%)</title><rect x="329.2" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.11%)</title><rect x="329.2" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.11%)</title><rect x="330.4" y="739.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.53%)</title><rect x="331.7" y="739.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.32%)</title><rect x="331.7" y="723.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.11%)</title><rect x="331.7" y="707.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.11%)</title><rect x="331.7" y="691.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.hasExpiredRequest (1 samples, 0.11%)</title><rect x="331.7" y="675.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.21%)</title><rect x="333.0" y="707.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.11%)</title><rect x="334.2" y="691.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.11%)</title><rect x="334.2" y="675.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.11%)</title><rect x="334.2" y="659.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.11%)</title><rect x="334.2" y="643.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.11%)</title><rect x="334.2" y="627.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.11%)</title><rect x="334.2" y="611.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.11%)</title><rect x="334.2" y="595.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.11%)</title><rect x="334.2" y="579.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.2" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="334.2" y="563.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="337.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.21%)</title><rect x="335.5" y="723.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.11%)</title><rect x="335.5" y="707.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.11%)</title><rect x="335.5" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="336.7" y="707.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="336.7" y="691.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="336.7" y="675.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="336.7" y="659.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.11%)</title><rect x="336.7" y="643.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.11%)</title><rect x="336.7" y="627.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.11%)</title><rect x="336.7" y="611.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.7" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.11%)</title><rect x="336.7" y="595.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.7" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.11%)</title><rect x="336.7" y="579.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.43%)</title><rect x="338.0" y="739.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.43%)</title><rect x="338.0" y="723.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.21%)</title><rect x="338.0" y="707.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/404928890.accept (1 samples, 0.11%)</title><rect x="339.2" y="691.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.11%)</title><rect x="339.2" y="675.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.11%)</title><rect x="339.2" y="659.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.11%)</title><rect x="339.2" y="643.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="339.2" y="627.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="339.2" y="611.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.21%)</title><rect x="340.5" y="707.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="343.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.11%)</title><rect x="340.5" y="691.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="340.5" y="675.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="340.5" y="659.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.11%)</title><rect x="340.5" y="643.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.11%)</title><rect x="341.8" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="341.8" y="675.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="341.8" y="659.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="341.8" y="643.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="341.8" y="627.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="341.8" y="611.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="341.8" y="595.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="341.8" y="579.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.21%)</title><rect x="343.0" y="739.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="343.0" y="723.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="346.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="344.3" y="707.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="344.3" y="691.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="344.3" y="675.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.3" y="686.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.11%)</title><rect x="345.5" y="787.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.5" y="798.0"></text>
</g>
<g>
<title>JVM_CurrentTimeMillis (1 samples, 0.11%)</title><rect x="345.5" y="771.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="348.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (624 samples, 66.45%)</title><rect x="346.8" y="803.0" width="784.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.8" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (624 samples, 66.45%)</title><rect x="346.8" y="787.0" width="784.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.8" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (624 samples, 66.45%)</title><rect x="346.8" y="771.0" width="784.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.8" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="354.3" y="755.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="357.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="354.3" y="739.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="357.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="354.3" y="723.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="357.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="354.3" y="707.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="357.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.11%)</title><rect x="354.3" y="691.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="357.3" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="355.6" y="755.0" width="3.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="358.6" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="355.6" y="739.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="358.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955340677.run (395 samples, 42.07%)</title><rect x="359.4" y="755.0" width="496.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.4" y="766.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/955..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (395 samples, 42.07%)</title><rect x="359.4" y="739.0" width="496.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.4" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (395 samples, 42.07%)</title><rect x="359.4" y="723.0" width="496.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.4" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (381 samples, 40.58%)</title><rect x="360.6" y="707.0" width="478.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.6" y="718.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (4 samples, 0.43%)</title><rect x="360.6" y="691.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (4 samples, 0.43%)</title><rect x="360.6" y="675.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1139745137.get (4 samples, 0.43%)</title><rect x="360.6" y="659.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.43%)</title><rect x="360.6" y="643.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.6" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="360.6" y="627.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="363.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.&lt;init&gt; (3 samples, 0.32%)</title><rect x="361.9" y="627.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (3 samples, 0.32%)</title><rect x="361.9" y="611.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.9" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.21%)</title><rect x="363.1" y="595.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="366.1" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="364.4" y="579.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="367.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (145 samples, 15.44%)</title><rect x="365.6" y="691.0" width="182.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.6" y="702.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 1.06%)</title><rect x="378.2" y="675.0" width="12.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="381.2" y="686.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.96%)</title><rect x="379.5" y="659.0" width="11.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="382.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.11%)</title><rect x="390.8" y="675.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.11%)</title><rect x="390.8" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.11%)</title><rect x="390.8" y="643.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.11%)</title><rect x="390.8" y="627.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.11%)</title><rect x="390.8" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.8" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.11%)</title><rect x="390.8" y="595.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (123 samples, 13.10%)</title><rect x="392.0" y="675.0" width="154.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.0" y="686.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (123 samples, 13.10%)</title><rect x="392.0" y="659.0" width="154.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.0" y="670.0">com/linecorp/decaton..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.11%)</title><rect x="392.0" y="643.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="395.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 12.99%)</title><rect x="393.3" y="643.0" width="153.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.3" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 12.99%)</title><rect x="393.3" y="627.0" width="153.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.3" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (122 samples, 12.99%)</title><rect x="393.3" y="611.0" width="153.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.3" y="622.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (27 samples, 2.88%)</title><rect x="393.3" y="595.0" width="33.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.3" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 1.06%)</title><rect x="393.3" y="579.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 1.06%)</title><rect x="393.3" y="563.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (10 samples, 1.06%)</title><rect x="393.3" y="547.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 1.06%)</title><rect x="393.3" y="531.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 1.06%)</title><rect x="393.3" y="515.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.32%)</title><rect x="402.1" y="499.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="405.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.81%)</title><rect x="405.8" y="579.0" width="21.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.8" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (17 samples, 1.81%)</title><rect x="405.8" y="563.0" width="21.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.8" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.64%)</title><rect x="405.8" y="547.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 0.64%)</title><rect x="405.8" y="531.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="408.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 1.17%)</title><rect x="413.4" y="547.0" width="13.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 1.17%)</title><rect x="413.4" y="531.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="416.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 0.53%)</title><rect x="413.4" y="515.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.43%)</title><rect x="419.7" y="515.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.21%)</title><rect x="422.2" y="499.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.21%)</title><rect x="424.7" y="515.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="427.7" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="426.0" y="499.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="429.0" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="426.0" y="483.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="429.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="426.0" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="429.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="426.0" y="451.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="429.0" y="462.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="426.0" y="435.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="429.0" y="446.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.11%)</title><rect x="426.0" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="429.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 8.95%)</title><rect x="427.2" y="595.0" width="105.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.2" y="606.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.53%)</title><rect x="427.2" y="579.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="430.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.53%)</title><rect x="427.2" y="563.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.53%)</title><rect x="427.2" y="547.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.53%)</title><rect x="427.2" y="531.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (5 samples, 0.53%)</title><rect x="427.2" y="515.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="430.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.21%)</title><rect x="427.2" y="499.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (3 samples, 0.32%)</title><rect x="429.7" y="499.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (3 samples, 0.32%)</title><rect x="429.7" y="483.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.96%)</title><rect x="433.5" y="579.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.96%)</title><rect x="433.5" y="563.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="442.3" y="547.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.96%)</title><rect x="444.8" y="579.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.64%)</title><rect x="448.6" y="563.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="451.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.43%)</title><rect x="448.6" y="547.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.32%)</title><rect x="449.8" y="531.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.21%)</title><rect x="453.6" y="547.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.43%)</title><rect x="456.1" y="579.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.43%)</title><rect x="456.1" y="563.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="456.1" y="547.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.43%)</title><rect x="456.1" y="531.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.43%)</title><rect x="456.1" y="515.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (57 samples, 6.07%)</title><rect x="461.1" y="579.0" width="71.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.1" y="590.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.38%)</title><rect x="461.1" y="563.0" width="16.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.64%)</title><rect x="462.4" y="547.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.64%)</title><rect x="462.4" y="531.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.64%)</title><rect x="462.4" y="515.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.53%)</title><rect x="469.9" y="547.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="476.2" y="547.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="476.2" y="531.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (44 samples, 4.69%)</title><rect x="477.5" y="563.0" width="55.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.5" y="574.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (44 samples, 4.69%)</title><rect x="477.5" y="547.0" width="55.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.5" y="558.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 4.58%)</title><rect x="478.7" y="531.0" width="54.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.7" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 2.02%)</title><rect x="485.0" y="515.0" width="23.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.0" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.64%)</title><rect x="493.8" y="499.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.64%)</title><rect x="493.8" y="483.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.64%)</title><rect x="493.8" y="467.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.53%)</title><rect x="495.1" y="451.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.43%)</title><rect x="501.4" y="499.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="506.4" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="509.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="506.4" y="483.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="509.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.11%)</title><rect x="506.4" y="467.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.11%)</title><rect x="507.6" y="499.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="510.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.32%)</title><rect x="508.9" y="515.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.21%)</title><rect x="510.1" y="499.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="513.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.21%)</title><rect x="510.1" y="483.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.21%)</title><rect x="510.1" y="467.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.1" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.21%)</title><rect x="510.1" y="451.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="513.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.11%)</title><rect x="512.7" y="515.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.64%)</title><rect x="513.9" y="515.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="516.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.64%)</title><rect x="513.9" y="499.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.64%)</title><rect x="513.9" y="483.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.64%)</title><rect x="513.9" y="467.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.9" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.64%)</title><rect x="513.9" y="451.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="516.9" y="462.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.11%)</title><rect x="520.2" y="435.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.2" y="446.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.11%)</title><rect x="520.2" y="419.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="523.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="520.2" y="403.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="523.2" y="414.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="520.2" y="387.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="523.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.96%)</title><rect x="521.5" y="515.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.96%)</title><rect x="521.5" y="499.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.96%)</title><rect x="521.5" y="483.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.32%)</title><rect x="529.0" y="467.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="532.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.17%)</title><rect x="532.8" y="595.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 1.17%)</title><rect x="532.8" y="579.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 1.17%)</title><rect x="532.8" y="563.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 1.17%)</title><rect x="532.8" y="547.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="535.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 1.17%)</title><rect x="532.8" y="531.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="535.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="544.1" y="515.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="547.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.11%)</title><rect x="546.6" y="675.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (232 samples, 24.71%)</title><rect x="547.8" y="691.0" width="291.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="550.8" y="702.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.21%)</title><rect x="555.4" y="675.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="558.4" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="555.4" y="659.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="558.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 5.22%)</title><rect x="557.9" y="675.0" width="61.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="560.9" y="686.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.21%)</title><rect x="557.9" y="659.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="560.9" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 5.01%)</title><rect x="560.4" y="659.0" width="59.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="563.4" y="670.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 4.58%)</title><rect x="565.4" y="643.0" width="54.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.4" y="654.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.85%)</title><rect x="566.7" y="627.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="569.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.85%)</title><rect x="566.7" y="611.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.85%)</title><rect x="566.7" y="595.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.85%)</title><rect x="566.7" y="579.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.43%)</title><rect x="571.7" y="563.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.11%)</title><rect x="575.5" y="547.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.5" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 3.62%)</title><rect x="576.8" y="627.0" width="42.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.8" y="638.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 2.02%)</title><rect x="595.6" y="611.0" width="23.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.6" y="622.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.43%)</title><rect x="595.6" y="595.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="598.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.21%)</title><rect x="598.1" y="579.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="601.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 1.60%)</title><rect x="600.6" y="595.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.43%)</title><rect x="611.9" y="579.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.9" y="590.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.21%)</title><rect x="617.0" y="579.0" width="2.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="620.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.75%)</title><rect x="619.5" y="675.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="622.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="625.8" y="659.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.21%)</title><rect x="625.8" y="643.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (123 samples, 13.10%)</title><rect x="628.3" y="675.0" width="154.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="631.3" y="686.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (123 samples, 13.10%)</title><rect x="628.3" y="659.0" width="154.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="631.3" y="670.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.53%)</title><rect x="630.8" y="643.0" width="6.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="633.8" y="654.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.53%)</title><rect x="630.8" y="627.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="633.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (41 samples, 4.37%)</title><rect x="637.1" y="643.0" width="51.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.1" y="654.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (40 samples, 4.26%)</title><rect x="637.1" y="627.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.1" y="638.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (25 samples, 2.66%)</title><rect x="643.4" y="611.0" width="31.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.4" y="622.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.49%)</title><rect x="649.6" y="595.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="652.6" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.49%)</title><rect x="649.6" y="579.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.6" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.49%)</title><rect x="649.6" y="563.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.6" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.96%)</title><rect x="652.2" y="547.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="655.2" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.21%)</title><rect x="652.2" y="531.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.2" y="542.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.21%)</title><rect x="652.2" y="515.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="655.2" y="526.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.21%)</title><rect x="652.2" y="499.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="655.2" y="510.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.11%)</title><rect x="652.2" y="483.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="655.2" y="494.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.11%)</title><rect x="653.4" y="483.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="656.4" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.75%)</title><rect x="654.7" y="531.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="657.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.64%)</title><rect x="655.9" y="515.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="658.9" y="526.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (2 samples, 0.21%)</title><rect x="657.2" y="499.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.2" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.21%)</title><rect x="659.7" y="499.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="662.7" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.21%)</title><rect x="659.7" y="483.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="662.7" y="494.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (2 samples, 0.21%)</title><rect x="659.7" y="467.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="662.7" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.21%)</title><rect x="659.7" y="451.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="662.7" y="462.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (2 samples, 0.21%)</title><rect x="659.7" y="435.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="662.7" y="446.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.11%)</title><rect x="659.7" y="419.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="662.7" y="430.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.11%)</title><rect x="659.7" y="403.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="662.7" y="414.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="660.9" y="419.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="663.9" y="430.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.11%)</title><rect x="660.9" y="403.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="663.9" y="414.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.11%)</title><rect x="662.2" y="499.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.2" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="663.5" y="547.0" width="3.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="666.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.43%)</title><rect x="667.2" y="595.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.2" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.21%)</title><rect x="672.3" y="595.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="675.3" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.11%)</title><rect x="674.8" y="611.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="677.8" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.96%)</title><rect x="676.0" y="611.0" width="11.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="679.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.11%)</title><rect x="687.3" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="687.3" y="611.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.3" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.11%)</title><rect x="687.3" y="595.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.3" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="687.3" y="579.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="690.3" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="687.3" y="563.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="690.3" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="687.3" y="547.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="690.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="687.3" y="531.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.11%)</title><rect x="688.6" y="643.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.6" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.11%)</title><rect x="689.9" y="643.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.11%)</title><rect x="689.9" y="627.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="692.9" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.11%)</title><rect x="689.9" y="611.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.9" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.11%)</title><rect x="689.9" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="691.1" y="643.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.85%)</title><rect x="692.4" y="643.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.32%)</title><rect x="692.4" y="627.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.32%)</title><rect x="692.4" y="611.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.53%)</title><rect x="696.1" y="627.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="699.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.32%)</title><rect x="696.1" y="611.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="699.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.21%)</title><rect x="699.9" y="611.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="702.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="701.2" y="595.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="704.2" y="606.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.11%)</title><rect x="701.2" y="579.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="704.2" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (64 samples, 6.82%)</title><rect x="702.4" y="643.0" width="80.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.4" y="654.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (64 samples, 6.82%)</title><rect x="702.4" y="627.0" width="80.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.4" y="638.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.43%)</title><rect x="702.4" y="611.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.43%)</title><rect x="702.4" y="595.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.43%)</title><rect x="702.4" y="579.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="705.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.43%)</title><rect x="702.4" y="563.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.11%)</title><rect x="706.2" y="547.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="706.2" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.2" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (60 samples, 6.39%)</title><rect x="707.4" y="611.0" width="75.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.4" y="622.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (54 samples, 5.75%)</title><rect x="715.0" y="595.0" width="67.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.0" y="606.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 3.30%)</title><rect x="743.9" y="579.0" width="38.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.9" y="590.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.11%)</title><rect x="767.8" y="563.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="770.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.96%)</title><rect x="769.0" y="563.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.0" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="779.1" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="782.1" y="558.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.21%)</title><rect x="780.3" y="563.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="783.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (40 samples, 4.26%)</title><rect x="782.8" y="675.0" width="50.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="785.8" y="686.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (40 samples, 4.26%)</title><rect x="782.8" y="659.0" width="50.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.8" y="670.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/2144072261.process (18 samples, 1.92%)</title><rect x="790.4" y="643.0" width="22.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.4" y="654.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.92%)</title><rect x="790.4" y="627.0" width="22.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="793.4" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.38%)</title><rect x="792.9" y="611.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.9" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="792.9" y="595.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="795.9" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="792.9" y="579.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.9" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.11%)</title><rect x="792.9" y="563.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.9" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.11%)</title><rect x="792.9" y="547.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.11%)</title><rect x="792.9" y="531.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.43%)</title><rect x="794.2" y="595.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.2" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.43%)</title><rect x="794.2" y="579.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="797.2" y="590.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="795.4" y="563.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="798.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.21%)</title><rect x="799.2" y="595.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.53%)</title><rect x="801.7" y="595.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.11%)</title><rect x="808.0" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="811.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.32%)</title><rect x="809.2" y="611.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.32%)</title><rect x="809.2" y="595.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.32%)</title><rect x="809.2" y="579.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.32%)</title><rect x="809.2" y="563.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="812.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/670204243.complete (1 samples, 0.11%)</title><rect x="813.0" y="643.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$34 (1 samples, 0.11%)</title><rect x="813.0" y="627.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="813.0" y="611.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="816.0" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="813.0" y="595.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="813.0" y="579.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="816.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="813.0" y="563.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.0" y="574.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.11%)</title><rect x="813.0" y="547.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="816.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="814.3" y="643.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.21%)</title><rect x="814.3" y="627.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.3" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.11%)</title><rect x="816.8" y="643.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.11%)</title><rect x="816.8" y="627.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.85%)</title><rect x="818.0" y="643.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.0" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.53%)</title><rect x="821.8" y="627.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.8" y="638.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.32%)</title><rect x="821.8" y="611.0" width="3.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="824.8" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.21%)</title><rect x="825.6" y="611.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.6" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="828.1" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="828.1" y="627.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.32%)</title><rect x="829.3" y="643.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="832.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="831.9" y="627.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.9" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.11%)</title><rect x="831.9" y="611.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="831.9" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="834.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="831.9" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="831.9" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="831.9" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.9" y="558.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="831.9" y="531.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="834.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.11%)</title><rect x="833.1" y="675.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.1" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.11%)</title><rect x="833.1" y="659.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.1" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.11%)</title><rect x="833.1" y="643.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.1" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="833.1" y="627.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.1" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="833.1" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="836.1" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="833.1" y="595.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.32%)</title><rect x="834.4" y="675.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.32%)</title><rect x="834.4" y="659.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.32%)</title><rect x="834.4" y="643.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/141365792.accept (3 samples, 0.32%)</title><rect x="834.4" y="627.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="837.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (3 samples, 0.32%)</title><rect x="834.4" y="611.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.4" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.32%)</title><rect x="834.4" y="595.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.4" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.32%)</title><rect x="834.4" y="579.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.4" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="834.4" y="563.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="837.4" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="834.4" y="547.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="837.4" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.21%)</title><rect x="835.6" y="563.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="838.6" y="574.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="838.1" y="675.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.38%)</title><rect x="839.4" y="707.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="842.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.38%)</title><rect x="839.4" y="691.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.28%)</title><rect x="840.6" y="675.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/141365792.accept (1 samples, 0.11%)</title><rect x="840.6" y="659.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (1 samples, 0.11%)</title><rect x="840.6" y="643.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.6" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.11%)</title><rect x="840.6" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="843.6" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.11%)</title><rect x="840.6" y="611.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="843.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/1590100225.accept (11 samples, 1.17%)</title><rect x="841.9" y="659.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="844.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (11 samples, 1.17%)</title><rect x="841.9" y="643.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/827578286.complete (11 samples, 1.17%)</title><rect x="841.9" y="627.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (11 samples, 1.17%)</title><rect x="841.9" y="611.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="844.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (11 samples, 1.17%)</title><rect x="841.9" y="595.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.9" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 1.17%)</title><rect x="841.9" y="579.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.9" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 1.17%)</title><rect x="841.9" y="563.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="844.9" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 1.17%)</title><rect x="841.9" y="547.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="844.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.11%)</title><rect x="855.7" y="755.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="858.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="855.7" y="739.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="855.7" y="723.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="855.7" y="707.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (218 samples, 23.22%)</title><rect x="857.0" y="755.0" width="273.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.0" y="766.0">java/util/concurrent/ThreadPoolExecut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (218 samples, 23.22%)</title><rect x="857.0" y="739.0" width="273.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.0" y="750.0">java/util/concurrent/LinkedBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (201 samples, 21.41%)</title><rect x="857.0" y="723.0" width="252.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.0" y="734.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (22 samples, 2.34%)</title><rect x="875.8" y="707.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.8" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.32%)</title><rect x="903.5" y="707.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.32%)</title><rect x="903.5" y="691.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.32%)</title><rect x="903.5" y="675.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="906.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.32%)</title><rect x="903.5" y="659.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="906.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.21%)</title><rect x="904.7" y="643.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (161 samples, 17.15%)</title><rect x="907.3" y="707.0" width="202.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="910.3" y="718.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (154 samples, 16.40%)</title><rect x="916.0" y="691.0" width="193.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="919.0" y="702.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.11%)</title><rect x="922.3" y="675.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="925.3" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.21%)</title><rect x="923.6" y="675.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.6" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (140 samples, 14.91%)</title><rect x="926.1" y="675.0" width="175.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="929.1" y="686.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.32%)</title><rect x="928.6" y="659.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="931.6" y="670.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.21%)</title><rect x="932.4" y="659.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.4" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 2.34%)</title><rect x="934.9" y="659.0" width="27.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.9" y="670.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.85%)</title><rect x="942.4" y="643.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.4" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.43%)</title><rect x="946.2" y="627.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.2" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.43%)</title><rect x="946.2" y="611.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.2" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="951.2" y="627.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.2" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="952.5" y="643.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="955.5" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="953.7" y="643.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.7" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.64%)</title><rect x="955.0" y="643.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="958.0" y="654.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.21%)</title><rect x="962.5" y="659.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.5" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.11%)</title><rect x="965.1" y="659.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.1" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.32%)</title><rect x="966.3" y="659.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.3" y="670.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 1.17%)</title><rect x="970.1" y="659.0" width="13.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="973.1" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.77%)</title><rect x="983.9" y="659.0" width="32.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="986.9" y="670.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 5.22%)</title><rect x="1016.6" y="659.0" width="61.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1019.6" y="670.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.53%)</title><rect x="1078.2" y="659.0" width="6.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1081.2" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.32%)</title><rect x="1084.4" y="659.0" width="3.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1087.4" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="1088.2" y="659.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1091.2" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.53%)</title><rect x="1089.5" y="659.0" width="6.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1092.5" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="1095.8" y="659.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1098.8" y="670.0"></text>
</g>
<g>
<title>_init (2 samples, 0.21%)</title><rect x="1097.0" y="659.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1100.0" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.21%)</title><rect x="1099.5" y="659.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.5" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.43%)</title><rect x="1102.0" y="675.0" width="5.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1105.0" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.21%)</title><rect x="1107.1" y="675.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.81%)</title><rect x="1109.6" y="723.0" width="21.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.6" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.81%)</title><rect x="1109.6" y="707.0" width="21.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.6" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.81%)</title><rect x="1109.6" y="691.0" width="21.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.6" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.81%)</title><rect x="1109.6" y="675.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1112.6" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.21%)</title><rect x="1128.4" y="659.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1130.9" y="803.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1133.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1130.9" y="787.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1133.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1130.9" y="771.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1133.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.11%)</title><rect x="1130.9" y="755.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1133.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.11%)</title><rect x="1130.9" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1133.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.11%)</title><rect x="1130.9" y="723.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.11%)</title><rect x="1130.9" y="707.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1133.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.11%)</title><rect x="1130.9" y="691.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1133.9" y="702.0"></text>
</g>
<g>
<title>start_thread (46 samples, 4.90%)</title><rect x="1132.2" y="803.0" width="57.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1135.2" y="814.0">start_..</text>
</g>
<g>
<title>java_start(Thread*) (46 samples, 4.90%)</title><rect x="1132.2" y="787.0" width="57.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1135.2" y="798.0">java_s..</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.81%)</title><rect x="1132.2" y="771.0" width="21.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.2" y="782.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="1132.2" y="755.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.2" y="766.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.43%)</title><rect x="1133.5" y="755.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.5" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.43%)</title><rect x="1133.5" y="739.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.5" y="750.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.43%)</title><rect x="1133.5" y="723.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1136.5" y="734.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.28%)</title><rect x="1138.5" y="755.0" width="15.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.5" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.43%)</title><rect x="1138.5" y="739.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.5" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.21%)</title><rect x="1138.5" y="723.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.5" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.11%)</title><rect x="1139.7" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.7" y="718.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.21%)</title><rect x="1141.0" y="723.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1144.0" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.32%)</title><rect x="1143.5" y="739.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.5" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.11%)</title><rect x="1143.5" y="723.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="734.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.11%)</title><rect x="1143.5" y="707.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.5" y="718.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.11%)</title><rect x="1143.5" y="691.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.5" y="702.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.11%)</title><rect x="1143.5" y="675.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="686.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.11%)</title><rect x="1143.5" y="659.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.5" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.21%)</title><rect x="1144.8" y="723.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="734.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.21%)</title><rect x="1144.8" y="707.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.8" y="718.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.11%)</title><rect x="1146.0" y="691.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.0" y="702.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.11%)</title><rect x="1146.0" y="675.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.0" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.53%)</title><rect x="1147.3" y="739.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.3" y="750.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.53%)</title><rect x="1147.3" y="723.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.43%)</title><rect x="1147.3" y="707.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="718.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.43%)</title><rect x="1147.3" y="691.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.3" y="702.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.43%)</title><rect x="1147.3" y="675.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.3" y="686.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.43%)</title><rect x="1147.3" y="659.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.3" y="670.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.32%)</title><rect x="1148.5" y="643.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.5" y="654.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1148.5" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.5" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1149.8" y="627.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="638.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.11%)</title><rect x="1149.8" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="622.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.11%)</title><rect x="1151.0" y="627.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="638.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.11%)</title><rect x="1151.0" y="611.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="622.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.11%)</title><rect x="1152.3" y="707.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.11%)</title><rect x="1152.3" y="691.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="702.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.11%)</title><rect x="1152.3" y="675.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="686.0"></text>
</g>
<g>
<title>JavaThread::run() (26 samples, 2.77%)</title><rect x="1153.6" y="771.0" width="32.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="782.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (26 samples, 2.77%)</title><rect x="1153.6" y="755.0" width="32.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="766.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (26 samples, 2.77%)</title><rect x="1153.6" y="739.0" width="32.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="750.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (25 samples, 2.66%)</title><rect x="1153.6" y="723.0" width="31.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.6" y="734.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (25 samples, 2.66%)</title><rect x="1153.6" y="707.0" width="31.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.6" y="718.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (25 samples, 2.66%)</title><rect x="1153.6" y="691.0" width="31.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="702.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (13 samples, 1.38%)</title><rect x="1153.6" y="675.0" width="16.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="686.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.21%)</title><rect x="1153.6" y="659.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="670.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.11%)</title><rect x="1153.6" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="654.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.11%)</title><rect x="1154.8" y="643.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="654.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.11%)</title><rect x="1154.8" y="627.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="638.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.11%)</title><rect x="1154.8" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.8" y="622.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.11%)</title><rect x="1154.8" y="595.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.8" y="606.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="1154.8" y="579.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.8" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.21%)</title><rect x="1156.1" y="659.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.1" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.11%)</title><rect x="1156.1" y="643.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.1" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.11%)</title><rect x="1157.3" y="643.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.3" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.11%)</title><rect x="1157.3" y="627.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.3" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.96%)</title><rect x="1158.6" y="659.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.11%)</title><rect x="1158.6" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.32%)</title><rect x="1159.8" y="643.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.32%)</title><rect x="1159.8" y="627.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.8" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1162.4" y="611.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.11%)</title><rect x="1163.6" y="643.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.6" y="654.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.11%)</title><rect x="1163.6" y="627.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.6" y="638.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.11%)</title><rect x="1163.6" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.11%)</title><rect x="1164.9" y="643.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.11%)</title><rect x="1166.1" y="643.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1166.1" y="627.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.21%)</title><rect x="1167.4" y="643.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="654.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.11%)</title><rect x="1168.6" y="627.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 1.06%)</title><rect x="1169.9" y="675.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.11%)</title><rect x="1169.9" y="659.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="643.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="627.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.21%)</title><rect x="1171.2" y="659.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="1173.7" y="659.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="1173.7" y="643.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1173.7" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.11%)</title><rect x="1173.7" y="611.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.11%)</title><rect x="1173.7" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.11%)</title><rect x="1173.7" y="579.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 0.32%)</title><rect x="1174.9" y="659.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1174.9" y="643.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="654.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.11%)</title><rect x="1174.9" y="627.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.21%)</title><rect x="1176.2" y="643.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.21%)</title><rect x="1176.2" y="627.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.11%)</title><rect x="1177.4" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.11%)</title><rect x="1177.4" y="595.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1178.7" y="659.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1178.7" y="643.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1178.7" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1178.7" y="611.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="622.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.11%)</title><rect x="1178.7" y="595.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.21%)</title><rect x="1179.9" y="659.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.21%)</title><rect x="1179.9" y="643.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.21%)</title><rect x="1179.9" y="627.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1179.9" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1181.2" y="611.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="595.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="563.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="515.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="499.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="483.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="467.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="451.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="435.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="387.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="371.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="355.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="339.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="323.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="307.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="291.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="275.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="259.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="243.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="227.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="211.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="195.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="179.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="163.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="147.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="131.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="115.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="99.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="83.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.11%)</title><rect x="1182.5" y="67.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1182.5" y="51.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="62.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1182.5" y="35.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.11%)</title><rect x="1183.7" y="675.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.11%)</title><rect x="1183.7" y="659.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="670.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.11%)</title><rect x="1185.0" y="723.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.0" y="734.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.11%)</title><rect x="1185.0" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="718.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.11%)</title><rect x="1185.0" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.11%)</title><rect x="1185.0" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="686.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.11%)</title><rect x="1185.0" y="659.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.32%)</title><rect x="1186.2" y="771.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.2" y="782.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.32%)</title><rect x="1186.2" y="755.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.21%)</title><rect x="1186.2" y="739.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="750.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.11%)</title><rect x="1188.7" y="739.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.7" y="750.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.7" y="723.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="734.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.11%)</title><rect x="1188.7" y="707.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.7" y="691.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.11%)</title><rect x="1188.7" y="675.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="686.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.11%)</title><rect x="1188.7" y="659.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="670.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.11%)</title><rect x="1188.7" y="643.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="654.0"></text>
</g>
</g>
</svg>
