<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (69 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 1.45%)</title><rect x="10.0" y="1091.0" width="17.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 1.45%)</title><rect x="27.1" y="1091.0" width="17.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="30.1" y="1102.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 1.45%)</title><rect x="27.1" y="1075.0" width="17.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="30.1" y="1086.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 1.45%)</title><rect x="27.1" y="1059.0" width="17.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (3 samples, 4.35%)</title><rect x="44.2" y="1091.0" width="51.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.2" y="1102.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (3 samples, 4.35%)</title><rect x="44.2" y="1075.0" width="51.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.2" y="1086.0">com/l..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.45%)</title><rect x="44.2" y="1059.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1992302078.accept (1 samples, 1.45%)</title><rect x="44.2" y="1043.0" width="17.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.45%)</title><rect x="44.2" y="1027.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="47.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 1.45%)</title><rect x="44.2" y="1011.0" width="17.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 1.45%)</title><rect x="44.2" y="995.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 1.45%)</title><rect x="44.2" y="979.0" width="17.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 1.45%)</title><rect x="44.2" y="963.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 1.45%)</title><rect x="44.2" y="947.0" width="17.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 1.45%)</title><rect x="44.2" y="931.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 1.45%)</title><rect x="44.2" y="915.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 1.45%)</title><rect x="44.2" y="899.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 1.45%)</title><rect x="44.2" y="883.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 2.90%)</title><rect x="61.3" y="1059.0" width="34.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.3" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 2.90%)</title><rect x="61.3" y="1043.0" width="34.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.3" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 2.90%)</title><rect x="61.3" y="1027.0" width="34.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 2.90%)</title><rect x="61.3" y="1011.0" width="34.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.3" y="1022.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 2.90%)</title><rect x="61.3" y="995.0" width="34.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.3" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 2.90%)</title><rect x="61.3" y="979.0" width="34.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.3" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 2.90%)</title><rect x="61.3" y="963.0" width="34.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.3" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 2.90%)</title><rect x="61.3" y="947.0" width="34.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.3" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 2.90%)</title><rect x="61.3" y="931.0" width="34.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.3" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 2.90%)</title><rect x="61.3" y="915.0" width="34.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.3" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 2.90%)</title><rect x="61.3" y="899.0" width="34.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.3" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 1.45%)</title><rect x="61.3" y="883.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 1.45%)</title><rect x="61.3" y="867.0" width="17.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 1.45%)</title><rect x="61.3" y="851.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 1.45%)</title><rect x="78.4" y="883.0" width="17.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.4" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 1.45%)</title><rect x="78.4" y="867.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="81.4" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="851.0" width="17.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="81.4" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="835.0" width="17.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="81.4" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="819.0" width="17.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="81.4" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="803.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="81.4" y="814.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="787.0" width="17.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="81.4" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="771.0" width="17.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="81.4" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="755.0" width="17.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="81.4" y="766.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="739.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="81.4" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="723.0" width="17.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.4" y="734.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 1.45%)</title><rect x="78.4" y="707.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="81.4" y="718.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 1.45%)</title><rect x="78.4" y="691.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="81.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.45%)</title><rect x="95.5" y="1091.0" width="17.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.45%)</title><rect x="95.5" y="1075.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.45%)</title><rect x="95.5" y="1059.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1529316903.run (1 samples, 1.45%)</title><rect x="95.5" y="1043.0" width="17.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.45%)</title><rect x="95.5" y="1027.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.45%)</title><rect x="95.5" y="1011.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.45%)</title><rect x="95.5" y="995.0" width="17.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 1.45%)</title><rect x="95.5" y="979.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 1.45%)</title><rect x="95.5" y="963.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 1.45%)</title><rect x="95.5" y="947.0" width="17.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1600718929.process (1 samples, 1.45%)</title><rect x="95.5" y="931.0" width="17.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 1.45%)</title><rect x="95.5" y="915.0" width="17.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 1.45%)</title><rect x="95.5" y="899.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 1.45%)</title><rect x="95.5" y="883.0" width="17.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 1.45%)</title><rect x="95.5" y="867.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.5" y="878.0"></text>
</g>
<g>
<title>JVM_Sleep (1 samples, 1.45%)</title><rect x="95.5" y="851.0" width="17.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="98.5" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 1.45%)</title><rect x="95.5" y="835.0" width="17.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="98.5" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 1.45%)</title><rect x="95.5" y="819.0" width="17.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="98.5" y="830.0"></text>
</g>
<g>
<title>start_thread (63 samples, 91.30%)</title><rect x="112.6" y="1091.0" width="1077.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="115.6" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (63 samples, 91.30%)</title><rect x="112.6" y="1075.0" width="1077.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="115.6" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (63 samples, 91.30%)</title><rect x="112.6" y="1059.0" width="1077.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="115.6" y="1070.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (63 samples, 91.30%)</title><rect x="112.6" y="1043.0" width="1077.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="115.6" y="1054.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (63 samples, 91.30%)</title><rect x="112.6" y="1027.0" width="1077.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="115.6" y="1038.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (62 samples, 89.86%)</title><rect x="112.6" y="1011.0" width="1060.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="115.6" y="1022.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (62 samples, 89.86%)</title><rect x="112.6" y="995.0" width="1060.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="115.6" y="1006.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 1.45%)</title><rect x="112.6" y="979.0" width="17.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="115.6" y="990.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 1.45%)</title><rect x="112.6" y="963.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="115.6" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.45%)</title><rect x="112.6" y="947.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.6" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.45%)</title><rect x="112.6" y="931.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.6" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.45%)</title><rect x="112.6" y="915.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="115.6" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.45%)</title><rect x="112.6" y="899.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="115.6" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.45%)</title><rect x="112.6" y="883.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="115.6" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.45%)</title><rect x="112.6" y="867.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="115.6" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 1.45%)</title><rect x="112.6" y="851.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="115.6" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.45%)</title><rect x="112.6" y="835.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="115.6" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.45%)</title><rect x="112.6" y="819.0" width="17.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="115.6" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.45%)</title><rect x="112.6" y="803.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="115.6" y="814.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 1.45%)</title><rect x="112.6" y="787.0" width="17.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="115.6" y="798.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 1.45%)</title><rect x="112.6" y="771.0" width="17.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="115.6" y="782.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 55.07%)</title><rect x="129.7" y="979.0" width="649.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="132.7" y="990.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 1.45%)</title><rect x="129.7" y="963.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="132.7" y="974.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.45%)</title><rect x="129.7" y="947.0" width="17.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="132.7" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 2.90%)</title><rect x="146.8" y="963.0" width="34.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="149.8" y="974.0">Co..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 1.45%)</title><rect x="163.9" y="947.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="166.9" y="958.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.45%)</title><rect x="163.9" y="931.0" width="17.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="166.9" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 4.35%)</title><rect x="181.0" y="963.0" width="51.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="184.0" y="974.0">Match..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 1.45%)</title><rect x="181.0" y="947.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="184.0" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 2.90%)</title><rect x="198.1" y="947.0" width="34.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="201.1" y="958.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 1.45%)</title><rect x="198.1" y="931.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="201.1" y="942.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 1.45%)</title><rect x="215.2" y="931.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="218.2" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.45%)</title><rect x="215.2" y="915.0" width="17.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="218.2" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.45%)</title><rect x="215.2" y="899.0" width="17.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="218.2" y="910.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 1.45%)</title><rect x="232.3" y="963.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="235.3" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 1.45%)</title><rect x="232.3" y="947.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="235.3" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 4.35%)</title><rect x="249.4" y="963.0" width="51.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="252.4" y="974.0">Phase..</text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 1.45%)</title><rect x="249.4" y="947.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="252.4" y="958.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 1.45%)</title><rect x="249.4" y="931.0" width="17.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="252.4" y="942.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 1.45%)</title><rect x="249.4" y="915.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="252.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.90%)</title><rect x="266.5" y="947.0" width="34.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="269.5" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 1.45%)</title><rect x="266.5" y="931.0" width="17.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="269.5" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.45%)</title><rect x="283.6" y="931.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="286.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 1.45%)</title><rect x="283.6" y="915.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="286.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 40.58%)</title><rect x="300.7" y="963.0" width="478.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.7" y="974.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 1.45%)</title><rect x="300.7" y="947.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="303.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 2.90%)</title><rect x="317.8" y="947.0" width="34.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="320.8" y="958.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.45%)</title><rect x="317.8" y="931.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="320.8" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 1.45%)</title><rect x="334.9" y="931.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="337.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 4.35%)</title><rect x="352.0" y="947.0" width="51.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="355.0" y="958.0">Phase..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 1.45%)</title><rect x="386.2" y="931.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="389.2" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 7.25%)</title><rect x="403.3" y="947.0" width="85.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="406.3" y="958.0">PhaseChait..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 4.35%)</title><rect x="420.4" y="931.0" width="51.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="423.4" y="942.0">Phase..</text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 1.45%)</title><rect x="471.7" y="931.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 2.90%)</title><rect x="488.8" y="947.0" width="34.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="491.8" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 2.90%)</title><rect x="523.0" y="947.0" width="34.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="526.0" y="958.0">Ph..</text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 1.45%)</title><rect x="540.1" y="931.0" width="17.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="543.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 4.35%)</title><rect x="557.2" y="947.0" width="51.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="560.2" y="958.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 1.45%)</title><rect x="591.4" y="931.0" width="17.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.4" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 2.90%)</title><rect x="608.6" y="947.0" width="34.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="611.6" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 2.90%)</title><rect x="608.6" y="931.0" width="34.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="611.6" y="942.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 2.90%)</title><rect x="608.6" y="915.0" width="34.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="611.6" y="926.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 1.45%)</title><rect x="608.6" y="899.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="611.6" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 1.45%)</title><rect x="625.7" y="899.0" width="17.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="628.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 4.35%)</title><rect x="642.8" y="947.0" width="51.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="645.8" y="958.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 2.90%)</title><rect x="659.9" y="931.0" width="34.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="662.9" y="942.0">In..</text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 1.45%)</title><rect x="694.1" y="947.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="697.1" y="958.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 1.45%)</title><rect x="694.1" y="931.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.1" y="942.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 5.80%)</title><rect x="711.2" y="947.0" width="68.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="714.2" y="958.0">PhaseLi..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 1.45%)</title><rect x="728.3" y="931.0" width="17.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="731.3" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 2.90%)</title><rect x="745.4" y="931.0" width="34.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="748.4" y="942.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.45%)</title><rect x="762.5" y="915.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="765.5" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 23.19%)</title><rect x="779.6" y="979.0" width="273.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.6" y="990.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.45%)</title><rect x="779.6" y="963.0" width="17.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="782.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.45%)</title><rect x="779.6" y="947.0" width="17.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="782.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 1.45%)</title><rect x="779.6" y="931.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="782.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) [clone .isra.295] (1 samples, 1.45%)</title><rect x="779.6" y="915.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="782.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 17.39%)</title><rect x="796.7" y="963.0" width="205.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="799.7" y="974.0">PhaseIdealLoop::build_and_o..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 1.45%)</title><rect x="796.7" y="947.0" width="17.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="799.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.45%)</title><rect x="813.8" y="947.0" width="17.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="816.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 1.45%)</title><rect x="813.8" y="931.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 10.14%)</title><rect x="830.9" y="947.0" width="119.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.9" y="958.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 8.70%)</title><rect x="848.0" y="931.0" width="102.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="851.0" y="942.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 5.80%)</title><rect x="882.2" y="915.0" width="68.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.2" y="926.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 5.80%)</title><rect x="882.2" y="899.0" width="68.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.2" y="910.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 2.90%)</title><rect x="950.6" y="947.0" width="34.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="953.6" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 1.45%)</title><rect x="967.7" y="931.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.45%)</title><rect x="984.8" y="947.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.45%)</title><rect x="984.8" y="931.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 1.45%)</title><rect x="984.8" y="915.0" width="17.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 4.35%)</title><rect x="1001.9" y="963.0" width="51.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.9" y="974.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 4.35%)</title><rect x="1001.9" y="947.0" width="51.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1004.9" y="958.0">Phase..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.45%)</title><rect x="1001.9" y="931.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1004.9" y="942.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.45%)</title><rect x="1001.9" y="915.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.9" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.45%)</title><rect x="1001.9" y="899.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.9" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.45%)</title><rect x="1001.9" y="883.0" width="17.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.9" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.45%)</title><rect x="1001.9" y="867.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.9" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 1.45%)</title><rect x="1001.9" y="851.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1004.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.45%)</title><rect x="1019.0" y="931.0" width="17.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1022.0" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.45%)</title><rect x="1019.0" y="915.0" width="17.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.0" y="926.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 1.45%)</title><rect x="1019.0" y="899.0" width="17.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.0" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 1.45%)</title><rect x="1019.0" y="883.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.0" y="894.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 1.45%)</title><rect x="1036.1" y="931.0" width="17.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.1" y="942.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 1.45%)</title><rect x="1036.1" y="915.0" width="17.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 10.14%)</title><rect x="1053.2" y="979.0" width="119.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.2" y="990.0">ParseGenerator:..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 10.14%)</title><rect x="1053.2" y="963.0" width="119.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.2" y="974.0">Parse::Parse(JV..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 10.14%)</title><rect x="1053.2" y="947.0" width="119.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.2" y="958.0">Parse::do_all_b..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 10.14%)</title><rect x="1053.2" y="931.0" width="119.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.2" y="942.0">Parse::do_one_b..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 10.14%)</title><rect x="1053.2" y="915.0" width="119.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.2" y="926.0">Parse::do_one_b..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 10.14%)</title><rect x="1053.2" y="899.0" width="119.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.2" y="910.0">Parse::do_call()</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 10.14%)</title><rect x="1053.2" y="883.0" width="119.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.2" y="894.0">ParseGenerator:..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 10.14%)</title><rect x="1053.2" y="867.0" width="119.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.2" y="878.0">Parse::Parse(JV..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 10.14%)</title><rect x="1053.2" y="851.0" width="119.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.2" y="862.0">Parse::do_all_b..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 10.14%)</title><rect x="1053.2" y="835.0" width="119.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.2" y="846.0">Parse::do_one_b..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 10.14%)</title><rect x="1053.2" y="819.0" width="119.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.2" y="830.0">Parse::do_one_b..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 10.14%)</title><rect x="1053.2" y="803.0" width="119.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.2" y="814.0">Parse::do_call()</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.45%)</title><rect x="1053.2" y="787.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.2" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.45%)</title><rect x="1053.2" y="771.0" width="17.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.2" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.45%)</title><rect x="1053.2" y="755.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.2" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.45%)</title><rect x="1053.2" y="739.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.45%)</title><rect x="1053.2" y="723.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.45%)</title><rect x="1053.2" y="707.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.45%)</title><rect x="1053.2" y="691.0" width="17.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1056.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.45%)</title><rect x="1053.2" y="675.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*) (1 samples, 1.45%)</title><rect x="1053.2" y="659.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1056.2" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 1.45%)</title><rect x="1053.2" y="643.0" width="17.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.2" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.45%)</title><rect x="1053.2" y="627.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.2" y="638.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 1.45%)</title><rect x="1070.3" y="787.0" width="17.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.3" y="798.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 1.45%)</title><rect x="1070.3" y="771.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.3" y="782.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 1.45%)</title><rect x="1070.3" y="755.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.3" y="766.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 1.45%)</title><rect x="1070.3" y="739.0" width="17.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.3" y="750.0"></text>
</g>
<g>
<title>ciInstanceKlass::unique_concrete_subklass() (1 samples, 1.45%)</title><rect x="1070.3" y="723.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 5.80%)</title><rect x="1087.4" y="787.0" width="68.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.4" y="798.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 5.80%)</title><rect x="1087.4" y="771.0" width="68.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.4" y="782.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 5.80%)</title><rect x="1087.4" y="755.0" width="68.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.4" y="766.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 5.80%)</title><rect x="1087.4" y="739.0" width="68.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.4" y="750.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 5.80%)</title><rect x="1087.4" y="723.0" width="68.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.4" y="734.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 5.80%)</title><rect x="1087.4" y="707.0" width="68.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.4" y="718.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 5.80%)</title><rect x="1087.4" y="691.0" width="68.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.4" y="702.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 5.80%)</title><rect x="1087.4" y="675.0" width="68.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.4" y="686.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 5.80%)</title><rect x="1087.4" y="659.0" width="68.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.4" y="670.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 5.80%)</title><rect x="1087.4" y="643.0" width="68.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.4" y="654.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 5.80%)</title><rect x="1087.4" y="627.0" width="68.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.4" y="638.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 5.80%)</title><rect x="1087.4" y="611.0" width="68.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.4" y="622.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 5.80%)</title><rect x="1087.4" y="595.0" width="68.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.4" y="606.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 5.80%)</title><rect x="1087.4" y="579.0" width="68.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.4" y="590.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 5.80%)</title><rect x="1087.4" y="563.0" width="68.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.4" y="574.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 5.80%)</title><rect x="1087.4" y="547.0" width="68.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.4" y="558.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 5.80%)</title><rect x="1087.4" y="531.0" width="68.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.4" y="542.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.90%)</title><rect x="1087.4" y="515.0" width="34.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.4" y="526.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.90%)</title><rect x="1087.4" y="499.0" width="34.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.4" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.90%)</title><rect x="1087.4" y="483.0" width="34.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.4" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.90%)</title><rect x="1087.4" y="467.0" width="34.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.4" y="478.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.90%)</title><rect x="1087.4" y="451.0" width="34.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.4" y="462.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 1.45%)</title><rect x="1087.4" y="435.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.4" y="446.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 1.45%)</title><rect x="1087.4" y="419.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.4" y="430.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 1.45%)</title><rect x="1087.4" y="403.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.4" y="414.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 1.45%)</title><rect x="1087.4" y="387.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.45%)</title><rect x="1104.5" y="435.0" width="17.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.45%)</title><rect x="1104.5" y="419.0" width="17.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.5" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.45%)</title><rect x="1104.5" y="403.0" width="17.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.45%)</title><rect x="1104.5" y="387.0" width="17.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.45%)</title><rect x="1104.5" y="371.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.45%)</title><rect x="1104.5" y="355.0" width="17.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.45%)</title><rect x="1104.5" y="339.0" width="17.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.45%)</title><rect x="1104.5" y="323.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.45%)</title><rect x="1104.5" y="307.0" width="17.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.5" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.45%)</title><rect x="1104.5" y="291.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.5" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.45%)</title><rect x="1104.5" y="275.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.5" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.45%)</title><rect x="1104.5" y="259.0" width="17.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.5" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.45%)</title><rect x="1104.5" y="243.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.5" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.45%)</title><rect x="1104.5" y="227.0" width="17.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.45%)</title><rect x="1104.5" y="211.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.45%)</title><rect x="1104.5" y="195.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.5" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.45%)</title><rect x="1104.5" y="179.0" width="17.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.5" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 1.45%)</title><rect x="1104.5" y="163.0" width="17.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.5" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.45%)</title><rect x="1104.5" y="147.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.5" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 1.45%)</title><rect x="1104.5" y="131.0" width="17.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.5" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 1.45%)</title><rect x="1104.5" y="115.0" width="17.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.5" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 1.45%)</title><rect x="1104.5" y="99.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.5" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.45%)</title><rect x="1104.5" y="83.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.5" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 1.45%)</title><rect x="1104.5" y="67.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.5" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 1.45%)</title><rect x="1104.5" y="51.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.5" y="62.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 1.45%)</title><rect x="1104.5" y="35.0" width="17.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 1.45%)</title><rect x="1121.6" y="515.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.6" y="526.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 1.45%)</title><rect x="1121.6" y="499.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 1.45%)</title><rect x="1138.7" y="515.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.7" y="526.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 1.45%)</title><rect x="1138.7" y="499.0" width="17.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="510.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 1.45%)</title><rect x="1138.7" y="483.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.7" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.45%)</title><rect x="1155.8" y="787.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.8" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 1.45%)</title><rect x="1172.9" y="1011.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.9" y="1022.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 1.45%)</title><rect x="1172.9" y="995.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.9" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 1.45%)</title><rect x="1172.9" y="979.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 1.45%)</title><rect x="1172.9" y="963.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.9" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 1.45%)</title><rect x="1172.9" y="947.0" width="17.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="958.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 1.45%)</title><rect x="1172.9" y="931.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="942.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 1.45%)</title><rect x="1172.9" y="915.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.9" y="926.0"></text>
</g>
</g>
</svg>
