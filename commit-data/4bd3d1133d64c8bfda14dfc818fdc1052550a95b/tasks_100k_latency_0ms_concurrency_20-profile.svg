<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (422 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.24%)</title><rect x="10.0" y="899.0" width="2.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.24%)</title><rect x="10.0" y="883.0" width="2.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (172 samples, 40.76%)</title><rect x="12.8" y="899.0" width="480.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.8" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (172 samples, 40.76%)</title><rect x="12.8" y="883.0" width="480.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollO..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.24%)</title><rect x="12.8" y="867.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.24%)</title><rect x="12.8" y="851.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.24%)</title><rect x="12.8" y="835.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.24%)</title><rect x="12.8" y="819.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (161 samples, 38.15%)</title><rect x="15.6" y="867.0" width="450.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="878.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/155185504.accept (160 samples, 37.91%)</title><rect x="15.6" y="851.0" width="447.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.6" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (160 samples, 37.91%)</title><rect x="15.6" y="835.0" width="447.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (149 samples, 35.31%)</title><rect x="15.6" y="819.0" width="416.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.6" y="830.0">com/linecorp/decaton/processor/runtime/PartitionContext.a..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (149 samples, 35.31%)</title><rect x="15.6" y="803.0" width="416.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="814.0">com/linecorp/decaton/processor/runtime/PartitionProcessor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (149 samples, 35.31%)</title><rect x="15.6" y="787.0" width="416.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.putT..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (149 samples, 35.31%)</title><rect x="15.6" y="771.0" width="416.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="782.0">java/util/concurrent/Executors$DelegatedExecutorService.e..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 35.31%)</title><rect x="15.6" y="755.0" width="416.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.6" y="766.0">java/util/concurrent/ThreadPoolExecutor.execute</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.24%)</title><rect x="21.2" y="739.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (146 samples, 34.60%)</title><rect x="24.0" y="739.0" width="408.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.0" y="750.0">java/util/concurrent/LinkedBlockingQueue.offer</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (145 samples, 34.36%)</title><rect x="26.8" y="723.0" width="405.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.8" y="734.0">java/util/concurrent/LinkedBlockingQueue.signalNotEmpty</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.47%)</title><rect x="26.8" y="707.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (2 samples, 0.47%)</title><rect x="26.8" y="691.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (143 samples, 33.89%)</title><rect x="32.4" y="707.0" width="399.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.4" y="718.0">java/util/concurrent/locks/ReentrantLock.unlock</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (143 samples, 33.89%)</title><rect x="32.4" y="691.0" width="399.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.4" y="702.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.r..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (143 samples, 33.89%)</title><rect x="32.4" y="675.0" width="399.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.4" y="686.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (143 samples, 33.89%)</title><rect x="32.4" y="659.0" width="399.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.4" y="670.0">java/util/concurrent/locks/LockSupport.unpark</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (143 samples, 33.89%)</title><rect x="32.4" y="643.0" width="399.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.4" y="654.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>Unsafe_Unpark (137 samples, 32.46%)</title><rect x="46.4" y="627.0" width="383.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="49.4" y="638.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.24%)</title><rect x="46.4" y="611.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="49.4" y="622.0"></text>
</g>
<g>
<title>Parker::unpark() (64 samples, 15.17%)</title><rect x="49.1" y="611.0" width="179.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="52.1" y="622.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (64 samples, 15.17%)</title><rect x="49.1" y="595.0" width="179.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="52.1" y="606.0">__psynch_cvsignal</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.24%)</title><rect x="228.1" y="611.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="231.1" y="622.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (70 samples, 16.59%)</title><rect x="230.9" y="611.0" width="195.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="233.9" y="622.0">_pthread_mutex_firstfit_u..</text>
</g>
<g>
<title>__psynch_mutexdrop (69 samples, 16.35%)</title><rect x="233.7" y="595.0" width="192.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="236.7" y="606.0">__psynch_mutexdrop</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.24%)</title><rect x="426.6" y="611.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="429.6" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.24%)</title><rect x="429.4" y="627.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="432.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (11 samples, 2.61%)</title><rect x="432.2" y="819.0" width="30.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.2" y="830.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.24%)</title><rect x="432.2" y="803.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 2.13%)</title><rect x="435.0" y="803.0" width="25.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.0" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.95%)</title><rect x="446.2" y="787.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.2" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.24%)</title><rect x="451.8" y="771.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="454.8" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.24%)</title><rect x="451.8" y="755.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="454.8" y="766.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.24%)</title><rect x="451.8" y="739.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="454.8" y="750.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.24%)</title><rect x="451.8" y="723.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="454.8" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.24%)</title><rect x="454.6" y="771.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="457.6" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.24%)</title><rect x="454.6" y="755.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.6" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="454.6" y="739.0" width="2.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="457.6" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="457.4" y="787.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="460.4" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="460.2" y="803.0" width="2.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="463.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.24%)</title><rect x="463.0" y="851.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.24%)</title><rect x="463.0" y="835.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 2.37%)</title><rect x="465.8" y="867.0" width="27.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.8" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 2.37%)</title><rect x="465.8" y="851.0" width="27.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.8" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 1.66%)</title><rect x="465.8" y="835.0" width="19.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.24%)</title><rect x="465.8" y="819.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.24%)</title><rect x="465.8" y="803.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.24%)</title><rect x="465.8" y="787.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.24%)</title><rect x="468.6" y="819.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.24%)</title><rect x="468.6" y="803.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.24%)</title><rect x="468.6" y="787.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.24%)</title><rect x="468.6" y="771.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.24%)</title><rect x="468.6" y="755.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.24%)</title><rect x="468.6" y="739.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.24%)</title><rect x="468.6" y="723.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.24%)</title><rect x="468.6" y="707.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.24%)</title><rect x="468.6" y="691.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.24%)</title><rect x="468.6" y="675.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.6" y="686.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.24%)</title><rect x="468.6" y="659.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="471.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.18%)</title><rect x="471.4" y="819.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="474.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.18%)</title><rect x="471.4" y="803.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 0.95%)</title><rect x="471.4" y="787.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 0.95%)</title><rect x="471.4" y="771.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 0.95%)</title><rect x="471.4" y="755.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.24%)</title><rect x="471.4" y="739.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.24%)</title><rect x="471.4" y="723.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.24%)</title><rect x="471.4" y="707.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.24%)</title><rect x="471.4" y="691.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="474.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.24%)</title><rect x="471.4" y="675.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.24%)</title><rect x="471.4" y="659.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="474.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.24%)</title><rect x="471.4" y="643.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.24%)</title><rect x="474.2" y="739.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.24%)</title><rect x="474.2" y="723.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.47%)</title><rect x="477.0" y="739.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.47%)</title><rect x="477.0" y="723.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.47%)</title><rect x="477.0" y="707.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.47%)</title><rect x="477.0" y="691.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (2 samples, 0.47%)</title><rect x="477.0" y="675.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.24%)</title><rect x="479.8" y="659.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.24%)</title><rect x="482.6" y="787.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.24%)</title><rect x="482.6" y="771.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.24%)</title><rect x="482.6" y="755.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="482.6" y="739.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.47%)</title><rect x="485.4" y="835.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.24%)</title><rect x="485.4" y="819.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.24%)</title><rect x="485.4" y="803.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.24%)</title><rect x="485.4" y="787.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.24%)</title><rect x="485.4" y="771.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.24%)</title><rect x="485.4" y="755.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.24%)</title><rect x="485.4" y="739.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.24%)</title><rect x="485.4" y="723.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.4" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.24%)</title><rect x="485.4" y="707.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.24%)</title><rect x="485.4" y="691.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.4" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.24%)</title><rect x="485.4" y="675.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (1 samples, 0.24%)</title><rect x="485.4" y="659.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.24%)</title><rect x="488.2" y="819.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.24%)</title><rect x="488.2" y="803.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.24%)</title><rect x="488.2" y="787.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.24%)</title><rect x="488.2" y="771.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="491.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.24%)</title><rect x="488.2" y="755.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.24%)</title><rect x="488.2" y="739.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.24%)</title><rect x="488.2" y="723.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.2" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.24%)</title><rect x="488.2" y="707.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.2" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.24%)</title><rect x="488.2" y="691.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.2" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.24%)</title><rect x="488.2" y="675.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.2" y="686.0"></text>
</g>
<g>
<title>BarrierSet::static_write_ref_array_post(HeapWord*, unsigned long) (1 samples, 0.24%)</title><rect x="488.2" y="659.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="491.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.24%)</title><rect x="490.9" y="835.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="493.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.24%)</title><rect x="490.9" y="819.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (105 samples, 24.88%)</title><rect x="493.7" y="899.0" width="293.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.7" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (105 samples, 24.88%)</title><rect x="493.7" y="883.0" width="293.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.7" y="894.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (105 samples, 24.88%)</title><rect x="493.7" y="867.0" width="293.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.7" y="878.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1172077137.run (28 samples, 6.64%)</title><rect x="496.5" y="851.0" width="78.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.5" y="862.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (28 samples, 6.64%)</title><rect x="496.5" y="835.0" width="78.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.5" y="846.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (28 samples, 6.64%)</title><rect x="496.5" y="819.0" width="78.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.5" y="830.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (27 samples, 6.40%)</title><rect x="496.5" y="803.0" width="75.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.5" y="814.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 3.32%)</title><rect x="499.3" y="787.0" width="39.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="502.3" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (14 samples, 3.32%)</title><rect x="499.3" y="771.0" width="39.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.3" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 3.32%)</title><rect x="499.3" y="755.0" width="39.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.3" y="766.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 3.32%)</title><rect x="499.3" y="739.0" width="39.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.3" y="750.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 3.32%)</title><rect x="499.3" y="723.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.3" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 3.32%)</title><rect x="499.3" y="707.0" width="39.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.3" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 0.95%)</title><rect x="499.3" y="691.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="502.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 0.95%)</title><rect x="499.3" y="675.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.95%)</title><rect x="499.3" y="659.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.47%)</title><rect x="499.3" y="643.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.47%)</title><rect x="499.3" y="627.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.47%)</title><rect x="504.9" y="643.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.47%)</title><rect x="504.9" y="627.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.24%)</title><rect x="504.9" y="611.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.24%)</title><rect x="507.7" y="611.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="507.7" y="595.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="510.7" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.24%)</title><rect x="507.7" y="579.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="510.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.24%)</title><rect x="507.7" y="563.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="510.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="507.7" y="547.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="510.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.24%)</title><rect x="507.7" y="531.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.7" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.24%)</title><rect x="507.7" y="515.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.7" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object_impl(HeapWord*, unsigned long, bool) (1 samples, 0.24%)</title><rect x="507.7" y="499.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="510.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 2.37%)</title><rect x="510.5" y="691.0" width="28.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.5" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.47%)</title><rect x="510.5" y="675.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="513.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.47%)</title><rect x="510.5" y="659.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.47%)</title><rect x="510.5" y="643.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.47%)</title><rect x="510.5" y="627.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="513.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.47%)</title><rect x="510.5" y="611.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="513.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.24%)</title><rect x="510.5" y="595.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.24%)</title><rect x="513.3" y="595.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="516.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.24%)</title><rect x="513.3" y="579.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.47%)</title><rect x="516.1" y="675.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.47%)</title><rect x="516.1" y="659.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 1.42%)</title><rect x="521.7" y="675.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.24%)</title><rect x="524.5" y="659.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.24%)</title><rect x="524.5" y="643.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.24%)</title><rect x="524.5" y="627.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="527.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.24%)</title><rect x="524.5" y="611.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 0.95%)</title><rect x="527.3" y="659.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 0.95%)</title><rect x="527.3" y="643.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 0.95%)</title><rect x="527.3" y="627.0" width="11.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="530.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.47%)</title><rect x="527.3" y="611.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.47%)</title><rect x="527.3" y="595.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.47%)</title><rect x="527.3" y="579.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.47%)</title><rect x="527.3" y="563.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="530.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.47%)</title><rect x="527.3" y="547.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.24%)</title><rect x="532.9" y="611.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.24%)</title><rect x="535.7" y="611.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.24%)</title><rect x="535.7" y="595.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.24%)</title><rect x="535.7" y="579.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.24%)</title><rect x="535.7" y="563.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.7" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.24%)</title><rect x="535.7" y="547.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.7" y="558.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.24%)</title><rect x="535.7" y="531.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.7" y="542.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.24%)</title><rect x="535.7" y="515.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (10 samples, 2.37%)</title><rect x="538.5" y="787.0" width="27.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.5" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.24%)</title><rect x="538.5" y="771.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.5" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.24%)</title><rect x="538.5" y="755.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.5" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.24%)</title><rect x="538.5" y="739.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.24%)</title><rect x="538.5" y="723.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.24%)</title><rect x="538.5" y="707.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.5" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.24%)</title><rect x="538.5" y="691.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="541.3" y="771.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="541.3" y="755.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.3" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.24%)</title><rect x="541.3" y="739.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (6 samples, 1.42%)</title><rect x="544.1" y="771.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="547.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (6 samples, 1.42%)</title><rect x="544.1" y="755.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 0.71%)</title><rect x="544.1" y="739.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.71%)</title><rect x="544.1" y="723.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.1" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.71%)</title><rect x="544.1" y="707.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.1" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 0.71%)</title><rect x="552.5" y="739.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.5" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.24%)</title><rect x="558.1" y="723.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.24%)</title><rect x="558.1" y="707.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.24%)</title><rect x="558.1" y="691.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.24%)</title><rect x="558.1" y="675.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.24%)</title><rect x="558.1" y="659.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.47%)</title><rect x="560.9" y="771.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.47%)</title><rect x="560.9" y="755.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.9" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.24%)</title><rect x="560.9" y="739.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="563.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.24%)</title><rect x="560.9" y="723.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="563.9" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.24%)</title><rect x="560.9" y="707.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.24%)</title><rect x="563.6" y="739.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.47%)</title><rect x="566.4" y="787.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="569.4" y="798.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="566.4" y="771.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="569.4" y="782.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.24%)</title><rect x="566.4" y="755.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="569.4" y="766.0"></text>
</g>
<g>
<title>_res (1 samples, 0.24%)</title><rect x="566.4" y="739.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="569.4" y="750.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.24%)</title><rect x="569.2" y="771.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="572.2" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.24%)</title><rect x="572.0" y="803.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="575.0" y="814.0"></text>
</g>
<g>
<title>_res (1 samples, 0.24%)</title><rect x="572.0" y="787.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="575.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (76 samples, 18.01%)</title><rect x="574.8" y="851.0" width="212.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.8" y="862.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (75 samples, 17.77%)</title><rect x="577.6" y="835.0" width="209.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.6" y="846.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (75 samples, 17.77%)</title><rect x="577.6" y="819.0" width="209.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="580.6" y="830.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (75 samples, 17.77%)</title><rect x="577.6" y="803.0" width="209.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.6" y="814.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (75 samples, 17.77%)</title><rect x="577.6" y="787.0" width="209.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.6" y="798.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (73 samples, 17.30%)</title><rect x="583.2" y="771.0" width="204.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="586.2" y="782.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (71 samples, 16.82%)</title><rect x="583.2" y="755.0" width="198.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="586.2" y="766.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (57 samples, 13.51%)</title><rect x="586.0" y="739.0" width="159.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="589.0" y="750.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (12 samples, 2.84%)</title><rect x="745.4" y="739.0" width="33.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="748.4" y="750.0">_p..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (11 samples, 2.61%)</title><rect x="748.2" y="723.0" width="30.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="751.2" y="734.0">_p..</text>
</g>
<g>
<title>__psynch_mutexwait (11 samples, 2.61%)</title><rect x="748.2" y="707.0" width="30.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="751.2" y="718.0">__..</text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.24%)</title><rect x="779.0" y="739.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="782.0" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.47%)</title><rect x="781.8" y="755.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.47%)</title><rect x="787.3" y="899.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.47%)</title><rect x="787.3" y="883.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.47%)</title><rect x="787.3" y="867.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.24%)</title><rect x="787.3" y="851.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.24%)</title><rect x="787.3" y="835.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.24%)</title><rect x="787.3" y="819.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.24%)</title><rect x="787.3" y="803.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="787.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.24%)</title><rect x="787.3" y="771.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="755.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="739.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="790.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.24%)</title><rect x="787.3" y="723.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="707.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="691.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="790.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="675.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="790.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="787.3" y="659.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.read (1 samples, 0.24%)</title><rect x="787.3" y="643.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.24%)</title><rect x="787.3" y="627.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.getLong (1 samples, 0.24%)</title><rect x="787.3" y="611.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.3" y="622.0"></text>
</g>
<g>
<title>java/nio/Bits.getLongB (1 samples, 0.24%)</title><rect x="787.3" y="595.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.3" y="606.0"></text>
</g>
<g>
<title>java/nio/Bits.makeLong (1 samples, 0.24%)</title><rect x="787.3" y="579.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.24%)</title><rect x="790.1" y="851.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="793.1" y="862.0"></text>
</g>
<g>
<title>thread_start (142 samples, 33.65%)</title><rect x="792.9" y="899.0" width="397.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="795.9" y="910.0">thread_start</text>
</g>
<g>
<title>_pthread_start (142 samples, 33.65%)</title><rect x="792.9" y="883.0" width="397.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="795.9" y="894.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (142 samples, 33.65%)</title><rect x="792.9" y="867.0" width="397.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="795.9" y="878.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (142 samples, 33.65%)</title><rect x="792.9" y="851.0" width="397.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="795.9" y="862.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.24%)</title><rect x="792.9" y="835.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="795.9" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.24%)</title><rect x="792.9" y="819.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="795.9" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.24%)</title><rect x="792.9" y="803.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="795.9" y="814.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.24%)</title><rect x="792.9" y="787.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="795.9" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.24%)</title><rect x="792.9" y="771.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="795.9" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.24%)</title><rect x="792.9" y="755.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="795.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (137 samples, 32.46%)</title><rect x="795.7" y="835.0" width="383.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="798.7" y="846.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (137 samples, 32.46%)</title><rect x="795.7" y="819.0" width="383.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.7" y="830.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (134 samples, 31.75%)</title><rect x="795.7" y="803.0" width="374.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="798.7" y="814.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (131 samples, 31.04%)</title><rect x="795.7" y="787.0" width="366.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="798.7" y="798.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (130 samples, 30.81%)</title><rect x="795.7" y="771.0" width="363.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.7" y="782.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (128 samples, 30.33%)</title><rect x="795.7" y="755.0" width="357.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="798.7" y="766.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (82 samples, 19.43%)</title><rect x="795.7" y="739.0" width="229.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="798.7" y="750.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (10 samples, 2.37%)</title><rect x="795.7" y="723.0" width="28.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="798.7" y="734.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.95%)</title><rect x="795.7" y="707.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="798.7" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.24%)</title><rect x="804.1" y="691.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="807.1" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (6 samples, 1.42%)</title><rect x="806.9" y="707.0" width="16.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.9" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (6 samples, 1.42%)</title><rect x="806.9" y="691.0" width="16.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="809.9" y="702.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.24%)</title><rect x="812.5" y="675.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.5" y="686.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.24%)</title><rect x="812.5" y="659.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.5" y="670.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.24%)</title><rect x="815.3" y="675.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="818.3" y="686.0"></text>
</g>
<g>
<title>castP2XNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.24%)</title><rect x="818.1" y="675.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="821.1" y="686.0"></text>
</g>
<g>
<title>jmpDirNode::short_branch_version(Compile*) (1 samples, 0.24%)</title><rect x="820.9" y="675.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="823.9" y="686.0"></text>
</g>
<g>
<title>MachNode::fill_new_machnode(MachNode*, Compile*) const (1 samples, 0.24%)</title><rect x="820.9" y="659.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="823.9" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.24%)</title><rect x="823.7" y="723.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.7" y="734.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.24%)</title><rect x="823.7" y="707.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.7" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (12 samples, 2.84%)</title><rect x="826.5" y="723.0" width="33.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.5" y="734.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (5 samples, 1.18%)</title><rect x="826.5" y="707.0" width="14.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="829.5" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 1.42%)</title><rect x="840.5" y="707.0" width="16.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="843.5" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.24%)</title><rect x="840.5" y="691.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="843.5" y="702.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.24%)</title><rect x="843.3" y="691.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="846.3" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.24%)</title><rect x="843.3" y="675.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="846.3" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.24%)</title><rect x="843.3" y="659.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="846.3" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.47%)</title><rect x="846.1" y="691.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.1" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.24%)</title><rect x="846.1" y="675.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="849.1" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.24%)</title><rect x="848.9" y="675.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.9" y="686.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.24%)</title><rect x="848.9" y="659.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="851.9" y="670.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.24%)</title><rect x="851.7" y="691.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.7" y="702.0"></text>
</g>
<g>
<title>PhiNode::size_of() const (1 samples, 0.24%)</title><rect x="854.5" y="691.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="857.5" y="702.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.24%)</title><rect x="857.3" y="707.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.24%)</title><rect x="860.0" y="723.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="863.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.24%)</title><rect x="860.0" y="707.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="863.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.24%)</title><rect x="860.0" y="691.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.24%)</title><rect x="862.8" y="723.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="865.8" y="734.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.24%)</title><rect x="862.8" y="707.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="865.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (57 samples, 13.51%)</title><rect x="865.6" y="723.0" width="159.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.6" y="734.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>LiveRangeMap::reset_uf_map(unsigned int) (1 samples, 0.24%)</title><rect x="865.6" y="707.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.6" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.47%)</title><rect x="868.4" y="707.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.4" y="718.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::raw_at_put_grow(int, unsigned int const&amp;, unsigned int const&amp;) (1 samples, 0.24%)</title><rect x="871.2" y="691.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="874.2" y="702.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::grow(int) (1 samples, 0.24%)</title><rect x="871.2" y="675.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.71%)</title><rect x="874.0" y="707.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.0" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="876.8" y="691.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.8" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.24%)</title><rect x="879.6" y="691.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="879.6" y="675.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.95%)</title><rect x="882.4" y="707.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.4" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.95%)</title><rect x="882.4" y="691.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="885.4" y="702.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.24%)</title><rect x="885.2" y="675.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.2" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="888.0" y="675.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.0" y="686.0"></text>
</g>
<g>
<title>VectorSet::set(unsigned int) (1 samples, 0.24%)</title><rect x="890.8" y="675.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="893.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 1.90%)</title><rect x="893.6" y="707.0" width="22.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.6" y="718.0">P..</text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.24%)</title><rect x="907.6" y="691.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.6" y="702.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.24%)</title><rect x="910.4" y="691.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="913.4" y="702.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.24%)</title><rect x="910.4" y="675.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::is_high_pressure(Block*, LRG*, unsigned int) (1 samples, 0.24%)</title><rect x="913.2" y="691.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 2.84%)</title><rect x="916.0" y="707.0" width="33.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.0" y="718.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="924.4" y="691.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 1.42%)</title><rect x="927.2" y="691.0" width="16.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.2" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.24%)</title><rect x="927.2" y="675.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.2" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.24%)</title><rect x="927.2" y="659.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.2" y="670.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.24%)</title><rect x="927.2" y="643.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.2" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.71%)</title><rect x="930.0" y="675.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.0" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.24%)</title><rect x="938.3" y="675.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.3" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.24%)</title><rect x="941.1" y="675.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.1" y="686.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.24%)</title><rect x="943.9" y="691.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.9" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.24%)</title><rect x="946.7" y="691.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.24%)</title><rect x="949.5" y="707.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 2.13%)</title><rect x="952.3" y="707.0" width="25.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.3" y="718.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.24%)</title><rect x="966.3" y="691.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.3" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.47%)</title><rect x="969.1" y="691.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="972.1" y="702.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.24%)</title><rect x="974.7" y="691.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.7" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.24%)</title><rect x="974.7" y="675.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.18%)</title><rect x="977.5" y="707.0" width="14.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.47%)</title><rect x="980.3" y="691.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.3" y="702.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.24%)</title><rect x="985.9" y="691.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.9" y="702.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.24%)</title><rect x="988.7" y="691.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.7" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.24%)</title><rect x="991.5" y="707.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.5" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.24%)</title><rect x="991.5" y="691.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.5" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.24%)</title><rect x="991.5" y="675.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.5" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.24%)</title><rect x="991.5" y="659.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.5" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.47%)</title><rect x="994.3" y="707.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.3" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.24%)</title><rect x="994.3" y="691.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.3" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.24%)</title><rect x="997.1" y="691.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.1" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="997.1" y="675.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1000.1" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.71%)</title><rect x="999.9" y="707.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1002.9" y="718.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.24%)</title><rect x="999.9" y="691.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.24%)</title><rect x="1002.7" y="691.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="1005.5" y="691.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.5" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.24%)</title><rect x="1008.2" y="707.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.2" y="718.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="1008.2" y="691.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.2" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.95%)</title><rect x="1011.0" y="707.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1014.0" y="718.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="1013.8" y="691.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.8" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.47%)</title><rect x="1016.6" y="691.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.6" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.24%)</title><rect x="1016.6" y="675.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.6" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="1019.4" y="675.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.4" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.24%)</title><rect x="1022.2" y="707.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.2" y="718.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.24%)</title><rect x="1022.2" y="691.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.2" y="702.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.24%)</title><rect x="1022.2" y="675.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.2" y="686.0"></text>
</g>
<g>
<title>free (1 samples, 0.24%)</title><rect x="1022.2" y="659.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1025.2" y="670.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.24%)</title><rect x="1022.2" y="643.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1025.2" y="654.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 6.40%)</title><rect x="1025.0" y="739.0" width="75.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.0" y="750.0">Compile:..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.24%)</title><rect x="1025.0" y="723.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1028.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.24%)</title><rect x="1025.0" y="707.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.0" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.24%)</title><rect x="1027.8" y="723.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.8" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.24%)</title><rect x="1027.8" y="707.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.8" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1027.8" y="691.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.8" y="702.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.24%)</title><rect x="1027.8" y="675.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.8" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.47%)</title><rect x="1030.6" y="723.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1033.6" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.47%)</title><rect x="1030.6" y="707.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.6" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.24%)</title><rect x="1033.4" y="691.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.24%)</title><rect x="1036.2" y="723.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.2" y="734.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.24%)</title><rect x="1036.2" y="707.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.2" y="718.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.24%)</title><rect x="1036.2" y="691.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.2" y="702.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="1036.2" y="675.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.2" y="686.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="1036.2" y="659.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.2" y="670.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.24%)</title><rect x="1036.2" y="643.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.2" y="654.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.24%)</title><rect x="1036.2" y="627.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.2" y="638.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.24%)</title><rect x="1036.2" y="611.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1039.2" y="622.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.24%)</title><rect x="1036.2" y="595.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1039.2" y="606.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.24%)</title><rect x="1036.2" y="579.0" width="2.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1039.2" y="590.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.24%)</title><rect x="1036.2" y="563.0" width="2.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1039.2" y="574.0"></text>
</g>
<g>
<title>mvm_allocate_pages (1 samples, 0.24%)</title><rect x="1036.2" y="547.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1039.2" y="558.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.24%)</title><rect x="1036.2" y="531.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1039.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 4.03%)</title><rect x="1039.0" y="723.0" width="47.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1042.0" y="734.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.24%)</title><rect x="1039.0" y="707.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.0" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.24%)</title><rect x="1039.0" y="691.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.0" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.24%)</title><rect x="1039.0" y="675.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.0" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.24%)</title><rect x="1039.0" y="659.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.24%)</title><rect x="1039.0" y="643.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.24%)</title><rect x="1039.0" y="627.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.24%)</title><rect x="1039.0" y="611.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.0" y="622.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.24%)</title><rect x="1039.0" y="595.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1042.0" y="606.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (2 samples, 0.47%)</title><rect x="1041.8" y="707.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.47%)</title><rect x="1047.4" y="707.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="718.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.24%)</title><rect x="1050.2" y="691.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.42%)</title><rect x="1053.0" y="707.0" width="16.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1056.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.24%)</title><rect x="1064.2" y="691.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.24%)</title><rect x="1064.2" y="675.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.24%)</title><rect x="1064.2" y="659.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.2" y="670.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.24%)</title><rect x="1067.0" y="691.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.95%)</title><rect x="1069.8" y="707.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.47%)</title><rect x="1075.4" y="691.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.47%)</title><rect x="1075.4" y="675.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.24%)</title><rect x="1078.2" y="659.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.24%)</title><rect x="1078.2" y="643.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.24%)</title><rect x="1080.9" y="707.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.24%)</title><rect x="1080.9" y="691.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.9" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.24%)</title><rect x="1083.7" y="707.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.7" y="718.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.24%)</title><rect x="1083.7" y="691.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.7" y="702.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.24%)</title><rect x="1083.7" y="675.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.7" y="686.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.24%)</title><rect x="1083.7" y="659.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1086.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.24%)</title><rect x="1086.5" y="723.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.5" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1086.5" y="707.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.5" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.71%)</title><rect x="1089.3" y="723.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.71%)</title><rect x="1089.3" y="707.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.71%)</title><rect x="1089.3" y="691.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="702.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.24%)</title><rect x="1089.3" y="675.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.3" y="686.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.24%)</title><rect x="1089.3" y="659.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.3" y="670.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.24%)</title><rect x="1089.3" y="643.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.3" y="654.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.24%)</title><rect x="1092.1" y="675.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.1" y="686.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.24%)</title><rect x="1092.1" y="659.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.1" y="670.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.24%)</title><rect x="1092.1" y="643.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.1" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1092.1" y="627.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.1" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.24%)</title><rect x="1092.1" y="611.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.24%)</title><rect x="1094.9" y="675.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="686.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.24%)</title><rect x="1097.7" y="723.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 4.03%)</title><rect x="1100.5" y="739.0" width="47.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 4.03%)</title><rect x="1100.5" y="723.0" width="47.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.5" y="734.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 4.03%)</title><rect x="1100.5" y="707.0" width="47.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.5" y="718.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 4.03%)</title><rect x="1100.5" y="691.0" width="47.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.5" y="702.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 4.03%)</title><rect x="1100.5" y="675.0" width="47.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.5" y="686.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (17 samples, 4.03%)</title><rect x="1100.5" y="659.0" width="47.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.5" y="670.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 2.37%)</title><rect x="1100.5" y="643.0" width="28.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.5" y="654.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 2.37%)</title><rect x="1100.5" y="627.0" width="28.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.5" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 2.37%)</title><rect x="1100.5" y="611.0" width="28.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.5" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 2.37%)</title><rect x="1100.5" y="595.0" width="28.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.5" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 2.37%)</title><rect x="1100.5" y="579.0" width="28.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.5" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.66%)</title><rect x="1100.5" y="563.0" width="19.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.42%)</title><rect x="1100.5" y="547.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.42%)</title><rect x="1100.5" y="531.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.42%)</title><rect x="1100.5" y="515.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.42%)</title><rect x="1100.5" y="499.0" width="16.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.42%)</title><rect x="1100.5" y="483.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.18%)</title><rect x="1103.3" y="467.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1103.3" y="451.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1103.3" y="435.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1103.3" y="419.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1103.3" y="403.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1103.3" y="387.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.47%)</title><rect x="1103.3" y="371.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.3" y="382.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1103.3" y="355.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.3" y="366.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (2 samples, 0.47%)</title><rect x="1103.3" y="339.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.3" y="350.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.24%)</title><rect x="1103.3" y="323.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.3" y="334.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.24%)</title><rect x="1103.3" y="307.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.3" y="318.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.24%)</title><rect x="1103.3" y="291.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.3" y="302.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.24%)</title><rect x="1103.3" y="275.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.3" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.24%)</title><rect x="1103.3" y="259.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.3" y="270.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.24%)</title><rect x="1103.3" y="243.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.3" y="254.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.24%)</title><rect x="1106.1" y="323.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.1" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="307.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.1" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="291.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.1" y="302.0"></text>
</g>
<g>
<title>GraphKit::post_barrier(Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="275.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.1" y="286.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="259.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.1" y="270.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="243.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.1" y="254.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.24%)</title><rect x="1106.1" y="227.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="238.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.24%)</title><rect x="1106.1" y="211.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.1" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.24%)</title><rect x="1106.1" y="195.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.1" y="206.0"></text>
</g>
<g>
<title>MergeMemStream::MergeMemStream(MergeMemNode*, MergeMemNode const*) (1 samples, 0.24%)</title><rect x="1106.1" y="179.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.1" y="190.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.24%)</title><rect x="1106.1" y="163.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="174.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.24%)</title><rect x="1106.1" y="147.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="158.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.24%)</title><rect x="1106.1" y="131.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="142.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.24%)</title><rect x="1106.1" y="115.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.1" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.24%)</title><rect x="1106.1" y="99.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1109.1" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1108.9" y="451.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1108.9" y="435.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1108.9" y="419.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1108.9" y="403.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1108.9" y="387.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.9" y="398.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.24%)</title><rect x="1108.9" y="371.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1111.7" y="435.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1111.7" y="419.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1111.7" y="403.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1111.7" y="387.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1111.7" y="371.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1111.7" y="355.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.47%)</title><rect x="1111.7" y="339.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1111.7" y="323.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1111.7" y="307.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1111.7" y="291.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1111.7" y="275.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1111.7" y="259.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.47%)</title><rect x="1111.7" y="243.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1111.7" y="227.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1111.7" y="211.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1111.7" y="195.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1111.7" y="179.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1111.7" y="163.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1111.7" y="147.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.7" y="158.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.24%)</title><rect x="1111.7" y="131.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.7" y="142.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.24%)</title><rect x="1111.7" y="115.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.7" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1111.7" y="99.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.7" y="110.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.24%)</title><rect x="1111.7" y="83.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="94.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.24%)</title><rect x="1111.7" y="67.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.24%)</title><rect x="1114.5" y="147.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.5" y="158.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.24%)</title><rect x="1114.5" y="131.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.5" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1117.3" y="547.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.24%)</title><rect x="1117.3" y="531.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.3" y="542.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.24%)</title><rect x="1117.3" y="515.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.3" y="526.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.24%)</title><rect x="1117.3" y="499.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.3" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.24%)</title><rect x="1117.3" y="483.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.3" y="494.0"></text>
</g>
<g>
<title>Node::raise_bottom_type(Type const*) (1 samples, 0.24%)</title><rect x="1117.3" y="467.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.47%)</title><rect x="1120.1" y="563.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.47%)</title><rect x="1120.1" y="547.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.1" y="558.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.24%)</title><rect x="1120.1" y="531.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.1" y="542.0"></text>
</g>
<g>
<title>GraphKit::post_barrier(Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1120.1" y="515.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.1" y="526.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1120.1" y="499.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.1" y="510.0"></text>
</g>
<g>
<title>URShiftLNode::bottom_type() const (1 samples, 0.24%)</title><rect x="1120.1" y="483.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.1" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.24%)</title><rect x="1122.9" y="531.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.9" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.24%)</title><rect x="1122.9" y="515.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.9" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1122.9" y="499.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.9" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.24%)</title><rect x="1122.9" y="483.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.9" y="494.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.24%)</title><rect x="1122.9" y="467.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1125.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.24%)</title><rect x="1125.7" y="563.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.7" y="574.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.24%)</title><rect x="1125.7" y="547.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.7" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.24%)</title><rect x="1125.7" y="531.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.7" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1125.7" y="515.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.7" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 1.66%)</title><rect x="1128.5" y="643.0" width="19.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.66%)</title><rect x="1128.5" y="627.0" width="19.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.66%)</title><rect x="1128.5" y="611.0" width="19.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.66%)</title><rect x="1128.5" y="595.0" width="19.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.66%)</title><rect x="1128.5" y="579.0" width="19.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.66%)</title><rect x="1128.5" y="563.0" width="19.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.66%)</title><rect x="1128.5" y="547.0" width="19.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.95%)</title><rect x="1128.5" y="531.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.95%)</title><rect x="1128.5" y="515.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.95%)</title><rect x="1128.5" y="499.0" width="11.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.95%)</title><rect x="1128.5" y="483.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.95%)</title><rect x="1128.5" y="467.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.95%)</title><rect x="1128.5" y="451.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.95%)</title><rect x="1128.5" y="435.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.95%)</title><rect x="1128.5" y="419.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.95%)</title><rect x="1128.5" y="403.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.95%)</title><rect x="1128.5" y="387.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.24%)</title><rect x="1128.5" y="371.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.5" y="382.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.24%)</title><rect x="1128.5" y="355.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.5" y="366.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.24%)</title><rect x="1128.5" y="339.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.5" y="350.0"></text>
</g>
<g>
<title>ReplacedNodes::merge_with(ReplacedNodes const&amp;) (1 samples, 0.24%)</title><rect x="1128.5" y="323.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.71%)</title><rect x="1131.3" y="371.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.71%)</title><rect x="1131.3" y="355.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.3" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1131.3" y="339.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.3" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.24%)</title><rect x="1131.3" y="323.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.3" y="334.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.24%)</title><rect x="1131.3" y="307.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.24%)</title><rect x="1131.3" y="291.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.3" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.24%)</title><rect x="1131.3" y="275.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.24%)</title><rect x="1131.3" y="259.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.3" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.24%)</title><rect x="1131.3" y="243.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.24%)</title><rect x="1131.3" y="227.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.24%)</title><rect x="1131.3" y="211.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1134.1" y="339.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1134.1" y="323.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1134.1" y="307.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1134.1" y="291.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1134.1" y="275.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1134.1" y="259.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.1" y="270.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1134.1" y="243.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.1" y="254.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.24%)</title><rect x="1134.1" y="227.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.1" y="238.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.24%)</title><rect x="1134.1" y="211.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="222.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.24%)</title><rect x="1134.1" y="195.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.1" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.24%)</title><rect x="1134.1" y="179.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.1" y="190.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.24%)</title><rect x="1134.1" y="163.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.1" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1136.9" y="339.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1136.9" y="323.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1136.9" y="307.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1136.9" y="291.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1136.9" y="275.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1136.9" y="259.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1136.9" y="243.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.9" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.24%)</title><rect x="1136.9" y="227.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.9" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name(ciKlass*, ciSymbol*, bool) (1 samples, 0.24%)</title><rect x="1136.9" y="211.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.9" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.24%)</title><rect x="1136.9" y="195.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.9" y="206.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.24%)</title><rect x="1136.9" y="179.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.9" y="190.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.24%)</title><rect x="1136.9" y="163.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.9" y="174.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.24%)</title><rect x="1136.9" y="147.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.9" y="158.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.24%)</title><rect x="1136.9" y="131.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.9" y="142.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.24%)</title><rect x="1136.9" y="115.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.9" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1139.7" y="531.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1139.7" y="515.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.71%)</title><rect x="1139.7" y="499.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.71%)</title><rect x="1139.7" y="483.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.71%)</title><rect x="1139.7" y="467.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.71%)</title><rect x="1139.7" y="451.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.71%)</title><rect x="1139.7" y="435.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1139.7" y="419.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1139.7" y="403.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1139.7" y="387.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1139.7" y="371.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1139.7" y="355.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.47%)</title><rect x="1139.7" y="339.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1139.7" y="323.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1139.7" y="307.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1139.7" y="291.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1139.7" y="275.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1139.7" y="259.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1139.7" y="243.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.7" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.7" y="227.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.7" y="211.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1139.7" y="195.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1139.7" y="179.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1139.7" y="163.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1139.7" y="147.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1139.7" y="131.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.7" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.7" y="115.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.7" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.24%)</title><rect x="1139.7" y="99.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.7" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_current_thread(Node*&amp;) (1 samples, 0.24%)</title><rect x="1139.7" y="83.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.7" y="94.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.24%)</title><rect x="1139.7" y="67.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.7" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1139.7" y="51.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.7" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.24%)</title><rect x="1139.7" y="35.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.24%)</title><rect x="1142.5" y="243.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.24%)</title><rect x="1142.5" y="227.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.5" y="238.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.24%)</title><rect x="1142.5" y="211.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.5" y="222.0"></text>
</g>
<g>
<title>GraphKit::post_barrier(Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1142.5" y="195.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1142.5" y="179.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.5" y="190.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.24%)</title><rect x="1142.5" y="163.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.5" y="174.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.24%)</title><rect x="1142.5" y="147.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.5" y="158.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.24%)</title><rect x="1142.5" y="131.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.5" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1145.3" y="419.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1145.3" y="403.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1145.3" y="387.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.3" y="398.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.24%)</title><rect x="1145.3" y="371.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.3" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.24%)</title><rect x="1145.3" y="355.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.3" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.24%)</title><rect x="1145.3" y="339.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="350.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.24%)</title><rect x="1145.3" y="323.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.3" y="334.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.24%)</title><rect x="1145.3" y="307.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.3" y="318.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.47%)</title><rect x="1148.1" y="739.0" width="5.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1151.1" y="750.0"></text>
</g>
<g>
<title>Compile::~Compile() (1 samples, 0.24%)</title><rect x="1153.6" y="755.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="766.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.24%)</title><rect x="1153.6" y="739.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="750.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.24%)</title><rect x="1153.6" y="723.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="734.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.24%)</title><rect x="1153.6" y="707.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="718.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.24%)</title><rect x="1153.6" y="691.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1156.6" y="702.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.24%)</title><rect x="1153.6" y="675.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1156.6" y="686.0"></text>
</g>
<g>
<title>mach_vm_deallocate (1 samples, 0.24%)</title><rect x="1153.6" y="659.0" width="2.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1156.6" y="670.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_root() (1 samples, 0.24%)</title><rect x="1156.4" y="755.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.4" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.24%)</title><rect x="1159.2" y="771.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.2" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.24%)</title><rect x="1159.2" y="755.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.2" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.24%)</title><rect x="1159.2" y="739.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.2" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.24%)</title><rect x="1159.2" y="723.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.2" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.24%)</title><rect x="1159.2" y="707.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.2" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.24%)</title><rect x="1159.2" y="691.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.2" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (1 samples, 0.24%)</title><rect x="1159.2" y="675.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.2" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.24%)</title><rect x="1159.2" y="659.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="670.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.24%)</title><rect x="1159.2" y="643.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.2" y="654.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.24%)</title><rect x="1159.2" y="627.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.2" y="638.0"></text>
</g>
<g>
<title>LIR_Assembler::as_Address(LIR_Address*, RegisterImpl*) (1 samples, 0.24%)</title><rect x="1159.2" y="611.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.2" y="622.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 0.71%)</title><rect x="1162.0" y="787.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.71%)</title><rect x="1162.0" y="771.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.0" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.71%)</title><rect x="1162.0" y="755.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.71%)</title><rect x="1162.0" y="739.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.0" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.71%)</title><rect x="1162.0" y="723.0" width="8.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.47%)</title><rect x="1170.4" y="803.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.4" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.24%)</title><rect x="1170.4" y="787.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.24%)</title><rect x="1170.4" y="771.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.24%)</title><rect x="1170.4" y="755.0" width="2.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1173.4" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.24%)</title><rect x="1170.4" y="739.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="750.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.24%)</title><rect x="1170.4" y="723.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="734.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.24%)</title><rect x="1170.4" y="707.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.4" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.24%)</title><rect x="1173.2" y="787.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.24%)</title><rect x="1173.2" y="771.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.2" y="782.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.24%)</title><rect x="1173.2" y="755.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1176.2" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.24%)</title><rect x="1173.2" y="739.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.24%)</title><rect x="1173.2" y="723.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1176.2" y="734.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.24%)</title><rect x="1176.0" y="803.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.24%)</title><rect x="1176.0" y="787.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.24%)</title><rect x="1176.0" y="771.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.24%)</title><rect x="1176.0" y="755.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.24%)</title><rect x="1176.0" y="739.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.24%)</title><rect x="1176.0" y="723.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.24%)</title><rect x="1176.0" y="707.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.24%)</title><rect x="1176.0" y="691.0" width="2.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.24%)</title><rect x="1176.0" y="675.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.24%)</title><rect x="1176.0" y="659.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.24%)</title><rect x="1178.8" y="835.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.24%)</title><rect x="1178.8" y="819.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.24%)</title><rect x="1178.8" y="803.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.24%)</title><rect x="1178.8" y="787.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.24%)</title><rect x="1178.8" y="771.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.24%)</title><rect x="1178.8" y="755.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.24%)</title><rect x="1178.8" y="739.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.24%)</title><rect x="1178.8" y="723.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.24%)</title><rect x="1178.8" y="707.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (1 samples, 0.24%)</title><rect x="1178.8" y="691.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>ReferenceProcessor::pp2_work(DiscoveredList&amp;, BoolObjectClosure*, OopClosure*) (1 samples, 0.24%)</title><rect x="1178.8" y="675.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::discovered(oopDesc*) (1 samples, 0.24%)</title><rect x="1178.8" y="659.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.71%)</title><rect x="1181.6" y="835.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.6" y="846.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.47%)</title><rect x="1181.6" y="819.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.47%)</title><rect x="1181.6" y="803.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.47%)</title><rect x="1181.6" y="787.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.47%)</title><rect x="1181.6" y="771.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.47%)</title><rect x="1181.6" y="755.0" width="5.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>is_error_reported() (1 samples, 0.24%)</title><rect x="1187.2" y="819.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1190.2" y="830.0"></text>
</g>
</g>
</svg>
