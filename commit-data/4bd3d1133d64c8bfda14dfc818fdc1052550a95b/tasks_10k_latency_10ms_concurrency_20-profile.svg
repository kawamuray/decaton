<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (117 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (9 samples, 7.69%)</title><rect x="10.0" y="931.0" width="90.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.85%)</title><rect x="10.0" y="915.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.85%)</title><rect x="10.0" y="899.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.85%)</title><rect x="10.0" y="883.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.85%)</title><rect x="10.0" y="867.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.85%)</title><rect x="10.0" y="851.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.85%)</title><rect x="10.0" y="835.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.generationIfStable (1 samples, 0.85%)</title><rect x="10.0" y="819.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (8 samples, 6.84%)</title><rect x="20.1" y="915.0" width="80.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.1" y="926.0">com/linec..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 6.84%)</title><rect x="20.1" y="899.0" width="80.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.1" y="910.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 6.84%)</title><rect x="20.1" y="883.0" width="80.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="894.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 4.27%)</title><rect x="20.1" y="867.0" width="50.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.1" y="878.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 3.42%)</title><rect x="20.1" y="851.0" width="40.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.1" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 3.42%)</title><rect x="20.1" y="835.0" width="40.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.1" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 3.42%)</title><rect x="20.1" y="819.0" width="40.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 2.56%)</title><rect x="30.2" y="803.0" width="30.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.2" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 2.56%)</title><rect x="30.2" y="787.0" width="30.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.2" y="798.0">or..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 2.56%)</title><rect x="30.2" y="771.0" width="30.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.2" y="782.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 2.56%)</title><rect x="30.2" y="755.0" width="30.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.2" y="766.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (3 samples, 2.56%)</title><rect x="30.2" y="739.0" width="30.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.2" y="750.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (3 samples, 2.56%)</title><rect x="30.2" y="723.0" width="30.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.2" y="734.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (3 samples, 2.56%)</title><rect x="30.2" y="707.0" width="30.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.2" y="718.0">su..</text>
</g>
<g>
<title>kevent (3 samples, 2.56%)</title><rect x="30.2" y="691.0" width="30.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="33.2" y="702.0">ke..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.85%)</title><rect x="60.4" y="851.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.85%)</title><rect x="60.4" y="835.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasValidPosition (1 samples, 0.85%)</title><rect x="60.4" y="819.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.4" y="830.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.85%)</title><rect x="60.4" y="803.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.71%)</title><rect x="70.5" y="867.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.85%)</title><rect x="70.5" y="851.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.85%)</title><rect x="70.5" y="835.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.85%)</title><rect x="70.5" y="819.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.85%)</title><rect x="70.5" y="803.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.85%)</title><rect x="70.5" y="787.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.85%)</title><rect x="70.5" y="771.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.85%)</title><rect x="70.5" y="755.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.85%)</title><rect x="70.5" y="739.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.85%)</title><rect x="70.5" y="723.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.85%)</title><rect x="70.5" y="707.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.5" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.85%)</title><rect x="70.5" y="691.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="73.5" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.85%)</title><rect x="70.5" y="675.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="73.5" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.85%)</title><rect x="70.5" y="659.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="73.5" y="670.0"></text>
</g>
<g>
<title>nmethodLocker::unlock_nmethod(nmethod*) (1 samples, 0.85%)</title><rect x="70.5" y="643.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="73.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.85%)</title><rect x="80.6" y="851.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.85%)</title><rect x="80.6" y="835.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.85%)</title><rect x="90.7" y="867.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.85%)</title><rect x="90.7" y="851.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.85%)</title><rect x="90.7" y="835.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.85%)</title><rect x="90.7" y="819.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.85%)</title><rect x="90.7" y="803.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.85%)</title><rect x="90.7" y="787.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.85%)</title><rect x="90.7" y="771.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.85%)</title><rect x="90.7" y="755.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.85%)</title><rect x="90.7" y="739.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="93.7" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="723.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.7" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="707.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="93.7" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="691.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="93.7" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="675.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="93.7" y="686.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="659.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.7" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="643.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="93.7" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="627.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.7" y="638.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="611.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="93.7" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="595.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="93.7" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.85%)</title><rect x="90.7" y="579.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.7" y="590.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.85%)</title><rect x="90.7" y="563.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="93.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (68 samples, 58.12%)</title><rect x="100.8" y="931.0" width="685.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.8" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (68 samples, 58.12%)</title><rect x="100.8" y="915.0" width="685.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.8" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (68 samples, 58.12%)</title><rect x="100.8" y="899.0" width="685.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.8" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1106271336.run (68 samples, 58.12%)</title><rect x="100.8" y="883.0" width="685.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.8" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1106271336.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (68 samples, 58.12%)</title><rect x="100.8" y="867.0" width="685.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.8" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (68 samples, 58.12%)</title><rect x="100.8" y="851.0" width="685.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.8" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (68 samples, 58.12%)</title><rect x="100.8" y="835.0" width="685.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.8" y="846.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (5 samples, 4.27%)</title><rect x="100.8" y="819.0" width="50.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.8" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (5 samples, 4.27%)</title><rect x="100.8" y="803.0" width="50.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.8" y="814.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (5 samples, 4.27%)</title><rect x="100.8" y="787.0" width="50.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.8" y="798.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 4.27%)</title><rect x="100.8" y="771.0" width="50.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.8" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (5 samples, 4.27%)</title><rect x="100.8" y="755.0" width="50.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.8" y="766.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (5 samples, 4.27%)</title><rect x="100.8" y="739.0" width="50.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.8" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.85%)</title><rect x="100.8" y="723.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.85%)</title><rect x="100.8" y="707.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.85%)</title><rect x="100.8" y="691.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 2.56%)</title><rect x="110.9" y="723.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.9" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 2.56%)</title><rect x="110.9" y="707.0" width="30.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.9" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.71%)</title><rect x="110.9" y="691.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.85%)</title><rect x="110.9" y="675.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.85%)</title><rect x="110.9" y="659.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="113.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.85%)</title><rect x="110.9" y="643.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.85%)</title><rect x="120.9" y="675.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.85%)</title><rect x="120.9" y="659.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.85%)</title><rect x="120.9" y="643.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.85%)</title><rect x="120.9" y="627.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.85%)</title><rect x="120.9" y="611.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.85%)</title><rect x="131.0" y="691.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.85%)</title><rect x="131.0" y="675.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.85%)</title><rect x="131.0" y="659.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.85%)</title><rect x="131.0" y="643.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.85%)</title><rect x="131.0" y="627.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.85%)</title><rect x="131.0" y="611.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.85%)</title><rect x="141.1" y="723.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.85%)</title><rect x="141.1" y="707.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.85%)</title><rect x="141.1" y="691.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.85%)</title><rect x="141.1" y="675.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.85%)</title><rect x="141.1" y="659.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (63 samples, 53.85%)</title><rect x="151.2" y="819.0" width="635.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.2" y="830.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.85%)</title><rect x="151.2" y="803.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.2" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.85%)</title><rect x="151.2" y="787.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.85%)</title><rect x="151.2" y="771.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.2" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.85%)</title><rect x="151.2" y="755.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="154.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 1.71%)</title><rect x="161.3" y="803.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 1.71%)</title><rect x="161.3" y="787.0" width="20.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.3" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.71%)</title><rect x="161.3" y="771.0" width="20.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="164.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.85%)</title><rect x="171.4" y="755.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.4" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.85%)</title><rect x="171.4" y="739.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.85%)</title><rect x="171.4" y="723.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.85%)</title><rect x="171.4" y="707.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 51.28%)</title><rect x="181.5" y="803.0" width="605.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.5" y="814.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 51.28%)</title><rect x="181.5" y="787.0" width="605.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.5" y="798.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1463076555.process (60 samples, 51.28%)</title><rect x="181.5" y="771.0" width="605.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.5" y="782.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1463076555.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (60 samples, 51.28%)</title><rect x="181.5" y="755.0" width="605.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.5" y="766.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 51.28%)</title><rect x="181.5" y="739.0" width="605.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.5" y="750.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (60 samples, 51.28%)</title><rect x="181.5" y="723.0" width="605.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.5" y="734.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (60 samples, 51.28%)</title><rect x="181.5" y="707.0" width="605.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.5" y="718.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (60 samples, 51.28%)</title><rect x="181.5" y="691.0" width="605.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="184.5" y="702.0">JVM_Sleep</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (60 samples, 51.28%)</title><rect x="181.5" y="675.0" width="605.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="184.5" y="686.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (60 samples, 51.28%)</title><rect x="181.5" y="659.0" width="605.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="184.5" y="670.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__psynch_cvwait (59 samples, 50.43%)</title><rect x="191.5" y="643.0" width="595.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="194.5" y="654.0">__psynch_cvwait</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.85%)</title><rect x="786.6" y="931.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.85%)</title><rect x="786.6" y="915.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.6" y="926.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.85%)</title><rect x="786.6" y="899.0" width="10.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="789.6" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.85%)</title><rect x="786.6" y="883.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="789.6" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.85%)</title><rect x="786.6" y="867.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="789.6" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.85%)</title><rect x="786.6" y="851.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="789.6" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.85%)</title><rect x="786.6" y="835.0" width="10.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="789.6" y="846.0"></text>
</g>
<g>
<title>thread_start (39 samples, 33.33%)</title><rect x="796.7" y="931.0" width="393.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="799.7" y="942.0">thread_start</text>
</g>
<g>
<title>_pthread_start (39 samples, 33.33%)</title><rect x="796.7" y="915.0" width="393.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="799.7" y="926.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (39 samples, 33.33%)</title><rect x="796.7" y="899.0" width="393.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="799.7" y="910.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (39 samples, 33.33%)</title><rect x="796.7" y="883.0" width="393.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="799.7" y="894.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.85%)</title><rect x="796.7" y="867.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.7" y="878.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.85%)</title><rect x="796.7" y="851.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="799.7" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.85%)</title><rect x="796.7" y="835.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.85%)</title><rect x="796.7" y="819.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="799.7" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.85%)</title><rect x="796.7" y="803.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="799.7" y="814.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.85%)</title><rect x="796.7" y="787.0" width="10.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="799.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (38 samples, 32.48%)</title><rect x="806.8" y="867.0" width="383.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.8" y="878.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (38 samples, 32.48%)</title><rect x="806.8" y="851.0" width="383.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="809.8" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (36 samples, 30.77%)</title><rect x="806.8" y="835.0" width="363.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="809.8" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (30 samples, 25.64%)</title><rect x="806.8" y="819.0" width="302.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.8" y="830.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (24 samples, 20.51%)</title><rect x="806.8" y="803.0" width="242.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="809.8" y="814.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (24 samples, 20.51%)</title><rect x="806.8" y="787.0" width="242.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="809.8" y="798.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 13.68%)</title><rect x="806.8" y="771.0" width="161.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.8" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.85%)</title><rect x="806.8" y="755.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="809.8" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.85%)</title><rect x="806.8" y="739.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="809.8" y="750.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.85%)</title><rect x="806.8" y="723.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="809.8" y="734.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.85%)</title><rect x="806.8" y="707.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="809.8" y="718.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.85%)</title><rect x="806.8" y="691.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.8" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.71%)</title><rect x="816.8" y="755.0" width="20.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="819.8" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.71%)</title><rect x="816.8" y="739.0" width="20.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="819.8" y="750.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.85%)</title><rect x="816.8" y="723.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.8" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.85%)</title><rect x="826.9" y="723.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 11.11%)</title><rect x="837.0" y="755.0" width="131.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.0" y="766.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.85%)</title><rect x="837.0" y="739.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.0" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.85%)</title><rect x="837.0" y="723.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.0" y="734.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.85%)</title><rect x="837.0" y="707.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="840.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.85%)</title><rect x="847.1" y="739.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.1" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.85%)</title><rect x="847.1" y="723.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="850.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.71%)</title><rect x="857.2" y="739.0" width="20.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::is_high_pressure(Block*, LRG*, unsigned int) (1 samples, 0.85%)</title><rect x="867.3" y="723.0" width="10.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.71%)</title><rect x="877.4" y="739.0" width="20.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.4" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.85%)</title><rect x="887.4" y="723.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="890.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.71%)</title><rect x="897.5" y="739.0" width="20.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="900.5" y="750.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.85%)</title><rect x="907.6" y="723.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.6" y="734.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.85%)</title><rect x="907.6" y="707.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.85%)</title><rect x="917.7" y="739.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.71%)</title><rect x="927.8" y="739.0" width="20.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.71%)</title><rect x="927.8" y="723.0" width="20.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.85%)</title><rect x="937.9" y="707.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.9" y="718.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.85%)</title><rect x="937.9" y="691.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.9" y="702.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.85%)</title><rect x="937.9" y="675.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.9" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.71%)</title><rect x="947.9" y="739.0" width="20.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.9" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.85%)</title><rect x="958.0" y="723.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.0" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 5.13%)</title><rect x="968.1" y="771.0" width="60.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.1" y="782.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (1 samples, 0.85%)</title><rect x="968.1" y="755.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.85%)</title><rect x="968.1" y="739.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.1" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.85%)</title><rect x="978.2" y="755.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.85%)</title><rect x="978.2" y="739.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 2.56%)</title><rect x="988.3" y="755.0" width="30.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.3" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 2.56%)</title><rect x="988.3" y="739.0" width="30.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.3" y="750.0">Ph..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.85%)</title><rect x="988.3" y="723.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.3" y="734.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.85%)</title><rect x="998.4" y="723.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.4" y="734.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.85%)</title><rect x="998.4" y="707.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.4" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.85%)</title><rect x="1008.5" y="723.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.85%)</title><rect x="1008.5" y="707.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="691.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="675.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="659.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1011.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="643.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="627.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="611.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="595.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="579.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="563.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1011.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="547.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="531.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1011.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="515.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="499.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1011.5" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="483.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.5" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="467.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.5" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="451.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.5" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="435.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1011.5" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.85%)</title><rect x="1008.5" y="419.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.5" y="430.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.85%)</title><rect x="1008.5" y="403.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.5" y="414.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.85%)</title><rect x="1018.5" y="755.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.5" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.85%)</title><rect x="1018.5" y="739.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.85%)</title><rect x="1018.5" y="723.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.85%)</title><rect x="1018.5" y="707.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.85%)</title><rect x="1018.5" y="691.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.5" y="702.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.85%)</title><rect x="1018.5" y="675.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1028.6" y="771.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1028.6" y="755.0" width="10.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1028.6" y="739.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1028.6" y="723.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1028.6" y="707.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1028.6" y="691.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1028.6" y="675.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1028.6" y="659.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1028.6" y="643.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1028.6" y="627.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1028.6" y="611.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1028.6" y="595.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1028.6" y="579.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1028.6" y="563.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1028.6" y="547.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1028.6" y="531.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1028.6" y="515.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1031.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1028.6" y="499.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1028.6" y="483.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1028.6" y="467.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1028.6" y="451.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1028.6" y="435.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1028.6" y="419.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1028.6" y="403.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.85%)</title><rect x="1028.6" y="387.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.85%)</title><rect x="1028.6" y="371.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.85%)</title><rect x="1028.6" y="355.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.85%)</title><rect x="1028.6" y="339.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.85%)</title><rect x="1028.6" y="323.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.85%)</title><rect x="1028.6" y="307.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.6" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.85%)</title><rect x="1028.6" y="291.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1031.6" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.85%)</title><rect x="1028.6" y="275.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.6" y="286.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.85%)</title><rect x="1028.6" y="259.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.6" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.85%)</title><rect x="1028.6" y="243.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.85%)</title><rect x="1028.6" y="227.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.6" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.85%)</title><rect x="1028.6" y="211.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.6" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.85%)</title><rect x="1028.6" y="195.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.6" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.85%)</title><rect x="1028.6" y="179.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.6" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.85%)</title><rect x="1028.6" y="163.0" width="10.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1031.6" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.85%)</title><rect x="1028.6" y="147.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.6" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.85%)</title><rect x="1028.6" y="131.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.6" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.85%)</title><rect x="1028.6" y="115.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.6" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.85%)</title><rect x="1028.6" y="99.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.6" y="110.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.85%)</title><rect x="1028.6" y="83.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.6" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.85%)</title><rect x="1028.6" y="67.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.6" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.85%)</title><rect x="1028.6" y="51.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.6" y="62.0"></text>
</g>
<g>
<title>FieldStreamBase::next() (1 samples, 0.85%)</title><rect x="1028.6" y="35.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.6" y="46.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.85%)</title><rect x="1038.7" y="771.0" width="10.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.7" y="782.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.85%)</title><rect x="1038.7" y="755.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1041.7" y="766.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.85%)</title><rect x="1038.7" y="739.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.7" y="750.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.85%)</title><rect x="1048.8" y="803.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.8" y="814.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.85%)</title><rect x="1048.8" y="787.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.8" y="798.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.85%)</title><rect x="1048.8" y="771.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.8" y="782.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.85%)</title><rect x="1048.8" y="755.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.8" y="766.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.85%)</title><rect x="1048.8" y="739.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.8" y="750.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.85%)</title><rect x="1048.8" y="723.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.8" y="734.0"></text>
</g>
<g>
<title>_platform_strchr$VARIANT$Haswell (1 samples, 0.85%)</title><rect x="1048.8" y="707.0" width="10.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1051.8" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (5 samples, 4.27%)</title><rect x="1058.9" y="803.0" width="50.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="814.0">Compi..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (5 samples, 4.27%)</title><rect x="1058.9" y="787.0" width="50.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.9" y="798.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 4.27%)</title><rect x="1058.9" y="771.0" width="50.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="782.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 3.42%)</title><rect x="1058.9" y="755.0" width="40.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="766.0">Com..</text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 2.56%)</title><rect x="1058.9" y="739.0" width="30.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="750.0">Co..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 2.56%)</title><rect x="1058.9" y="723.0" width="30.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.9" y="734.0">IR..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 2.56%)</title><rect x="1058.9" y="707.0" width="30.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="718.0">IR..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 2.56%)</title><rect x="1058.9" y="691.0" width="30.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.9" y="702.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 2.56%)</title><rect x="1058.9" y="675.0" width="30.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="686.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 2.56%)</title><rect x="1058.9" y="659.0" width="30.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="670.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::copy_state_indexed_access() (1 samples, 0.85%)</title><rect x="1058.9" y="643.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.71%)</title><rect x="1069.0" y="643.0" width="20.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.71%)</title><rect x="1069.0" y="627.0" width="20.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.71%)</title><rect x="1069.0" y="611.0" width="20.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.71%)</title><rect x="1069.0" y="595.0" width="20.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.71%)</title><rect x="1069.0" y="579.0" width="20.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.71%)</title><rect x="1069.0" y="563.0" width="20.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.71%)</title><rect x="1069.0" y="547.0" width="20.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.85%)</title><rect x="1069.0" y="531.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1072.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.85%)</title><rect x="1069.0" y="515.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.85%)</title><rect x="1069.0" y="499.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.85%)</title><rect x="1069.0" y="483.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.0" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.85%)</title><rect x="1069.0" y="467.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.85%)</title><rect x="1069.0" y="451.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.0" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.85%)</title><rect x="1069.0" y="435.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.0" y="446.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.85%)</title><rect x="1069.0" y="419.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.0" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.85%)</title><rect x="1069.0" y="403.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.0" y="414.0"></text>
</g>
<g>
<title>ciMethod::has_option(char const*) (1 samples, 0.85%)</title><rect x="1079.1" y="531.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.1" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.85%)</title><rect x="1089.1" y="739.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.1" y="750.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.85%)</title><rect x="1089.1" y="723.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.1" y="734.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.85%)</title><rect x="1089.1" y="707.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.1" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (1 samples, 0.85%)</title><rect x="1089.1" y="691.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.1" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileCall(ProfileCall*) (1 samples, 0.85%)</title><rect x="1089.1" y="675.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.1" y="686.0"></text>
</g>
<g>
<title>LIR_List::profile_call(ciMethod*, int, ciMethod*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, ciKlass*) (1 samples, 0.85%)</title><rect x="1089.1" y="659.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.1" y="670.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.85%)</title><rect x="1089.1" y="643.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.1" y="654.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.85%)</title><rect x="1099.2" y="755.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.2" y="766.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.85%)</title><rect x="1099.2" y="739.0" width="10.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="750.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.85%)</title><rect x="1099.2" y="723.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.2" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.85%)</title><rect x="1099.2" y="707.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.2" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.85%)</title><rect x="1099.2" y="691.0" width="10.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1102.2" y="702.0"></text>
</g>
<g>
<title>CompileQueue::get() (6 samples, 5.13%)</title><rect x="1109.3" y="819.0" width="60.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.3" y="830.0">Compil..</text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.85%)</title><rect x="1109.3" y="803.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.3" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.85%)</title><rect x="1109.3" y="787.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.3" y="798.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.85%)</title><rect x="1109.3" y="771.0" width="10.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1112.3" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.85%)</title><rect x="1109.3" y="755.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.3" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.85%)</title><rect x="1109.3" y="739.0" width="10.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1112.3" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 4.27%)</title><rect x="1119.4" y="803.0" width="50.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.4" y="814.0">Monit..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 4.27%)</title><rect x="1119.4" y="787.0" width="50.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.4" y="798.0">Monit..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 4.27%)</title><rect x="1119.4" y="771.0" width="50.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.4" y="782.0">os::P..</text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 4.27%)</title><rect x="1119.4" y="755.0" width="50.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1122.4" y="766.0">__psy..</text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.85%)</title><rect x="1169.8" y="835.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.85%)</title><rect x="1169.8" y="819.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.8" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.85%)</title><rect x="1169.8" y="803.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.8" y="814.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.85%)</title><rect x="1169.8" y="787.0" width="10.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1172.8" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.85%)</title><rect x="1169.8" y="771.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.8" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.85%)</title><rect x="1169.8" y="755.0" width="10.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1172.8" y="766.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.85%)</title><rect x="1179.9" y="835.0" width="10.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.85%)</title><rect x="1179.9" y="819.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.85%)</title><rect x="1179.9" y="803.0" width="10.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.85%)</title><rect x="1179.9" y="787.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.85%)</title><rect x="1179.9" y="771.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.85%)</title><rect x="1179.9" y="755.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.85%)</title><rect x="1179.9" y="739.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.85%)</title><rect x="1179.9" y="723.0" width="10.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.85%)</title><rect x="1179.9" y="707.0" width="10.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.85%)</title><rect x="1179.9" y="691.0" width="10.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
</g>
</svg>
