<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (167 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 8.38%)</title><rect x="10.0" y="787.0" width="98.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.60%)</title><rect x="10.0" y="771.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.60%)</title><rect x="10.0" y="755.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.60%)</title><rect x="10.0" y="739.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.60%)</title><rect x="10.0" y="723.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.60%)</title><rect x="10.0" y="707.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="691.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="675.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="659.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.60%)</title><rect x="10.0" y="643.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.60%)</title><rect x="10.0" y="627.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.maybeThrottle (1 samples, 0.60%)</title><rect x="10.0" y="611.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.throttleTimeMs (1 samples, 0.60%)</title><rect x="10.0" y="595.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (13 samples, 7.78%)</title><rect x="17.1" y="771.0" width="91.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.1" y="782.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.20%)</title><rect x="17.1" y="755.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.60%)</title><rect x="17.1" y="739.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1414761519.accept (1 samples, 0.60%)</title><rect x="17.1" y="723.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.60%)</title><rect x="17.1" y="707.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.60%)</title><rect x="17.1" y="691.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.60%)</title><rect x="24.1" y="739.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.60%)</title><rect x="31.2" y="755.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.60%)</title><rect x="31.2" y="739.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.60%)</title><rect x="31.2" y="723.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.60%)</title><rect x="31.2" y="707.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.60%)</title><rect x="31.2" y="691.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.60%)</title><rect x="31.2" y="675.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.60%)</title><rect x="31.2" y="659.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.99%)</title><rect x="38.3" y="755.0" width="70.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.3" y="766.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.99%)</title><rect x="38.3" y="739.0" width="70.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.3" y="750.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.40%)</title><rect x="38.3" y="723.0" width="28.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.3" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.60%)</title><rect x="38.3" y="707.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.60%)</title><rect x="38.3" y="691.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.3" y="702.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.60%)</title><rect x="38.3" y="675.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="41.3" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.60%)</title><rect x="38.3" y="659.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.3" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.60%)</title><rect x="38.3" y="643.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="41.3" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.60%)</title><rect x="38.3" y="627.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="41.3" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="38.3" y="611.0" width="7.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="41.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="45.3" y="707.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.60%)</title><rect x="45.3" y="691.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.60%)</title><rect x="45.3" y="675.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.60%)</title><rect x="45.3" y="659.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.60%)</title><rect x="45.3" y="643.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.60%)</title><rect x="45.3" y="627.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.60%)</title><rect x="45.3" y="611.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.60%)</title><rect x="45.3" y="595.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.60%)</title><rect x="45.3" y="579.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.60%)</title><rect x="45.3" y="563.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.3" y="574.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.60%)</title><rect x="45.3" y="547.0" width="7.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="48.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.20%)</title><rect x="52.4" y="707.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.20%)</title><rect x="52.4" y="691.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.60%)</title><rect x="59.5" y="675.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.60%)</title><rect x="59.5" y="659.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.60%)</title><rect x="59.5" y="643.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.60%)</title><rect x="59.5" y="627.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.80%)</title><rect x="66.5" y="723.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.5" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.80%)</title><rect x="66.5" y="707.0" width="21.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.5" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.20%)</title><rect x="66.5" y="691.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.60%)</title><rect x="66.5" y="675.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.60%)</title><rect x="66.5" y="659.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.5" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.60%)</title><rect x="66.5" y="643.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.60%)</title><rect x="66.5" y="627.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.60%)</title><rect x="66.5" y="611.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.60%)</title><rect x="66.5" y="595.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.60%)</title><rect x="66.5" y="579.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.60%)</title><rect x="73.6" y="675.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.60%)</title><rect x="73.6" y="659.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="73.6" y="643.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="73.6" y="627.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.60%)</title><rect x="80.7" y="691.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="83.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.60%)</title><rect x="80.7" y="675.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.60%)</title><rect x="80.7" y="659.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.60%)</title><rect x="80.7" y="643.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.60%)</title><rect x="80.7" y="627.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.60%)</title><rect x="80.7" y="611.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.60%)</title><rect x="80.7" y="595.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.60%)</title><rect x="80.7" y="579.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.60%)</title><rect x="80.7" y="563.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.7" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.60%)</title><rect x="80.7" y="547.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.60%)</title><rect x="80.7" y="531.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.60%)</title><rect x="80.7" y="515.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.20%)</title><rect x="87.7" y="723.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.20%)</title><rect x="87.7" y="707.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.60%)</title><rect x="87.7" y="691.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.60%)</title><rect x="87.7" y="675.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.7" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.60%)</title><rect x="87.7" y="659.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="90.7" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.60%)</title><rect x="87.7" y="643.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.7" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.60%)</title><rect x="87.7" y="627.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="90.7" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="611.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="90.7" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="595.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="90.7" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="579.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="90.7" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="563.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="90.7" y="574.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="547.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="90.7" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="531.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="90.7" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="515.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="90.7" y="526.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="499.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.7" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="483.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="90.7" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.60%)</title><rect x="87.7" y="467.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.7" y="478.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.60%)</title><rect x="87.7" y="451.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="90.7" y="462.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.60%)</title><rect x="87.7" y="435.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="90.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.60%)</title><rect x="94.8" y="691.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.60%)</title><rect x="94.8" y="675.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.60%)</title><rect x="94.8" y="659.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.60%)</title><rect x="94.8" y="643.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.60%)</title><rect x="101.9" y="723.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="101.9" y="707.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (119 samples, 71.26%)</title><rect x="108.9" y="787.0" width="840.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.9" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (119 samples, 71.26%)</title><rect x="108.9" y="771.0" width="840.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.9" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (119 samples, 71.26%)</title><rect x="108.9" y="755.0" width="840.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.9" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/443292280.run (118 samples, 70.66%)</title><rect x="116.0" y="739.0" width="833.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.0" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/443292280.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (118 samples, 70.66%)</title><rect x="116.0" y="723.0" width="833.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.0" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (118 samples, 70.66%)</title><rect x="116.0" y="707.0" width="833.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.0" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (118 samples, 70.66%)</title><rect x="116.0" y="691.0" width="833.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="119.0" y="702.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 0.60%)</title><rect x="116.0" y="675.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (1 samples, 0.60%)</title><rect x="116.0" y="659.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 0.60%)</title><rect x="116.0" y="643.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.60%)</title><rect x="116.0" y="627.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.60%)</title><rect x="116.0" y="611.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 0.60%)</title><rect x="116.0" y="595.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.60%)</title><rect x="116.0" y="579.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.60%)</title><rect x="116.0" y="563.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.60%)</title><rect x="116.0" y="547.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.60%)</title><rect x="116.0" y="531.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (115 samples, 68.86%)</title><rect x="123.1" y="675.0" width="812.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.1" y="686.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.60%)</title><rect x="123.1" y="659.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.1" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.60%)</title><rect x="123.1" y="643.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.1" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.60%)</title><rect x="123.1" y="627.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.60%)</title><rect x="123.1" y="611.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="130.1" y="659.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 1.20%)</title><rect x="137.2" y="659.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 1.20%)</title><rect x="137.2" y="643.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.2" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.60%)</title><rect x="144.3" y="627.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.3" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.60%)</title><rect x="144.3" y="611.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.60%)</title><rect x="144.3" y="595.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.60%)</title><rect x="144.3" y="579.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.60%)</title><rect x="144.3" y="563.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.60%)</title><rect x="144.3" y="547.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="147.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (111 samples, 66.47%)</title><rect x="151.3" y="659.0" width="784.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.3" y="670.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (111 samples, 66.47%)</title><rect x="151.3" y="643.0" width="784.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.3" y="654.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/658966782.process (110 samples, 65.87%)</title><rect x="151.3" y="627.0" width="777.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="154.3" y="638.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/658966782.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (110 samples, 65.87%)</title><rect x="151.3" y="611.0" width="777.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.3" y="622.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (110 samples, 65.87%)</title><rect x="151.3" y="595.0" width="777.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="154.3" y="606.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.60%)</title><rect x="151.3" y="579.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.3" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.60%)</title><rect x="151.3" y="563.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.3" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.60%)</title><rect x="151.3" y="547.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.3" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.60%)</title><rect x="151.3" y="531.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.3" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.60%)</title><rect x="151.3" y="515.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.3" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.60%)</title><rect x="151.3" y="499.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.3" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.60%)</title><rect x="151.3" y="483.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Boolean.equals (1 samples, 0.60%)</title><rect x="151.3" y="467.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.3" y="478.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.60%)</title><rect x="151.3" y="451.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="154.3" y="462.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.60%)</title><rect x="151.3" y="435.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="154.3" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.60%)</title><rect x="151.3" y="419.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="154.3" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.60%)</title><rect x="151.3" y="403.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="154.3" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.60%)</title><rect x="151.3" y="387.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="154.3" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.60%)</title><rect x="151.3" y="371.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="154.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (109 samples, 65.27%)</title><rect x="158.4" y="579.0" width="770.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.4" y="590.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (109 samples, 65.27%)</title><rect x="158.4" y="563.0" width="770.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.4" y="574.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (109 samples, 65.27%)</title><rect x="158.4" y="547.0" width="770.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="161.4" y="558.0">JVM_Sleep</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.60%)</title><rect x="158.4" y="531.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="161.4" y="542.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (108 samples, 64.67%)</title><rect x="165.4" y="531.0" width="763.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="168.4" y="542.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (108 samples, 64.67%)</title><rect x="165.4" y="515.0" width="763.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="168.4" y="526.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (3 samples, 1.80%)</title><rect x="165.4" y="499.0" width="21.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="168.4" y="510.0">_..</text>
</g>
<g>
<title>__psynch_cvwait (104 samples, 62.28%)</title><rect x="186.6" y="499.0" width="734.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="189.6" y="510.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.60%)</title><rect x="921.5" y="499.0" width="7.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="924.5" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.60%)</title><rect x="921.5" y="483.0" width="7.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="924.5" y="494.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.60%)</title><rect x="928.6" y="627.0" width="7.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="931.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.60%)</title><rect x="935.6" y="675.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.60%)</title><rect x="935.6" y="659.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="938.6" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.60%)</title><rect x="935.6" y="643.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.6" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.60%)</title><rect x="935.6" y="627.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.6" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.60%)</title><rect x="935.6" y="611.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="938.6" y="622.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.60%)</title><rect x="935.6" y="595.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.6" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.60%)</title><rect x="935.6" y="579.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.6" y="590.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.60%)</title><rect x="935.6" y="563.0" width="7.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="938.6" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.60%)</title><rect x="935.6" y="547.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.6" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="935.6" y="531.0" width="7.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="938.6" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.60%)</title><rect x="942.7" y="675.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.7" y="686.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.60%)</title><rect x="942.7" y="659.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="945.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 1.80%)</title><rect x="949.8" y="787.0" width="21.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.8" y="798.0">o..</text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.60%)</title><rect x="949.8" y="771.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="952.8" y="782.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.60%)</title><rect x="949.8" y="755.0" width="7.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="952.8" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.60%)</title><rect x="949.8" y="739.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.8" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.60%)</title><rect x="949.8" y="723.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.8" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.60%)</title><rect x="949.8" y="707.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="952.8" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="949.8" y="691.0" width="7.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="952.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 1.20%)</title><rect x="956.8" y="771.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="959.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.20%)</title><rect x="956.8" y="755.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="959.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.60%)</title><rect x="956.8" y="739.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="959.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.60%)</title><rect x="956.8" y="723.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.60%)</title><rect x="956.8" y="707.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="959.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.60%)</title><rect x="956.8" y="691.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.60%)</title><rect x="956.8" y="675.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="959.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.60%)</title><rect x="956.8" y="659.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.8" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.60%)</title><rect x="956.8" y="643.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="959.8" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.60%)</title><rect x="956.8" y="627.0" width="7.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="959.8" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.60%)</title><rect x="956.8" y="611.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.8" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="956.8" y="595.0" width="7.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="959.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.60%)</title><rect x="963.9" y="739.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.60%)</title><rect x="963.9" y="723.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="966.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.60%)</title><rect x="963.9" y="707.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="966.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.60%)</title><rect x="963.9" y="691.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.60%)</title><rect x="963.9" y="675.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="966.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.60%)</title><rect x="963.9" y="659.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="966.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.60%)</title><rect x="963.9" y="643.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="966.9" y="654.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.60%)</title><rect x="963.9" y="627.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="966.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.60%)</title><rect x="963.9" y="611.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="966.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.60%)</title><rect x="963.9" y="595.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="966.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.60%)</title><rect x="963.9" y="579.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="966.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.60%)</title><rect x="963.9" y="563.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="966.9" y="574.0"></text>
</g>
<g>
<title>writev (1 samples, 0.60%)</title><rect x="963.9" y="547.0" width="7.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="966.9" y="558.0"></text>
</g>
<g>
<title>thread_start (31 samples, 18.56%)</title><rect x="971.0" y="787.0" width="219.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="974.0" y="798.0">thread_start</text>
</g>
<g>
<title>_pthread_start (31 samples, 18.56%)</title><rect x="971.0" y="771.0" width="219.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="974.0" y="782.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (31 samples, 18.56%)</title><rect x="971.0" y="755.0" width="219.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="974.0" y="766.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (31 samples, 18.56%)</title><rect x="971.0" y="739.0" width="219.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="974.0" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.60%)</title><rect x="971.0" y="723.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.0" y="734.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.60%)</title><rect x="971.0" y="707.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.0" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.60%)</title><rect x="971.0" y="691.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.0" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.60%)</title><rect x="971.0" y="675.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.0" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.60%)</title><rect x="971.0" y="659.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.0" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="971.0" y="643.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="974.0" y="654.0"></text>
</g>
<g>
<title>JavaThread::run() (30 samples, 17.96%)</title><rect x="978.0" y="723.0" width="212.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.0" y="734.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (30 samples, 17.96%)</title><rect x="978.0" y="707.0" width="212.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.0" y="718.0">JavaThread::thread_main_inne..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (28 samples, 16.77%)</title><rect x="978.0" y="691.0" width="197.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.0" y="702.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (27 samples, 16.17%)</title><rect x="978.0" y="675.0" width="190.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.0" y="686.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (23 samples, 13.77%)</title><rect x="978.0" y="659.0" width="162.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.0" y="670.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (23 samples, 13.77%)</title><rect x="978.0" y="643.0" width="162.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.0" y="654.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.60%)</title><rect x="978.0" y="627.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.0" y="638.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.60%)</title><rect x="978.0" y="611.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.0" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="978.0" y="595.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.0" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.60%)</title><rect x="978.0" y="579.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.0" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.60%)</title><rect x="978.0" y="563.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.0" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="978.0" y="547.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.0" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="978.0" y="531.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.60%)</title><rect x="978.0" y="515.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.60%)</title><rect x="978.0" y="499.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="981.0" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.60%)</title><rect x="978.0" y="483.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.0" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="978.0" y="467.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="978.0" y="451.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.0" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.60%)</title><rect x="978.0" y="435.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.0" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.60%)</title><rect x="978.0" y="419.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.0" y="430.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (13 samples, 7.78%)</title><rect x="985.1" y="627.0" width="91.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.1" y="638.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.60%)</title><rect x="985.1" y="611.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.1" y="622.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.60%)</title><rect x="985.1" y="595.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.1" y="606.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.60%)</title><rect x="992.2" y="611.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.2" y="622.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.60%)</title><rect x="992.2" y="595.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.2" y="606.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.60%)</title><rect x="992.2" y="579.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 6.59%)</title><rect x="999.2" y="611.0" width="77.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.2" y="622.0">PhaseChai..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.60%)</title><rect x="999.2" y="595.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.99%)</title><rect x="1006.3" y="595.0" width="35.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.3" y="606.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 1.20%)</title><rect x="1006.3" y="579.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.3" y="590.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.60%)</title><rect x="1020.4" y="579.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1023.4" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.60%)</title><rect x="1027.5" y="579.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.60%)</title><rect x="1034.6" y="579.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.6" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="1034.6" y="563.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.80%)</title><rect x="1041.6" y="595.0" width="21.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1044.6" y="606.0">P..</text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.60%)</title><rect x="1055.7" y="579.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.7" y="590.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.60%)</title><rect x="1055.7" y="563.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.7" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.60%)</title><rect x="1062.8" y="595.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.8" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.60%)</title><rect x="1062.8" y="579.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.8" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.60%)</title><rect x="1062.8" y="563.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.8" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.60%)</title><rect x="1069.9" y="595.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.9" y="606.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.60%)</title><rect x="1069.9" y="579.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.9" y="590.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.60%)</title><rect x="1069.9" y="563.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.9" y="574.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.60%)</title><rect x="1069.9" y="547.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.9" y="558.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.60%)</title><rect x="1069.9" y="531.0" width="7.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1072.9" y="542.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.60%)</title><rect x="1069.9" y="515.0" width="7.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1072.9" y="526.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.60%)</title><rect x="1069.9" y="499.0" width="7.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1072.9" y="510.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.60%)</title><rect x="1069.9" y="483.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1072.9" y="494.0"></text>
</g>
<g>
<title>mvm_allocate_pages (1 samples, 0.60%)</title><rect x="1069.9" y="467.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1072.9" y="478.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.60%)</title><rect x="1069.9" y="451.0" width="7.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1072.9" y="462.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 3.59%)</title><rect x="1076.9" y="627.0" width="42.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.9" y="638.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.60%)</title><rect x="1076.9" y="611.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.60%)</title><rect x="1076.9" y="595.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.60%)</title><rect x="1076.9" y="579.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::step_through_mergemem(MergeMemNode*, int, TypeOopPtr const*) (1 samples, 0.60%)</title><rect x="1076.9" y="563.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.9" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.60%)</title><rect x="1084.0" y="611.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 1.20%)</title><rect x="1091.1" y="611.0" width="14.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.1" y="622.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.60%)</title><rect x="1091.1" y="595.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.1" y="606.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.60%)</title><rect x="1091.1" y="579.0" width="7.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1094.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.60%)</title><rect x="1098.1" y="595.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.1" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.60%)</title><rect x="1098.1" y="579.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.1" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.60%)</title><rect x="1105.2" y="611.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1105.2" y="595.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.2" y="606.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.60%)</title><rect x="1105.2" y="579.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.2" y="590.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.60%)</title><rect x="1105.2" y="563.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.2" y="574.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.60%)</title><rect x="1105.2" y="547.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.2" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.60%)</title><rect x="1105.2" y="531.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.2" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.60%)</title><rect x="1105.2" y="515.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.2" y="526.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.60%)</title><rect x="1105.2" y="499.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.2" y="510.0"></text>
</g>
<g>
<title>ThreadLocalNode::bottom_type() const (1 samples, 0.60%)</title><rect x="1112.3" y="611.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1119.3" y="627.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1119.3" y="611.0" width="14.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1119.3" y="595.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1119.3" y="579.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1119.3" y="563.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1119.3" y="547.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1119.3" y="531.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1119.3" y="515.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1119.3" y="499.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1119.3" y="483.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1119.3" y="467.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1119.3" y="451.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1119.3" y="435.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1119.3" y="419.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1119.3" y="403.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1119.3" y="387.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1119.3" y="371.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1119.3" y="355.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1119.3" y="339.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1119.3" y="323.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1119.3" y="307.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1119.3" y="291.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1119.3" y="275.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1119.3" y="259.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.3" y="270.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1119.3" y="243.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.3" y="254.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.60%)</title><rect x="1119.3" y="227.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.3" y="238.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1119.3" y="211.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.3" y="222.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.60%)</title><rect x="1119.3" y="195.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.3" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1126.4" y="339.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1126.4" y="323.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1126.4" y="307.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1126.4" y="291.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1126.4" y="275.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1126.4" y="259.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1126.4" y="243.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1126.4" y="227.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1126.4" y="211.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1126.4" y="195.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1126.4" y="179.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1126.4" y="163.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1126.4" y="147.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1126.4" y="131.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1126.4" y="115.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.4" y="126.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.60%)</title><rect x="1126.4" y="99.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.60%)</title><rect x="1126.4" y="83.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.60%)</title><rect x="1126.4" y="67.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.4" y="78.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.60%)</title><rect x="1126.4" y="51.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.4" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.60%)</title><rect x="1126.4" y="35.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.60%)</title><rect x="1133.5" y="627.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.5" y="638.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.60%)</title><rect x="1133.5" y="611.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.5" y="622.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.20%)</title><rect x="1140.5" y="659.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.20%)</title><rect x="1140.5" y="643.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.5" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.20%)</title><rect x="1140.5" y="627.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.5" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.20%)</title><rect x="1140.5" y="611.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.5" y="622.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.20%)</title><rect x="1140.5" y="595.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.5" y="606.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.20%)</title><rect x="1140.5" y="579.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.5" y="590.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.20%)</title><rect x="1140.5" y="563.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.5" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.20%)</title><rect x="1140.5" y="547.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.5" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.20%)</title><rect x="1140.5" y="531.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.5" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.20%)</title><rect x="1140.5" y="515.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.5" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::if_null(ValueType*, Instruction::Condition) (1 samples, 0.60%)</title><rect x="1140.5" y="499.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.5" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.60%)</title><rect x="1140.5" y="483.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.5" y="494.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.60%)</title><rect x="1140.5" y="467.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.5" y="478.0"></text>
</g>
<g>
<title>ObjectConstant::constant_value() const (1 samples, 0.60%)</title><rect x="1140.5" y="451.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.5" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.60%)</title><rect x="1147.6" y="499.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.6" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.60%)</title><rect x="1147.6" y="483.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.6" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1147.6" y="467.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.6" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1147.6" y="451.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.6" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.60%)</title><rect x="1147.6" y="435.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.6" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.60%)</title><rect x="1147.6" y="419.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.6" y="430.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.60%)</title><rect x="1154.7" y="659.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="670.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.60%)</title><rect x="1154.7" y="643.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.7" y="654.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.60%)</title><rect x="1154.7" y="627.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="638.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.60%)</title><rect x="1154.7" y="611.0" width="7.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1157.7" y="622.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.60%)</title><rect x="1154.7" y="595.0" width="7.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1157.7" y="606.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.60%)</title><rect x="1154.7" y="579.0" width="7.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.60%)</title><rect x="1161.7" y="659.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.7" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.60%)</title><rect x="1161.7" y="643.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.7" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.60%)</title><rect x="1161.7" y="627.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.7" y="638.0"></text>
</g>
<g>
<title>java_lang_invoke_CallSite::is_instance(oopDesc*) (1 samples, 0.60%)</title><rect x="1161.7" y="611.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="622.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.60%)</title><rect x="1161.7" y="595.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.7" y="606.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.60%)</title><rect x="1168.8" y="675.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.8" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.60%)</title><rect x="1168.8" y="659.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="670.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.60%)</title><rect x="1168.8" y="643.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.8" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.60%)</title><rect x="1168.8" y="627.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.8" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="1168.8" y="611.0" width="7.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1171.8" y="622.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.60%)</title><rect x="1175.9" y="691.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.60%)</title><rect x="1175.9" y="675.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="686.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.60%)</title><rect x="1175.9" y="659.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="670.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.60%)</title><rect x="1175.9" y="643.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1178.9" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.60%)</title><rect x="1175.9" y="627.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.60%)</title><rect x="1175.9" y="611.0" width="7.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.60%)</title><rect x="1182.9" y="691.0" width="7.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1185.9" y="702.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.60%)</title><rect x="1182.9" y="675.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="686.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.60%)</title><rect x="1182.9" y="659.0" width="7.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1185.9" y="670.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.60%)</title><rect x="1182.9" y="643.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, char const*, unsigned long) (1 samples, 0.60%)</title><rect x="1182.9" y="627.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
</g>
</svg>
