<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (169 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 16.57%)</title><rect x="10.0" y="803.0" width="195.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 16.57%)</title><rect x="10.0" y="787.0" width="195.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 11.24%)</title><rect x="10.0" y="771.0" width="132.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/101149273.accept (17 samples, 10.06%)</title><rect x="10.0" y="755.0" width="118.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 10.06%)</title><rect x="10.0" y="739.0" width="118.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 6.51%)</title><rect x="10.0" y="723.0" width="76.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 6.51%)</title><rect x="10.0" y="707.0" width="76.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 6.51%)</title><rect x="10.0" y="691.0" width="76.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="702.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 6.51%)</title><rect x="10.0" y="675.0" width="76.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 6.51%)</title><rect x="10.0" y="659.0" width="76.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="670.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 5.92%)</title><rect x="17.0" y="643.0" width="69.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="654.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.73%)</title><rect x="17.0" y="627.0" width="55.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="638.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 4.73%)</title><rect x="17.0" y="611.0" width="55.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 4.73%)</title><rect x="17.0" y="595.0" width="55.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.0" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 4.73%)</title><rect x="17.0" y="579.0" width="55.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="590.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 4.73%)</title><rect x="17.0" y="563.0" width="55.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="574.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 3.55%)</title><rect x="30.9" y="547.0" width="41.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.9" y="558.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 3.55%)</title><rect x="30.9" y="531.0" width="41.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="33.9" y="542.0">Uns..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.37%)</title><rect x="30.9" y="515.0" width="28.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="33.9" y="526.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.18%)</title><rect x="58.9" y="515.0" width="13.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="61.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.18%)</title><rect x="72.8" y="627.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.18%)</title><rect x="72.8" y="611.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.18%)</title><rect x="72.8" y="595.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.18%)</title><rect x="72.8" y="579.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 3.55%)</title><rect x="86.8" y="723.0" width="41.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.8" y="734.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 3.55%)</title><rect x="86.8" y="707.0" width="41.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.8" y="718.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.59%)</title><rect x="107.8" y="691.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.8" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.59%)</title><rect x="107.8" y="675.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.8" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.59%)</title><rect x="107.8" y="659.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.8" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.18%)</title><rect x="114.7" y="691.0" width="14.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="117.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.18%)</title><rect x="128.7" y="755.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="131.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.18%)</title><rect x="128.7" y="739.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="131.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.18%)</title><rect x="128.7" y="723.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.18%)</title><rect x="128.7" y="707.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 1.18%)</title><rect x="128.7" y="691.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 1.18%)</title><rect x="128.7" y="675.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.33%)</title><rect x="142.7" y="771.0" width="62.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.7" y="782.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.33%)</title><rect x="142.7" y="755.0" width="62.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.7" y="766.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.55%)</title><rect x="142.7" y="739.0" width="41.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.7" y="750.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 3.55%)</title><rect x="142.7" y="723.0" width="41.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.7" y="734.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 3.55%)</title><rect x="142.7" y="707.0" width="41.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.7" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.37%)</title><rect x="149.6" y="691.0" width="28.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.6" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.37%)</title><rect x="149.6" y="675.0" width="28.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.6" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.18%)</title><rect x="163.6" y="659.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.59%)</title><rect x="170.6" y="643.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.59%)</title><rect x="170.6" y="627.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.59%)</title><rect x="170.6" y="611.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.59%)</title><rect x="170.6" y="595.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.59%)</title><rect x="170.6" y="579.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.59%)</title><rect x="170.6" y="563.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.59%)</title><rect x="170.6" y="547.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.59%)</title><rect x="177.6" y="691.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.59%)</title><rect x="177.6" y="675.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.59%)</title><rect x="177.6" y="659.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.59%)</title><rect x="177.6" y="643.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.6" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.59%)</title><rect x="177.6" y="627.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.59%)</title><rect x="184.6" y="739.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.59%)</title><rect x="184.6" y="723.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.59%)</title><rect x="184.6" y="707.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.59%)</title><rect x="184.6" y="691.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.59%)</title><rect x="184.6" y="675.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.59%)</title><rect x="184.6" y="659.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.59%)</title><rect x="184.6" y="643.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.59%)</title><rect x="184.6" y="627.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.59%)</title><rect x="184.6" y="611.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.59%)</title><rect x="191.5" y="739.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.59%)</title><rect x="191.5" y="723.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.min (1 samples, 0.59%)</title><rect x="191.5" y="707.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.59%)</title><rect x="198.5" y="739.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.59%)</title><rect x="198.5" y="723.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.59%)</title><rect x="198.5" y="707.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 36.69%)</title><rect x="205.5" y="803.0" width="432.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.5" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 36.69%)</title><rect x="205.5" y="787.0" width="432.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.5" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 36.69%)</title><rect x="205.5" y="771.0" width="432.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.5" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.59%)</title><rect x="205.5" y="755.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1707992330.run (39 samples, 23.08%)</title><rect x="212.5" y="755.0" width="272.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.5" y="766.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (39 samples, 23.08%)</title><rect x="212.5" y="739.0" width="272.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.5" y="750.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (39 samples, 23.08%)</title><rect x="212.5" y="723.0" width="272.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.5" y="734.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (39 samples, 23.08%)</title><rect x="212.5" y="707.0" width="272.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.5" y="718.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (9 samples, 5.33%)</title><rect x="219.5" y="691.0" width="62.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.5" y="702.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (9 samples, 5.33%)</title><rect x="219.5" y="675.0" width="62.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.5" y="686.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (9 samples, 5.33%)</title><rect x="219.5" y="659.0" width="62.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.5" y="670.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 5.33%)</title><rect x="219.5" y="643.0" width="62.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.5" y="654.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 5.33%)</title><rect x="219.5" y="627.0" width="62.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.5" y="638.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (9 samples, 5.33%)</title><rect x="219.5" y="611.0" width="62.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.5" y="622.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.18%)</title><rect x="219.5" y="595.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.59%)</title><rect x="219.5" y="579.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.59%)</title><rect x="219.5" y="563.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.59%)</title><rect x="219.5" y="547.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.59%)</title><rect x="219.5" y="531.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.59%)</title><rect x="219.5" y="515.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.59%)</title><rect x="219.5" y="499.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.59%)</title><rect x="226.4" y="579.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.59%)</title><rect x="226.4" y="563.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.14%)</title><rect x="233.4" y="595.0" width="48.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.4" y="606.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.59%)</title><rect x="233.4" y="579.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.55%)</title><rect x="240.4" y="579.0" width="41.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.4" y="590.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.59%)</title><rect x="240.4" y="563.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.96%)</title><rect x="247.4" y="563.0" width="34.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.4" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.96%)</title><rect x="247.4" y="547.0" width="34.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.4" y="558.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.96%)</title><rect x="247.4" y="531.0" width="34.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.4" y="542.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.59%)</title><rect x="247.4" y="515.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.59%)</title><rect x="247.4" y="499.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.59%)</title><rect x="247.4" y="483.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.18%)</title><rect x="254.4" y="515.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.59%)</title><rect x="261.4" y="499.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.59%)</title><rect x="261.4" y="483.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.59%)</title><rect x="261.4" y="467.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.59%)</title><rect x="261.4" y="451.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.59%)</title><rect x="268.3" y="515.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.59%)</title><rect x="268.3" y="499.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.59%)</title><rect x="268.3" y="483.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.59%)</title><rect x="268.3" y="467.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.3" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.59%)</title><rect x="268.3" y="451.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="462.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.59%)</title><rect x="268.3" y="435.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.3" y="446.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.59%)</title><rect x="268.3" y="419.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.59%)</title><rect x="275.3" y="515.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.59%)</title><rect x="275.3" y="499.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.59%)</title><rect x="275.3" y="483.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (28 samples, 16.57%)</title><rect x="282.3" y="691.0" width="195.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.3" y="702.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.78%)</title><rect x="282.3" y="675.0" width="21.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.3" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.78%)</title><rect x="282.3" y="659.0" width="21.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.3" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.78%)</title><rect x="282.3" y="643.0" width="21.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.59%)</title><rect x="282.3" y="627.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.59%)</title><rect x="282.3" y="611.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.59%)</title><rect x="282.3" y="595.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.59%)</title><rect x="282.3" y="579.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.59%)</title><rect x="282.3" y="563.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.18%)</title><rect x="289.3" y="627.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.18%)</title><rect x="289.3" y="611.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.18%)</title><rect x="289.3" y="595.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.59%)</title><rect x="296.3" y="579.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.18%)</title><rect x="303.3" y="675.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.59%)</title><rect x="310.2" y="659.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.59%)</title><rect x="310.2" y="643.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 8.88%)</title><rect x="317.2" y="675.0" width="104.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.2" y="686.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 8.88%)</title><rect x="317.2" y="659.0" width="104.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="320.2" y="670.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.78%)</title><rect x="338.2" y="643.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.2" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.18%)</title><rect x="338.2" y="627.0" width="13.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="341.2" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="345.1" y="611.0" width="7.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="348.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.59%)</title><rect x="352.1" y="627.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.59%)</title><rect x="359.1" y="643.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="362.1" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 4.73%)</title><rect x="366.1" y="643.0" width="55.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.1" y="654.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 4.14%)</title><rect x="373.1" y="627.0" width="48.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.1" y="638.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 4.14%)</title><rect x="373.1" y="611.0" width="48.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="376.1" y="622.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.96%)</title><rect x="387.0" y="595.0" width="35.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.0" y="606.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.59%)</title><rect x="394.0" y="579.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.59%)</title><rect x="394.0" y="563.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.78%)</title><rect x="401.0" y="579.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.18%)</title><rect x="408.0" y="563.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 3.55%)</title><rect x="422.0" y="675.0" width="41.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.0" y="686.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 3.55%)</title><rect x="422.0" y="659.0" width="41.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.0" y="670.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/117397272.process (3 samples, 1.78%)</title><rect x="422.0" y="643.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.78%)</title><rect x="422.0" y="627.0" width="20.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.78%)</title><rect x="422.0" y="611.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 1.78%)</title><rect x="422.0" y="595.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.0" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.18%)</title><rect x="428.9" y="579.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="431.9" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="435.9" y="563.0" width="7.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="438.9" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.78%)</title><rect x="442.9" y="643.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.9" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.78%)</title><rect x="442.9" y="627.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 1.18%)</title><rect x="442.9" y="611.0" width="14.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="445.9" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.59%)</title><rect x="456.9" y="611.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.59%)</title><rect x="463.8" y="675.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.59%)</title><rect x="470.8" y="675.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.8" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.59%)</title><rect x="477.8" y="691.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.8" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.59%)</title><rect x="477.8" y="675.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="480.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.18%)</title><rect x="484.8" y="755.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.18%)</title><rect x="484.8" y="739.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.8" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.59%)</title><rect x="491.8" y="723.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="494.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.18%)</title><rect x="498.8" y="755.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.18%)</title><rect x="498.8" y="739.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.18%)</title><rect x="498.8" y="723.0" width="13.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.59%)</title><rect x="505.7" y="707.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.18%)</title><rect x="512.7" y="755.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.18%)</title><rect x="512.7" y="739.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 1.18%)</title><rect x="512.7" y="723.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 9.47%)</title><rect x="526.7" y="755.0" width="111.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="529.7" y="766.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 9.47%)</title><rect x="526.7" y="739.0" width="111.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="529.7" y="750.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.59%)</title><rect x="526.7" y="723.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 7.69%)</title><rect x="533.7" y="723.0" width="90.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="536.7" y="734.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 1.18%)</title><rect x="540.7" y="707.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.59%)</title><rect x="547.6" y="691.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.59%)</title><rect x="547.6" y="675.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.59%)</title><rect x="547.6" y="659.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="550.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 5.92%)</title><rect x="554.6" y="707.0" width="69.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="557.6" y="718.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 5.92%)</title><rect x="554.6" y="691.0" width="69.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.6" y="702.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.92%)</title><rect x="554.6" y="675.0" width="69.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="557.6" y="686.0">Unsafe_..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.59%)</title><rect x="554.6" y="659.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="557.6" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.59%)</title><rect x="554.6" y="643.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="557.6" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.59%)</title><rect x="561.6" y="659.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="564.6" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 4.14%)</title><rect x="568.6" y="659.0" width="48.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="571.6" y="670.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.59%)</title><rect x="617.5" y="659.0" width="6.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="620.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 1.18%)</title><rect x="624.4" y="723.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 1.18%)</title><rect x="624.4" y="707.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="627.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.59%)</title><rect x="624.4" y="691.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="627.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.59%)</title><rect x="631.4" y="691.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.59%)</title><rect x="631.4" y="675.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.59%)</title><rect x="631.4" y="659.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.4" y="670.0"></text>
</g>
<g>
<title>start_thread (79 samples, 46.75%)</title><rect x="638.4" y="803.0" width="551.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="641.4" y="814.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (79 samples, 46.75%)</title><rect x="638.4" y="787.0" width="551.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="641.4" y="798.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 6.51%)</title><rect x="638.4" y="771.0" width="76.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="641.4" y="782.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 2.37%)</title><rect x="638.4" y="755.0" width="27.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.4" y="766.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.37%)</title><rect x="638.4" y="739.0" width="27.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="641.4" y="750.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.18%)</title><rect x="638.4" y="723.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.4" y="734.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.18%)</title><rect x="652.4" y="723.0" width="13.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="655.4" y="734.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (7 samples, 4.14%)</title><rect x="666.3" y="755.0" width="48.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="669.3" y="766.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.37%)</title><rect x="666.3" y="739.0" width="28.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="669.3" y="750.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.18%)</title><rect x="673.3" y="723.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="676.3" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.59%)</title><rect x="680.3" y="707.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="683.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.59%)</title><rect x="680.3" y="691.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.3" y="702.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.59%)</title><rect x="687.3" y="723.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="690.3" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.78%)</title><rect x="694.3" y="739.0" width="20.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="697.3" y="750.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.59%)</title><rect x="694.3" y="723.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.3" y="734.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.59%)</title><rect x="694.3" y="707.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="697.3" y="718.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.59%)</title><rect x="694.3" y="691.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="697.3" y="702.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.59%)</title><rect x="694.3" y="675.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="697.3" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.59%)</title><rect x="694.3" y="659.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.3" y="670.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.59%)</title><rect x="701.2" y="723.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="704.2" y="734.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.59%)</title><rect x="701.2" y="707.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="704.2" y="718.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.59%)</title><rect x="701.2" y="691.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="704.2" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.59%)</title><rect x="701.2" y="675.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="704.2" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.59%)</title><rect x="708.2" y="723.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="711.2" y="734.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.59%)</title><rect x="708.2" y="707.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="711.2" y="718.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.59%)</title><rect x="708.2" y="691.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="711.2" y="702.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.59%)</title><rect x="708.2" y="675.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="711.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.59%)</title><rect x="708.2" y="659.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="711.2" y="670.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.59%)</title><rect x="708.2" y="643.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.2" y="654.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.59%)</title><rect x="708.2" y="627.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="711.2" y="638.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (68 samples, 40.24%)</title><rect x="715.2" y="771.0" width="474.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="718.2" y="782.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (68 samples, 40.24%)</title><rect x="715.2" y="755.0" width="474.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="718.2" y="766.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (68 samples, 40.24%)</title><rect x="715.2" y="739.0" width="474.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="718.2" y="750.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (65 samples, 38.46%)</title><rect x="715.2" y="723.0" width="453.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.2" y="734.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (65 samples, 38.46%)</title><rect x="715.2" y="707.0" width="453.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="718.2" y="718.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 18.34%)</title><rect x="715.2" y="691.0" width="216.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="718.2" y="702.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.18%)</title><rect x="715.2" y="675.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="718.2" y="686.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.59%)</title><rect x="715.2" y="659.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.2" y="670.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.59%)</title><rect x="722.2" y="659.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="725.2" y="670.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.59%)</title><rect x="722.2" y="643.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="725.2" y="654.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.59%)</title><rect x="722.2" y="627.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="725.2" y="638.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.59%)</title><rect x="722.2" y="611.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.2" y="622.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.59%)</title><rect x="729.2" y="675.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="732.2" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.18%)</title><rect x="736.2" y="675.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="739.2" y="686.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.59%)</title><rect x="736.2" y="659.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.2" y="670.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.59%)</title><rect x="743.1" y="659.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.1" y="670.0"></text>
</g>
<g>
<title>ClearArrayNode::Opcode() const (1 samples, 0.59%)</title><rect x="743.1" y="643.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.1" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.18%)</title><rect x="750.1" y="675.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="753.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.18%)</title><rect x="750.1" y="659.0" width="14.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="753.1" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.59%)</title><rect x="750.1" y="643.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="753.1" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.59%)</title><rect x="750.1" y="627.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.1" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.59%)</title><rect x="757.1" y="643.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="760.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (24 samples, 14.20%)</title><rect x="764.1" y="675.0" width="167.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.1" y="686.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.59%)</title><rect x="764.1" y="659.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.1" y="670.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.59%)</title><rect x="771.1" y="659.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="774.1" y="670.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.59%)</title><rect x="778.0" y="659.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.0" y="670.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.59%)</title><rect x="785.0" y="659.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="788.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.59%)</title><rect x="792.0" y="659.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="795.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.59%)</title><rect x="792.0" y="643.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="795.0" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="792.0" y="627.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="795.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.59%)</title><rect x="799.0" y="659.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="802.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.59%)</title><rect x="799.0" y="643.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.0" y="654.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.59%)</title><rect x="799.0" y="627.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.96%)</title><rect x="806.0" y="659.0" width="34.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.0" y="670.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.59%)</title><rect x="813.0" y="643.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.0" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="819.9" y="643.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="822.9" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.18%)</title><rect x="826.9" y="643.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.9" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="833.9" y="627.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="836.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.18%)</title><rect x="840.9" y="659.0" width="14.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="843.9" y="670.0"></text>
</g>
<g>
<title>rRegLOper::in_RegMask(int) const (1 samples, 0.59%)</title><rect x="847.9" y="643.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="850.9" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.37%)</title><rect x="854.9" y="659.0" width="27.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="857.9" y="670.0">P..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.18%)</title><rect x="882.8" y="659.0" width="13.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="885.8" y="670.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.59%)</title><rect x="882.8" y="643.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="885.8" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.59%)</title><rect x="889.8" y="643.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.8" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.59%)</title><rect x="889.8" y="627.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.8" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.59%)</title><rect x="896.7" y="659.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.7" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.59%)</title><rect x="896.7" y="643.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="899.7" y="654.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.59%)</title><rect x="903.7" y="659.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.7" y="670.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.59%)</title><rect x="910.7" y="659.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.7" y="670.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.59%)</title><rect x="917.7" y="659.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="920.7" y="670.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.59%)</title><rect x="924.7" y="659.0" width="7.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="927.7" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 15.98%)</title><rect x="931.7" y="691.0" width="188.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="934.7" y="702.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.59%)</title><rect x="931.7" y="675.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="934.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.59%)</title><rect x="931.7" y="659.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.59%)</title><rect x="931.7" y="643.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.59%)</title><rect x="931.7" y="627.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.7" y="638.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.59%)</title><rect x="931.7" y="611.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.7" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.59%)</title><rect x="938.6" y="675.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="941.6" y="686.0"></text>
</g>
<g>
<title>Type::widen(Type const*, Type const*) const (1 samples, 0.59%)</title><rect x="938.6" y="659.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 11.24%)</title><rect x="945.6" y="675.0" width="132.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.6" y="686.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.59%)</title><rect x="945.6" y="659.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 5.92%)</title><rect x="952.6" y="659.0" width="69.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="955.6" y="670.0">PhaseId..</text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.59%)</title><rect x="973.6" y="643.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 3.55%)</title><rect x="980.5" y="643.0" width="41.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.5" y="654.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.96%)</title><rect x="987.5" y="627.0" width="34.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.5" y="638.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 2.96%)</title><rect x="987.5" y="611.0" width="34.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.5" y="622.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.37%)</title><rect x="1022.4" y="659.0" width="28.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.4" y="670.0">P..</text>
</g>
<g>
<title>ConvI2LNode::Opcode() const (1 samples, 0.59%)</title><rect x="1029.4" y="643.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.18%)</title><rect x="1036.4" y="643.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.4" y="654.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.59%)</title><rect x="1043.4" y="627.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.4" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.78%)</title><rect x="1050.4" y="659.0" width="20.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.4" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.78%)</title><rect x="1050.4" y="643.0" width="20.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.4" y="654.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1050.4" y="627.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.4" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.59%)</title><rect x="1050.4" y="611.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.4" y="622.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.59%)</title><rect x="1057.3" y="627.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.3" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.59%)</title><rect x="1057.3" y="611.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.3" y="622.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1064.3" y="627.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.3" y="638.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.59%)</title><rect x="1064.3" y="611.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.3" y="622.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.59%)</title><rect x="1071.3" y="659.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.3" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.59%)</title><rect x="1078.3" y="675.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.96%)</title><rect x="1085.3" y="675.0" width="34.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.3" y="686.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.96%)</title><rect x="1085.3" y="659.0" width="34.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.3" y="670.0">Ph..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1085.3" y="643.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.3" y="654.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1085.3" y="627.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.3" y="638.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1092.2" y="643.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.2" y="654.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1099.2" y="643.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.2" y="654.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.59%)</title><rect x="1099.2" y="627.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.59%)</title><rect x="1106.2" y="643.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.2" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.59%)</title><rect x="1113.2" y="643.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.14%)</title><rect x="1120.2" y="691.0" width="48.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.2" y="702.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.14%)</title><rect x="1120.2" y="675.0" width="48.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.2" y="686.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.14%)</title><rect x="1120.2" y="659.0" width="48.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="670.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.14%)</title><rect x="1120.2" y="643.0" width="48.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.2" y="654.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.14%)</title><rect x="1120.2" y="627.0" width="48.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.2" y="638.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.55%)</title><rect x="1120.2" y="611.0" width="41.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.2" y="622.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.96%)</title><rect x="1120.2" y="595.0" width="34.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.2" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.96%)</title><rect x="1120.2" y="579.0" width="34.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.2" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.96%)</title><rect x="1120.2" y="563.0" width="34.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.2" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.96%)</title><rect x="1120.2" y="547.0" width="34.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.2" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.96%)</title><rect x="1120.2" y="531.0" width="34.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.2" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.96%)</title><rect x="1120.2" y="515.0" width="34.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.2" y="526.0">Pa..</text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.59%)</title><rect x="1120.2" y="499.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.2" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.59%)</title><rect x="1120.2" y="483.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.2" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.59%)</title><rect x="1120.2" y="467.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.37%)</title><rect x="1127.2" y="499.0" width="27.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="510.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.37%)</title><rect x="1127.2" y="483.0" width="27.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.2" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.37%)</title><rect x="1127.2" y="467.0" width="27.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.2" y="478.0">P..</text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.59%)</title><rect x="1127.2" y="451.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="462.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.59%)</title><rect x="1127.2" y="435.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="446.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.59%)</title><rect x="1127.2" y="419.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="430.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.59%)</title><rect x="1127.2" y="403.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="414.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.59%)</title><rect x="1127.2" y="387.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.59%)</title><rect x="1127.2" y="371.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.18%)</title><rect x="1134.1" y="451.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.18%)</title><rect x="1134.1" y="435.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="446.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.59%)</title><rect x="1134.1" y="419.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.1" y="430.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.59%)</title><rect x="1134.1" y="403.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.1" y="414.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.59%)</title><rect x="1134.1" y="387.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.1" y="398.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.59%)</title><rect x="1134.1" y="371.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.1" y="382.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.59%)</title><rect x="1134.1" y="355.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="366.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.59%)</title><rect x="1134.1" y="339.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1141.1" y="419.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.1" y="403.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1141.1" y="387.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1141.1" y="371.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1141.1" y="355.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1141.1" y="339.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1141.1" y="323.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.1" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.1" y="307.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.1" y="291.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1141.1" y="275.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1141.1" y="259.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1141.1" y="243.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1141.1" y="227.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1141.1" y="211.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1141.1" y="195.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1141.1" y="179.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1141.1" y="163.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1141.1" y="147.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1141.1" y="131.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.59%)</title><rect x="1141.1" y="115.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.59%)</title><rect x="1141.1" y="99.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.59%)</title><rect x="1141.1" y="83.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.1" y="94.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.59%)</title><rect x="1141.1" y="67.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.1" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.59%)</title><rect x="1141.1" y="51.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.1" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.59%)</title><rect x="1141.1" y="35.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.59%)</title><rect x="1148.1" y="451.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.1" y="462.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.59%)</title><rect x="1148.1" y="435.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.1" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="595.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="579.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1155.1" y="563.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.59%)</title><rect x="1155.1" y="547.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.59%)</title><rect x="1155.1" y="531.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.59%)</title><rect x="1155.1" y="515.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.59%)</title><rect x="1155.1" y="499.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.59%)</title><rect x="1155.1" y="483.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.59%)</title><rect x="1155.1" y="467.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.1" y="478.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.59%)</title><rect x="1155.1" y="451.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.1" y="462.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.59%)</title><rect x="1155.1" y="435.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.59%)</title><rect x="1162.1" y="611.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.59%)</title><rect x="1162.1" y="595.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.1" y="606.0"></text>
</g>
<g>
<title>URShiftINode::Opcode() const (1 samples, 0.59%)</title><rect x="1162.1" y="579.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.1" y="590.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.78%)</title><rect x="1169.1" y="723.0" width="20.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="734.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.78%)</title><rect x="1169.1" y="707.0" width="20.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.78%)</title><rect x="1169.1" y="691.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.1" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.78%)</title><rect x="1169.1" y="675.0" width="20.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.1" y="686.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.18%)</title><rect x="1169.1" y="659.0" width="13.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.1" y="670.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.59%)</title><rect x="1169.1" y="643.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="654.0"></text>
</g>
<g>
<title>ValueMap::kill_memory() (1 samples, 0.59%)</title><rect x="1169.1" y="627.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.1" y="638.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.59%)</title><rect x="1176.0" y="643.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.59%)</title><rect x="1176.0" y="627.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.59%)</title><rect x="1176.0" y="611.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.59%)</title><rect x="1176.0" y="595.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.59%)</title><rect x="1176.0" y="579.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.59%)</title><rect x="1176.0" y="563.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.59%)</title><rect x="1176.0" y="547.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.59%)</title><rect x="1176.0" y="531.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.59%)</title><rect x="1176.0" y="515.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.59%)</title><rect x="1176.0" y="499.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.59%)</title><rect x="1176.0" y="483.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.59%)</title><rect x="1176.0" y="467.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="478.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.59%)</title><rect x="1183.0" y="659.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.59%)</title><rect x="1183.0" y="643.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.59%)</title><rect x="1183.0" y="627.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.59%)</title><rect x="1183.0" y="611.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.59%)</title><rect x="1183.0" y="595.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>LinearScanWalker::combine_spilled_intervals(Interval*) (1 samples, 0.59%)</title><rect x="1183.0" y="579.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
</g>
</svg>
