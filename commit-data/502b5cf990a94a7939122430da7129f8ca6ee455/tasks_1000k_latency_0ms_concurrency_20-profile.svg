<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (1,036 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (230 samples, 22.20%)</title><rect x="10.0" y="1011.0" width="262.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.19%)</title><rect x="10.0" y="995.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.19%)</title><rect x="10.0" y="979.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.19%)</title><rect x="10.0" y="963.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.19%)</title><rect x="10.0" y="947.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.19%)</title><rect x="10.0" y="931.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.10%)</title><rect x="10.0" y="915.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="11.1" y="915.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="11.1" y="899.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="11.1" y="883.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="11.1" y="867.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="11.1" y="851.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="11.1" y="835.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="11.1" y="819.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="11.1" y="803.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="11.1" y="787.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="11.1" y="771.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.10%)</title><rect x="11.1" y="755.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.10%)</title><rect x="11.1" y="739.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.10%)</title><rect x="11.1" y="723.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (227 samples, 21.91%)</title><rect x="12.3" y="995.0" width="258.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.3" y="1006.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.58%)</title><rect x="13.4" y="979.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.58%)</title><rect x="13.4" y="963.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/41513545.accept (6 samples, 0.58%)</title><rect x="13.4" y="947.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.58%)</title><rect x="13.4" y="931.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="14.6" y="915.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.39%)</title><rect x="15.7" y="915.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.39%)</title><rect x="15.7" y="899.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (174 samples, 16.80%)</title><rect x="20.3" y="979.0" width="198.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.3" y="990.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1063242996.accept (169 samples, 16.31%)</title><rect x="22.5" y="963.0" width="192.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="974.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (169 samples, 16.31%)</title><rect x="22.5" y="947.0" width="192.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.5" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (138 samples, 13.32%)</title><rect x="22.5" y="931.0" width="157.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.5" y="942.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (138 samples, 13.32%)</title><rect x="22.5" y="915.0" width="157.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.5" y="926.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (138 samples, 13.32%)</title><rect x="22.5" y="899.0" width="157.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.5" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (138 samples, 13.32%)</title><rect x="22.5" y="883.0" width="157.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="894.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (138 samples, 13.32%)</title><rect x="22.5" y="867.0" width="157.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.5" y="878.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (138 samples, 13.32%)</title><rect x="22.5" y="851.0" width="157.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="862.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 9.75%)</title><rect x="54.4" y="835.0" width="115.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.4" y="846.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.93%)</title><rect x="54.4" y="819.0" width="22.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.4" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.93%)</title><rect x="54.4" y="803.0" width="22.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.4" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 1.93%)</title><rect x="54.4" y="787.0" width="22.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.4" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 1.35%)</title><rect x="77.2" y="819.0" width="15.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (14 samples, 1.35%)</title><rect x="77.2" y="803.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (8 samples, 0.77%)</title><rect x="80.6" y="787.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.6" y="798.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (6 samples, 0.58%)</title><rect x="82.9" y="771.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="85.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.29%)</title><rect x="89.7" y="787.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (67 samples, 6.47%)</title><rect x="93.1" y="819.0" width="76.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.1" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (67 samples, 6.47%)</title><rect x="93.1" y="803.0" width="76.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.1" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (67 samples, 6.47%)</title><rect x="93.1" y="787.0" width="76.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.1" y="798.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (67 samples, 6.47%)</title><rect x="93.1" y="771.0" width="76.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.1" y="782.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (67 samples, 6.47%)</title><rect x="93.1" y="755.0" width="76.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.1" y="766.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="95.4" y="739.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="98.4" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (52 samples, 5.02%)</title><rect x="96.6" y="739.0" width="59.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="99.6" y="750.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="97.7" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="100.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="98.8" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="101.8" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.76%)</title><rect x="100.0" y="723.0" width="44.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="103.0" y="734.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="144.4" y="723.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="147.4" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.87%)</title><rect x="145.5" y="723.0" width="10.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="148.5" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.77%)</title><rect x="155.8" y="739.0" width="9.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="158.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.39%)</title><rect x="164.9" y="739.0" width="4.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="167.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="169.5" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.10%)</title><rect x="169.5" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.10%)</title><rect x="169.5" y="803.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.39%)</title><rect x="170.6" y="835.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.39%)</title><rect x="170.6" y="819.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.39%)</title><rect x="170.6" y="803.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="174.0" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.19%)</title><rect x="175.2" y="835.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="175.2" y="819.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="175.2" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="176.3" y="803.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="176.3" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="177.4" y="835.0" width="2.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="180.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.29%)</title><rect x="179.7" y="931.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.29%)</title><rect x="179.7" y="915.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.29%)</title><rect x="179.7" y="899.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.70%)</title><rect x="183.1" y="931.0" width="31.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.1" y="942.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.70%)</title><rect x="183.1" y="915.0" width="31.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.1" y="926.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.97%)</title><rect x="199.1" y="899.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.1" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.29%)</title><rect x="199.1" y="883.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.1" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.29%)</title><rect x="199.1" y="867.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.1" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.29%)</title><rect x="199.1" y="851.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.1" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="200.2" y="835.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="203.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.19%)</title><rect x="202.5" y="883.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.48%)</title><rect x="204.8" y="883.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.8" y="894.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="210.5" y="899.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="213.5" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="211.6" y="899.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="214.6" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="215.0" y="963.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="218.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="216.2" y="963.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.10%)</title><rect x="216.2" y="947.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="216.2" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="216.2" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="217.3" y="963.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.44%)</title><rect x="218.4" y="979.0" width="52.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.4" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.44%)</title><rect x="218.4" y="963.0" width="52.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.4" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 2.61%)</title><rect x="218.4" y="947.0" width="30.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.4" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (27 samples, 2.61%)</title><rect x="218.4" y="931.0" width="30.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.4" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 2.61%)</title><rect x="218.4" y="915.0" width="30.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.4" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 2.32%)</title><rect x="218.4" y="899.0" width="27.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.4" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 2.32%)</title><rect x="218.4" y="883.0" width="27.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.4" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.54%)</title><rect x="218.4" y="867.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.68%)</title><rect x="228.7" y="851.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.68%)</title><rect x="228.7" y="835.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.68%)</title><rect x="228.7" y="819.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.68%)</title><rect x="228.7" y="803.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.68%)</title><rect x="228.7" y="787.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.68%)</title><rect x="228.7" y="771.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.68%)</title><rect x="228.7" y="755.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.77%)</title><rect x="236.7" y="867.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.68%)</title><rect x="237.8" y="851.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.68%)</title><rect x="237.8" y="835.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.8" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.68%)</title><rect x="237.8" y="819.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.8" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.48%)</title><rect x="240.1" y="803.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (5 samples, 0.48%)</title><rect x="240.1" y="787.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (5 samples, 0.48%)</title><rect x="240.1" y="771.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.48%)</title><rect x="240.1" y="755.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="244.6" y="739.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="247.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="245.8" y="899.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="245.8" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.10%)</title><rect x="245.8" y="867.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.8" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="245.8" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.8" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="245.8" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.19%)</title><rect x="246.9" y="899.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.19%)</title><rect x="246.9" y="883.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="246.9" y="867.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="246.9" y="851.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="246.9" y="835.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.58%)</title><rect x="249.2" y="947.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.58%)</title><rect x="249.2" y="931.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.58%)</title><rect x="249.2" y="915.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="250.3" y="899.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$224/2097589812.accept (2 samples, 0.19%)</title><rect x="250.3" y="883.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.19%)</title><rect x="250.3" y="867.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="250.3" y="851.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="250.3" y="835.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="250.3" y="819.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="250.3" y="803.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="251.5" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.10%)</title><rect x="251.5" y="835.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.10%)</title><rect x="251.5" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="252.6" y="899.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="252.6" y="883.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.6" y="894.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="252.6" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.6" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="252.6" y="851.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.6" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.10%)</title><rect x="252.6" y="835.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.19%)</title><rect x="253.7" y="899.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="253.7" y="883.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="253.7" y="867.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="253.7" y="851.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="253.7" y="835.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="253.7" y="819.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="253.7" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="253.7" y="787.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="253.7" y="771.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="253.7" y="755.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.7" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="254.9" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="257.9" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="254.9" y="867.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="257.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="256.0" y="947.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.48%)</title><rect x="257.2" y="947.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.39%)</title><rect x="257.2" y="931.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.39%)</title><rect x="257.2" y="915.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="257.2" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="257.2" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.10%)</title><rect x="257.2" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.10%)</title><rect x="257.2" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="257.2" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.29%)</title><rect x="258.3" y="899.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.10%)</title><rect x="258.3" y="883.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.10%)</title><rect x="258.3" y="867.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.10%)</title><rect x="258.3" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.10%)</title><rect x="258.3" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.3" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.10%)</title><rect x="258.3" y="819.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.10%)</title><rect x="258.3" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.19%)</title><rect x="259.4" y="883.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.19%)</title><rect x="259.4" y="867.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="259.4" y="851.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.4" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="259.4" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="260.6" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="260.6" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="260.6" y="819.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="260.6" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.6" y="814.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="260.6" y="787.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="263.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="261.7" y="931.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="261.7" y="915.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="261.7" y="899.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="261.7" y="883.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="261.7" y="867.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="261.7" y="851.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.10%)</title><rect x="261.7" y="835.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.68%)</title><rect x="262.9" y="947.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.68%)</title><rect x="262.9" y="931.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.29%)</title><rect x="264.0" y="915.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$255/681880181.accept (3 samples, 0.29%)</title><rect x="264.0" y="899.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.19%)</title><rect x="265.1" y="883.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.19%)</title><rect x="265.1" y="867.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="266.3" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="266.3" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="266.3" y="819.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.29%)</title><rect x="267.4" y="915.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (2 samples, 0.19%)</title><rect x="267.4" y="899.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (2 samples, 0.19%)</title><rect x="267.4" y="883.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (2 samples, 0.19%)</title><rect x="267.4" y="867.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.10%)</title><rect x="268.6" y="851.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="269.7" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.7" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.10%)</title><rect x="270.8" y="995.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (675 samples, 65.15%)</title><rect x="272.0" y="1011.0" width="768.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.0" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (675 samples, 65.15%)</title><rect x="272.0" y="995.0" width="768.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.0" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (675 samples, 65.15%)</title><rect x="272.0" y="979.0" width="768.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.0" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/64095360.run (433 samples, 41.80%)</title><rect x="277.7" y="963.0" width="493.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.7" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/640..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (433 samples, 41.80%)</title><rect x="277.7" y="947.0" width="493.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.7" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (433 samples, 41.80%)</title><rect x="277.7" y="931.0" width="493.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.7" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (423 samples, 40.83%)</title><rect x="277.7" y="915.0" width="481.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.7" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="281.1" y="899.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (150 samples, 14.48%)</title><rect x="282.2" y="899.0" width="170.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.2" y="910.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (150 samples, 14.48%)</title><rect x="282.2" y="883.0" width="170.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.2" y="894.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (150 samples, 14.48%)</title><rect x="282.2" y="867.0" width="170.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.2" y="878.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (150 samples, 14.48%)</title><rect x="282.2" y="851.0" width="170.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.2" y="862.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (150 samples, 14.48%)</title><rect x="282.2" y="835.0" width="170.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.2" y="846.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (150 samples, 14.48%)</title><rect x="282.2" y="819.0" width="170.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.2" y="830.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (47 samples, 4.54%)</title><rect x="282.2" y="803.0" width="53.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.2" y="814.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.97%)</title><rect x="298.2" y="787.0" width="11.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="301.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.77%)</title><rect x="300.4" y="771.0" width="9.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="303.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.68%)</title><rect x="309.6" y="787.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.68%)</title><rect x="309.6" y="771.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="312.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.68%)</title><rect x="309.6" y="755.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.68%)</title><rect x="309.6" y="739.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (7 samples, 0.68%)</title><rect x="309.6" y="723.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (16 samples, 1.54%)</title><rect x="317.5" y="787.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.19%)</title><rect x="333.5" y="771.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="333.5" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="336.5" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="333.5" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="336.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="333.5" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="336.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="333.5" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="336.5" y="718.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="333.5" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="336.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.10%)</title><rect x="334.6" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.10%)</title><rect x="334.6" y="739.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="337.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (95 samples, 9.17%)</title><rect x="335.8" y="803.0" width="108.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.8" y="814.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.29%)</title><rect x="335.8" y="787.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (3 samples, 0.29%)</title><rect x="339.2" y="787.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.10%)</title><rect x="342.6" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.39%)</title><rect x="343.7" y="787.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.19%)</title><rect x="346.0" y="771.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 1.06%)</title><rect x="348.3" y="787.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.87%)</title><rect x="350.6" y="771.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.77%)</title><rect x="351.7" y="755.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.77%)</title><rect x="351.7" y="739.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="359.7" y="723.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="362.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.58%)</title><rect x="360.8" y="787.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="364.2" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="367.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="364.2" y="755.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="367.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="364.2" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="367.2" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="364.2" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="367.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.19%)</title><rect x="365.4" y="771.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 6.27%)</title><rect x="367.6" y="787.0" width="74.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.6" y="798.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.35%)</title><rect x="367.6" y="771.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.48%)</title><rect x="367.6" y="755.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.48%)</title><rect x="367.6" y="739.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.48%)</title><rect x="367.6" y="723.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.77%)</title><rect x="373.3" y="755.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="382.5" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="382.5" y="739.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="383.6" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 4.83%)</title><rect x="384.7" y="771.0" width="57.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.7" y="782.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.83%)</title><rect x="384.7" y="755.0" width="57.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.7" y="766.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.73%)</title><rect x="385.9" y="739.0" width="55.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.9" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.54%)</title><rect x="387.0" y="723.0" width="18.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="390.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.10%)</title><rect x="393.8" y="707.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.48%)</title><rect x="395.0" y="707.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.48%)</title><rect x="395.0" y="691.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.48%)</title><rect x="395.0" y="675.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="399.5" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.19%)</title><rect x="400.7" y="707.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="403.0" y="707.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="403.0" y="691.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="403.0" y="675.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.97%)</title><rect x="405.2" y="723.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.58%)</title><rect x="409.8" y="707.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.58%)</title><rect x="409.8" y="691.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.58%)</title><rect x="409.8" y="675.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.58%)</title><rect x="409.8" y="659.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="412.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="416.6" y="723.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="419.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.68%)</title><rect x="417.8" y="723.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.68%)</title><rect x="417.8" y="707.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.68%)</title><rect x="417.8" y="691.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.68%)</title><rect x="417.8" y="675.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="420.8" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.68%)</title><rect x="417.8" y="659.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.8" y="670.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.68%)</title><rect x="417.8" y="643.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.8" y="654.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor17.newInstance (3 samples, 0.29%)</title><rect x="422.3" y="627.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.77%)</title><rect x="425.7" y="723.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.77%)</title><rect x="425.7" y="707.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.77%)</title><rect x="425.7" y="691.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.29%)</title><rect x="431.4" y="675.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.48%)</title><rect x="434.8" y="723.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.29%)</title><rect x="437.1" y="707.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="437.1" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="440.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="437.1" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="440.1" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="438.3" y="691.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="441.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="439.4" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="442.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="439.4" y="659.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="442.4" y="670.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor17.newInstance (1 samples, 0.10%)</title><rect x="440.5" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.19%)</title><rect x="441.7" y="787.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.77%)</title><rect x="444.0" y="803.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.68%)</title><rect x="445.1" y="787.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.68%)</title><rect x="445.1" y="771.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.68%)</title><rect x="445.1" y="755.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.68%)</title><rect x="445.1" y="739.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="448.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (246 samples, 23.75%)</title><rect x="453.1" y="899.0" width="280.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.1" y="910.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (44 samples, 4.25%)</title><rect x="454.2" y="883.0" width="50.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.2" y="894.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 4.15%)</title><rect x="455.3" y="867.0" width="49.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.3" y="878.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (42 samples, 4.05%)</title><rect x="456.5" y="851.0" width="47.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.5" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.68%)</title><rect x="456.5" y="835.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="456.5" y="819.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="456.5" y="803.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="456.5" y="787.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.48%)</title><rect x="458.8" y="819.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.48%)</title><rect x="458.8" y="803.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.48%)</title><rect x="458.8" y="787.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.97%)</title><rect x="464.5" y="835.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="473.6" y="819.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.6" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="473.6" y="803.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (25 samples, 2.41%)</title><rect x="475.8" y="835.0" width="28.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.8" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.48%)</title><rect x="495.2" y="819.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="498.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.48%)</title><rect x="495.2" y="803.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.29%)</title><rect x="500.9" y="819.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.29%)</title><rect x="504.3" y="883.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="505.5" y="867.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="508.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="505.5" y="851.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (140 samples, 13.51%)</title><rect x="507.7" y="883.0" width="159.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.7" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="507.7" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="510.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="507.7" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="510.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="507.7" y="835.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="510.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="507.7" y="819.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="510.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (139 samples, 13.42%)</title><rect x="508.9" y="867.0" width="158.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.9" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="524.8" y="851.0" width="5.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="527.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="526.0" y="835.0" width="4.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="529.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (40 samples, 3.86%)</title><rect x="530.5" y="851.0" width="45.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="533.5" y="862.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (40 samples, 3.86%)</title><rect x="530.5" y="835.0" width="45.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.5" y="846.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.61%)</title><rect x="536.2" y="819.0" width="30.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.2" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.54%)</title><rect x="539.6" y="803.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.6" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.54%)</title><rect x="539.6" y="787.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.6" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.54%)</title><rect x="539.6" y="771.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="542.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.68%)</title><rect x="545.3" y="755.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="548.3" y="766.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.10%)</title><rect x="545.3" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="548.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.29%)</title><rect x="546.5" y="739.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="549.5" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.29%)</title><rect x="546.5" y="723.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="549.5" y="734.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="547.6" y="707.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="550.6" y="718.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.19%)</title><rect x="547.6" y="691.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="550.6" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.29%)</title><rect x="549.9" y="739.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="552.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="551.0" y="723.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="554.0" y="734.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="551.0" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="554.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="552.2" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="555.2" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="553.3" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="556.3" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="554.4" y="755.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="557.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.39%)</title><rect x="557.9" y="803.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.9" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="562.4" y="803.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="565.4" y="814.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="565.8" y="803.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="568.8" y="814.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="567.0" y="819.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="570.0" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.68%)</title><rect x="568.1" y="819.0" width="8.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="571.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.68%)</title><rect x="576.1" y="851.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="576.1" y="835.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="579.1" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="576.1" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="579.1" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="576.1" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.1" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="576.1" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="579.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="576.1" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.1" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="576.1" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.58%)</title><rect x="577.2" y="835.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.58%)</title><rect x="577.2" y="819.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="580.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="582.9" y="803.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.9" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (73 samples, 7.05%)</title><rect x="584.1" y="851.0" width="83.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.1" y="862.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (73 samples, 7.05%)</title><rect x="584.1" y="835.0" width="83.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.1" y="846.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.39%)</title><rect x="584.1" y="819.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.39%)</title><rect x="584.1" y="803.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.39%)</title><rect x="584.1" y="787.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.39%)</title><rect x="584.1" y="771.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="587.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="588.6" y="819.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.6" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.29%)</title><rect x="588.6" y="803.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.29%)</title><rect x="588.6" y="787.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="591.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (66 samples, 6.37%)</title><rect x="592.0" y="819.0" width="75.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.0" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (62 samples, 5.98%)</title><rect x="596.6" y="803.0" width="70.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.6" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 2.90%)</title><rect x="633.0" y="787.0" width="34.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.0" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.29%)</title><rect x="650.1" y="771.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="653.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.68%)</title><rect x="653.5" y="771.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="656.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="660.4" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="660.4" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="663.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="660.4" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="663.4" y="734.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.48%)</title><rect x="661.5" y="771.0" width="5.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="664.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 4.34%)</title><rect x="667.2" y="883.0" width="51.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.2" y="894.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 4.34%)</title><rect x="667.2" y="867.0" width="51.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.2" y="878.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/580786606.process (24 samples, 2.32%)</title><rect x="668.3" y="851.0" width="27.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.3" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (24 samples, 2.32%)</title><rect x="668.3" y="835.0" width="27.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="671.3" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.93%)</title><rect x="670.6" y="819.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="673.6" y="830.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="676.3" y="803.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.3" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="676.3" y="787.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="679.3" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.19%)</title><rect x="676.3" y="771.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.19%)</title><rect x="676.3" y="755.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="677.5" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="677.5" y="723.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="680.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.97%)</title><rect x="678.6" y="803.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="680.9" y="787.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="683.9" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="680.9" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="683.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="682.0" y="787.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="685.0" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.58%)</title><rect x="683.1" y="787.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.58%)</title><rect x="683.1" y="771.0" width="6.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="686.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="690.0" y="803.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.10%)</title><rect x="692.3" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="695.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="693.4" y="819.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="693.4" y="803.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="696.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.19%)</title><rect x="693.4" y="787.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.39%)</title><rect x="695.7" y="851.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.39%)</title><rect x="695.7" y="835.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.7" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.68%)</title><rect x="700.2" y="851.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.2" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.68%)</title><rect x="700.2" y="835.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1909550197.get$Lambda (7 samples, 0.68%)</title><rect x="700.2" y="819.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="700.2" y="803.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="703.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="700.2" y="787.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="700.2" y="771.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="700.2" y="755.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.2" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="700.2" y="739.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="703.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1909550197.&lt;init&gt; (6 samples, 0.58%)</title><rect x="701.4" y="803.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="707.1" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="710.1" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="707.1" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="710.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="707.1" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="710.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="707.1" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="707.1" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="710.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="707.1" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="710.1" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="707.1" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="710.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="707.1" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="710.1" y="686.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="707.1" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="710.1" y="670.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="707.1" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="710.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="708.2" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="708.2" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.2" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.10%)</title><rect x="708.2" y="819.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="711.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.29%)</title><rect x="709.3" y="851.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.3" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.29%)</title><rect x="709.3" y="835.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.3" y="846.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="709.3" y="819.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="712.3" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="711.6" y="819.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="712.8" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="715.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="712.8" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="715.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.39%)</title><rect x="713.9" y="851.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.10%)</title><rect x="718.5" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="718.5" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="718.5" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="721.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="718.5" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="721.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.16%)</title><rect x="719.6" y="883.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.6" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="723.0" y="867.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="726.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="723.0" y="851.0" width="2.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="726.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.58%)</title><rect x="725.3" y="867.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.48%)</title><rect x="726.4" y="851.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="729.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$279/770347376.accept (5 samples, 0.48%)</title><rect x="726.4" y="835.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="729.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (5 samples, 0.48%)</title><rect x="726.4" y="819.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.4" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.48%)</title><rect x="726.4" y="803.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="729.4" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.48%)</title><rect x="726.4" y="787.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.4" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="727.6" y="771.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="730.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="727.6" y="755.0" width="4.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="730.6" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="732.1" y="867.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="735.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.64%)</title><rect x="733.3" y="899.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="736.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.54%)</title><rect x="734.4" y="883.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.06%)</title><rect x="736.7" y="867.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/35779333.accept (11 samples, 1.06%)</title><rect x="736.7" y="851.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (11 samples, 1.06%)</title><rect x="736.7" y="835.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$274/677184159.complete (11 samples, 1.06%)</title><rect x="736.7" y="819.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (11 samples, 1.06%)</title><rect x="736.7" y="803.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (11 samples, 1.06%)</title><rect x="736.7" y="787.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.7" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 1.06%)</title><rect x="736.7" y="771.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 1.06%)</title><rect x="736.7" y="755.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 1.06%)</title><rect x="736.7" y="739.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (11 samples, 1.06%)</title><rect x="736.7" y="723.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.29%)</title><rect x="749.2" y="867.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.2" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.58%)</title><rect x="752.6" y="899.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="755.6" y="910.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.58%)</title><rect x="752.6" y="883.0" width="6.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="755.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.19%)</title><rect x="759.5" y="915.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="762.5" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.19%)</title><rect x="759.5" y="899.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.5" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.19%)</title><rect x="759.5" y="883.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="762.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="759.5" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="762.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="759.5" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="762.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="759.5" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="762.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="759.5" y="819.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="762.5" y="830.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="759.5" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="762.5" y="814.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.10%)</title><rect x="760.6" y="867.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="763.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.77%)</title><rect x="761.7" y="915.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.7" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.68%)</title><rect x="762.9" y="899.0" width="7.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="765.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.68%)</title><rect x="762.9" y="883.0" width="7.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="765.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.68%)</title><rect x="770.8" y="963.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.68%)</title><rect x="770.8" y="947.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.68%)</title><rect x="770.8" y="931.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.68%)</title><rect x="770.8" y="915.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/64095360.run (2 samples, 0.19%)</title><rect x="776.5" y="899.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="779.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (230 samples, 22.20%)</title><rect x="778.8" y="963.0" width="262.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.8" y="974.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 22.10%)</title><rect x="780.0" y="947.0" width="260.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.0" y="958.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (2 samples, 0.19%)</title><rect x="791.4" y="931.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (203 samples, 19.59%)</title><rect x="793.6" y="931.0" width="231.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.6" y="942.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.19%)</title><rect x="813.0" y="915.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.19%)</title><rect x="813.0" y="899.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (22 samples, 2.12%)</title><rect x="815.3" y="915.0" width="25.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.3" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.87%)</title><rect x="840.3" y="915.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.87%)</title><rect x="840.3" y="899.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.87%)</title><rect x="840.3" y="883.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.87%)</title><rect x="840.3" y="867.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="843.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (152 samples, 14.67%)</title><rect x="850.6" y="915.0" width="173.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.6" y="926.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (152 samples, 14.67%)</title><rect x="850.6" y="899.0" width="173.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="853.6" y="910.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="854.0" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="857.0" y="894.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="855.1" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.1" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="856.3" y="883.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="859.3" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 13.71%)</title><rect x="858.6" y="883.0" width="161.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="861.6" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="859.7" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="862.7" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 2.90%)</title><rect x="860.8" y="867.0" width="34.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="863.8" y="878.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (13 samples, 1.25%)</title><rect x="874.5" y="851.0" width="14.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="877.5" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="877.9" y="835.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="880.9" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.29%)</title><rect x="879.1" y="835.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.1" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.19%)</title><rect x="880.2" y="819.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.2" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="882.5" y="835.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.5" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.39%)</title><rect x="884.7" y="835.0" width="4.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="887.7" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="889.3" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="892.3" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.39%)</title><rect x="890.4" y="851.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.4" y="862.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="895.0" y="867.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="898.0" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="897.3" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="900.3" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="898.4" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="901.4" y="878.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="899.6" y="867.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="902.6" y="878.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.35%)</title><rect x="900.7" y="867.0" width="15.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="903.7" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.61%)</title><rect x="916.6" y="867.0" width="30.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="919.6" y="878.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 4.54%)</title><rect x="947.4" y="867.0" width="53.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="950.4" y="878.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.68%)</title><rect x="1000.9" y="867.0" width="8.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1003.9" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1008.9" y="867.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1011.9" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1010.0" y="867.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1013.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1011.2" y="867.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1014.2" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="1012.3" y="867.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1015.3" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.19%)</title><rect x="1014.6" y="867.0" width="2.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1017.6" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.29%)</title><rect x="1016.9" y="867.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1019.9" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1020.3" y="883.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1023.3" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1022.6" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.6" y="894.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1023.7" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 1.25%)</title><rect x="1024.8" y="931.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (13 samples, 1.25%)</title><rect x="1024.8" y="915.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1027.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.97%)</title><rect x="1024.8" y="899.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.29%)</title><rect x="1036.2" y="899.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.29%)</title><rect x="1036.2" y="883.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.29%)</title><rect x="1036.2" y="867.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="1039.7" y="931.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1042.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="1039.7" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1040.8" y="1011.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1040.8" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1040.8" y="979.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1043.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1040.8" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1043.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1040.8" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1040.8" y="931.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1040.8" y="915.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1043.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1040.8" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1043.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1040.8" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1043.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="1040.8" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1043.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.10%)</title><rect x="1040.8" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.8" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.10%)</title><rect x="1040.8" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.8" y="846.0"></text>
</g>
<g>
<title>start_thread (130 samples, 12.55%)</title><rect x="1041.9" y="1011.0" width="148.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1044.9" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (130 samples, 12.55%)</title><rect x="1041.9" y="995.0" width="148.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1044.9" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 2.22%)</title><rect x="1041.9" y="979.0" width="26.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.9" y="990.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.58%)</title><rect x="1041.9" y="963.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1044.9" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.58%)</title><rect x="1041.9" y="947.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.9" y="958.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.29%)</title><rect x="1041.9" y="931.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.9" y="942.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1045.3" y="931.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1048.3" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.54%)</title><rect x="1048.8" y="963.0" width="18.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.8" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.29%)</title><rect x="1048.8" y="947.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.8" y="958.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1048.8" y="931.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1051.8" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.58%)</title><rect x="1052.2" y="947.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.2" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.19%)</title><rect x="1052.2" y="931.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.2" y="942.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.19%)</title><rect x="1052.2" y="915.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.2" y="926.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.19%)</title><rect x="1052.2" y="899.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.2" y="910.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.19%)</title><rect x="1052.2" y="883.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.2" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.39%)</title><rect x="1054.5" y="931.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.5" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.39%)</title><rect x="1054.5" y="915.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.5" y="926.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1057.9" y="899.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1060.9" y="910.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1057.9" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.9" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.68%)</title><rect x="1059.0" y="947.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.0" y="958.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.68%)</title><rect x="1059.0" y="931.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.0" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.68%)</title><rect x="1059.0" y="915.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.0" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.68%)</title><rect x="1059.0" y="899.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.0" y="910.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.58%)</title><rect x="1060.2" y="883.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.2" y="894.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.58%)</title><rect x="1060.2" y="867.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.2" y="878.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.19%)</title><rect x="1063.6" y="851.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.6" y="862.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1064.7" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.7" y="846.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1065.8" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.8" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1067.0" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.0" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1067.0" y="947.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.0" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.10%)</title><rect x="1067.0" y="931.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1070.0" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (104 samples, 10.04%)</title><rect x="1068.1" y="979.0" width="118.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.1" y="990.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 10.04%)</title><rect x="1068.1" y="963.0" width="118.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.1" y="974.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 10.04%)</title><rect x="1068.1" y="947.0" width="118.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.1" y="958.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (103 samples, 9.94%)</title><rect x="1068.1" y="931.0" width="117.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.1" y="942.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (102 samples, 9.85%)</title><rect x="1068.1" y="915.0" width="116.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.1" y="926.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (102 samples, 9.85%)</title><rect x="1068.1" y="899.0" width="116.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.1" y="910.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 4.92%)</title><rect x="1068.1" y="883.0" width="58.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.1" y="894.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1068.1" y="867.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.1" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1068.1" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.1" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.39%)</title><rect x="1069.3" y="867.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.3" y="878.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="1070.4" y="851.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.4" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.19%)</title><rect x="1071.5" y="851.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.5" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1071.5" y="835.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.5" y="846.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.10%)</title><rect x="1072.7" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.7" y="846.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.10%)</title><rect x="1073.8" y="867.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.8" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.29%)</title><rect x="1075.0" y="867.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.0" y="878.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1075.0" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.0" y="862.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.10%)</title><rect x="1075.0" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.0" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1076.1" y="851.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.39%)</title><rect x="1078.4" y="867.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.39%)</title><rect x="1078.4" y="851.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.4" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1078.4" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1079.5" y="835.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1082.5" y="846.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="1079.5" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.5" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.19%)</title><rect x="1080.7" y="835.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.7" y="846.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.10%)</title><rect x="1080.7" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.7" y="830.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1080.7" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1081.8" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 3.67%)</title><rect x="1082.9" y="867.0" width="43.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.9" y="878.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.29%)</title><rect x="1082.9" y="851.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.10%)</title><rect x="1084.1" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.1" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1085.2" y="835.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.2" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1085.2" y="819.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.19%)</title><rect x="1086.4" y="851.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.4" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.19%)</title><rect x="1086.4" y="835.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.68%)</title><rect x="1088.6" y="851.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.6" y="862.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.10%)</title><rect x="1095.5" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 1.16%)</title><rect x="1096.6" y="851.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.6" y="862.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.19%)</title><rect x="1101.2" y="835.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.2" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1103.4" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.4" y="846.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.10%)</title><rect x="1104.6" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.29%)</title><rect x="1105.7" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.7" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1108.0" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.0" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1109.1" y="835.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1110.3" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.48%)</title><rect x="1111.4" y="851.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.29%)</title><rect x="1113.7" y="835.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.7" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1117.1" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.1" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1117.1" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.1" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1118.2" y="851.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1118.2" y="835.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.2" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1119.4" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.4" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1119.4" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.4" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1120.5" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.5" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1120.5" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.5" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.39%)</title><rect x="1121.7" y="851.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.7" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1123.9" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1125.1" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.1" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (42 samples, 4.05%)</title><rect x="1126.2" y="883.0" width="47.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="894.0">Comp..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1126.2" y="867.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1127.4" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1127.4" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="787.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="611.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="547.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="515.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="419.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="371.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="355.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1127.4" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="334.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.10%)</title><rect x="1127.4" y="307.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.4" y="318.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1128.5" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="878.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1128.5" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 2.99%)</title><rect x="1129.6" y="867.0" width="35.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.6" y="878.0">Pha..</text>
</g>
<g>
<title>Arena::set_size_in_bytes(unsigned long) (1 samples, 0.10%)</title><rect x="1129.6" y="851.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.6" y="862.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1130.8" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.39%)</title><rect x="1131.9" y="851.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.9" y="862.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1134.2" y="835.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.2" y="846.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1135.3" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1136.5" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 1.83%)</title><rect x="1137.6" y="851.0" width="21.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.6" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 1.74%)</title><rect x="1138.7" y="835.0" width="20.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 1.74%)</title><rect x="1138.7" y="819.0" width="20.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.29%)</title><rect x="1154.7" y="803.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1158.1" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1159.2" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1159.2" y="835.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="1160.4" y="851.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.19%)</title><rect x="1160.4" y="835.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.10%)</title><rect x="1160.4" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1161.5" y="819.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="830.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1161.5" y="803.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="814.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1161.5" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="798.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.10%)</title><rect x="1161.5" y="771.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.5" y="782.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.10%)</title><rect x="1161.5" y="755.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1162.7" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1162.7" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1162.7" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="830.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1162.7" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1163.8" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.8" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1164.9" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1164.9" y="851.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.68%)</title><rect x="1166.1" y="867.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.68%)</title><rect x="1166.1" y="851.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="862.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1166.1" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.1" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1166.1" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.1" y="830.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.10%)</title><rect x="1166.1" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="814.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1167.2" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1167.2" y="819.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1167.2" y="803.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="814.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.19%)</title><rect x="1168.4" y="835.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1168.4" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.4" y="830.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1168.4" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.4" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1169.5" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.19%)</title><rect x="1170.6" y="835.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.19%)</title><rect x="1170.6" y="819.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="803.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="787.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="771.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="755.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.6" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="739.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="723.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="707.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="691.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="675.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.19%)</title><rect x="1170.6" y="659.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="627.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="611.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="579.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.6" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="563.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.6" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.6" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.6" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.6" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="483.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.6" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1170.6" y="467.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.6" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1170.6" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="462.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.8" y="643.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1171.8" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1172.9" y="835.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.9" y="846.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1172.9" y="819.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.9" y="803.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1172.9" y="787.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.77%)</title><rect x="1174.1" y="883.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.77%)</title><rect x="1174.1" y="867.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.77%)</title><rect x="1174.1" y="851.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.77%)</title><rect x="1174.1" y="835.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.77%)</title><rect x="1174.1" y="819.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.77%)</title><rect x="1174.1" y="803.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1174.1" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="798.0"></text>
</g>
<g>
<title>WarmCallInfo::is_cold() const (1 samples, 0.10%)</title><rect x="1174.1" y="771.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.48%)</title><rect x="1175.2" y="787.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.48%)</title><rect x="1175.2" y="771.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.48%)</title><rect x="1175.2" y="755.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.48%)</title><rect x="1175.2" y="739.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.48%)</title><rect x="1175.2" y="723.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1175.2" y="707.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1175.2" y="691.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1175.2" y="675.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1175.2" y="659.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1175.2" y="643.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1175.2" y="627.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1175.2" y="611.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1175.2" y="595.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1175.2" y="579.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1175.2" y="563.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1175.2" y="547.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1175.2" y="531.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1175.2" y="515.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1175.2" y="499.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1175.2" y="483.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1175.2" y="467.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1175.2" y="451.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1175.2" y="435.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1175.2" y="419.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1175.2" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1175.2" y="387.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1175.2" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1175.2" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1175.2" y="339.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1175.2" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1175.2" y="307.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1175.2" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1175.2" y="275.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1175.2" y="259.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1175.2" y="243.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1175.2" y="227.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1175.2" y="211.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="222.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1175.2" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="206.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1175.2" y="179.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1175.2" y="163.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="174.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1175.2" y="147.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="158.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1175.2" y="131.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1178.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="419.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="403.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="387.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1176.3" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="355.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1176.3" y="339.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="323.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="307.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="291.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="275.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="259.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="243.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="227.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="211.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="195.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="179.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="163.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="147.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="131.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="115.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="99.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="83.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="67.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1176.3" y="51.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1176.3" y="35.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.5" y="691.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.5" y="675.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.5" y="659.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.5" y="643.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.5" y="627.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.5" y="611.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1177.5" y="595.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.5" y="579.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.5" y="563.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.5" y="547.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.5" y="531.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.5" y="515.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1177.5" y="499.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.5" y="483.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.5" y="467.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.5" y="451.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.5" y="435.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.5" y="419.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1177.5" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1177.5" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1177.5" y="371.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1178.6" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1178.6" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1178.6" y="371.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1178.6" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1178.6" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1178.6" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1179.7" y="707.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.10%)</title><rect x="1179.7" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="787.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="771.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1180.9" y="755.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1180.9" y="739.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1180.9" y="723.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1180.9" y="707.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1180.9" y="691.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="675.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1180.9" y="659.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1180.9" y="643.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1180.9" y="627.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1180.9" y="611.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1180.9" y="595.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1180.9" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1180.9" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.10%)</title><rect x="1180.9" y="515.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.10%)</title><rect x="1180.9" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.10%)</title><rect x="1180.9" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1180.9" y="467.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.10%)</title><rect x="1180.9" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.0" y="579.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.0" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.0" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.0" y="531.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.0" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.0" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.0" y="483.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.0" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.0" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.0" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.0" y="419.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.10%)</title><rect x="1182.0" y="403.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.10%)</title><rect x="1182.0" y="387.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="398.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.10%)</title><rect x="1182.0" y="371.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1182.0" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="366.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1182.0" y="339.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="350.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1183.2" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1183.2" y="867.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.10%)</title><rect x="1184.3" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.10%)</title><rect x="1184.3" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="910.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.10%)</title><rect x="1185.4" y="931.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.4" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.10%)</title><rect x="1185.4" y="915.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.10%)</title><rect x="1185.4" y="899.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.4" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.10%)</title><rect x="1185.4" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="894.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.10%)</title><rect x="1185.4" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.4" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="1185.4" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.29%)</title><rect x="1186.6" y="979.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.29%)</title><rect x="1186.6" y="963.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.29%)</title><rect x="1186.6" y="947.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.29%)</title><rect x="1186.6" y="931.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="942.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.29%)</title><rect x="1186.6" y="915.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.29%)</title><rect x="1186.6" y="899.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.10%)</title><rect x="1186.6" y="883.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="894.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="1186.6" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1186.6" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>OtherRegionsTable::is_empty() const (1 samples, 0.10%)</title><rect x="1186.6" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="883.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.10%)</title><rect x="1187.7" y="867.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.9" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="894.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.10%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
</g>
</svg>
