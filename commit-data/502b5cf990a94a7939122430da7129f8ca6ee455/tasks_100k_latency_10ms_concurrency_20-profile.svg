<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (243 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 8.64%)</title><rect x="10.0" y="995.0" width="102.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.41%)</title><rect x="10.0" y="979.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.41%)</title><rect x="10.0" y="963.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.41%)</title><rect x="10.0" y="947.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.41%)</title><rect x="10.0" y="931.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.41%)</title><rect x="10.0" y="915.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.41%)</title><rect x="10.0" y="899.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 8.23%)</title><rect x="14.9" y="979.0" width="97.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.41%)</title><rect x="14.9" y="963.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.41%)</title><rect x="14.9" y="947.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/1472076988.accept (1 samples, 0.41%)</title><rect x="14.9" y="931.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.41%)</title><rect x="14.9" y="915.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.41%)</title><rect x="14.9" y="899.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.41%)</title><rect x="14.9" y="883.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 1.23%)</title><rect x="19.7" y="963.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 1.23%)</title><rect x="19.7" y="947.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 1.23%)</title><rect x="19.7" y="931.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 1.23%)</title><rect x="19.7" y="915.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 1.23%)</title><rect x="19.7" y="899.0" width="14.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 1.23%)</title><rect x="19.7" y="883.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 1.23%)</title><rect x="19.7" y="867.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.41%)</title><rect x="19.7" y="851.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.41%)</title><rect x="19.7" y="835.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.41%)</title><rect x="19.7" y="819.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.7" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.41%)</title><rect x="19.7" y="803.0" width="4.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="22.7" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.41%)</title><rect x="24.6" y="851.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.41%)</title><rect x="29.4" y="851.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.65%)</title><rect x="34.3" y="963.0" width="19.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/117682639.accept (4 samples, 1.65%)</title><rect x="34.3" y="947.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (4 samples, 1.65%)</title><rect x="34.3" y="931.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.82%)</title><rect x="34.3" y="915.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.82%)</title><rect x="34.3" y="899.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.82%)</title><rect x="34.3" y="883.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.82%)</title><rect x="34.3" y="867.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.82%)</title><rect x="34.3" y="851.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.41%)</title><rect x="39.1" y="835.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.41%)</title><rect x="39.1" y="819.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.41%)</title><rect x="39.1" y="803.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.41%)</title><rect x="39.1" y="787.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.41%)</title><rect x="39.1" y="771.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.82%)</title><rect x="44.0" y="915.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.82%)</title><rect x="44.0" y="899.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.0" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.41%)</title><rect x="44.0" y="883.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.41%)</title><rect x="44.0" y="867.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.0" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="48.8" y="883.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="51.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.94%)</title><rect x="53.7" y="963.0" width="58.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.7" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.94%)</title><rect x="53.7" y="947.0" width="58.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.7" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.29%)</title><rect x="53.7" y="931.0" width="38.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.7" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.65%)</title><rect x="53.7" y="915.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.65%)</title><rect x="53.7" y="899.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.41%)</title><rect x="53.7" y="883.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.41%)</title><rect x="53.7" y="867.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.41%)</title><rect x="53.7" y="851.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.41%)</title><rect x="53.7" y="835.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.41%)</title><rect x="53.7" y="819.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.41%)</title><rect x="53.7" y="803.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.41%)</title><rect x="58.6" y="883.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 0.82%)</title><rect x="63.4" y="883.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 0.82%)</title><rect x="63.4" y="867.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 0.82%)</title><rect x="63.4" y="851.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.41%)</title><rect x="63.4" y="835.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.41%)</title><rect x="63.4" y="819.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.41%)</title><rect x="63.4" y="803.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.41%)</title><rect x="68.3" y="835.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.41%)</title><rect x="68.3" y="819.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.41%)</title><rect x="68.3" y="803.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.41%)</title><rect x="68.3" y="787.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.65%)</title><rect x="73.1" y="915.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.65%)</title><rect x="73.1" y="899.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.65%)</title><rect x="73.1" y="883.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.65%)</title><rect x="73.1" y="867.0" width="19.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.23%)</title><rect x="73.1" y="851.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.41%)</title><rect x="78.0" y="835.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.41%)</title><rect x="78.0" y="819.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.41%)</title><rect x="78.0" y="803.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.41%)</title><rect x="78.0" y="787.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.41%)</title><rect x="78.0" y="771.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.41%)</title><rect x="78.0" y="755.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.41%)</title><rect x="78.0" y="739.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.41%)</title><rect x="82.8" y="835.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.41%)</title><rect x="82.8" y="819.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.41%)</title><rect x="82.8" y="803.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.41%)</title><rect x="82.8" y="787.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.8" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.41%)</title><rect x="82.8" y="771.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.41%)</title><rect x="87.7" y="851.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.41%)</title><rect x="87.7" y="835.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.41%)</title><rect x="87.7" y="819.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.7" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.41%)</title><rect x="87.7" y="803.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.41%)</title><rect x="92.6" y="931.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.41%)</title><rect x="92.6" y="915.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.41%)</title><rect x="92.6" y="899.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.41%)</title><rect x="92.6" y="883.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.41%)</title><rect x="92.6" y="867.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.41%)</title><rect x="92.6" y="851.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.41%)</title><rect x="92.6" y="835.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.41%)</title><rect x="92.6" y="819.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.41%)</title><rect x="92.6" y="803.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.41%)</title><rect x="92.6" y="787.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.41%)</title><rect x="92.6" y="771.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.41%)</title><rect x="92.6" y="755.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.41%)</title><rect x="97.4" y="931.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.41%)</title><rect x="97.4" y="915.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.41%)</title><rect x="97.4" y="899.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.41%)</title><rect x="97.4" y="883.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.41%)</title><rect x="97.4" y="867.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="97.4" y="851.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.41%)</title><rect x="97.4" y="835.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="97.4" y="819.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.41%)</title><rect x="97.4" y="803.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.41%)</title><rect x="97.4" y="787.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.41%)</title><rect x="97.4" y="771.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.82%)</title><rect x="102.3" y="931.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.82%)</title><rect x="102.3" y="915.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.41%)</title><rect x="102.3" y="899.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.3" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.41%)</title><rect x="102.3" y="883.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.3" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.41%)</title><rect x="102.3" y="867.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="105.3" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.41%)</title><rect x="102.3" y="851.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.3" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.41%)</title><rect x="102.3" y="835.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.3" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.41%)</title><rect x="102.3" y="819.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.41%)</title><rect x="107.1" y="899.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.41%)</title><rect x="107.1" y="883.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.41%)</title><rect x="107.1" y="867.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.41%)</title><rect x="107.1" y="851.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.41%)</title><rect x="107.1" y="835.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.41%)</title><rect x="107.1" y="819.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.41%)</title><rect x="107.1" y="803.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.41%)</title><rect x="107.1" y="787.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.41%)</title><rect x="107.1" y="771.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.41%)</title><rect x="107.1" y="755.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.41%)</title><rect x="107.1" y="739.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1757341508.get (1 samples, 0.41%)</title><rect x="107.1" y="723.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (168 samples, 69.14%)</title><rect x="112.0" y="995.0" width="815.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.0" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (168 samples, 69.14%)</title><rect x="112.0" y="979.0" width="815.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.0" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (168 samples, 69.14%)</title><rect x="112.0" y="963.0" width="815.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="115.0" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/44576527.run (162 samples, 66.67%)</title><rect x="112.0" y="947.0" width="786.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="115.0" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/44576527.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (162 samples, 66.67%)</title><rect x="112.0" y="931.0" width="786.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.0" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (162 samples, 66.67%)</title><rect x="112.0" y="915.0" width="786.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.0" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="112.0" y="899.0" width="4.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="115.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="112.0" y="883.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="115.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (160 samples, 65.84%)</title><rect x="116.8" y="899.0" width="777.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.8" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.41%)</title><rect x="131.4" y="883.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.41%)</title><rect x="131.4" y="867.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/234131350.get (1 samples, 0.41%)</title><rect x="131.4" y="851.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.41%)</title><rect x="131.4" y="835.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="134.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.41%)</title><rect x="131.4" y="819.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="134.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.41%)</title><rect x="131.4" y="803.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="134.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.41%)</title><rect x="131.4" y="787.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="134.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.41%)</title><rect x="131.4" y="771.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="134.4" y="782.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.41%)</title><rect x="131.4" y="755.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="134.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (18 samples, 7.41%)</title><rect x="136.3" y="883.0" width="87.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.3" y="894.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (16 samples, 6.58%)</title><rect x="146.0" y="867.0" width="77.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.0" y="878.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (16 samples, 6.58%)</title><rect x="146.0" y="851.0" width="77.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.0" y="862.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 6.58%)</title><rect x="146.0" y="835.0" width="77.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.0" y="846.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 6.58%)</title><rect x="146.0" y="819.0" width="77.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.0" y="830.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 6.58%)</title><rect x="146.0" y="803.0" width="77.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.0" y="814.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.88%)</title><rect x="160.5" y="787.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.5" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.88%)</title><rect x="160.5" y="771.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.5" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.88%)</title><rect x="160.5" y="755.0" width="34.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.5" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.65%)</title><rect x="160.5" y="739.0" width="19.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 1.65%)</title><rect x="160.5" y="723.0" width="19.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.23%)</title><rect x="180.0" y="739.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.23%)</title><rect x="180.0" y="723.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 1.23%)</title><rect x="180.0" y="707.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.06%)</title><rect x="194.5" y="787.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.5" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.06%)</title><rect x="194.5" y="771.0" width="24.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.5" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.82%)</title><rect x="194.5" y="755.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.23%)</title><rect x="204.2" y="755.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.23%)</title><rect x="204.2" y="739.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.23%)</title><rect x="204.2" y="723.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.41%)</title><rect x="204.2" y="707.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.41%)</title><rect x="204.2" y="691.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.41%)</title><rect x="204.2" y="675.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="207.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.41%)</title><rect x="204.2" y="659.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.41%)</title><rect x="204.2" y="643.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.41%)</title><rect x="209.1" y="707.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.41%)</title><rect x="209.1" y="691.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.41%)</title><rect x="209.1" y="675.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.41%)</title><rect x="209.1" y="659.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.41%)</title><rect x="209.1" y="643.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.41%)</title><rect x="214.0" y="707.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.41%)</title><rect x="218.8" y="787.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.41%)</title><rect x="218.8" y="771.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.41%)</title><rect x="218.8" y="755.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.41%)</title><rect x="218.8" y="739.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.41%)</title><rect x="218.8" y="723.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (133 samples, 54.73%)</title><rect x="223.7" y="883.0" width="645.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.7" y="894.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 7.00%)</title><rect x="223.7" y="867.0" width="82.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.7" y="878.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 6.17%)</title><rect x="233.4" y="851.0" width="72.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.4" y="862.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 5.35%)</title><rect x="243.1" y="835.0" width="63.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.1" y="846.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.47%)</title><rect x="277.1" y="819.0" width="29.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.1" y="830.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.65%)</title><rect x="286.8" y="803.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.65%)</title><rect x="286.8" y="787.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.41%)</title><rect x="306.2" y="867.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.41%)</title><rect x="306.2" y="851.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.41%)</title><rect x="306.2" y="835.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (31 samples, 12.76%)</title><rect x="311.1" y="867.0" width="150.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.1" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (31 samples, 12.76%)</title><rect x="311.1" y="851.0" width="150.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.1" y="862.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="320.8" y="835.0" width="4.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="323.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="320.8" y="819.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="323.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 4.53%)</title><rect x="325.6" y="835.0" width="53.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.6" y="846.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 4.53%)</title><rect x="325.6" y="819.0" width="53.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.6" y="830.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 4.53%)</title><rect x="325.6" y="803.0" width="53.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.6" y="814.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 3.29%)</title><rect x="330.5" y="787.0" width="38.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.5" y="798.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 3.29%)</title><rect x="330.5" y="771.0" width="38.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.5" y="782.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 3.29%)</title><rect x="330.5" y="755.0" width="38.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.5" y="766.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.23%)</title><rect x="345.1" y="739.0" width="14.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="348.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.41%)</title><rect x="345.1" y="723.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="348.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.41%)</title><rect x="349.9" y="723.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="352.9" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.41%)</title><rect x="349.9" y="707.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.9" y="718.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.41%)</title><rect x="349.9" y="691.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="352.9" y="702.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.41%)</title><rect x="349.9" y="675.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="352.9" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.41%)</title><rect x="354.8" y="723.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="357.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.41%)</title><rect x="354.8" y="707.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="357.8" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.82%)</title><rect x="359.6" y="739.0" width="9.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="362.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.41%)</title><rect x="369.3" y="787.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.3" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="374.2" y="787.0" width="4.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="377.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.41%)</title><rect x="379.1" y="835.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.1" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 6.58%)</title><rect x="383.9" y="835.0" width="77.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.9" y="846.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 6.58%)</title><rect x="383.9" y="819.0" width="77.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.9" y="830.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.82%)</title><rect x="383.9" y="803.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="386.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.82%)</title><rect x="383.9" y="787.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.82%)</title><rect x="383.9" y="771.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.82%)</title><rect x="383.9" y="755.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.41%)</title><rect x="388.8" y="739.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.41%)</title><rect x="388.8" y="723.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (14 samples, 5.76%)</title><rect x="393.6" y="803.0" width="68.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.6" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 4.94%)</title><rect x="403.3" y="787.0" width="58.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 3.29%)</title><rect x="422.8" y="771.0" width="38.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.8" y="782.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.41%)</title><rect x="432.5" y="755.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.23%)</title><rect x="437.3" y="755.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.3" y="766.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.82%)</title><rect x="451.9" y="755.0" width="9.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="454.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (74 samples, 30.45%)</title><rect x="461.6" y="867.0" width="359.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.6" y="878.0">com/linecorp/decaton/processor/runtime/Processing..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (74 samples, 30.45%)</title><rect x="461.6" y="851.0" width="359.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.6" y="862.0">com/linecorp/decaton/processor/runtime/Processing..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2140907510.process (63 samples, 25.93%)</title><rect x="466.5" y="835.0" width="305.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.5" y="846.0">com/linecorp/decaton/benchmark/DecatonRun..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (63 samples, 25.93%)</title><rect x="466.5" y="819.0" width="305.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.5" y="830.0">com/linecorp/decaton/benchmark/DecatonRun..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (63 samples, 25.93%)</title><rect x="466.5" y="803.0" width="305.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.5" y="814.0">com/linecorp/decaton/benchmark/Recording...</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (9 samples, 3.70%)</title><rect x="466.5" y="787.0" width="43.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.5" y="798.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.23%)</title><rect x="495.6" y="771.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.6" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.23%)</title><rect x="495.6" y="755.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.6" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.41%)</title><rect x="505.3" y="739.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (53 samples, 21.81%)</title><rect x="510.2" y="787.0" width="257.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.2" y="798.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProcessLatency (1 samples, 0.41%)</title><rect x="515.0" y="771.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 20.99%)</title><rect x="519.9" y="771.0" width="247.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.9" y="782.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (41 samples, 16.87%)</title><rect x="563.6" y="755.0" width="199.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="566.6" y="766.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.23%)</title><rect x="573.3" y="739.0" width="14.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="576.3" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.82%)</title><rect x="587.9" y="739.0" width="9.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="590.9" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.82%)</title><rect x="587.9" y="723.0" width="9.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="590.9" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.41%)</title><rect x="597.6" y="739.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="600.6" y="750.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 13.58%)</title><rect x="602.4" y="739.0" width="160.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.4" y="750.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.41%)</title><rect x="631.6" y="723.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.6" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.41%)</title><rect x="636.4" y="723.0" width="4.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="639.4" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.82%)</title><rect x="641.3" y="723.0" width="9.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="644.3" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (18 samples, 7.41%)</title><rect x="651.0" y="723.0" width="87.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="654.0" y="734.0">__pthread_..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.82%)</title><rect x="738.4" y="723.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.4" y="734.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.41%)</title><rect x="748.1" y="723.0" width="4.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="751.1" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.41%)</title><rect x="753.0" y="723.0" width="4.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="756.0" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.41%)</title><rect x="757.8" y="723.0" width="4.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="760.8" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.41%)</title><rect x="762.7" y="755.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.41%)</title><rect x="767.5" y="787.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="770.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.82%)</title><rect x="772.4" y="835.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="775.4" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.82%)</title><rect x="772.4" y="819.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.4" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.82%)</title><rect x="782.1" y="835.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.82%)</title><rect x="782.1" y="819.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1329746905.get$Lambda (2 samples, 0.82%)</title><rect x="782.1" y="803.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1329746905.&lt;init&gt; (1 samples, 0.41%)</title><rect x="787.0" y="787.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="790.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.41%)</title><rect x="791.8" y="835.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="794.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.41%)</title><rect x="791.8" y="819.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="794.8" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.82%)</title><rect x="796.7" y="835.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.82%)</title><rect x="796.7" y="819.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.7" y="830.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.82%)</title><rect x="796.7" y="803.0" width="9.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="799.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.41%)</title><rect x="806.4" y="835.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="809.4" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.41%)</title><rect x="806.4" y="819.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.82%)</title><rect x="811.2" y="835.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 4.12%)</title><rect x="820.9" y="867.0" width="48.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="823.9" y="878.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="850.1" y="851.0" width="4.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="853.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="850.1" y="835.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="853.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.23%)</title><rect x="854.9" y="851.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.23%)</title><rect x="854.9" y="835.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1839631984.accept (3 samples, 1.23%)</title><rect x="854.9" y="819.0" width="14.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 1.23%)</title><rect x="854.9" y="803.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.9" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.23%)</title><rect x="854.9" y="787.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="857.9" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.23%)</title><rect x="854.9" y="771.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="857.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.06%)</title><rect x="869.5" y="883.0" width="24.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="872.5" y="894.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.41%)</title><rect x="869.5" y="867.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="872.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.65%)</title><rect x="874.4" y="867.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="877.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.82%)</title><rect x="884.1" y="851.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="887.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1132236465.accept (2 samples, 0.82%)</title><rect x="884.1" y="835.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="887.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (2 samples, 0.82%)</title><rect x="884.1" y="819.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="887.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$274/107159077.complete (2 samples, 0.82%)</title><rect x="884.1" y="803.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.82%)</title><rect x="884.1" y="787.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="887.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.82%)</title><rect x="884.1" y="771.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.1" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.82%)</title><rect x="884.1" y="755.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="887.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.82%)</title><rect x="884.1" y="739.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="887.1" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.82%)</title><rect x="884.1" y="723.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="887.1" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.82%)</title><rect x="884.1" y="707.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="887.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.41%)</title><rect x="893.8" y="899.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.82%)</title><rect x="898.6" y="947.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="901.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.82%)</title><rect x="898.6" y="931.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="901.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.82%)</title><rect x="898.6" y="915.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.82%)</title><rect x="898.6" y="899.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.65%)</title><rect x="908.4" y="947.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.65%)</title><rect x="908.4" y="931.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.65%)</title><rect x="908.4" y="915.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="911.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.65%)</title><rect x="908.4" y="899.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="911.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.65%)</title><rect x="908.4" y="883.0" width="19.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="911.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.65%)</title><rect x="908.4" y="867.0" width="19.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="911.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.41%)</title><rect x="927.8" y="995.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.8" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.41%)</title><rect x="927.8" y="979.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.8" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.41%)</title><rect x="927.8" y="963.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.8" y="974.0"></text>
</g>
<g>
<title>start_thread (53 samples, 21.81%)</title><rect x="932.6" y="995.0" width="257.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="935.6" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (53 samples, 21.81%)</title><rect x="932.6" y="979.0" width="257.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="935.6" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.88%)</title><rect x="932.6" y="963.0" width="34.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.6" y="974.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.82%)</title><rect x="932.6" y="947.0" width="9.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.6" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.82%)</title><rect x="932.6" y="931.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.6" y="942.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.82%)</title><rect x="932.6" y="915.0" width="9.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="935.6" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 2.06%)</title><rect x="942.3" y="947.0" width="24.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="945.3" y="958.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.06%)</title><rect x="942.3" y="931.0" width="24.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.3" y="942.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.41%)</title><rect x="947.2" y="915.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.2" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.41%)</title><rect x="952.1" y="915.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.1" y="926.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.82%)</title><rect x="956.9" y="915.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.9" y="926.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.41%)</title><rect x="961.8" y="899.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.8" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (45 samples, 18.52%)</title><rect x="966.6" y="963.0" width="218.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.6" y="974.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (45 samples, 18.52%)</title><rect x="966.6" y="947.0" width="218.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.6" y="958.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (45 samples, 18.52%)</title><rect x="966.6" y="931.0" width="218.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.6" y="942.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (45 samples, 18.52%)</title><rect x="966.6" y="915.0" width="218.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.6" y="926.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (43 samples, 17.70%)</title><rect x="966.6" y="899.0" width="208.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.6" y="910.0">C2Compiler::compile_method(..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (43 samples, 17.70%)</title><rect x="966.6" y="883.0" width="208.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.6" y="894.0">Compile::Compile(ciEnv*, C2..</text>
</g>
<g>
<title>Compile::Code_Gen() (27 samples, 11.11%)</title><rect x="966.6" y="867.0" width="131.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.6" y="878.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.41%)</title><rect x="966.6" y="851.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.6" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.41%)</title><rect x="966.6" y="835.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.6" y="846.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.41%)</title><rect x="966.6" y="819.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.6" y="830.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.41%)</title><rect x="966.6" y="803.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.6" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.41%)</title><rect x="971.5" y="851.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.5" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.41%)</title><rect x="971.5" y="835.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.5" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.41%)</title><rect x="971.5" y="819.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.5" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.41%)</title><rect x="976.3" y="851.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.3" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.41%)</title><rect x="976.3" y="835.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.3" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.82%)</title><rect x="981.2" y="851.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.82%)</title><rect x="981.2" y="835.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="984.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.41%)</title><rect x="981.2" y="819.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.41%)</title><rect x="981.2" y="803.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.2" y="814.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.41%)</title><rect x="981.2" y="787.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.2" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.41%)</title><rect x="981.2" y="771.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.2" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.41%)</title><rect x="981.2" y="755.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.2" y="766.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.41%)</title><rect x="981.2" y="739.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.2" y="750.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.41%)</title><rect x="981.2" y="723.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::find_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.41%)</title><rect x="981.2" y="707.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.41%)</title><rect x="981.2" y="691.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="984.2" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.41%)</title><rect x="986.0" y="819.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.0" y="830.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.41%)</title><rect x="986.0" y="803.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 8.64%)</title><rect x="990.9" y="851.0" width="102.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="993.9" y="862.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.23%)</title><rect x="990.9" y="835.0" width="14.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.82%)</title><rect x="995.8" y="819.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.82%)</title><rect x="995.8" y="803.0" width="9.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.23%)</title><rect x="1005.5" y="835.0" width="14.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.41%)</title><rect x="1015.2" y="819.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1018.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.41%)</title><rect x="1015.2" y="803.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.2" y="814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.41%)</title><rect x="1015.2" y="787.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1018.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.47%)</title><rect x="1020.0" y="835.0" width="29.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1023.0" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.82%)</title><rect x="1039.5" y="819.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.5" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.82%)</title><rect x="1039.5" y="803.0" width="9.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.41%)</title><rect x="1049.2" y="835.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.41%)</title><rect x="1049.2" y="819.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.41%)</title><rect x="1054.0" y="835.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.65%)</title><rect x="1058.9" y="835.0" width="19.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.41%)</title><rect x="1073.5" y="819.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.5" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.41%)</title><rect x="1078.3" y="835.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.3" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.41%)</title><rect x="1078.3" y="819.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.3" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.82%)</title><rect x="1083.2" y="835.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.2" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.82%)</title><rect x="1083.2" y="819.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.2" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="1088.0" y="803.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.0" y="814.0"></text>
</g>
<g>
<title>ciMethod::break_at_execute() (1 samples, 0.41%)</title><rect x="1092.9" y="851.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.9" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 4.53%)</title><rect x="1097.7" y="867.0" width="53.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.7" y="878.0">Compi..</text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.82%)</title><rect x="1097.7" y="851.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.7" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.41%)</title><rect x="1102.6" y="835.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.6" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.41%)</title><rect x="1102.6" y="819.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.41%)</title><rect x="1102.6" y="803.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.6" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.41%)</title><rect x="1102.6" y="787.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.41%)</title><rect x="1102.6" y="771.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.6" y="782.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.41%)</title><rect x="1102.6" y="755.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.6" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1102.6" y="739.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.6" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.41%)</title><rect x="1107.4" y="851.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.4" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.41%)</title><rect x="1107.4" y="835.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.4" y="846.0"></text>
</g>
<g>
<title>StoreNNode::Opcode() const (1 samples, 0.41%)</title><rect x="1107.4" y="819.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 2.06%)</title><rect x="1112.3" y="851.0" width="24.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.3" y="862.0">P..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.41%)</title><rect x="1112.3" y="835.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.3" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.41%)</title><rect x="1112.3" y="819.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.41%)</title><rect x="1112.3" y="803.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_member(IdealLoopTree const*, Node*) const (1 samples, 0.41%)</title><rect x="1112.3" y="787.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.82%)</title><rect x="1117.2" y="835.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.2" y="846.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.41%)</title><rect x="1117.2" y="819.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="830.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.41%)</title><rect x="1122.0" y="819.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.41%)</title><rect x="1126.9" y="835.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.41%)</title><rect x="1126.9" y="819.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.41%)</title><rect x="1131.7" y="835.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.41%)</title><rect x="1131.7" y="819.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.41%)</title><rect x="1131.7" y="803.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.41%)</title><rect x="1131.7" y="787.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.7" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.82%)</title><rect x="1136.6" y="851.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.82%)</title><rect x="1136.6" y="835.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.6" y="846.0"></text>
</g>
<g>
<title>CmpPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1136.6" y="819.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.6" y="830.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.41%)</title><rect x="1141.4" y="819.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.4" y="830.0"></text>
</g>
<g>
<title>PhaseTransform::type(Node const*) const (1 samples, 0.41%)</title><rect x="1141.4" y="803.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.4" y="814.0"></text>
</g>
<g>
<title>Type_Array::fast_lookup(unsigned int) const (1 samples, 0.41%)</title><rect x="1141.4" y="787.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.4" y="798.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.41%)</title><rect x="1146.3" y="851.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.06%)</title><rect x="1151.2" y="867.0" width="24.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.2" y="878.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.06%)</title><rect x="1151.2" y="851.0" width="24.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.06%)</title><rect x="1151.2" y="835.0" width="24.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.06%)</title><rect x="1151.2" y="819.0" width="24.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.06%)</title><rect x="1151.2" y="803.0" width="24.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.06%)</title><rect x="1151.2" y="787.0" width="24.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="798.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1151.2" y="771.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.41%)</title><rect x="1151.2" y="755.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.2" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="1151.2" y="739.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="1151.2" y="723.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="1151.2" y="707.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1151.2" y="691.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1151.2" y="675.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1151.2" y="659.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1151.2" y="643.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.41%)</title><rect x="1151.2" y="627.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.41%)</title><rect x="1151.2" y="611.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.41%)</title><rect x="1151.2" y="595.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="606.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.41%)</title><rect x="1151.2" y="579.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1151.2" y="563.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1151.2" y="547.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.41%)</title><rect x="1151.2" y="531.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.65%)</title><rect x="1156.0" y="771.0" width="19.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.65%)</title><rect x="1156.0" y="755.0" width="19.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.65%)</title><rect x="1156.0" y="739.0" width="19.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.65%)</title><rect x="1156.0" y="723.0" width="19.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.65%)</title><rect x="1156.0" y="707.0" width="19.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.23%)</title><rect x="1156.0" y="691.0" width="14.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1156.0" y="675.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1156.0" y="659.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1156.0" y="643.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1156.0" y="627.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1156.0" y="611.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1156.0" y="595.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1156.0" y="579.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1156.0" y="563.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1156.0" y="547.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1156.0" y="531.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1156.0" y="515.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1156.0" y="499.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1156.0" y="483.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1156.0" y="467.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1156.0" y="451.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1156.0" y="435.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1156.0" y="419.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1156.0" y="403.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1156.0" y="387.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1156.0" y="371.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1156.0" y="355.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1156.0" y="339.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1156.0" y="323.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1156.0" y="307.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1156.0" y="291.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1156.0" y="275.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1156.0" y="259.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1156.0" y="243.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1156.0" y="227.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1156.0" y="211.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1156.0" y="195.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1156.0" y="179.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1156.0" y="163.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1156.0" y="147.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1156.0" y="131.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1156.0" y="115.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1156.0" y="99.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.41%)</title><rect x="1156.0" y="83.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.41%)</title><rect x="1156.0" y="67.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="78.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.41%)</title><rect x="1156.0" y="51.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.41%)</title><rect x="1156.0" y="35.0" width="4.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1159.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1160.9" y="595.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1160.9" y="579.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="590.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.41%)</title><rect x="1160.9" y="563.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.41%)</title><rect x="1160.9" y="547.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.41%)</title><rect x="1160.9" y="531.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.41%)</title><rect x="1160.9" y="515.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1165.7" y="675.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1165.7" y="659.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1165.7" y="643.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1165.7" y="627.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1165.7" y="611.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1165.7" y="595.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1165.7" y="579.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1165.7" y="563.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1165.7" y="547.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1165.7" y="531.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1165.7" y="515.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.41%)</title><rect x="1165.7" y="499.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.7" y="510.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.41%)</title><rect x="1165.7" y="483.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.41%)</title><rect x="1165.7" y="467.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="478.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.41%)</title><rect x="1165.7" y="451.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1170.6" y="691.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1170.6" y="675.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.41%)</title><rect x="1170.6" y="659.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.41%)</title><rect x="1170.6" y="643.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.82%)</title><rect x="1175.4" y="899.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="910.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.82%)</title><rect x="1175.4" y="883.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.82%)</title><rect x="1175.4" y="867.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.82%)</title><rect x="1175.4" y="851.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.41%)</title><rect x="1175.4" y="835.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.41%)</title><rect x="1175.4" y="819.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.41%)</title><rect x="1175.4" y="803.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.41%)</title><rect x="1175.4" y="787.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.41%)</title><rect x="1175.4" y="771.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.41%)</title><rect x="1175.4" y="755.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.41%)</title><rect x="1175.4" y="739.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.41%)</title><rect x="1175.4" y="723.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.41%)</title><rect x="1180.3" y="835.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.41%)</title><rect x="1180.3" y="819.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.41%)</title><rect x="1180.3" y="803.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>BitMap::~BitMap() (1 samples, 0.41%)</title><rect x="1180.3" y="787.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.41%)</title><rect x="1185.1" y="963.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.41%)</title><rect x="1185.1" y="947.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="1185.1" y="931.0" width="4.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.1" y="942.0"></text>
</g>
</g>
</svg>
