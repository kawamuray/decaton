<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (269 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.37%)</title><rect x="10.0" y="1155.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.37%)</title><rect x="10.0" y="1139.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 8.18%)</title><rect x="14.4" y="1155.0" width="96.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.4" y="1166.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.37%)</title><rect x="14.4" y="1139.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.37%)</title><rect x="14.4" y="1123.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.37%)</title><rect x="14.4" y="1107.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.37%)</title><rect x="14.4" y="1091.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="14.4" y="1075.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="14.4" y="1059.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="14.4" y="1043.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.37%)</title><rect x="14.4" y="1027.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.37%)</title><rect x="14.4" y="1011.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.37%)</title><rect x="14.4" y="995.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.37%)</title><rect x="14.4" y="979.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.37%)</title><rect x="14.4" y="963.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.37%)</title><rect x="14.4" y="947.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.37%)</title><rect x="14.4" y="931.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.37%)</title><rect x="14.4" y="915.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.37%)</title><rect x="14.4" y="899.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.81%)</title><rect x="18.8" y="1139.0" width="92.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.8" y="1150.0">com/linecor..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="18.8" y="1123.0" width="4.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="21.8" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="18.8" y="1107.0" width="4.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="21.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.37%)</title><rect x="23.2" y="1123.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.37%)</title><rect x="23.2" y="1107.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.2" y="1118.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.37%)</title><rect x="23.2" y="1091.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.37%)</title><rect x="23.2" y="1075.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.37%)</title><rect x="23.2" y="1059.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.2" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.37%)</title><rect x="23.2" y="1043.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="26.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.37%)</title><rect x="27.5" y="1123.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.37%)</title><rect x="27.5" y="1107.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.86%)</title><rect x="31.9" y="1123.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.9" y="1134.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1090373150.accept (5 samples, 1.86%)</title><rect x="31.9" y="1107.0" width="22.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.9" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (5 samples, 1.86%)</title><rect x="31.9" y="1091.0" width="22.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.9" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.12%)</title><rect x="31.9" y="1075.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.12%)</title><rect x="31.9" y="1059.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.12%)</title><rect x="31.9" y="1043.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.12%)</title><rect x="31.9" y="1027.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.12%)</title><rect x="31.9" y="1011.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.12%)</title><rect x="31.9" y="995.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.74%)</title><rect x="31.9" y="979.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.74%)</title><rect x="31.9" y="963.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.74%)</title><rect x="31.9" y="947.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.37%)</title><rect x="40.7" y="979.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.37%)</title><rect x="40.7" y="963.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.37%)</title><rect x="40.7" y="947.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.74%)</title><rect x="45.1" y="1075.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.74%)</title><rect x="45.1" y="1059.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.1" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.74%)</title><rect x="45.1" y="1043.0" width="8.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="48.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.83%)</title><rect x="53.9" y="1123.0" width="57.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.9" y="1134.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.83%)</title><rect x="53.9" y="1107.0" width="57.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="1118.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.23%)</title><rect x="58.3" y="1091.0" width="26.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.3" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.49%)</title><rect x="58.3" y="1075.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.49%)</title><rect x="58.3" y="1059.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.12%)</title><rect x="58.3" y="1043.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.37%)</title><rect x="58.3" y="1027.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.37%)</title><rect x="58.3" y="1011.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.37%)</title><rect x="58.3" y="995.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.37%)</title><rect x="58.3" y="979.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.37%)</title><rect x="58.3" y="963.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.74%)</title><rect x="62.6" y="1027.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (2 samples, 0.74%)</title><rect x="62.6" y="1011.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (1 samples, 0.37%)</title><rect x="62.6" y="995.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.37%)</title><rect x="62.6" y="979.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.37%)</title><rect x="67.0" y="995.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.37%)</title><rect x="67.0" y="979.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.37%)</title><rect x="67.0" y="963.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.37%)</title><rect x="71.4" y="1043.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.37%)</title><rect x="71.4" y="1027.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="71.4" y="1011.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="71.4" y="995.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.37%)</title><rect x="71.4" y="979.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.37%)</title><rect x="71.4" y="963.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.37%)</title><rect x="71.4" y="947.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.37%)</title><rect x="71.4" y="931.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.37%)</title><rect x="71.4" y="915.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.sizeOf (1 samples, 0.37%)</title><rect x="71.4" y="899.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.74%)</title><rect x="75.8" y="1075.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.74%)</title><rect x="75.8" y="1059.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.74%)</title><rect x="75.8" y="1043.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.74%)</title><rect x="75.8" y="1027.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.37%)</title><rect x="75.8" y="1011.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.37%)</title><rect x="75.8" y="995.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.37%)</title><rect x="75.8" y="979.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.37%)</title><rect x="75.8" y="963.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.37%)</title><rect x="75.8" y="947.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.37%)</title><rect x="75.8" y="931.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.37%)</title><rect x="75.8" y="915.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.37%)</title><rect x="75.8" y="899.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.37%)</title><rect x="80.2" y="1011.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.37%)</title><rect x="80.2" y="995.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.37%)</title><rect x="80.2" y="979.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.2" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.37%)</title><rect x="80.2" y="963.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.12%)</title><rect x="84.6" y="1091.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.74%)</title><rect x="84.6" y="1075.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.74%)</title><rect x="84.6" y="1059.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.74%)</title><rect x="84.6" y="1043.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.74%)</title><rect x="84.6" y="1027.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.74%)</title><rect x="84.6" y="1011.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.74%)</title><rect x="84.6" y="995.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.37%)</title><rect x="84.6" y="979.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.37%)</title><rect x="84.6" y="963.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.37%)</title><rect x="84.6" y="947.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.37%)</title><rect x="84.6" y="931.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="84.6" y="915.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.37%)</title><rect x="89.0" y="979.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="89.0" y="963.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="89.0" y="947.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.0" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.37%)</title><rect x="89.0" y="931.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.0" y="942.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.37%)</title><rect x="89.0" y="915.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.37%)</title><rect x="89.0" y="899.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/1099211907.apply (1 samples, 0.37%)</title><rect x="89.0" y="883.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.37%)</title><rect x="89.0" y="867.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.37%)</title><rect x="93.3" y="1075.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.74%)</title><rect x="97.7" y="1091.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.74%)</title><rect x="97.7" y="1075.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.7" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.37%)</title><rect x="97.7" y="1059.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.37%)</title><rect x="102.1" y="1059.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.37%)</title><rect x="102.1" y="1043.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.37%)</title><rect x="102.1" y="1027.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="102.1" y="1011.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.37%)</title><rect x="102.1" y="995.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="102.1" y="979.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="102.1" y="963.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.37%)</title><rect x="102.1" y="947.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.1" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.37%)</title><rect x="102.1" y="931.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.37%)</title><rect x="102.1" y="915.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.1" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.37%)</title><rect x="102.1" y="899.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="105.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.37%)</title><rect x="106.5" y="1091.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.5" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="106.5" y="1075.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="109.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 51.30%)</title><rect x="110.9" y="1155.0" width="605.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.9" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 51.30%)</title><rect x="110.9" y="1139.0" width="605.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.9" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 51.30%)</title><rect x="110.9" y="1123.0" width="605.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.9" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1293035696.run (129 samples, 47.96%)</title><rect x="110.9" y="1107.0" width="565.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.9" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1293035696.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (129 samples, 47.96%)</title><rect x="110.9" y="1091.0" width="565.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.9" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (129 samples, 47.96%)</title><rect x="110.9" y="1075.0" width="565.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.9" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (128 samples, 47.58%)</title><rect x="110.9" y="1059.0" width="561.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.9" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.37%)</title><rect x="132.8" y="1043.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.37%)</title><rect x="132.8" y="1027.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$195/893604829.get (1 samples, 0.37%)</title><rect x="132.8" y="1011.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.37%)</title><rect x="132.8" y="995.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="135.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="132.8" y="979.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="135.8" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="132.8" y="963.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="135.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="132.8" y="947.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="135.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="132.8" y="931.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="135.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="132.8" y="915.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="135.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (31 samples, 11.52%)</title><rect x="137.2" y="1043.0" width="136.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.2" y="1054.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (31 samples, 11.52%)</title><rect x="137.2" y="1027.0" width="136.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.2" y="1038.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (31 samples, 11.52%)</title><rect x="137.2" y="1011.0" width="136.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.2" y="1022.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 11.52%)</title><rect x="137.2" y="995.0" width="136.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.2" y="1006.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 11.52%)</title><rect x="137.2" y="979.0" width="136.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.2" y="990.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 11.52%)</title><rect x="137.2" y="963.0" width="136.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.2" y="974.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 2.97%)</title><rect x="137.2" y="947.0" width="35.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.2" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.12%)</title><rect x="141.6" y="931.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.12%)</title><rect x="141.6" y="915.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.12%)</title><rect x="141.6" y="899.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.74%)</title><rect x="141.6" y="883.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.74%)</title><rect x="141.6" y="867.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.74%)</title><rect x="141.6" y="851.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="144.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.37%)</title><rect x="150.4" y="883.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.37%)</title><rect x="150.4" y="867.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.37%)</title><rect x="150.4" y="851.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.37%)</title><rect x="150.4" y="835.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.49%)</title><rect x="154.8" y="931.0" width="17.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.74%)</title><rect x="163.5" y="915.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.37%)</title><rect x="163.5" y="899.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.5" y="910.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.37%)</title><rect x="163.5" y="883.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="166.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.37%)</title><rect x="167.9" y="899.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.9" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="167.9" y="883.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="170.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="167.9" y="867.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="170.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="167.9" y="851.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="170.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 8.18%)</title><rect x="172.3" y="947.0" width="96.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.3" y="958.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.37%)</title><rect x="176.7" y="931.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.37%)</title><rect x="176.7" y="915.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.49%)</title><rect x="181.1" y="931.0" width="17.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.49%)</title><rect x="181.1" y="915.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.12%)</title><rect x="185.5" y="899.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.74%)</title><rect x="189.9" y="883.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.9" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="189.9" y="867.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="192.9" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="189.9" y="851.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="192.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="189.9" y="835.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="192.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="189.9" y="819.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="192.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.37%)</title><rect x="194.2" y="867.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.74%)</title><rect x="198.6" y="931.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.37%)</title><rect x="203.0" y="915.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 5.20%)</title><rect x="207.4" y="931.0" width="61.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.4" y="942.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.74%)</title><rect x="211.8" y="915.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="211.8" y="899.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="211.8" y="883.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="211.8" y="867.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.37%)</title><rect x="216.2" y="899.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 4.09%)</title><rect x="220.6" y="915.0" width="48.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.6" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 4.09%)</title><rect x="220.6" y="899.0" width="48.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.6" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.35%)</title><rect x="229.3" y="883.0" width="39.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.3" y="894.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="229.3" y="867.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="229.3" y="851.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="229.3" y="835.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="229.3" y="819.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.37%)</title><rect x="229.3" y="803.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.37%)</title><rect x="229.3" y="787.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.12%)</title><rect x="233.7" y="867.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.37%)</title><rect x="242.5" y="851.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.37%)</title><rect x="242.5" y="835.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.37%)</title><rect x="242.5" y="819.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.37%)</title><rect x="242.5" y="803.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.37%)</title><rect x="246.9" y="867.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.37%)</title><rect x="246.9" y="851.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.37%)</title><rect x="246.9" y="835.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.37%)</title><rect x="246.9" y="819.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.9" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.37%)</title><rect x="246.9" y="803.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.9" y="814.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.37%)</title><rect x="246.9" y="787.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.9" y="798.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.37%)</title><rect x="246.9" y="771.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.37%)</title><rect x="251.3" y="867.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="251.3" y="851.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="251.3" y="835.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 1.12%)</title><rect x="255.7" y="867.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.37%)</title><rect x="268.8" y="947.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.37%)</title><rect x="268.8" y="931.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.37%)</title><rect x="268.8" y="915.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.37%)</title><rect x="268.8" y="899.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.37%)</title><rect x="268.8" y="883.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (89 samples, 33.09%)</title><rect x="273.2" y="1043.0" width="390.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.2" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (11 samples, 4.09%)</title><rect x="273.2" y="1027.0" width="48.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.2" y="1038.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (11 samples, 4.09%)</title><rect x="273.2" y="1011.0" width="48.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.2" y="1022.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 3.72%)</title><rect x="277.6" y="995.0" width="43.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.6" y="1006.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.60%)</title><rect x="290.7" y="979.0" width="30.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.7" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.60%)</title><rect x="290.7" y="963.0" width="30.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.7" y="974.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.60%)</title><rect x="290.7" y="947.0" width="30.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.7" y="958.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (18 samples, 6.69%)</title><rect x="321.4" y="1027.0" width="79.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.4" y="1038.0">com/linec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="321.4" y="1011.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="324.4" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="321.4" y="995.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="324.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="321.4" y="979.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="324.4" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.37%)</title><rect x="321.4" y="963.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="324.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (17 samples, 6.32%)</title><rect x="325.8" y="1011.0" width="74.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.8" y="1022.0">com/line..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="339.0" y="995.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="342.0" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="339.0" y="979.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="342.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="339.0" y="963.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="342.0" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="339.0" y="947.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="342.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="339.0" y="931.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="342.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.74%)</title><rect x="343.4" y="995.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.74%)</title><rect x="343.4" y="979.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.4" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.37%)</title><rect x="343.4" y="963.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.4" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.37%)</title><rect x="343.4" y="947.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.4" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.37%)</title><rect x="343.4" y="931.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.4" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.37%)</title><rect x="343.4" y="915.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.4" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="343.4" y="899.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="346.4" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="347.8" y="963.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="350.8" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 4.09%)</title><rect x="352.2" y="995.0" width="48.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.2" y="1006.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 4.09%)</title><rect x="352.2" y="979.0" width="48.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.2" y="990.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 4.09%)</title><rect x="352.2" y="963.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.2" y="974.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 4.09%)</title><rect x="352.2" y="947.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.2" y="958.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.60%)</title><rect x="369.7" y="931.0" width="30.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.7" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.37%)</title><rect x="374.1" y="915.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.12%)</title><rect x="378.5" y="915.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.5" y="926.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.74%)</title><rect x="391.6" y="915.0" width="8.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="394.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 20.07%)</title><rect x="400.4" y="1027.0" width="236.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.4" y="1038.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (54 samples, 20.07%)</title><rect x="400.4" y="1011.0" width="236.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.4" y="1022.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/168951277.process (52 samples, 19.33%)</title><rect x="400.4" y="995.0" width="228.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.4" y="1006.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (52 samples, 19.33%)</title><rect x="400.4" y="979.0" width="228.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.4" y="990.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (50 samples, 18.59%)</title><rect x="400.4" y="963.0" width="219.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.4" y="974.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.37%)</title><rect x="404.8" y="947.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="407.8" y="958.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="404.8" y="931.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="407.8" y="942.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="404.8" y="915.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="407.8" y="926.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::call_event(Method*, CompLevel) (1 samples, 0.37%)</title><rect x="404.8" y="899.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="407.8" y="910.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.37%)</title><rect x="404.8" y="883.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="407.8" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.49%)</title><rect x="409.2" y="947.0" width="17.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.2" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.37%)</title><rect x="422.3" y="931.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.3" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.37%)</title><rect x="422.3" y="915.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="425.3" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.37%)</title><rect x="422.3" y="899.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.37%)</title><rect x="422.3" y="883.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (44 samples, 16.36%)</title><rect x="426.7" y="947.0" width="193.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="429.7" y="958.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.37%)</title><rect x="431.1" y="931.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.1" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="431.1" y="915.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.1" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="431.1" y="899.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="434.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (41 samples, 15.24%)</title><rect x="435.5" y="931.0" width="179.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.5" y="942.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.37%)</title><rect x="457.4" y="915.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="460.4" y="926.0"></text>
</g>
<g>
<title>JVM_Sleep (34 samples, 12.64%)</title><rect x="461.8" y="915.0" width="149.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="464.8" y="926.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.49%)</title><rect x="483.8" y="899.0" width="17.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.8" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.74%)</title><rect x="501.3" y="899.0" width="8.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="504.3" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="510.1" y="899.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="513.1" y="910.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (22 samples, 8.18%)</title><rect x="514.5" y="899.0" width="96.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="517.5" y="910.0">os::sleep(T..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.12%)</title><rect x="536.4" y="883.0" width="13.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="539.4" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.35%)</title><rect x="549.6" y="883.0" width="39.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="552.6" y="894.0">__p..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.37%)</title><rect x="589.0" y="883.0" width="4.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="592.0" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.37%)</title><rect x="593.4" y="883.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.4" y="894.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.37%)</title><rect x="597.8" y="883.0" width="4.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="600.8" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.37%)</title><rect x="602.2" y="883.0" width="4.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="605.2" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.37%)</title><rect x="606.6" y="883.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="609.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.37%)</title><rect x="611.0" y="915.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="614.0" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="615.4" y="931.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="618.4" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="615.4" y="915.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="618.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.74%)</title><rect x="619.7" y="963.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.74%)</title><rect x="619.7" y="947.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.74%)</title><rect x="619.7" y="931.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.74%)</title><rect x="619.7" y="915.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.74%)</title><rect x="628.5" y="995.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="631.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.23%)</title><rect x="637.3" y="1027.0" width="26.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.3" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="659.2" y="1011.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="662.2" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="659.2" y="995.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="662.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="659.2" y="979.0" width="4.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="662.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="663.6" y="1043.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.6" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="668.0" y="1043.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="671.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.37%)</title><rect x="672.4" y="1059.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.4" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.37%)</title><rect x="672.4" y="1043.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.4" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.37%)</title><rect x="672.4" y="1027.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.4" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="672.4" y="1011.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.4" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="672.4" y="995.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="675.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="672.4" y="979.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="675.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="672.4" y="963.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="675.4" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="672.4" y="947.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="675.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.37%)</title><rect x="676.8" y="1107.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.37%)</title><rect x="676.8" y="1091.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.37%)</title><rect x="676.8" y="1075.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.37%)</title><rect x="676.8" y="1059.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.97%)</title><rect x="681.2" y="1107.0" width="35.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.2" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.97%)</title><rect x="681.2" y="1091.0" width="35.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="684.2" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.86%)</title><rect x="694.3" y="1075.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.3" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.86%)</title><rect x="694.3" y="1059.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.3" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.86%)</title><rect x="694.3" y="1043.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="697.3" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.86%)</title><rect x="694.3" y="1027.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="697.3" y="1038.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.37%)</title><rect x="716.2" y="1155.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.37%)</title><rect x="716.2" y="1139.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.2" y="1150.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.37%)</title><rect x="716.2" y="1123.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="719.2" y="1134.0"></text>
</g>
<g>
<title>start_thread (107 samples, 39.78%)</title><rect x="720.6" y="1155.0" width="469.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="723.6" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (107 samples, 39.78%)</title><rect x="720.6" y="1139.0" width="469.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="723.6" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.35%)</title><rect x="720.6" y="1123.0" width="39.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="723.6" y="1134.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.97%)</title><rect x="720.6" y="1107.0" width="35.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="723.6" y="1118.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.97%)</title><rect x="720.6" y="1091.0" width="35.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.6" y="1102.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.86%)</title><rect x="720.6" y="1075.0" width="22.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.6" y="1086.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.74%)</title><rect x="733.8" y="1059.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.8" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.74%)</title><rect x="742.6" y="1075.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.6" y="1086.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.37%)</title><rect x="747.0" y="1059.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="750.0" y="1070.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.37%)</title><rect x="751.3" y="1075.0" width="4.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="754.3" y="1086.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.37%)</title><rect x="755.7" y="1107.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="758.7" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.37%)</title><rect x="755.7" y="1091.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="758.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (98 samples, 36.43%)</title><rect x="760.1" y="1123.0" width="429.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="763.1" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (98 samples, 36.43%)</title><rect x="760.1" y="1107.0" width="429.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="763.1" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (98 samples, 36.43%)</title><rect x="760.1" y="1091.0" width="429.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.1" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (98 samples, 36.43%)</title><rect x="760.1" y="1075.0" width="429.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.1" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (96 samples, 35.69%)</title><rect x="760.1" y="1059.0" width="421.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="763.1" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (96 samples, 35.69%)</title><rect x="760.1" y="1043.0" width="421.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="763.1" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 21.93%)</title><rect x="760.1" y="1027.0" width="258.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.1" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.74%)</title><rect x="760.1" y="1011.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="763.1" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.74%)</title><rect x="760.1" y="995.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.1" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.74%)</title><rect x="760.1" y="979.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="763.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.86%)</title><rect x="768.9" y="1011.0" width="21.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="771.9" y="1022.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.86%)</title><rect x="768.9" y="995.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.9" y="1006.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.12%)</title><rect x="768.9" y="979.0" width="13.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="771.9" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.74%)</title><rect x="782.0" y="979.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="785.0" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.37%)</title><rect x="786.4" y="963.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="789.4" y="974.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.37%)</title><rect x="786.4" y="947.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="789.4" y="958.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.37%)</title><rect x="786.4" y="931.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="789.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.37%)</title><rect x="790.8" y="1011.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="793.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.37%)</title><rect x="790.8" y="995.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="793.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.12%)</title><rect x="795.2" y="1011.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.2" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.12%)</title><rect x="795.2" y="995.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="798.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.74%)</title><rect x="795.2" y="979.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="798.2" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.74%)</title><rect x="795.2" y="963.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="798.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.37%)</title><rect x="804.0" y="979.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="807.0" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.37%)</title><rect x="804.0" y="963.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="807.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 17.10%)</title><rect x="808.4" y="1011.0" width="201.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.4" y="1022.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.37%)</title><rect x="808.4" y="995.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.12%)</title><rect x="812.8" y="995.0" width="13.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 1.12%)</title><rect x="812.8" y="979.0" width="13.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.8" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.37%)</title><rect x="812.8" y="963.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="815.8" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="817.1" y="963.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="820.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 1.86%)</title><rect x="825.9" y="995.0" width="21.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="828.9" y="1006.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="830.3" y="979.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.12%)</title><rect x="834.7" y="979.0" width="13.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="837.7" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="839.1" y="963.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.86%)</title><rect x="847.8" y="995.0" width="22.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="850.8" y="1006.0">P..</text>
</g>
<g>
<title>loadConLNode::rule() const (1 samples, 0.37%)</title><rect x="865.4" y="979.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.35%)</title><rect x="869.8" y="995.0" width="39.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="872.8" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.49%)</title><rect x="882.9" y="979.0" width="17.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="885.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="896.1" y="963.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.1" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="900.5" y="979.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.5" y="990.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.37%)</title><rect x="904.9" y="979.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.37%)</title><rect x="909.3" y="995.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="912.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.37%)</title><rect x="909.3" y="979.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="912.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.12%)</title><rect x="913.6" y="995.0" width="13.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="916.6" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="922.4" y="979.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="925.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.49%)</title><rect x="926.8" y="995.0" width="17.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="929.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.37%)</title><rect x="940.0" y="979.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="943.0" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.72%)</title><rect x="944.3" y="995.0" width="43.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.3" y="1006.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 3.72%)</title><rect x="944.3" y="979.0" width="43.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.3" y="990.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 3.72%)</title><rect x="944.3" y="963.0" width="43.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.3" y="974.0">Phas..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.12%)</title><rect x="944.3" y="947.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.3" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 2.23%)</title><rect x="957.5" y="947.0" width="26.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.5" y="958.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="975.1" y="931.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.1" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.37%)</title><rect x="983.8" y="947.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.37%)</title><rect x="988.2" y="995.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.37%)</title><rect x="992.6" y="995.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.6" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.37%)</title><rect x="992.6" y="979.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.6" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.12%)</title><rect x="997.0" y="995.0" width="13.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.74%)</title><rect x="1001.4" y="979.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="1001.4" y="963.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.4" y="974.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.37%)</title><rect x="1010.1" y="1011.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.1" y="1022.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::ideal_Opcode() const (1 samples, 0.37%)</title><rect x="1014.5" y="1011.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.5" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 11.52%)</title><rect x="1018.9" y="1027.0" width="136.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.9" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.37%)</title><rect x="1018.9" y="1011.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.37%)</title><rect x="1018.9" y="995.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="979.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="963.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="947.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="931.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="915.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="899.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="883.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="867.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="851.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="835.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="819.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="803.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="787.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="771.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="755.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="739.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="723.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="707.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="691.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="675.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="659.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1021.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="643.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="627.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.37%)</title><rect x="1018.9" y="611.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.9" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.37%)</title><rect x="1023.3" y="1011.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.3" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.37%)</title><rect x="1023.3" y="995.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.3" y="1006.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.37%)</title><rect x="1023.3" y="979.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.3" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.37%)</title><rect x="1023.3" y="963.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.3" y="974.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.37%)</title><rect x="1023.3" y="947.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.3" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.37%)</title><rect x="1023.3" y="931.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.3" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.37%)</title><rect x="1023.3" y="915.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.3" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.37%)</title><rect x="1027.7" y="1011.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.37%)</title><rect x="1027.7" y="995.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 9.29%)</title><rect x="1032.1" y="1011.0" width="109.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.1" y="1022.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.74%)</title><rect x="1032.1" y="995.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.74%)</title><rect x="1040.9" y="995.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1043.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 6.69%)</title><rect x="1049.6" y="995.0" width="79.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.6" y="1006.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 6.32%)</title><rect x="1054.0" y="979.0" width="74.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.0" y="990.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 6.32%)</title><rect x="1054.0" y="963.0" width="74.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.0" y="974.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.12%)</title><rect x="1115.4" y="947.0" width="13.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.74%)</title><rect x="1128.6" y="995.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.6" y="1006.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.37%)</title><rect x="1128.6" y="979.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.37%)</title><rect x="1133.0" y="979.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.37%)</title><rect x="1133.0" y="963.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.37%)</title><rect x="1133.0" y="947.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.37%)</title><rect x="1137.4" y="995.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.37%)</title><rect x="1137.4" y="979.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.4" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1137.4" y="963.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.4" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.37%)</title><rect x="1137.4" y="947.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.4" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.74%)</title><rect x="1141.7" y="1011.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.74%)</title><rect x="1141.7" y="995.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.7" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.74%)</title><rect x="1141.7" y="979.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.7" y="990.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.37%)</title><rect x="1141.7" y="963.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.7" y="974.0"></text>
</g>
<g>
<title>RegionNode::try_clean_mem_phi(PhaseGVN*) (1 samples, 0.37%)</title><rect x="1146.1" y="963.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.1" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.37%)</title><rect x="1150.5" y="1011.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.37%)</title><rect x="1150.5" y="995.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1150.5" y="979.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.37%)</title><rect x="1150.5" y="963.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.5" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.37%)</title><rect x="1150.5" y="947.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.5" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.37%)</title><rect x="1150.5" y="931.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.37%)</title><rect x="1150.5" y="915.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.23%)</title><rect x="1154.9" y="1027.0" width="26.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="1038.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.23%)</title><rect x="1154.9" y="1011.0" width="26.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.23%)</title><rect x="1154.9" y="995.0" width="26.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.23%)</title><rect x="1154.9" y="979.0" width="26.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.23%)</title><rect x="1154.9" y="963.0" width="26.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.9" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.23%)</title><rect x="1154.9" y="947.0" width="26.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="958.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1154.9" y="931.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.9" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1154.9" y="915.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1154.9" y="899.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.37%)</title><rect x="1154.9" y="883.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.37%)</title><rect x="1154.9" y="867.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1154.9" y="851.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.9" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1154.9" y="835.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.9" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.37%)</title><rect x="1154.9" y="819.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.37%)</title><rect x="1154.9" y="803.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.9" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.37%)</title><rect x="1154.9" y="787.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1154.9" y="771.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.9" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1154.9" y="755.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="766.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1154.9" y="739.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.9" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.37%)</title><rect x="1154.9" y="723.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.37%)</title><rect x="1154.9" y="707.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.86%)</title><rect x="1159.3" y="931.0" width="21.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.86%)</title><rect x="1159.3" y="915.0" width="21.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.86%)</title><rect x="1159.3" y="899.0" width="21.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.86%)</title><rect x="1159.3" y="883.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.3" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.86%)</title><rect x="1159.3" y="867.0" width="21.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.3" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.86%)</title><rect x="1159.3" y="851.0" width="21.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="862.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.12%)</title><rect x="1159.3" y="835.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.12%)</title><rect x="1159.3" y="819.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.12%)</title><rect x="1159.3" y="803.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.12%)</title><rect x="1159.3" y="787.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.12%)</title><rect x="1159.3" y="771.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.12%)</title><rect x="1159.3" y="755.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.12%)</title><rect x="1159.3" y="739.0" width="13.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.12%)</title><rect x="1159.3" y="723.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1159.3" y="707.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1159.3" y="691.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1159.3" y="675.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1159.3" y="659.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.3" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1159.3" y="643.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.3" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1159.3" y="627.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.3" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1159.3" y="611.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.37%)</title><rect x="1159.3" y="595.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.37%)</title><rect x="1159.3" y="579.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1159.3" y="563.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1159.3" y="547.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.37%)</title><rect x="1159.3" y="531.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.37%)</title><rect x="1159.3" y="515.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.3" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.37%)</title><rect x="1159.3" y="499.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.3" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1159.3" y="483.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1159.3" y="467.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.3" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.37%)</title><rect x="1159.3" y="451.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.3" y="462.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.37%)</title><rect x="1159.3" y="435.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.3" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1159.3" y="419.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.3" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1163.7" y="643.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.7" y="627.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.7" y="611.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1163.7" y="595.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="606.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.37%)</title><rect x="1163.7" y="579.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="590.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.37%)</title><rect x="1163.7" y="563.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.7" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(oopDesc*, Symbol*, oopDesc*, Symbol*) (1 samples, 0.37%)</title><rect x="1163.7" y="547.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="558.0"></text>
</g>
<g>
<title>UTF8::strrchr(signed char const*, int, signed char) (1 samples, 0.37%)</title><rect x="1163.7" y="531.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.37%)</title><rect x="1168.1" y="707.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.1" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1172.5" y="835.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1172.5" y="819.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1172.5" y="803.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1172.5" y="787.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1172.5" y="771.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1172.5" y="755.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1172.5" y="739.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1172.5" y="723.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1172.5" y="707.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1172.5" y="691.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1172.5" y="675.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1172.5" y="659.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1172.5" y="643.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1172.5" y="627.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1172.5" y="611.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1172.5" y="595.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1172.5" y="579.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1172.5" y="563.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1172.5" y="547.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1172.5" y="531.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1172.5" y="515.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1172.5" y="499.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1172.5" y="483.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1172.5" y="467.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1172.5" y="451.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.5" y="435.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.5" y="419.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.5" y="403.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.5" y="387.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.5" y="371.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1172.5" y="355.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.5" y="339.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.5" y="323.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.5" y="307.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.5" y="291.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.5" y="275.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1172.5" y="259.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.5" y="243.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.5" y="227.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.5" y="211.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.5" y="195.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.5" y="179.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1172.5" y="163.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1172.5" y="147.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1172.5" y="131.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1172.5" y="115.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1172.5" y="99.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1172.5" y="83.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.37%)</title><rect x="1172.5" y="67.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="78.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.37%)</title><rect x="1172.5" y="51.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="62.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.37%)</title><rect x="1172.5" y="35.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1176.8" y="435.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.37%)</title><rect x="1176.8" y="419.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.37%)</title><rect x="1176.8" y="403.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.37%)</title><rect x="1176.8" y="387.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.37%)</title><rect x="1176.8" y="371.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.74%)</title><rect x="1181.2" y="1059.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.74%)</title><rect x="1181.2" y="1043.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.74%)</title><rect x="1181.2" y="1027.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.74%)</title><rect x="1181.2" y="1011.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.37%)</title><rect x="1181.2" y="995.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1181.2" y="979.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="990.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.37%)</title><rect x="1181.2" y="963.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.37%)</title><rect x="1181.2" y="947.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1181.2" y="931.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1181.2" y="915.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1181.2" y="899.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1181.2" y="883.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1181.2" y="867.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1181.2" y="851.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1181.2" y="835.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1181.2" y="819.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*) (1 samples, 0.37%)</title><rect x="1181.2" y="803.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1181.2" y="787.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1181.2" y="771.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1181.2" y="755.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1181.2" y="739.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1181.2" y="723.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1181.2" y="707.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1181.2" y="691.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1181.2" y="675.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1181.2" y="659.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.37%)</title><rect x="1181.2" y="643.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.37%)</title><rect x="1185.6" y="995.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.37%)</title><rect x="1185.6" y="979.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.6" y="990.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.37%)</title><rect x="1185.6" y="963.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.6" y="974.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.37%)</title><rect x="1185.6" y="947.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="958.0"></text>
</g>
</g>
</svg>
