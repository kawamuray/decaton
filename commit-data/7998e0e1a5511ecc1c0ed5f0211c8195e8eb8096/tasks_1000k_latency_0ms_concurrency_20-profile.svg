<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,219 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="11.0" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="11.0" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (259 samples, 21.25%)</title><rect x="11.9" y="2035.0" width="250.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.9" y="2046.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="12.9" y="2019.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="12.9" y="2003.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="12.9" y="1987.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.9" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="12.9" y="1971.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.08%)</title><rect x="12.9" y="1955.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (1 samples, 0.08%)</title><rect x="12.9" y="1939.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (257 samples, 21.08%)</title><rect x="13.9" y="2019.0" width="248.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.9" y="2030.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.33%)</title><rect x="13.9" y="2003.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.33%)</title><rect x="13.9" y="1987.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/849305336.accept (4 samples, 0.33%)</title><rect x="13.9" y="1971.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.9" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.33%)</title><rect x="13.9" y="1955.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="13.9" y="1939.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.33%)</title><rect x="13.9" y="1923.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="17.7" y="2003.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="17.7" y="1987.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.7" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="17.7" y="1971.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="17.7" y="1955.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="17.7" y="1939.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="17.7" y="1923.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="17.7" y="1907.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="17.7" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="17.7" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="17.7" y="1859.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="17.7" y="1843.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (199 samples, 16.32%)</title><rect x="18.7" y="2003.0" width="192.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/621467933.accept (191 samples, 15.67%)</title><rect x="19.7" y="1987.0" width="184.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="1998.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (191 samples, 15.67%)</title><rect x="19.7" y="1971.0" width="184.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="1982.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (143 samples, 11.73%)</title><rect x="21.6" y="1955.0" width="138.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (143 samples, 11.73%)</title><rect x="21.6" y="1939.0" width="138.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.6" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (143 samples, 11.73%)</title><rect x="21.6" y="1923.0" width="138.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (143 samples, 11.73%)</title><rect x="21.6" y="1907.0" width="138.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.6" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (143 samples, 11.73%)</title><rect x="21.6" y="1891.0" width="138.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.6" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (143 samples, 11.73%)</title><rect x="21.6" y="1875.0" width="138.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.6" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="21.6" y="1859.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="24.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="21.6" y="1843.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="24.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="21.6" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.6" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="21.6" y="1811.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="24.6" y="1822.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="21.6" y="1795.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (110 samples, 9.02%)</title><rect x="22.6" y="1859.0" width="106.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.6" y="1870.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.56%)</title><rect x="22.6" y="1843.0" width="18.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.56%)</title><rect x="22.6" y="1827.0" width="18.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.31%)</title><rect x="25.5" y="1811.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (16 samples, 1.31%)</title><rect x="25.5" y="1795.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.66%)</title><rect x="41.0" y="1843.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.66%)</title><rect x="41.0" y="1827.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="44.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="41.9" y="1811.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.9" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="41.9" y="1795.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="44.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.41%)</title><rect x="43.9" y="1811.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 6.81%)</title><rect x="48.7" y="1843.0" width="80.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.7" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 6.81%)</title><rect x="48.7" y="1827.0" width="80.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.7" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 6.64%)</title><rect x="48.7" y="1811.0" width="78.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.7" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 6.64%)</title><rect x="48.7" y="1795.0" width="78.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.7" y="1806.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 6.48%)</title><rect x="50.7" y="1779.0" width="76.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.7" y="1790.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="52.6" y="1763.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="55.6" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.33%)</title><rect x="53.6" y="1763.0" width="62.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="56.6" y="1774.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="54.5" y="1747.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="57.5" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.33%)</title><rect x="55.5" y="1747.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="58.5" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 3.94%)</title><rect x="59.4" y="1747.0" width="46.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="62.4" y="1758.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="105.8" y="1747.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="108.8" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.82%)</title><rect x="106.8" y="1747.0" width="9.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="109.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.41%)</title><rect x="116.5" y="1763.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="119.5" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.49%)</title><rect x="121.3" y="1763.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="124.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="127.1" y="1811.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.16%)</title><rect x="129.1" y="1859.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.16%)</title><rect x="129.1" y="1843.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.16%)</title><rect x="129.1" y="1827.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 2.46%)</title><rect x="131.0" y="1859.0" width="29.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.0" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 2.46%)</title><rect x="131.0" y="1843.0" width="29.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (30 samples, 2.46%)</title><rect x="131.0" y="1827.0" width="29.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.0" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="157.1" y="1811.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="159.1" y="1811.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (21 samples, 1.72%)</title><rect x="160.0" y="1955.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (16 samples, 1.31%)</title><rect x="164.9" y="1939.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (3 samples, 0.25%)</title><rect x="177.5" y="1923.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.5" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.08%)</title><rect x="180.4" y="1955.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.4" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="180.4" y="1939.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.4" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="180.4" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 1.97%)</title><rect x="181.3" y="1955.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.3" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.31%)</title><rect x="188.1" y="1939.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.1" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.74%)</title><rect x="190.0" y="1923.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.16%)</title><rect x="191.0" y="1907.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.16%)</title><rect x="191.0" y="1891.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.16%)</title><rect x="191.0" y="1875.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="193.0" y="1907.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="194.9" y="1907.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.9" y="1918.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="197.8" y="1907.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="200.8" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="198.8" y="1923.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="201.8" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="199.7" y="1923.0" width="3.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="202.7" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="203.6" y="1939.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="206.6" y="1950.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="204.6" y="1987.0" width="1.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="207.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.33%)</title><rect x="206.5" y="1987.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.33%)</title><rect x="206.5" y="1971.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="206.5" y="1955.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="206.5" y="1939.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.5" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.25%)</title><rect x="207.5" y="1923.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="210.4" y="1987.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.35%)</title><rect x="211.3" y="2003.0" width="51.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.3" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.27%)</title><rect x="211.3" y="1987.0" width="50.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.3" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.38%)</title><rect x="213.3" y="1971.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.3" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 2.30%)</title><rect x="214.2" y="1955.0" width="27.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.2" y="1966.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="215.2" y="1939.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="215.2" y="1923.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="215.2" y="1907.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.05%)</title><rect x="216.2" y="1939.0" width="24.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.2" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (20 samples, 1.64%)</title><rect x="216.2" y="1923.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 1.64%)</title><rect x="216.2" y="1907.0" width="19.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.82%)</title><rect x="218.1" y="1891.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="221.0" y="1875.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="221.0" y="1859.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.08%)</title><rect x="221.0" y="1843.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.08%)</title><rect x="221.0" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="221.0" y="1811.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="221.0" y="1795.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="221.0" y="1779.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.49%)</title><rect x="222.0" y="1875.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.49%)</title><rect x="222.0" y="1859.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.49%)</title><rect x="222.0" y="1843.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.49%)</title><rect x="222.0" y="1827.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.49%)</title><rect x="222.0" y="1811.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.49%)</title><rect x="222.0" y="1795.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.49%)</title><rect x="222.0" y="1779.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.57%)</title><rect x="227.8" y="1891.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="227.8" y="1875.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.49%)</title><rect x="228.8" y="1875.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.25%)</title><rect x="228.8" y="1859.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.25%)</title><rect x="228.8" y="1843.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.8" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="230.7" y="1827.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="233.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.25%)</title><rect x="231.7" y="1859.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.7" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.25%)</title><rect x="231.7" y="1843.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="234.6" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="235.5" y="1923.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="235.5" y="1907.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="235.5" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="235.5" y="1875.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.5" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="235.5" y="1859.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="238.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="236.5" y="1891.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="236.5" y="1875.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="236.5" y="1859.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="236.5" y="1843.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="236.5" y="1827.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.25%)</title><rect x="237.5" y="1923.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.25%)</title><rect x="237.5" y="1907.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="237.5" y="1891.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="237.5" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="238.4" y="1891.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="238.4" y="1875.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="238.4" y="1859.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="240.4" y="1939.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="240.4" y="1923.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="240.4" y="1907.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.4" y="1918.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="240.4" y="1891.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="240.4" y="1875.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.74%)</title><rect x="241.4" y="1971.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.74%)</title><rect x="241.4" y="1955.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.66%)</title><rect x="241.4" y="1939.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.25%)</title><rect x="241.4" y="1923.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1790047016.accept (3 samples, 0.25%)</title><rect x="241.4" y="1907.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.25%)</title><rect x="241.4" y="1891.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="241.4" y="1875.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="241.4" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.4" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="241.4" y="1843.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.4" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="241.4" y="1827.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="242.3" y="1859.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="242.3" y="1843.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="242.3" y="1827.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="242.3" y="1811.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="243.3" y="1875.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="243.3" y="1859.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="243.3" y="1843.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="244.3" y="1923.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="244.3" y="1907.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.08%)</title><rect x="244.3" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.08%)</title><rect x="244.3" y="1875.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="244.3" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="244.3" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="244.3" y="1827.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="244.3" y="1811.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.33%)</title><rect x="245.2" y="1923.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.33%)</title><rect x="245.2" y="1907.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.33%)</title><rect x="245.2" y="1891.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.33%)</title><rect x="245.2" y="1875.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.33%)</title><rect x="245.2" y="1859.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.33%)</title><rect x="245.2" y="1843.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="245.2" y="1827.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="245.2" y="1811.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="246.2" y="1795.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="246.2" y="1779.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="246.2" y="1763.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="246.2" y="1747.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/645653514.test (1 samples, 0.08%)</title><rect x="246.2" y="1731.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.2" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="247.2" y="1811.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.2" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="247.2" y="1795.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="247.2" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="247.2" y="1763.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.2" y="1774.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="247.2" y="1747.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="250.2" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="248.1" y="1827.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="248.1" y="1811.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="248.1" y="1795.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.1" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="248.1" y="1779.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="249.1" y="1939.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="249.1" y="1923.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="249.1" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.08%)</title><rect x="249.1" y="1891.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.25%)</title><rect x="250.1" y="1971.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="250.1" y="1955.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="250.1" y="1939.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="250.1" y="1923.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="250.1" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="250.1" y="1891.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.1" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="250.1" y="1875.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="253.1" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="250.1" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="253.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.16%)</title><rect x="251.0" y="1955.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.16%)</title><rect x="251.0" y="1939.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.16%)</title><rect x="251.0" y="1923.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="251.0" y="1907.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="252.0" y="1907.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="252.0" y="1891.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="252.0" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="252.0" y="1859.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.08%)</title><rect x="252.0" y="1843.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.08%)</title><rect x="252.0" y="1827.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.08%)</title><rect x="252.0" y="1811.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="252.0" y="1795.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="252.0" y="1779.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.66%)</title><rect x="253.0" y="1971.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.66%)</title><rect x="253.0" y="1955.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.0" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.25%)</title><rect x="253.0" y="1939.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1535804526.accept (2 samples, 0.16%)</title><rect x="253.9" y="1923.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.16%)</title><rect x="253.9" y="1907.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="253.9" y="1891.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="253.9" y="1875.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="253.9" y="1859.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="253.9" y="1843.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="253.9" y="1827.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="254.9" y="1891.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="254.9" y="1875.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="254.9" y="1859.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.33%)</title><rect x="255.9" y="1939.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.25%)</title><rect x="256.8" y="1923.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="256.8" y="1907.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="256.8" y="1891.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.25%)</title><rect x="256.8" y="1875.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.25%)</title><rect x="256.8" y="1859.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="256.8" y="1843.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.8" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="256.8" y="1827.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="259.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="257.8" y="1827.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="257.8" y="1811.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="257.8" y="1795.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="257.8" y="1779.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.8" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="257.8" y="1763.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.8" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="257.8" y="1747.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.8" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$180/1402608849.accept (1 samples, 0.08%)</title><rect x="257.8" y="1731.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.8" y="1742.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="257.8" y="1715.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.8" y="1726.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="257.8" y="1699.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.8" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="257.8" y="1683.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.8" y="1694.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="257.8" y="1667.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.8" y="1678.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="257.8" y="1651.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.8" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/918433988.test (1 samples, 0.08%)</title><rect x="258.8" y="1763.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.08%)</title><rect x="258.8" y="1747.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/618571870.test (1 samples, 0.08%)</title><rect x="258.8" y="1731.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.08%)</title><rect x="258.8" y="1715.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.8" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="258.8" y="1699.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.8" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="258.8" y="1683.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.8" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="258.8" y="1667.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.8" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="259.7" y="1939.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="259.7" y="1923.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="259.7" y="1907.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="259.7" y="1891.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.7" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="259.7" y="1875.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="259.7" y="1859.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="259.7" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="260.7" y="1971.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.7" y="1955.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.08%)</title><rect x="260.7" y="1939.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.7" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="260.7" y="1923.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="263.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="260.7" y="1907.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="263.7" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="261.7" y="1987.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="264.7" y="1998.0"></text>
</g>
<g>
<title>java/lang/Thread.run (675 samples, 55.37%)</title><rect x="262.6" y="2035.0" width="653.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.6" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (675 samples, 55.37%)</title><rect x="262.6" y="2019.0" width="653.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.6" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (675 samples, 55.37%)</title><rect x="262.6" y="2003.0" width="653.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.6" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1699461199.run (442 samples, 36.26%)</title><rect x="265.6" y="1987.0" width="427.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (442 samples, 36.26%)</title><rect x="265.6" y="1971.0" width="427.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.6" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (442 samples, 36.26%)</title><rect x="265.6" y="1955.0" width="427.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (438 samples, 35.93%)</title><rect x="265.6" y="1939.0" width="423.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.6" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sch..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (128 samples, 10.50%)</title><rect x="274.3" y="1923.0" width="123.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.3" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (128 samples, 10.50%)</title><rect x="274.3" y="1907.0" width="123.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.3" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (128 samples, 10.50%)</title><rect x="274.3" y="1891.0" width="123.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (128 samples, 10.50%)</title><rect x="274.3" y="1875.0" width="123.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="1886.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (128 samples, 10.50%)</title><rect x="274.3" y="1859.0" width="123.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.3" y="1870.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (128 samples, 10.50%)</title><rect x="274.3" y="1843.0" width="123.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.3" y="1854.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (48 samples, 3.94%)</title><rect x="274.3" y="1827.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.3" y="1838.0">com/..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.74%)</title><rect x="284.9" y="1811.0" width="8.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="287.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="286.8" y="1795.0" width="6.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="289.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.57%)</title><rect x="293.6" y="1811.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.57%)</title><rect x="293.6" y="1795.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.57%)</title><rect x="293.6" y="1779.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.6" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.57%)</title><rect x="293.6" y="1763.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.49%)</title><rect x="293.6" y="1747.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.6" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.49%)</title><rect x="293.6" y="1731.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.08%)</title><rect x="299.4" y="1747.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="299.4" y="1731.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.4" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.08%)</title><rect x="299.4" y="1715.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.4" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.08%)</title><rect x="299.4" y="1699.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="299.4" y="1683.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.4" y="1694.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="299.4" y="1667.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.4" y="1678.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="299.4" y="1651.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.4" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="299.4" y="1635.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="302.4" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="299.4" y="1619.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="302.4" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="299.4" y="1603.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="302.4" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="299.4" y="1587.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="302.4" y="1598.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="299.4" y="1571.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="302.4" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.72%)</title><rect x="300.4" y="1811.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (12 samples, 0.98%)</title><rect x="309.1" y="1795.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.57%)</title><rect x="309.1" y="1779.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (7 samples, 0.57%)</title><rect x="309.1" y="1763.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.33%)</title><rect x="315.9" y="1779.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.33%)</title><rect x="315.9" y="1763.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="315.9" y="1747.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="318.9" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="315.9" y="1731.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="318.9" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="316.9" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="319.9" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="316.9" y="1699.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="319.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.16%)</title><rect x="317.8" y="1747.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.8" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="317.8" y="1731.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="320.8" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="317.8" y="1715.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="320.8" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="317.8" y="1699.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="320.8" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="317.8" y="1683.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="320.8" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="317.8" y="1667.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="320.8" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="317.8" y="1651.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="320.8" y="1662.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="317.8" y="1635.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="320.8" y="1646.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="317.8" y="1619.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="320.8" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="317.8" y="1603.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.8" y="1614.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.08%)</title><rect x="317.8" y="1587.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="320.8" y="1598.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="318.8" y="1667.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="321.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="319.8" y="1779.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="319.8" y="1763.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="322.8" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="319.8" y="1747.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="322.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="319.8" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="322.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="319.8" y="1715.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="322.8" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="319.8" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="322.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (74 samples, 6.07%)</title><rect x="320.7" y="1827.0" width="71.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.7" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="322.7" y="1811.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="323.6" y="1811.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="323.6" y="1795.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="324.6" y="1811.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="326.5" y="1795.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 0.33%)</title><rect x="328.5" y="1811.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.33%)</title><rect x="328.5" y="1795.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="329.4" y="1779.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="330.4" y="1779.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="331.4" y="1779.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.41%)</title><rect x="332.3" y="1811.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.3" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="333.3" y="1795.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.3" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="333.3" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="336.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="333.3" y="1763.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="336.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="333.3" y="1747.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="336.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="334.3" y="1795.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (55 samples, 4.51%)</title><rect x="337.2" y="1811.0" width="53.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.2" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.48%)</title><rect x="337.2" y="1795.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.25%)</title><rect x="337.2" y="1779.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.25%)</title><rect x="340.1" y="1779.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.25%)</title><rect x="340.1" y="1763.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.25%)</title><rect x="340.1" y="1747.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.25%)</title><rect x="340.1" y="1731.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="341.1" y="1715.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="344.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.82%)</title><rect x="343.0" y="1779.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.49%)</title><rect x="343.0" y="1763.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.16%)</title><rect x="346.9" y="1747.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.33%)</title><rect x="348.8" y="1763.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.33%)</title><rect x="348.8" y="1747.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.25%)</title><rect x="349.8" y="1731.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="352.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.25%)</title><rect x="349.8" y="1715.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="352.7" y="1779.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="352.7" y="1763.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="353.6" y="1779.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="354.6" y="1795.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 2.87%)</title><rect x="356.5" y="1795.0" width="33.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.5" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 2.87%)</title><rect x="356.5" y="1779.0" width="33.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.5" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (33 samples, 2.71%)</title><rect x="358.5" y="1763.0" width="31.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.5" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.57%)</title><rect x="358.5" y="1747.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="359.5" y="1731.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="360.4" y="1731.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="360.4" y="1715.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="360.4" y="1699.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="363.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="360.4" y="1683.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="362.4" y="1731.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.08%)</title><rect x="362.4" y="1715.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.08%)</title><rect x="362.4" y="1699.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="363.3" y="1731.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="363.3" y="1715.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="363.3" y="1699.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="364.3" y="1731.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.98%)</title><rect x="365.3" y="1747.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.66%)</title><rect x="369.1" y="1731.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.66%)</title><rect x="369.1" y="1715.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.66%)</title><rect x="369.1" y="1699.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="372.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.66%)</title><rect x="369.1" y="1683.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.74%)</title><rect x="376.9" y="1747.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.74%)</title><rect x="376.9" y="1731.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.74%)</title><rect x="376.9" y="1715.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.74%)</title><rect x="376.9" y="1699.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.74%)</title><rect x="376.9" y="1683.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.9" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="378.8" y="1667.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.8" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (1 samples, 0.08%)</title><rect x="383.7" y="1651.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.7" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (1 samples, 0.08%)</title><rect x="384.6" y="1667.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.25%)</title><rect x="385.6" y="1747.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.6" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="385.6" y="1731.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="385.6" y="1715.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="387.5" y="1699.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.16%)</title><rect x="388.5" y="1747.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="390.4" y="1811.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="391.4" y="1811.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.49%)</title><rect x="392.4" y="1827.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.49%)</title><rect x="392.4" y="1811.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="395.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.49%)</title><rect x="392.4" y="1795.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.49%)</title><rect x="392.4" y="1779.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.49%)</title><rect x="392.4" y="1763.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.4" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 22.97%)</title><rect x="398.2" y="1923.0" width="271.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.2" y="1934.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="398.2" y="1907.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="401.2" y="1918.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="398.2" y="1891.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="401.2" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="398.2" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="401.2" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="398.2" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="401.2" y="1870.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="398.2" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (48 samples, 3.94%)</title><rect x="399.1" y="1907.0" width="46.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.1" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (48 samples, 3.94%)</title><rect x="399.1" y="1891.0" width="46.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.1" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 3.77%)</title><rect x="400.1" y="1875.0" width="44.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.1" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.33%)</title><rect x="401.1" y="1859.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.16%)</title><rect x="403.0" y="1843.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.16%)</title><rect x="403.0" y="1827.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.16%)</title><rect x="403.0" y="1811.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="404.9" y="1859.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="405.9" y="1859.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="408.8" y="1843.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="408.8" y="1827.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (31 samples, 2.54%)</title><rect x="410.8" y="1859.0" width="30.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.8" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.64%)</title><rect x="421.4" y="1843.0" width="19.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.4" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="421.4" y="1827.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="421.4" y="1811.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.48%)</title><rect x="423.3" y="1827.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="435.0" y="1811.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.0" y="1822.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.33%)</title><rect x="436.9" y="1811.0" width="3.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="439.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.33%)</title><rect x="440.8" y="1859.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="444.6" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.66%)</title><rect x="445.6" y="1907.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.57%)</title><rect x="446.6" y="1891.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.6" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="446.6" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="449.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.49%)</title><rect x="447.5" y="1875.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (158 samples, 12.96%)</title><rect x="453.3" y="1907.0" width="153.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.3" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="453.3" y="1891.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="456.3" y="1902.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="453.3" y="1875.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="456.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (155 samples, 12.72%)</title><rect x="455.3" y="1891.0" width="150.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.3" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (65 samples, 5.33%)</title><rect x="460.1" y="1875.0" width="62.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="463.1" y="1886.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="464.0" y="1859.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="464.0" y="1843.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.0" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="464.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="467.0" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="464.0" y="1811.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="467.0" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="464.0" y="1795.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="467.0" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="464.0" y="1779.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="467.0" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="464.0" y="1763.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="467.0" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="464.0" y="1747.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="467.0" y="1758.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="464.0" y="1731.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="467.0" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="464.0" y="1715.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="467.0" y="1726.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="464.0" y="1699.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="467.0" y="1710.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (50 samples, 4.10%)</title><rect x="465.0" y="1859.0" width="48.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.0" y="1870.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (28 samples, 2.30%)</title><rect x="471.7" y="1843.0" width="27.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="474.7" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.90%)</title><rect x="482.4" y="1827.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.90%)</title><rect x="482.4" y="1811.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.90%)</title><rect x="482.4" y="1795.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.90%)</title><rect x="482.4" y="1779.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="485.4" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.41%)</title><rect x="482.4" y="1763.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="485.4" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="482.4" y="1747.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="485.4" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="482.4" y="1731.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="485.4" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="483.4" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.25%)</title><rect x="484.3" y="1747.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="487.3" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="485.3" y="1731.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="488.3" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="485.3" y="1715.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="488.3" y="1726.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="486.3" y="1715.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="489.3" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="487.2" y="1763.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="490.2" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.41%)</title><rect x="488.2" y="1763.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="491.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.33%)</title><rect x="488.2" y="1747.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="491.2" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="489.2" y="1731.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="492.2" y="1742.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="490.1" y="1731.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="493.1" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="491.1" y="1731.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="494.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="491.1" y="1715.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="494.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="492.1" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="495.1" y="1758.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="493.0" y="1827.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.0" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="497.9" y="1827.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="500.9" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.25%)</title><rect x="498.8" y="1843.0" width="2.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="501.8" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 0.98%)</title><rect x="501.7" y="1843.0" width="11.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="504.7" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.82%)</title><rect x="513.4" y="1859.0" width="9.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="516.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.33%)</title><rect x="523.0" y="1875.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="523.0" y="1859.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="523.0" y="1843.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.0" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="523.0" y="1827.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.25%)</title><rect x="524.0" y="1859.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="524.0" y="1843.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.0" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 6.64%)</title><rect x="526.9" y="1875.0" width="78.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="529.9" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 6.48%)</title><rect x="528.9" y="1859.0" width="76.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.9" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.33%)</title><rect x="528.9" y="1843.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.33%)</title><rect x="528.9" y="1827.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.33%)</title><rect x="528.9" y="1811.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="531.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.33%)</title><rect x="528.9" y="1795.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.9" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (75 samples, 6.15%)</title><rect x="532.7" y="1843.0" width="72.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="535.7" y="1854.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 5.50%)</title><rect x="540.5" y="1827.0" width="64.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.5" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (40 samples, 3.28%)</title><rect x="566.6" y="1811.0" width="38.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.6" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.33%)</title><rect x="585.0" y="1795.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="588.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.07%)</title><rect x="588.9" y="1795.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="591.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="600.5" y="1779.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="600.5" y="1763.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="603.5" y="1774.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.33%)</title><rect x="601.5" y="1795.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="604.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="605.3" y="1891.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 4.27%)</title><rect x="606.3" y="1907.0" width="50.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.3" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="606.3" y="1891.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 4.02%)</title><rect x="609.2" y="1891.0" width="47.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="612.2" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1699342677.process (25 samples, 2.05%)</title><rect x="612.1" y="1875.0" width="24.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.1" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (25 samples, 2.05%)</title><rect x="612.1" y="1859.0" width="24.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.1" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 1.97%)</title><rect x="612.1" y="1843.0" width="23.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.1" y="1854.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="623.7" y="1827.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.7" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="623.7" y="1811.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="626.7" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="623.7" y="1795.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.7" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="623.7" y="1779.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="623.7" y="1763.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="624.7" y="1747.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.7" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.74%)</title><rect x="625.7" y="1827.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.7" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.74%)</title><rect x="625.7" y="1811.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="628.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.74%)</title><rect x="625.7" y="1795.0" width="8.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="628.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="634.4" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="635.3" y="1843.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="635.3" y="1827.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="635.3" y="1811.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="635.3" y="1795.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="636.3" y="1875.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.25%)</title><rect x="636.3" y="1859.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="639.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.49%)</title><rect x="639.2" y="1875.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="642.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.49%)</title><rect x="639.2" y="1859.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="642.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1653134206.get$Lambda (6 samples, 0.49%)</title><rect x="639.2" y="1843.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1653134206.&lt;init&gt; (5 samples, 0.41%)</title><rect x="640.2" y="1827.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="645.0" y="1875.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="648.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.33%)</title><rect x="646.0" y="1875.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="649.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.33%)</title><rect x="646.0" y="1859.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="646.0" y="1843.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="649.0" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="647.9" y="1843.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="650.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.57%)</title><rect x="649.9" y="1875.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.9" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="652.8" y="1859.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="652.8" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.8" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="652.8" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="655.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="652.8" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="655.8" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="652.8" y="1795.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.8" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="652.8" y="1779.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.8" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.25%)</title><rect x="653.7" y="1859.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.07%)</title><rect x="656.6" y="1907.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.6" y="1918.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="658.6" y="1891.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="661.6" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="659.5" y="1891.0" width="4.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="662.5" y="1902.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="660.5" y="1875.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="663.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.33%)</title><rect x="664.4" y="1891.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.25%)</title><rect x="665.3" y="1875.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="668.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1797495166.accept (2 samples, 0.16%)</title><rect x="665.3" y="1859.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.16%)</title><rect x="665.3" y="1843.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.3" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.16%)</title><rect x="665.3" y="1827.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.3" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.16%)</title><rect x="665.3" y="1811.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.3" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="666.3" y="1795.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="669.3" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="666.3" y="1779.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="669.3" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1022514746.accept (1 samples, 0.08%)</title><rect x="667.3" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="667.3" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="670.3" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="667.3" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.3" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="667.3" y="1811.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="670.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="667.3" y="1795.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="670.3" y="1806.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="667.3" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="670.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="667.3" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="670.3" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="668.2" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="671.2" y="1902.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="669.2" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.2" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="669.2" y="1907.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1022514746.get$Lambda (1 samples, 0.08%)</title><rect x="669.2" y="1891.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.2" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="669.2" y="1875.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="672.2" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="669.2" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="672.2" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="669.2" y="1843.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="672.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="669.2" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="672.2" y="1838.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="669.2" y="1811.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="672.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="669.2" y="1795.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="672.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.07%)</title><rect x="670.2" y="1923.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.07%)</title><rect x="670.2" y="1907.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.98%)</title><rect x="671.1" y="1891.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1797495166.accept (2 samples, 0.16%)</title><rect x="671.1" y="1875.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.16%)</title><rect x="671.1" y="1859.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.1" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.16%)</title><rect x="671.1" y="1843.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.1" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.16%)</title><rect x="671.1" y="1827.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1022514746.accept (10 samples, 0.82%)</title><rect x="673.1" y="1875.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (10 samples, 0.82%)</title><rect x="673.1" y="1859.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/203926718.complete (10 samples, 0.82%)</title><rect x="673.1" y="1843.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (10 samples, 0.82%)</title><rect x="673.1" y="1827.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.82%)</title><rect x="673.1" y="1811.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="676.1" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.82%)</title><rect x="673.1" y="1795.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.1" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.82%)</title><rect x="673.1" y="1779.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="676.1" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 0.82%)</title><rect x="673.1" y="1763.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.1" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 0.82%)</title><rect x="673.1" y="1747.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.1" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.57%)</title><rect x="682.8" y="1923.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="685.8" y="1934.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="682.8" y="1907.0" width="6.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="685.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="689.5" y="1939.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.5" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="689.5" y="1923.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.5" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="689.5" y="1907.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.5" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="689.5" y="1891.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.5" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="689.5" y="1875.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="689.5" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.5" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="689.5" y="1843.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="692.5" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="689.5" y="1827.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="692.5" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="689.5" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="692.5" y="1822.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="689.5" y="1795.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="692.5" y="1806.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.08%)</title><rect x="689.5" y="1779.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.25%)</title><rect x="690.5" y="1939.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="693.5" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="690.5" y="1923.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="693.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="690.5" y="1907.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="693.5" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="692.4" y="1923.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="695.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="693.4" y="1987.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.74%)</title><rect x="694.4" y="1987.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.74%)</title><rect x="694.4" y="1971.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="697.4" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.74%)</title><rect x="694.4" y="1955.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.74%)</title><rect x="694.4" y="1939.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (220 samples, 18.05%)</title><rect x="703.1" y="1987.0" width="213.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.1" y="1998.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (220 samples, 18.05%)</title><rect x="703.1" y="1971.0" width="213.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="706.1" y="1982.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (195 samples, 16.00%)</title><rect x="706.0" y="1955.0" width="188.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.0" y="1966.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="717.6" y="1939.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="717.6" y="1923.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (18 samples, 1.48%)</title><rect x="718.6" y="1939.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="721.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.66%)</title><rect x="736.0" y="1939.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.0" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="736.0" y="1923.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="739.0" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="737.0" y="1907.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.0" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="737.0" y="1891.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.0" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="737.0" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="740.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.49%)</title><rect x="737.9" y="1923.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.49%)</title><rect x="737.9" y="1907.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.49%)</title><rect x="737.9" y="1891.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (155 samples, 12.72%)</title><rect x="743.7" y="1939.0" width="150.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.7" y="1950.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (155 samples, 12.72%)</title><rect x="743.7" y="1923.0" width="150.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="746.7" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="748.6" y="1907.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="751.6" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 12.14%)</title><rect x="749.6" y="1907.0" width="143.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="752.6" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="754.4" y="1891.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.21%)</title><rect x="757.3" y="1891.0" width="26.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="760.3" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.90%)</title><rect x="765.0" y="1875.0" width="10.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="768.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.33%)</title><rect x="768.9" y="1859.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="770.9" y="1843.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="773.9" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="772.8" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="775.8" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="773.8" y="1859.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="776.8" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="775.7" y="1875.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="778.7" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.57%)</title><rect x="776.7" y="1875.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="779.7" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="783.4" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.4" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.74%)</title><rect x="784.4" y="1891.0" width="8.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="787.4" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.71%)</title><rect x="793.1" y="1891.0" width="32.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="796.1" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.27%)</title><rect x="825.1" y="1891.0" width="50.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="828.1" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.41%)</title><rect x="875.4" y="1891.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="878.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="880.2" y="1891.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="883.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="882.2" y="1891.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="885.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="886.0" y="1891.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="889.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="888.0" y="1891.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.0" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="889.9" y="1891.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="892.9" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="890.9" y="1891.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="893.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="892.8" y="1907.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="895.8" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="893.8" y="1939.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 1.80%)</title><rect x="894.8" y="1955.0" width="21.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="897.8" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 1.80%)</title><rect x="894.8" y="1939.0" width="21.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.8" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 1.80%)</title><rect x="894.8" y="1923.0" width="21.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.8" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 1.80%)</title><rect x="894.8" y="1907.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="897.8" y="1918.0">j..</text>
</g>
<g>
<title>start_thread (283 samples, 23.22%)</title><rect x="916.1" y="2035.0" width="273.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="919.1" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (283 samples, 23.22%)</title><rect x="916.1" y="2019.0" width="273.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="919.1" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 1.31%)</title><rect x="916.1" y="2003.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.1" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.49%)</title><rect x="916.1" y="1987.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.1" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.49%)</title><rect x="916.1" y="1971.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="919.1" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="916.1" y="1955.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="919.1" y="1966.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.41%)</title><rect x="917.0" y="1955.0" width="4.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="920.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 0.82%)</title><rect x="921.9" y="1987.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.16%)</title><rect x="921.9" y="1971.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.9" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="921.9" y="1955.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.9" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.25%)</title><rect x="923.8" y="1971.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.8" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="923.8" y="1955.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.8" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="923.8" y="1939.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="926.8" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="923.8" y="1923.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.8" y="1934.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="923.8" y="1907.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.8" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="924.8" y="1955.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.8" y="1966.0"></text>
</g>
<g>
<title>Management::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="924.8" y="1939.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.8" y="1950.0"></text>
</g>
<g>
<title>MemoryService::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="924.8" y="1923.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.8" y="1934.0"></text>
</g>
<g>
<title>MemoryPool::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="924.8" y="1907.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.8" y="1918.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="924.8" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="927.8" y="1902.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="925.7" y="1939.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.7" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="926.7" y="1971.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.7" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="926.7" y="1955.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.7" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="926.7" y="1939.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.7" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.41%)</title><rect x="926.7" y="1923.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="929.7" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.41%)</title><rect x="926.7" y="1907.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.7" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.41%)</title><rect x="926.7" y="1891.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.7" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="928.6" y="1875.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.6" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="930.6" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.6" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (265 samples, 21.74%)</title><rect x="931.5" y="2003.0" width="256.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.5" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (265 samples, 21.74%)</title><rect x="931.5" y="1987.0" width="256.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.5" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (264 samples, 21.66%)</title><rect x="931.5" y="1971.0" width="255.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.5" y="1982.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (264 samples, 21.66%)</title><rect x="931.5" y="1955.0" width="255.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.5" y="1966.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (263 samples, 21.58%)</title><rect x="931.5" y="1939.0" width="254.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.5" y="1950.0">C2Compiler::compile_method(ciEnv*,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (263 samples, 21.58%)</title><rect x="931.5" y="1923.0" width="254.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.5" y="1934.0">Compile::Compile(ciEnv*, C2Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (62 samples, 5.09%)</title><rect x="931.5" y="1907.0" width="60.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.5" y="1918.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.25%)</title><rect x="931.5" y="1891.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="931.5" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.5" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.16%)</title><rect x="932.5" y="1875.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.5" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="932.5" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.5" y="1870.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="933.5" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.5" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.25%)</title><rect x="934.4" y="1891.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="937.4" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.16%)</title><rect x="934.4" y="1875.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="934.4" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.4" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="934.4" y="1843.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.4" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="935.4" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.4" y="1870.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.08%)</title><rect x="935.4" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.4" y="1854.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_signed_int(int) (1 samples, 0.08%)</title><rect x="935.4" y="1827.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.4" y="1838.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="936.4" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="936.4" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="939.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.66%)</title><rect x="937.4" y="1891.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.4" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="937.4" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="940.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.57%)</title><rect x="938.3" y="1875.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.16%)</title><rect x="939.3" y="1859.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.33%)</title><rect x="941.2" y="1859.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.25%)</title><rect x="941.2" y="1843.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.2" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="943.2" y="1827.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="946.2" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="943.2" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.2" y="1822.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="943.2" y="1795.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="946.2" y="1806.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="943.2" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.2" y="1790.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="943.2" y="1763.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="946.2" y="1774.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.08%)</title><rect x="943.2" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="946.2" y="1758.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="944.1" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.1" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="944.1" y="1827.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.1" y="1838.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.08%)</title><rect x="944.1" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.1" y="1822.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="945.1" y="1891.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.1" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.08%)</title><rect x="945.1" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.1" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="945.1" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="946.1" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.1" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="946.1" y="1875.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="949.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.25%)</title><rect x="947.0" y="1891.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="950.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="947.0" y="1875.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="950.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="947.0" y="1859.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.0" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="947.0" y="1843.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="948.0" y="1843.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.0" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="948.0" y="1827.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="951.0" y="1838.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.08%)</title><rect x="948.0" y="1811.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.0" y="1822.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.08%)</title><rect x="948.0" y="1795.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.0" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="949.0" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="949.0" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 3.53%)</title><rect x="949.9" y="1891.0" width="41.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.9" y="1902.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="949.9" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.9" y="1886.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.08%)</title><rect x="950.9" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.9" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="951.9" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.49%)</title><rect x="952.8" y="1875.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="952.8" y="1859.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="955.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.33%)</title><rect x="954.8" y="1859.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="957.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="956.7" y="1843.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="958.6" y="1875.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="959.6" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.49%)</title><rect x="960.6" y="1875.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="963.6" y="1886.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.08%)</title><rect x="965.4" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="968.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.82%)</title><rect x="966.4" y="1875.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="967.4" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.4" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="968.3" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.3" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="968.3" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.57%)</title><rect x="969.3" y="1859.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="973.2" y="1843.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="976.1" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="976.1" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.16%)</title><rect x="977.0" y="1875.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.0" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="978.0" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="979.0" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.08%)</title><rect x="979.0" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="979.9" y="1875.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="980.9" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.9" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="981.9" y="1859.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="984.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="982.8" y="1875.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.8" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="982.8" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="983.8" y="1875.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="984.8" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="985.8" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.8" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.41%)</title><rect x="986.7" y="1875.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.7" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.25%)</title><rect x="987.7" y="1859.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="990.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="988.7" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="991.7" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.08%)</title><rect x="989.6" y="1843.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.6" y="1854.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.08%)</title><rect x="989.6" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.6" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="990.6" y="1859.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="993.6" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (191 samples, 15.67%)</title><rect x="991.6" y="1907.0" width="184.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.6" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="991.6" y="1891.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="991.6" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="991.6" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.6" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="991.6" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="991.6" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.6" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="991.6" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.6" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.6" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.33%)</title><rect x="992.5" y="1891.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.33%)</title><rect x="992.5" y="1875.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.33%)</title><rect x="992.5" y="1859.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="992.5" y="1843.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1827.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1795.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1779.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1763.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1747.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1731.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1715.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1699.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1683.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1667.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1651.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1635.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1619.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1603.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1587.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1571.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1555.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="992.5" y="1539.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.5" y="1550.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="992.5" y="1523.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.5" y="1827.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.5" y="1811.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.5" y="1795.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.5" y="1779.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.5" y="1763.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.5" y="1774.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.08%)</title><rect x="993.5" y="1747.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.5" y="1758.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="994.5" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.5" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="994.5" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="995.4" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (169 samples, 13.86%)</title><rect x="996.4" y="1891.0" width="163.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.4" y="1902.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="996.4" y="1875.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="996.4" y="1859.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.4" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="996.4" y="1843.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.4" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="996.4" y="1827.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="999.4" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="997.4" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.4" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="997.4" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.4" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="997.4" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.4" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="997.4" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.4" y="1790.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="997.4" y="1763.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1000.4" y="1774.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="998.3" y="1875.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.3" y="1886.0"></text>
</g>
<g>
<title>PCTableNode::pinned() const (1 samples, 0.08%)</title><rect x="999.3" y="1875.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1002.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.57%)</title><rect x="1000.3" y="1875.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.3" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.25%)</title><rect x="1003.2" y="1859.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.2" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1006.1" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1007.0" y="1875.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1008.0" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (147 samples, 12.06%)</title><rect x="1009.0" y="1875.0" width="142.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.0" y="1886.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1010.9" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (144 samples, 11.81%)</title><rect x="1011.9" y="1859.0" width="139.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.9" y="1870.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.82%)</title><rect x="1014.8" y="1843.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (130 samples, 10.66%)</title><rect x="1024.5" y="1843.0" width="125.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.5" y="1854.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1118.4" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1118.4" y="1811.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (31 samples, 2.54%)</title><rect x="1119.3" y="1827.0" width="30.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.3" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1149.3" y="1827.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1149.3" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.3" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1150.3" y="1843.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1153.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.33%)</title><rect x="1151.3" y="1875.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1155.2" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="1886.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.08%)</title><rect x="1155.2" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.25%)</title><rect x="1156.1" y="1875.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.25%)</title><rect x="1156.1" y="1859.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.1" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.1" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.1" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.1" y="1827.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.1" y="1838.0"></text>
</g>
<g>
<title>DecodeNNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1157.1" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.1" y="1843.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.1" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.1" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="1838.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.08%)</title><rect x="1159.0" y="1875.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 1.31%)</title><rect x="1160.0" y="1891.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.0" y="1902.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.08%)</title><rect x="1160.0" y="1875.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 1.15%)</title><rect x="1161.0" y="1875.0" width="13.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1161.0" y="1859.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="1870.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1161.0" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.0" y="1854.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1161.9" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1161.9" y="1827.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.9" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1161.9" y="1811.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.9" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1162.9" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1162.9" y="1827.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1162.9" y="1811.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.9" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.9" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1163.9" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1163.9" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1838.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1163.9" y="1811.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.9" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.8" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1165.8" y="1859.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.25%)</title><rect x="1166.8" y="1859.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.7" y="1843.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1168.7" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1169.7" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="1870.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.08%)</title><rect x="1169.7" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.6" y="1859.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1170.6" y="1843.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.6" y="1854.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.6" y="1859.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1172.6" y="1859.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1172.6" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="1811.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="1795.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="1779.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="1790.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.6" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="1774.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="1747.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1758.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.5" y="1843.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.5" y="1854.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1174.5" y="1875.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.5" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1175.5" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.74%)</title><rect x="1176.4" y="1907.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.74%)</title><rect x="1176.4" y="1891.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.74%)</title><rect x="1176.4" y="1875.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.74%)</title><rect x="1176.4" y="1859.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.74%)</title><rect x="1176.4" y="1843.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.74%)</title><rect x="1176.4" y="1827.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.66%)</title><rect x="1176.4" y="1811.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.66%)</title><rect x="1176.4" y="1795.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.66%)</title><rect x="1176.4" y="1779.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.66%)</title><rect x="1176.4" y="1763.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.57%)</title><rect x="1177.4" y="1747.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1177.4" y="1731.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="1715.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="1726.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="1699.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.4" y="1683.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.4" y="1667.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.4" y="1651.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.4" y="1635.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.4" y="1619.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.4" y="1603.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.4" y="1587.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="1598.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="1571.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1582.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.4" y="1555.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.4" y="1539.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="1550.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.4" y="1523.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1534.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1177.4" y="1507.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="1518.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.08%)</title><rect x="1177.4" y="1491.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1178.4" y="1715.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1178.4" y="1699.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1178.4" y="1683.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1178.4" y="1667.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1178.4" y="1651.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="1662.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1178.4" y="1635.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="1646.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1178.4" y="1619.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="1630.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="1603.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1179.4" y="1651.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1179.4" y="1635.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="1646.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1179.4" y="1619.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="1630.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1179.4" y="1603.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1614.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.08%)</title><rect x="1179.4" y="1587.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="1598.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="1571.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="1582.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.08%)</title><rect x="1179.4" y="1555.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="1566.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long*, unsigned long) (1 samples, 0.08%)</title><rect x="1179.4" y="1539.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1180.3" y="1619.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1180.3" y="1603.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="1587.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="1571.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="1555.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="1539.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1523.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1507.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1491.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1475.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="1459.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="1443.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1427.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.3" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1395.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1363.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1347.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="1331.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="1315.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1299.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1283.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1267.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1251.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1180.3" y="1235.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1246.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.08%)</title><rect x="1180.3" y="1219.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1230.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.08%)</title><rect x="1180.3" y="1203.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1214.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1180.3" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="1198.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1523.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="1491.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="1475.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="1443.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="1427.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1411.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="1395.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="1379.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="1363.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="1347.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="1331.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1315.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="1299.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="1283.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="1267.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="1235.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="1187.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="1198.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.08%)</title><rect x="1181.3" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1182.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.08%)</title><rect x="1181.3" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1166.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1150.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1181.3" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1134.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.08%)</title><rect x="1181.3" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1118.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1182.3" y="1587.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="1598.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1182.3" y="1571.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="1582.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1182.3" y="1555.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="1566.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.08%)</title><rect x="1182.3" y="1539.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="1550.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.08%)</title><rect x="1182.3" y="1523.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1185.3" y="1534.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="1635.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="1619.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="1630.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.2" y="1603.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1614.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1183.2" y="1587.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="1598.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1183.2" y="1571.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="1582.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1183.2" y="1555.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1566.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1183.2" y="1539.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1186.2" y="1550.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1811.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1795.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="1779.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1763.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1747.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1731.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="1715.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1699.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="1683.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1667.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1651.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1635.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="1619.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1603.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="1587.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1571.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1555.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1539.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="1523.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1507.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="1491.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="1475.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="1459.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="1443.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="1427.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="1438.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="1411.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="1422.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.08%)</title><rect x="1184.2" y="1395.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1406.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1390.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1184.2" y="1363.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1374.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1185.2" y="1907.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.2" y="1891.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1939.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.1" y="1923.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1907.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1891.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1186.1" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.1" y="1886.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.08%)</title><rect x="1186.1" y="1859.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1870.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.08%)</title><rect x="1186.1" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1854.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.08%)</title><rect x="1186.1" y="1827.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="1838.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.1" y="1971.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.1" y="1955.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1939.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1923.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1190.1" y="1934.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.08%)</title><rect x="1187.1" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.08%)</title><rect x="1187.1" y="1891.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.08%)</title><rect x="1187.1" y="1875.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="1886.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.08%)</title><rect x="1187.1" y="1859.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="1870.0"></text>
</g>
<g>
<title>ObjectValue::read_object(DebugInfoReadStream*) (1 samples, 0.08%)</title><rect x="1187.1" y="1843.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="1854.0"></text>
</g>
<g>
<title>ScopeValue::read_from(DebugInfoReadStream*) (1 samples, 0.08%)</title><rect x="1187.1" y="1827.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1187.1" y="1811.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.1" y="1822.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="2003.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1987.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1188.1" y="1971.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.1" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1188.1" y="1955.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1188.1" y="1939.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.1" y="1923.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.1" y="1907.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1918.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="1188.1" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1902.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.08%)</title><rect x="1188.1" y="1875.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1886.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1971.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1955.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1939.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1923.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1907.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::redirty_logged_cards() (1 samples, 0.08%)</title><rect x="1189.0" y="1891.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="1902.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.08%)</title><rect x="1189.0" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1189.0" y="1843.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="1854.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="1189.0" y="1827.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.0" y="1838.0"></text>
</g>
</g>
</svg>
