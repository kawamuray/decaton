<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (1,023 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="10.0" y="931.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.10%)</title><rect x="10.0" y="915.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (261 samples, 25.51%)</title><rect x="11.2" y="931.0" width="301.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="942.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (260 samples, 25.42%)</title><rect x="11.2" y="915.0" width="299.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="926.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.29%)</title><rect x="11.2" y="899.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.29%)</title><rect x="11.2" y="883.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1443360828.accept (3 samples, 0.29%)</title><rect x="11.2" y="867.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.29%)</title><rect x="11.2" y="851.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.20%)</title><rect x="12.3" y="835.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.20%)</title><rect x="12.3" y="819.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.20%)</title><rect x="14.6" y="899.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.20%)</title><rect x="14.6" y="883.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="14.6" y="867.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="14.6" y="851.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="14.6" y="835.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="14.6" y="819.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="14.6" y="803.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.20%)</title><rect x="14.6" y="787.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="15.8" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="15.8" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="15.8" y="739.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="15.8" y="723.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 19.26%)</title><rect x="16.9" y="899.0" width="227.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="910.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1712047235.accept (185 samples, 18.08%)</title><rect x="18.1" y="883.0" width="213.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="894.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (184 samples, 17.99%)</title><rect x="19.2" y="867.0" width="212.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.2" y="878.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.10%)</title><rect x="19.2" y="851.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (151 samples, 14.76%)</title><rect x="20.4" y="851.0" width="174.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="862.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (151 samples, 14.76%)</title><rect x="20.4" y="835.0" width="174.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.4" y="846.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (151 samples, 14.76%)</title><rect x="20.4" y="819.0" width="174.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.4" y="830.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (151 samples, 14.76%)</title><rect x="20.4" y="803.0" width="174.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="814.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 14.76%)</title><rect x="20.4" y="787.0" width="174.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="798.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (124 samples, 12.12%)</title><rect x="50.4" y="771.0" width="143.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.4" y="782.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (92 samples, 8.99%)</title><rect x="81.5" y="755.0" width="106.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.5" y="766.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (10 samples, 0.98%)</title><rect x="95.4" y="739.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (10 samples, 0.98%)</title><rect x="95.4" y="723.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.98%)</title><rect x="95.4" y="707.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (70 samples, 6.84%)</title><rect x="106.9" y="739.0" width="80.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.9" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (70 samples, 6.84%)</title><rect x="106.9" y="723.0" width="80.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.9" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 6.84%)</title><rect x="106.9" y="707.0" width="80.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="109.9" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 6.84%)</title><rect x="106.9" y="691.0" width="80.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.9" y="702.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 6.65%)</title><rect x="109.2" y="675.0" width="78.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.2" y="686.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="112.7" y="659.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="115.7" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (57 samples, 5.57%)</title><rect x="113.8" y="659.0" width="65.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="116.8" y="670.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.29%)</title><rect x="115.0" y="643.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.0" y="654.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="118.4" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="121.4" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.91%)</title><rect x="119.6" y="643.0" width="46.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="122.6" y="654.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.17%)</title><rect x="165.7" y="643.0" width="13.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="168.7" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.29%)</title><rect x="179.6" y="659.0" width="3.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="182.6" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.39%)</title><rect x="183.0" y="659.0" width="4.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="186.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.39%)</title><rect x="187.6" y="755.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.39%)</title><rect x="187.6" y="739.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.39%)</title><rect x="187.6" y="723.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="192.2" y="755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="192.2" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="192.2" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="192.2" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.2" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="193.4" y="771.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="196.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.20%)</title><rect x="194.6" y="851.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.20%)</title><rect x="194.6" y="835.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (6 samples, 0.59%)</title><rect x="196.9" y="851.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.59%)</title><rect x="196.9" y="835.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.59%)</title><rect x="196.9" y="819.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 2.35%)</title><rect x="203.8" y="851.0" width="27.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.8" y="862.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="203.8" y="835.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (23 samples, 2.25%)</title><rect x="204.9" y="835.0" width="26.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.9" y="846.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.08%)</title><rect x="215.3" y="819.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.3" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.78%)</title><rect x="215.3" y="803.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.3" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.78%)</title><rect x="215.3" y="787.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.3" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.78%)</title><rect x="215.3" y="771.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="219.9" y="755.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="222.9" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="221.1" y="739.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="224.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="221.1" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="224.1" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="222.2" y="755.0" width="2.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="225.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.29%)</title><rect x="224.5" y="803.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.5" y="814.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="228.0" y="819.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="231.0" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="229.2" y="819.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="232.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="231.5" y="883.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="231.5" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="231.5" y="851.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.10%)</title><rect x="231.5" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.78%)</title><rect x="232.6" y="883.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.78%)</title><rect x="232.6" y="867.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.78%)</title><rect x="232.6" y="851.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.78%)</title><rect x="232.6" y="835.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (8 samples, 0.78%)</title><rect x="232.6" y="819.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (8 samples, 0.78%)</title><rect x="232.6" y="803.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.20%)</title><rect x="241.8" y="883.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.20%)</title><rect x="241.8" y="867.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.10%)</title><rect x="243.0" y="851.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="243.0" y="835.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="243.0" y="819.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.10%)</title><rect x="243.0" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="243.0" y="787.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.67%)</title><rect x="244.2" y="899.0" width="66.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.2" y="910.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.67%)</title><rect x="244.2" y="883.0" width="66.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.2" y="894.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.52%)</title><rect x="246.5" y="867.0" width="41.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.5" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.52%)</title><rect x="246.5" y="851.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.5" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.42%)</title><rect x="247.6" y="835.0" width="40.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.6" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 3.13%)</title><rect x="247.6" y="819.0" width="36.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.6" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 3.13%)</title><rect x="247.6" y="803.0" width="36.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.6" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (21 samples, 2.05%)</title><rect x="248.8" y="787.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.8" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.88%)</title><rect x="262.6" y="771.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.88%)</title><rect x="262.6" y="755.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.88%)</title><rect x="262.6" y="739.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.88%)</title><rect x="262.6" y="723.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.88%)</title><rect x="262.6" y="707.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.88%)</title><rect x="262.6" y="691.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.88%)</title><rect x="262.6" y="675.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.98%)</title><rect x="273.0" y="787.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.98%)</title><rect x="273.0" y="771.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="273.0" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="276.0" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="273.0" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="276.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="273.0" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="276.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="273.0" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="276.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.49%)</title><rect x="274.1" y="755.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.1" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.49%)</title><rect x="274.1" y="739.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.39%)</title><rect x="279.9" y="755.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.9" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.39%)</title><rect x="279.9" y="739.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.29%)</title><rect x="284.5" y="819.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.29%)</title><rect x="284.5" y="803.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="284.5" y="787.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="284.5" y="771.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="285.7" y="787.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="285.7" y="771.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="285.7" y="755.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.7" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="286.8" y="739.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="289.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.98%)</title><rect x="288.0" y="867.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.98%)</title><rect x="288.0" y="851.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.78%)</title><rect x="288.0" y="835.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="288.0" y="819.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/832457920.accept (1 samples, 0.10%)</title><rect x="288.0" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="288.0" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="288.0" y="771.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="288.0" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="288.0" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.0" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="288.0" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="288.0" y="707.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="289.1" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="289.1" y="803.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="290.3" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="290.3" y="803.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="290.3" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="290.3" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="290.3" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.3" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="290.3" y="739.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="290.3" y="723.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="290.3" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="290.3" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="291.4" y="819.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="291.4" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.4" y="814.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="291.4" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="291.4" y="771.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="291.4" y="755.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="291.4" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="291.4" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.39%)</title><rect x="292.6" y="819.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.29%)</title><rect x="293.8" y="803.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.29%)</title><rect x="293.8" y="787.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.29%)</title><rect x="293.8" y="771.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.29%)</title><rect x="293.8" y="755.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.29%)</title><rect x="293.8" y="739.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.29%)</title><rect x="293.8" y="723.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (3 samples, 0.29%)</title><rect x="293.8" y="707.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (3 samples, 0.29%)</title><rect x="293.8" y="691.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (3 samples, 0.29%)</title><rect x="293.8" y="675.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (3 samples, 0.29%)</title><rect x="293.8" y="659.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.8" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="293.8" y="643.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="296.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/1790242036.get (2 samples, 0.20%)</title><rect x="294.9" y="643.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.20%)</title><rect x="297.2" y="835.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.10%)</title><rect x="297.2" y="819.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="297.2" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="298.4" y="819.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="298.4" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="298.4" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="298.4" y="771.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.39%)</title><rect x="299.5" y="867.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.39%)</title><rect x="299.5" y="851.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.39%)</title><rect x="299.5" y="835.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.39%)</title><rect x="299.5" y="819.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.10%)</title><rect x="299.5" y="803.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="299.5" y="787.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="299.5" y="771.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.20%)</title><rect x="300.7" y="803.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.20%)</title><rect x="300.7" y="787.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.20%)</title><rect x="300.7" y="771.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.20%)</title><rect x="300.7" y="755.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.20%)</title><rect x="300.7" y="739.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.7" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.20%)</title><rect x="300.7" y="723.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.7" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="300.7" y="707.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="303.7" y="718.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="301.8" y="707.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="304.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.10%)</title><rect x="303.0" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="303.0" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="306.0" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="303.0" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="306.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.39%)</title><rect x="304.1" y="867.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.29%)</title><rect x="304.1" y="851.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="305.3" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.10%)</title><rect x="305.3" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="305.3" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="306.4" y="835.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="306.4" y="819.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.4" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="306.4" y="803.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="306.4" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="306.4" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="306.4" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="306.4" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.setMaxBytes (1 samples, 0.10%)</title><rect x="307.6" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.20%)</title><rect x="308.7" y="867.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="308.7" y="851.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="309.9" y="835.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="309.9" y="819.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.9" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="309.9" y="803.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="312.9" y="814.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.10%)</title><rect x="311.1" y="915.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="314.1" y="926.0"></text>
</g>
<g>
<title>java_start(Thread*) (1 samples, 0.10%)</title><rect x="311.1" y="899.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="314.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.10%)</title><rect x="311.1" y="883.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.10%)</title><rect x="311.1" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="314.1" y="878.0"></text>
</g>
<g>
<title>thread_entry(JavaThread*, Thread*) (1 samples, 0.10%)</title><rect x="311.1" y="851.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="314.1" y="862.0"></text>
</g>
<g>
<title>JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.10%)</title><rect x="311.1" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.1" y="846.0"></text>
</g>
<g>
<title>JavaCalls::call_virtual(JavaValue*, KlassHandle, Symbol*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="311.1" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="314.1" y="830.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*) (1 samples, 0.10%)</title><rect x="311.1" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="314.1" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="311.1" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (684 samples, 66.86%)</title><rect x="312.2" y="931.0" width="789.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.2" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (684 samples, 66.86%)</title><rect x="312.2" y="915.0" width="789.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.2" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (684 samples, 66.86%)</title><rect x="312.2" y="899.0" width="789.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.2" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1445714071.run (454 samples, 44.38%)</title><rect x="312.2" y="883.0" width="523.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.2" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1445714..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (454 samples, 44.38%)</title><rect x="312.2" y="867.0" width="523.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.2" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (454 samples, 44.38%)</title><rect x="312.2" y="851.0" width="523.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.2" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="314.5" y="835.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="317.5" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.59%)</title><rect x="315.7" y="835.0" width="6.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="318.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="318.0" y="819.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="321.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (441 samples, 43.11%)</title><rect x="322.6" y="835.0" width="508.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.6" y="846.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (3 samples, 0.29%)</title><rect x="328.4" y="819.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (128 samples, 12.51%)</title><rect x="331.8" y="819.0" width="147.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.8" y="830.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (128 samples, 12.51%)</title><rect x="331.8" y="803.0" width="147.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.8" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (128 samples, 12.51%)</title><rect x="331.8" y="787.0" width="147.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.8" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="331.8" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="334.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="331.8" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="334.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="331.8" y="739.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="334.8" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.10%)</title><rect x="331.8" y="723.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="334.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (127 samples, 12.41%)</title><rect x="333.0" y="771.0" width="146.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.0" y="782.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (127 samples, 12.41%)</title><rect x="333.0" y="755.0" width="146.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.0" y="766.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (127 samples, 12.41%)</title><rect x="333.0" y="739.0" width="146.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.0" y="750.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (32 samples, 3.13%)</title><rect x="333.0" y="723.0" width="36.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.0" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (15 samples, 1.47%)</title><rect x="334.1" y="707.0" width="17.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (15 samples, 1.47%)</title><rect x="334.1" y="691.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (7 samples, 0.68%)</title><rect x="334.1" y="675.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.78%)</title><rect x="342.2" y="675.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.10%)</title><rect x="343.4" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.49%)</title><rect x="344.5" y="659.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.39%)</title><rect x="345.7" y="643.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.39%)</title><rect x="345.7" y="627.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.10%)</title><rect x="350.3" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (16 samples, 1.56%)</title><rect x="351.4" y="707.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.78%)</title><rect x="360.7" y="691.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.39%)</title><rect x="360.7" y="675.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="360.7" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="363.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="360.7" y="643.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="363.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.29%)</title><rect x="361.8" y="659.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.29%)</title><rect x="365.3" y="675.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.20%)</title><rect x="366.4" y="659.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.20%)</title><rect x="366.4" y="643.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="366.4" y="627.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="369.4" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="366.4" y="611.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="369.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="366.4" y="595.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="369.4" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="367.6" y="579.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="370.6" y="590.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="367.6" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="370.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.10%)</title><rect x="368.7" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="371.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="368.7" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="371.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="368.7" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="371.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="368.7" y="627.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="371.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="368.7" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="371.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="368.7" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="371.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="368.7" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="371.7" y="590.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="368.7" y="563.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="371.7" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="368.7" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="371.7" y="558.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="368.7" y="531.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="371.7" y="542.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.10%)</title><rect x="368.7" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="371.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (87 samples, 8.50%)</title><rect x="369.9" y="723.0" width="100.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.9" y="734.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.59%)</title><rect x="369.9" y="707.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.59%)</title><rect x="369.9" y="691.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.20%)</title><rect x="369.9" y="675.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.10%)</title><rect x="371.0" y="659.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (4 samples, 0.39%)</title><rect x="372.2" y="675.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="375.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.20%)</title><rect x="374.5" y="659.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.39%)</title><rect x="376.8" y="707.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.39%)</title><rect x="376.8" y="691.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.59%)</title><rect x="381.4" y="707.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.59%)</title><rect x="381.4" y="691.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.59%)</title><rect x="381.4" y="675.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.29%)</title><rect x="384.9" y="659.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="387.2" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.49%)</title><rect x="388.3" y="707.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.49%)</title><rect x="388.3" y="691.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.49%)</title><rect x="388.3" y="675.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="391.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.29%)</title><rect x="390.6" y="659.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.29%)</title><rect x="390.6" y="643.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (66 samples, 6.45%)</title><rect x="394.1" y="707.0" width="76.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.1" y="718.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.76%)</title><rect x="394.1" y="691.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.39%)</title><rect x="396.4" y="675.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.39%)</title><rect x="396.4" y="659.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.39%)</title><rect x="396.4" y="643.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.68%)</title><rect x="401.0" y="675.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (7 samples, 0.68%)</title><rect x="401.0" y="659.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (7 samples, 0.68%)</title><rect x="401.0" y="643.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.39%)</title><rect x="404.5" y="627.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.39%)</title><rect x="404.5" y="611.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="409.1" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="409.1" y="659.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.39%)</title><rect x="410.3" y="675.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 4.69%)</title><rect x="414.9" y="691.0" width="55.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.9" y="702.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 4.69%)</title><rect x="414.9" y="675.0" width="55.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.9" y="686.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 4.69%)</title><rect x="414.9" y="659.0" width="55.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.9" y="670.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.96%)</title><rect x="416.0" y="643.0" width="23.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.0" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.59%)</title><rect x="420.6" y="627.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.78%)</title><rect x="427.6" y="627.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="430.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.78%)</title><rect x="427.6" y="611.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.78%)</title><rect x="427.6" y="595.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.59%)</title><rect x="429.9" y="579.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.59%)</title><rect x="429.9" y="563.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.49%)</title><rect x="431.0" y="547.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.29%)</title><rect x="433.3" y="531.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="436.8" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="436.8" y="611.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="437.9" y="627.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.68%)</title><rect x="439.1" y="643.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.59%)</title><rect x="440.2" y="627.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.59%)</title><rect x="440.2" y="611.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.59%)</title><rect x="440.2" y="595.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.59%)</title><rect x="440.2" y="579.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.98%)</title><rect x="447.2" y="643.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.98%)</title><rect x="447.2" y="627.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.98%)</title><rect x="447.2" y="611.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.98%)</title><rect x="447.2" y="595.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.2" y="606.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.98%)</title><rect x="447.2" y="579.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.2" y="590.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.68%)</title><rect x="449.5" y="563.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="452.5" y="574.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (5 samples, 0.49%)</title><rect x="451.8" y="547.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.8" y="558.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.10%)</title><rect x="457.5" y="563.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.29%)</title><rect x="458.7" y="643.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.29%)</title><rect x="458.7" y="627.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.29%)</title><rect x="458.7" y="611.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.68%)</title><rect x="462.2" y="643.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.20%)</title><rect x="467.9" y="627.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="467.9" y="611.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.9" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.20%)</title><rect x="467.9" y="595.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="470.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="467.9" y="579.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="470.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="467.9" y="563.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="470.9" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="467.9" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="470.9" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="469.1" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="472.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.78%)</title><rect x="470.2" y="723.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="473.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.78%)</title><rect x="470.2" y="707.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="473.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.78%)</title><rect x="470.2" y="691.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.78%)</title><rect x="470.2" y="675.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="473.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.10%)</title><rect x="471.4" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.59%)</title><rect x="472.5" y="659.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 27.37%)</title><rect x="479.5" y="819.0" width="322.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.5" y="830.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="481.8" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.8" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="481.8" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.10%)</title><rect x="482.9" y="803.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (51 samples, 4.99%)</title><rect x="484.1" y="803.0" width="58.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.1" y="814.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 4.99%)</title><rect x="484.1" y="787.0" width="58.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.1" y="798.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 4.89%)</title><rect x="485.2" y="771.0" width="57.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.2" y="782.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.98%)</title><rect x="486.4" y="755.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="489.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.98%)</title><rect x="486.4" y="739.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.98%)</title><rect x="486.4" y="723.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.98%)</title><rect x="486.4" y="707.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.29%)</title><rect x="494.5" y="691.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="496.8" y="675.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.8" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (39 samples, 3.81%)</title><rect x="497.9" y="755.0" width="45.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.9" y="766.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.17%)</title><rect x="529.1" y="739.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="532.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="529.1" y="723.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 1.08%)</title><rect x="530.2" y="723.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="533.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.49%)</title><rect x="536.0" y="707.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.0" y="718.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="541.7" y="707.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="544.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="542.9" y="803.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="542.9" y="787.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="542.9" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 13.78%)</title><rect x="544.1" y="803.0" width="162.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.1" y="814.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="545.2" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="548.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="545.2" y="771.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="548.2" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="545.2" y="755.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="548.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (139 samples, 13.59%)</title><rect x="546.4" y="787.0" width="160.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="549.4" y="798.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (34 samples, 3.32%)</title><rect x="564.8" y="771.0" width="39.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="567.8" y="782.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 3.23%)</title><rect x="564.8" y="755.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="567.8" y="766.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (18 samples, 1.76%)</title><rect x="574.0" y="739.0" width="20.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="577.0" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.56%)</title><rect x="576.4" y="723.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.4" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.56%)</title><rect x="576.4" y="707.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.4" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.56%)</title><rect x="576.4" y="691.0" width="18.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.39%)</title><rect x="586.7" y="675.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="589.7" y="686.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="586.7" y="659.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="589.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.29%)</title><rect x="587.9" y="659.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="590.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.29%)</title><rect x="587.9" y="643.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="590.9" y="654.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="587.9" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="590.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="589.0" y="627.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="592.0" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="590.2" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="593.2" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="591.3" y="675.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="594.3" y="686.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="594.8" y="739.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="597.8" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.59%)</title><rect x="596.0" y="739.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="599.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="602.9" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.9" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="602.9" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.9" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="602.9" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="605.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="602.9" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="605.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.17%)</title><rect x="604.0" y="771.0" width="13.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (7 samples, 0.68%)</title><rect x="604.0" y="755.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.68%)</title><rect x="604.0" y="739.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.49%)</title><rect x="612.1" y="755.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.49%)</title><rect x="612.1" y="739.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.1" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="617.9" y="771.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="620.9" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 7.23%)</title><rect x="621.3" y="771.0" width="85.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="624.3" y="782.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 7.23%)</title><rect x="621.3" y="755.0" width="85.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.3" y="766.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.59%)</title><rect x="621.3" y="739.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.59%)</title><rect x="621.3" y="723.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.59%)</title><rect x="621.3" y="707.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.59%)</title><rect x="621.3" y="691.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="627.1" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="627.1" y="659.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.1" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 6.65%)</title><rect x="628.3" y="739.0" width="78.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.3" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (61 samples, 5.96%)</title><rect x="636.3" y="723.0" width="70.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.3" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 3.32%)</title><rect x="667.5" y="707.0" width="39.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.5" y="718.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.29%)</title><rect x="687.1" y="691.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.98%)</title><rect x="690.5" y="691.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.5" y="702.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.39%)</title><rect x="702.1" y="691.0" width="4.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="705.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 6.35%)</title><rect x="706.7" y="803.0" width="75.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.7" y="814.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 6.35%)</title><rect x="706.7" y="787.0" width="75.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.7" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/229675740.process (25 samples, 2.44%)</title><rect x="707.8" y="771.0" width="28.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.8" y="782.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (25 samples, 2.44%)</title><rect x="707.8" y="755.0" width="28.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.8" y="766.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 2.05%)</title><rect x="707.8" y="739.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.8" y="750.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.39%)</title><rect x="707.8" y="723.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.8" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.39%)</title><rect x="707.8" y="707.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.8" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.39%)</title><rect x="707.8" y="691.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.8" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.39%)</title><rect x="707.8" y="675.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="710.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.29%)</title><rect x="709.0" y="659.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="711.3" y="643.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="714.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.78%)</title><rect x="712.5" y="723.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="715.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="713.6" y="707.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="716.6" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.49%)</title><rect x="715.9" y="707.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="718.9" y="718.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.49%)</title><rect x="715.9" y="691.0" width="5.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="718.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="721.7" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.78%)</title><rect x="722.8" y="723.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.39%)</title><rect x="732.1" y="739.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="735.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.39%)</title><rect x="732.1" y="723.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="735.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.39%)</title><rect x="732.1" y="707.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.39%)</title><rect x="732.1" y="691.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.29%)</title><rect x="736.7" y="771.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.29%)</title><rect x="736.7" y="755.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="737.8" y="739.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.8" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="737.8" y="723.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="740.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="737.8" y="707.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="740.8" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="737.8" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="740.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="739.0" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="742.0" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="739.0" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (19 samples, 1.86%)</title><rect x="740.1" y="771.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.1" y="782.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (19 samples, 1.86%)</title><rect x="740.1" y="755.0" width="22.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="743.1" y="766.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/756196894.get$Lambda (19 samples, 1.86%)</title><rect x="740.1" y="739.0" width="22.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.1" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/756196894.&lt;init&gt; (18 samples, 1.76%)</title><rect x="741.3" y="723.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.3" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.68%)</title><rect x="752.8" y="707.0" width="8.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="755.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.68%)</title><rect x="752.8" y="691.0" width="8.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="755.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="760.9" y="707.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="762.1" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.1" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="762.1" y="755.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.68%)</title><rect x="763.2" y="771.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.2" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.39%)</title><rect x="766.7" y="755.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.7" y="766.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.39%)</title><rect x="766.7" y="739.0" width="4.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="769.7" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="771.3" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="774.3" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.78%)</title><rect x="772.4" y="771.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.4" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="779.4" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="779.4" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="782.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="779.4" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="782.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="779.4" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="782.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="779.4" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="782.4" y="702.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="779.4" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="782.4" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="780.5" y="755.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.5" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="780.5" y="739.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="780.5" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.5" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="780.5" y="707.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="783.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="780.5" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.5" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="780.5" y="675.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.5" y="686.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="780.5" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.88%)</title><rect x="781.7" y="803.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (6 samples, 0.59%)</title><rect x="781.7" y="787.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.7" y="798.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="781.7" y="771.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="784.7" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="784.0" y="771.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="787.0" y="782.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="784.0" y="755.0" width="4.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="787.0" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.29%)</title><rect x="788.6" y="787.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.6" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.29%)</title><rect x="788.6" y="771.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.6" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.10%)</title><rect x="792.1" y="803.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.1" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.10%)</title><rect x="792.1" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.1" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1120667782.linkToTargetMethod (1 samples, 0.10%)</title><rect x="792.1" y="771.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1589779710.invokeStatic_D_L (1 samples, 0.10%)</title><rect x="792.1" y="755.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.1" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$259/1810398042.get$Lambda (1 samples, 0.10%)</title><rect x="792.1" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.78%)</title><rect x="793.2" y="803.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.78%)</title><rect x="793.2" y="787.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.78%)</title><rect x="793.2" y="771.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1731639661.accept (8 samples, 0.78%)</title><rect x="793.2" y="755.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.78%)</title><rect x="793.2" y="739.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.2" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.78%)</title><rect x="793.2" y="723.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.2" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.78%)</title><rect x="793.2" y="707.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.2" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.59%)</title><rect x="795.5" y="691.0" width="6.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="798.5" y="702.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.49%)</title><rect x="796.7" y="675.0" width="5.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="799.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.56%)</title><rect x="802.4" y="819.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.27%)</title><rect x="805.9" y="803.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.88%)</title><rect x="809.4" y="787.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="812.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1731639661.accept (2 samples, 0.20%)</title><rect x="809.4" y="771.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.20%)</title><rect x="809.4" y="755.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.4" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.20%)</title><rect x="809.4" y="739.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.4" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.20%)</title><rect x="809.4" y="723.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="812.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/106636129.accept (7 samples, 0.68%)</title><rect x="811.7" y="771.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (7 samples, 0.68%)</title><rect x="811.7" y="755.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="814.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1789133961.complete (7 samples, 0.68%)</title><rect x="811.7" y="739.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (7 samples, 0.68%)</title><rect x="811.7" y="723.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 0.68%)</title><rect x="811.7" y="707.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.68%)</title><rect x="811.7" y="691.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.7" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.68%)</title><rect x="811.7" y="675.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.7" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 0.68%)</title><rect x="811.7" y="659.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.7" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 0.68%)</title><rect x="811.7" y="643.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="819.7" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.7" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.88%)</title><rect x="820.9" y="819.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="823.9" y="830.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.88%)</title><rect x="820.9" y="803.0" width="10.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="823.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.29%)</title><rect x="831.3" y="835.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.3" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="834.7" y="835.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="837.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (12 samples, 1.17%)</title><rect x="835.9" y="883.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.17%)</title><rect x="835.9" y="867.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.17%)</title><rect x="835.9" y="851.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.17%)</title><rect x="835.9" y="835.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.9" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="842.8" y="819.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="845.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="842.8" y="803.0" width="2.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="845.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (4 samples, 0.39%)</title><rect x="845.1" y="819.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (218 samples, 21.31%)</title><rect x="849.7" y="883.0" width="251.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.7" y="894.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 21.21%)</title><rect x="850.9" y="867.0" width="250.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.9" y="878.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (178 samples, 17.40%)</title><rect x="893.6" y="851.0" width="205.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.6" y="862.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.78%)</title><rect x="900.5" y="835.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.78%)</title><rect x="900.5" y="819.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="903.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.78%)</title><rect x="900.5" y="803.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.78%)</title><rect x="900.5" y="787.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 15.93%)</title><rect x="909.7" y="835.0" width="188.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="912.7" y="846.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 15.93%)</title><rect x="909.7" y="819.0" width="188.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.7" y="830.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="914.3" y="803.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.3" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="916.6" y="803.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.6" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="917.8" y="803.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.8" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (150 samples, 14.66%)</title><rect x="920.1" y="803.0" width="173.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="923.1" y="814.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="923.5" y="787.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.5" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.76%)</title><rect x="924.7" y="787.0" width="20.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.39%)</title><rect x="935.1" y="771.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.1" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="936.2" y="755.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.2" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="938.5" y="755.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="941.5" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="939.7" y="771.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.7" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.29%)</title><rect x="940.9" y="771.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="943.9" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="944.3" y="771.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.3" y="782.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="945.5" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.5" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.29%)</title><rect x="946.6" y="787.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.6" y="798.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="950.1" y="787.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="953.1" y="798.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 1.27%)</title><rect x="951.2" y="787.0" width="15.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="954.2" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 3.71%)</title><rect x="966.2" y="787.0" width="43.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="969.2" y="798.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.99%)</title><rect x="1010.1" y="787.0" width="58.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1013.1" y="798.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.49%)</title><rect x="1068.9" y="787.0" width="5.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1071.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.20%)</title><rect x="1074.7" y="787.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1077.7" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1077.0" y="787.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1080.0" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="1079.3" y="787.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1082.3" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.20%)</title><rect x="1081.6" y="787.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1084.6" y="798.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1083.9" y="787.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1086.9" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.20%)</title><rect x="1085.0" y="787.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.0" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1087.3" y="787.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.3" y="798.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.29%)</title><rect x="1088.5" y="787.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.5" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1092.0" y="787.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1095.0" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1093.1" y="803.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1096.1" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="1096.6" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.6" y="814.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1097.7" y="835.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.20%)</title><rect x="1098.9" y="851.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1101.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="1098.9" y="835.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1101.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="1098.9" y="819.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="1098.9" y="803.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1101.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="1100.0" y="787.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1101.2" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1104.2" y="942.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.10%)</title><rect x="1101.2" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.2" y="926.0"></text>
</g>
<g>
<title>start_thread (76 samples, 7.43%)</title><rect x="1102.3" y="931.0" width="87.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1105.3" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (76 samples, 7.43%)</title><rect x="1102.3" y="915.0" width="87.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1105.3" y="926.0">java_start..</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.76%)</title><rect x="1102.3" y="899.0" width="20.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.3" y="910.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.68%)</title><rect x="1102.3" y="883.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.3" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.68%)</title><rect x="1102.3" y="867.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.3" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1102.3" y="851.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.3" y="862.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.59%)</title><rect x="1103.5" y="851.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1106.5" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 1.08%)</title><rect x="1110.4" y="883.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.39%)</title><rect x="1110.4" y="867.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.4" y="878.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1111.6" y="851.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1114.6" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.20%)</title><rect x="1115.0" y="867.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.0" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1115.0" y="851.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.0" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1115.0" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.0" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1115.0" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.0" y="830.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.10%)</title><rect x="1115.0" y="803.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.0" y="814.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1115.0" y="787.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.0" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.10%)</title><rect x="1115.0" y="771.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.0" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1116.2" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.2" y="862.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1116.2" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.49%)</title><rect x="1117.3" y="867.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.3" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.49%)</title><rect x="1117.3" y="851.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.3" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.49%)</title><rect x="1117.3" y="835.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.3" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.49%)</title><rect x="1117.3" y="819.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.3" y="830.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.49%)</title><rect x="1117.3" y="803.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.3" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.49%)</title><rect x="1117.3" y="787.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.3" y="798.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.29%)</title><rect x="1119.6" y="771.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1120.8" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.8" y="766.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1120.8" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.8" y="750.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1121.9" y="755.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1121.9" y="739.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.9" y="750.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1121.9" y="723.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="734.0"></text>
</g>
<g>
<title>FilterIntoCSClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1121.9" y="707.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.9" y="718.0"></text>
</g>
<g>
<title>JavaThread::run() (56 samples, 5.47%)</title><rect x="1123.1" y="899.0" width="64.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.1" y="910.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (56 samples, 5.47%)</title><rect x="1123.1" y="883.0" width="64.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.1" y="894.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (56 samples, 5.47%)</title><rect x="1123.1" y="867.0" width="64.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.1" y="878.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (56 samples, 5.47%)</title><rect x="1123.1" y="851.0" width="64.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.1" y="862.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (55 samples, 5.38%)</title><rect x="1123.1" y="835.0" width="63.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="846.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (55 samples, 5.38%)</title><rect x="1123.1" y="819.0" width="63.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.1" y="830.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 3.42%)</title><rect x="1123.1" y="803.0" width="40.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.1" y="814.0">Com..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.20%)</title><rect x="1123.1" y="787.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.1" y="798.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="1123.1" y="771.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.1" y="782.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="1123.1" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.1" y="766.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::append(ScopeValue* const&amp;) (1 samples, 0.10%)</title><rect x="1123.1" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.1" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1124.3" y="771.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.3" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1124.3" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.3" y="766.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.10%)</title><rect x="1125.4" y="787.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.29%)</title><rect x="1126.6" y="787.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.6" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1126.6" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1127.7" y="771.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.20%)</title><rect x="1127.7" y="755.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1128.9" y="739.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.9" y="750.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1128.9" y="723.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1130.0" y="787.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.0" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1130.0" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.0" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1130.0" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.10%)</title><rect x="1130.0" y="739.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.0" y="750.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.10%)</title><rect x="1130.0" y="723.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.0" y="734.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.10%)</title><rect x="1130.0" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.0" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1130.0" y="691.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.0" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1130.0" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.0" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1130.0" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.0" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.10%)</title><rect x="1130.0" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 2.74%)</title><rect x="1131.2" y="787.0" width="32.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.2" y="798.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.10%)</title><rect x="1131.2" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.2" y="782.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1132.3" y="771.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.3" y="782.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1133.5" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.29%)</title><rect x="1134.6" y="771.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.6" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1134.6" y="755.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1136.9" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1138.1" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.1" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1138.1" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.49%)</title><rect x="1139.2" y="771.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="1143.9" y="755.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1143.9" y="739.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.29%)</title><rect x="1145.0" y="771.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1145.0" y="755.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.0" y="766.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="1146.2" y="755.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.2" y="766.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.10%)</title><rect x="1147.3" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1148.5" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1148.5" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1148.5" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="1149.6" y="771.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.6" y="782.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1150.8" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.20%)</title><rect x="1151.9" y="771.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1153.1" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.10%)</title><rect x="1153.1" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="750.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.10%)</title><rect x="1153.1" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1154.2" y="771.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1154.2" y="755.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.10%)</title><rect x="1154.2" y="739.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="750.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.10%)</title><rect x="1154.2" y="723.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.2" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1155.4" y="771.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1155.4" y="755.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.4" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1156.5" y="771.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1156.5" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="1157.7" y="771.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="782.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.10%)</title><rect x="1160.0" y="771.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.0" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1161.2" y="771.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.10%)</title><rect x="1162.3" y="771.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1165.3" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 1.47%)</title><rect x="1163.5" y="803.0" width="17.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.5" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1163.5" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.5" y="798.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1163.5" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1164.6" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1164.6" y="771.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1164.6" y="755.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.6" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.10%)</title><rect x="1164.6" y="739.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1165.8" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 0.78%)</title><rect x="1166.9" y="787.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1168.1" y="771.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1169.2" y="771.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.29%)</title><rect x="1170.4" y="771.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.10%)</title><rect x="1172.7" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.7" y="739.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1173.9" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>LockNode::Opcode() const (1 samples, 0.10%)</title><rect x="1173.9" y="755.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1175.0" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1175.0" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1175.0" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1175.0" y="723.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.20%)</title><rect x="1176.2" y="787.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1176.2" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1176.2" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1177.3" y="771.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="782.0"></text>
</g>
<g>
<title>StoreCMNode::Opcode() const (1 samples, 0.10%)</title><rect x="1178.5" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1179.6" y="787.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1182.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.49%)</title><rect x="1180.8" y="803.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.49%)</title><rect x="1180.8" y="787.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.49%)</title><rect x="1180.8" y="771.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.49%)</title><rect x="1180.8" y="755.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.49%)</title><rect x="1180.8" y="739.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.49%)</title><rect x="1180.8" y="723.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1180.8" y="707.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1180.8" y="691.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1180.8" y="675.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1180.8" y="659.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1180.8" y="643.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1180.8" y="627.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1180.8" y="611.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1180.8" y="595.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1180.8" y="579.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1180.8" y="563.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1180.8" y="547.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1180.8" y="531.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1180.8" y="515.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1180.8" y="499.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1180.8" y="483.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1180.8" y="467.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1180.8" y="451.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1180.8" y="435.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1180.8" y="419.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1180.8" y="403.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1180.8" y="387.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1180.8" y="371.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1180.8" y="355.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1180.8" y="339.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1180.8" y="323.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="291.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="259.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="243.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="227.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="211.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="222.0"></text>
</g>
<g>
<title>Parse::make_node_notes(Node_Notes*) (1 samples, 0.10%)</title><rect x="1180.8" y="195.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="206.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.10%)</title><rect x="1181.9" y="307.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="339.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="307.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1183.1" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="302.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="275.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="286.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="259.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="243.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="211.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="179.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="163.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="147.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="131.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="115.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="99.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="83.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="67.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1183.1" y="51.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="35.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="707.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="675.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="627.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="611.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="595.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="579.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="547.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="531.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="515.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="499.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="467.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="451.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="435.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="419.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="430.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="403.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="414.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="398.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="339.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="307.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="318.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.10%)</title><rect x="1184.2" y="291.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1185.4" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.4" y="691.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.4" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1185.4" y="659.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.5" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.5" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1186.5" y="819.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1186.5" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.5" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1186.5" y="787.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.5" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.10%)</title><rect x="1186.5" y="771.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.5" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.10%)</title><rect x="1186.5" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.10%)</title><rect x="1186.5" y="739.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.7" y="899.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.7" y="883.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.20%)</title><rect x="1187.7" y="867.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.20%)</title><rect x="1187.7" y="851.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.20%)</title><rect x="1187.7" y="835.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.20%)</title><rect x="1187.7" y="819.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.10%)</title><rect x="1187.7" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.10%)</title><rect x="1187.7" y="771.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1187.7" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.10%)</title><rect x="1188.8" y="803.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="1188.8" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1188.8" y="771.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="782.0"></text>
</g>
</g>
</svg>
