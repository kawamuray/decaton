<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (194 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.52%)</title><rect x="10.0" y="1171.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 17.01%)</title><rect x="16.1" y="1171.0" width="200.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1182.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (33 samples, 17.01%)</title><rect x="16.1" y="1155.0" width="200.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1166.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.52%)</title><rect x="16.1" y="1139.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.52%)</title><rect x="16.1" y="1123.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.52%)</title><rect x="16.1" y="1107.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="16.1" y="1091.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.52%)</title><rect x="16.1" y="1075.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.52%)</title><rect x="16.1" y="1059.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.52%)</title><rect x="16.1" y="1043.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.52%)</title><rect x="16.1" y="1027.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 10.82%)</title><rect x="22.2" y="1139.0" width="127.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.2" y="1150.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1092291709.accept (21 samples, 10.82%)</title><rect x="22.2" y="1123.0" width="127.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (21 samples, 10.82%)</title><rect x="22.2" y="1107.0" width="127.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (19 samples, 9.79%)</title><rect x="22.2" y="1091.0" width="115.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (19 samples, 9.79%)</title><rect x="22.2" y="1075.0" width="115.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.2" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (19 samples, 9.79%)</title><rect x="22.2" y="1059.0" width="115.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.2" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (19 samples, 9.79%)</title><rect x="22.2" y="1043.0" width="115.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="1054.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 9.79%)</title><rect x="22.2" y="1027.0" width="115.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1038.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (15 samples, 7.73%)</title><rect x="46.5" y="1011.0" width="91.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.5" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 7.22%)</title><rect x="46.5" y="995.0" width="85.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.5" y="1006.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 7.22%)</title><rect x="46.5" y="979.0" width="85.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.5" y="990.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 7.22%)</title><rect x="46.5" y="963.0" width="85.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.5" y="974.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 7.22%)</title><rect x="46.5" y="947.0" width="85.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.5" y="958.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 7.22%)</title><rect x="46.5" y="931.0" width="85.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.5" y="942.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 4.12%)</title><rect x="83.0" y="915.0" width="48.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="86.0" y="926.0">sun/..</text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 4.12%)</title><rect x="83.0" y="899.0" width="48.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="86.0" y="910.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.09%)</title><rect x="83.0" y="883.0" width="36.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="86.0" y="894.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.03%)</title><rect x="119.5" y="883.0" width="12.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="122.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.52%)</title><rect x="131.6" y="995.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="131.6" y="979.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.52%)</title><rect x="131.6" y="963.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.52%)</title><rect x="131.6" y="947.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.03%)</title><rect x="137.7" y="1091.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.52%)</title><rect x="137.7" y="1075.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="140.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.52%)</title><rect x="143.8" y="1075.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.52%)</title><rect x="143.8" y="1059.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.52%)</title><rect x="143.8" y="1043.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.52%)</title><rect x="143.8" y="1027.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="146.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.52%)</title><rect x="143.8" y="1011.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="146.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.52%)</title><rect x="143.8" y="995.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="146.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.67%)</title><rect x="149.9" y="1139.0" width="66.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.9" y="1150.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.67%)</title><rect x="149.9" y="1123.0" width="66.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.9" y="1134.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.03%)</title><rect x="149.9" y="1107.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.03%)</title><rect x="149.9" y="1091.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.03%)</title><rect x="149.9" y="1075.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.52%)</title><rect x="149.9" y="1059.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.52%)</title><rect x="149.9" y="1043.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.52%)</title><rect x="149.9" y="1027.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.52%)</title><rect x="149.9" y="1011.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.magic (1 samples, 0.52%)</title><rect x="149.9" y="995.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.52%)</title><rect x="156.0" y="1059.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.52%)</title><rect x="156.0" y="1043.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.52%)</title><rect x="156.0" y="1027.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.52%)</title><rect x="156.0" y="1011.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.52%)</title><rect x="156.0" y="995.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.52%)</title><rect x="156.0" y="979.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.52%)</title><rect x="156.0" y="963.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.0" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.52%)</title><rect x="156.0" y="947.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.03%)</title><rect x="162.1" y="1107.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.52%)</title><rect x="162.1" y="1091.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="165.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.52%)</title><rect x="162.1" y="1075.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.52%)</title><rect x="162.1" y="1059.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.52%)</title><rect x="162.1" y="1043.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.52%)</title><rect x="162.1" y="1027.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.52%)</title><rect x="162.1" y="1011.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.52%)</title><rect x="168.1" y="1091.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.52%)</title><rect x="168.1" y="1075.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 2.06%)</title><rect x="174.2" y="1107.0" width="24.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.2" y="1118.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.03%)</title><rect x="180.3" y="1091.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.03%)</title><rect x="180.3" y="1075.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.03%)</title><rect x="180.3" y="1059.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.isConnected (1 samples, 0.52%)</title><rect x="180.3" y="1043.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.isConnected (1 samples, 0.52%)</title><rect x="180.3" y="1027.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$3.iterator (1 samples, 0.52%)</title><rect x="186.4" y="1043.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.52%)</title><rect x="186.4" y="1027.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.52%)</title><rect x="186.4" y="1011.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.52%)</title><rect x="186.4" y="995.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.52%)</title><rect x="186.4" y="979.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.52%)</title><rect x="192.5" y="1091.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.52%)</title><rect x="192.5" y="1075.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="192.5" y="1059.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="192.5" y="1043.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.52%)</title><rect x="192.5" y="1027.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.52%)</title><rect x="192.5" y="1011.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.52%)</title><rect x="192.5" y="995.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.52%)</title><rect x="192.5" y="979.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.52%)</title><rect x="192.5" y="963.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.03%)</title><rect x="198.6" y="1107.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.03%)</title><rect x="198.6" y="1091.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.52%)</title><rect x="204.6" y="1075.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.52%)</title><rect x="204.6" y="1059.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.52%)</title><rect x="204.6" y="1043.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.52%)</title><rect x="204.6" y="1027.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.52%)</title><rect x="210.7" y="1107.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="210.7" y="1091.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="210.7" y="1075.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="210.7" y="1059.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (69 samples, 35.57%)</title><rect x="216.8" y="1171.0" width="419.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.8" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (69 samples, 35.57%)</title><rect x="216.8" y="1155.0" width="419.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.8" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (69 samples, 35.57%)</title><rect x="216.8" y="1139.0" width="419.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.8" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1772824605.run (47 samples, 24.23%)</title><rect x="222.9" y="1123.0" width="285.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.9" y="1134.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (47 samples, 24.23%)</title><rect x="222.9" y="1107.0" width="285.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.9" y="1118.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (47 samples, 24.23%)</title><rect x="222.9" y="1091.0" width="285.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.9" y="1102.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (46 samples, 23.71%)</title><rect x="222.9" y="1075.0" width="279.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.9" y="1086.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (19 samples, 9.79%)</title><rect x="222.9" y="1059.0" width="115.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.9" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (19 samples, 9.79%)</title><rect x="222.9" y="1043.0" width="115.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.9" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (19 samples, 9.79%)</title><rect x="222.9" y="1027.0" width="115.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.9" y="1038.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (19 samples, 9.79%)</title><rect x="222.9" y="1011.0" width="115.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.9" y="1022.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (19 samples, 9.79%)</title><rect x="222.9" y="995.0" width="115.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.9" y="1006.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (19 samples, 9.79%)</title><rect x="222.9" y="979.0" width="115.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.9" y="990.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 3.61%)</title><rect x="222.9" y="963.0" width="42.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.9" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 2.06%)</title><rect x="222.9" y="947.0" width="24.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.9" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 2.06%)</title><rect x="222.9" y="931.0" width="24.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.9" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 1.55%)</title><rect x="222.9" y="915.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.52%)</title><rect x="241.1" y="915.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="241.1" y="899.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.52%)</title><rect x="241.1" y="883.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.52%)</title><rect x="241.1" y="867.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.55%)</title><rect x="247.2" y="947.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.55%)</title><rect x="247.2" y="931.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.52%)</title><rect x="247.2" y="915.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="250.2" y="926.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.52%)</title><rect x="247.2" y="899.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="250.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.03%)</title><rect x="253.3" y="915.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.52%)</title><rect x="259.4" y="899.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 5.67%)</title><rect x="265.5" y="963.0" width="66.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.5" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.52%)</title><rect x="265.5" y="947.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 5.15%)</title><rect x="271.5" y="947.0" width="60.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.5" y="958.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.55%)</title><rect x="271.5" y="931.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 1.03%)</title><rect x="271.5" y="915.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.52%)</title><rect x="283.7" y="915.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.52%)</title><rect x="283.7" y="899.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 3.61%)</title><rect x="289.8" y="931.0" width="42.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.8" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 3.61%)</title><rect x="289.8" y="915.0" width="42.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.8" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 3.61%)</title><rect x="289.8" y="899.0" width="42.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.8" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.03%)</title><rect x="295.9" y="883.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.52%)</title><rect x="302.0" y="867.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.03%)</title><rect x="308.0" y="883.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.52%)</title><rect x="314.1" y="867.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.52%)</title><rect x="314.1" y="851.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.52%)</title><rect x="314.1" y="835.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.52%)</title><rect x="314.1" y="819.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 1.03%)</title><rect x="320.2" y="883.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.52%)</title><rect x="332.4" y="963.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.52%)</title><rect x="332.4" y="947.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.52%)</title><rect x="332.4" y="931.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.52%)</title><rect x="332.4" y="915.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 11.86%)</title><rect x="338.5" y="1059.0" width="139.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.5" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 3.09%)</title><rect x="338.5" y="1043.0" width="36.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.5" y="1054.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.55%)</title><rect x="356.7" y="1027.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.55%)</title><rect x="356.7" y="1011.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.7" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="356.7" y="995.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.52%)</title><rect x="356.7" y="979.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="356.7" y="963.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="359.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="356.7" y="947.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.7" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.03%)</title><rect x="362.8" y="995.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.52%)</title><rect x="368.9" y="979.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.52%)</title><rect x="368.9" y="963.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (7 samples, 3.61%)</title><rect x="374.9" y="1043.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.9" y="1054.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (5 samples, 2.58%)</title><rect x="387.1" y="1027.0" width="30.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.1" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.03%)</title><rect x="387.1" y="1011.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.03%)</title><rect x="387.1" y="995.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.03%)</title><rect x="387.1" y="979.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.1" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.52%)</title><rect x="393.2" y="963.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.2" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.52%)</title><rect x="393.2" y="947.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.2" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.55%)</title><rect x="399.3" y="1011.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.55%)</title><rect x="399.3" y="995.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.55%)</title><rect x="399.3" y="979.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.03%)</title><rect x="405.4" y="963.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.52%)</title><rect x="411.4" y="947.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.58%)</title><rect x="417.5" y="1043.0" width="30.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="420.5" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.58%)</title><rect x="417.5" y="1027.0" width="30.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.5" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1778465789.process (1 samples, 0.52%)</title><rect x="417.5" y="1011.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.52%)</title><rect x="417.5" y="995.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.52%)</title><rect x="417.5" y="979.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.52%)</title><rect x="423.6" y="1011.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.metadata (1 samples, 0.52%)</title><rect x="429.7" y="1011.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.52%)</title><rect x="435.8" y="1011.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.8" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="435.8" y="995.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="438.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.52%)</title><rect x="441.9" y="1011.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.9" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.52%)</title><rect x="441.9" y="995.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.9" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.52%)</title><rect x="441.9" y="979.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.52%)</title><rect x="447.9" y="1043.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.52%)</title><rect x="447.9" y="1027.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1732586133.linkToTargetMethod (2 samples, 1.03%)</title><rect x="454.0" y="1043.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (2 samples, 1.03%)</title><rect x="454.0" y="1027.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/863469892.get$Lambda (2 samples, 1.03%)</title><rect x="454.0" y="1011.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.03%)</title><rect x="466.2" y="1043.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="472.3" y="1027.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="472.3" y="1011.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/863469892.accept (1 samples, 0.52%)</title><rect x="472.3" y="995.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.52%)</title><rect x="472.3" y="979.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.52%)</title><rect x="472.3" y="963.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.3" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.52%)</title><rect x="472.3" y="947.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.3" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="472.3" y="931.0" width="6.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="475.3" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="472.3" y="915.0" width="6.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="475.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.03%)</title><rect x="478.4" y="1059.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.03%)</title><rect x="478.4" y="1043.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.03%)</title><rect x="478.4" y="1027.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/863469892.accept (1 samples, 0.52%)</title><rect x="478.4" y="1011.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="481.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.52%)</title><rect x="478.4" y="995.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.4" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.52%)</title><rect x="478.4" y="979.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.4" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.52%)</title><rect x="478.4" y="963.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="481.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/787256688.accept (1 samples, 0.52%)</title><rect x="484.4" y="1011.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.52%)</title><rect x="484.4" y="995.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/332939361.complete (1 samples, 0.52%)</title><rect x="484.4" y="979.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="487.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.52%)</title><rect x="484.4" y="963.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.52%)</title><rect x="484.4" y="947.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.52%)</title><rect x="484.4" y="931.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.52%)</title><rect x="484.4" y="915.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.4" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.52%)</title><rect x="484.4" y="899.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="487.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.52%)</title><rect x="484.4" y="883.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="487.4" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.03%)</title><rect x="490.5" y="1059.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.5" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.03%)</title><rect x="490.5" y="1043.0" width="12.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="493.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.52%)</title><rect x="502.7" y="1075.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.7" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="502.7" y="1059.0" width="6.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="505.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.03%)</title><rect x="508.8" y="1123.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.03%)</title><rect x="520.9" y="1123.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="523.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.03%)</title><rect x="520.9" y="1107.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.52%)</title><rect x="527.0" y="1091.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.52%)</title><rect x="533.1" y="1123.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="533.1" y="1107.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.52%)</title><rect x="533.1" y="1091.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="536.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 8.25%)</title><rect x="539.2" y="1123.0" width="97.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.2" y="1134.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 8.25%)</title><rect x="539.2" y="1107.0" width="97.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="542.2" y="1118.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.52%)</title><rect x="539.2" y="1091.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="542.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 7.73%)</title><rect x="545.3" y="1091.0" width="91.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="548.3" y="1102.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.52%)</title><rect x="545.3" y="1075.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 7.22%)</title><rect x="551.3" y="1075.0" width="85.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="554.3" y="1086.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (14 samples, 7.22%)</title><rect x="551.3" y="1059.0" width="85.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="554.3" y="1070.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 6.19%)</title><rect x="557.4" y="1043.0" width="73.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="560.4" y="1054.0">Unsafe_P..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.03%)</title><rect x="557.4" y="1027.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.4" y="1038.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.52%)</title><rect x="569.6" y="1027.0" width="6.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="572.6" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.55%)</title><rect x="575.7" y="1027.0" width="18.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="578.7" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.03%)</title><rect x="593.9" y="1027.0" width="12.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="596.9" y="1038.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 1.03%)</title><rect x="606.1" y="1027.0" width="12.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="609.1" y="1038.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.52%)</title><rect x="618.2" y="1027.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="621.2" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.52%)</title><rect x="624.3" y="1027.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.52%)</title><rect x="630.4" y="1043.0" width="6.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="633.4" y="1054.0"></text>
</g>
<g>
<title>start_thread (91 samples, 46.91%)</title><rect x="636.5" y="1171.0" width="553.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="639.5" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 46.91%)</title><rect x="636.5" y="1155.0" width="553.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="639.5" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 5.15%)</title><rect x="636.5" y="1139.0" width="60.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="639.5" y="1150.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.52%)</title><rect x="636.5" y="1123.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="639.5" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.52%)</title><rect x="636.5" y="1107.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.5" y="1118.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.52%)</title><rect x="636.5" y="1091.0" width="6.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="639.5" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 4.64%)</title><rect x="642.6" y="1123.0" width="54.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="645.6" y="1134.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.06%)</title><rect x="642.6" y="1107.0" width="24.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="645.6" y="1118.0">G..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.52%)</title><rect x="642.6" y="1091.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="645.6" y="1102.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.52%)</title><rect x="648.7" y="1091.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="651.7" y="1102.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.03%)</title><rect x="654.7" y="1091.0" width="12.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="657.7" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 2.06%)</title><rect x="666.9" y="1107.0" width="24.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="669.9" y="1118.0">G..</text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 1.03%)</title><rect x="666.9" y="1091.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="669.9" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 1.03%)</title><rect x="666.9" y="1075.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="669.9" y="1086.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 1.03%)</title><rect x="666.9" y="1059.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="669.9" y="1070.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.52%)</title><rect x="673.0" y="1043.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="676.0" y="1054.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 1.03%)</title><rect x="679.1" y="1091.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="682.1" y="1102.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.52%)</title><rect x="685.2" y="1075.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="688.2" y="1086.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.52%)</title><rect x="685.2" y="1059.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="688.2" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="691.2" y="1107.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="694.2" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="691.2" y="1091.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="694.2" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="691.2" y="1075.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="694.2" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.52%)</title><rect x="691.2" y="1059.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.2" y="1070.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.52%)</title><rect x="691.2" y="1043.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.2" y="1054.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.52%)</title><rect x="691.2" y="1027.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="694.2" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 41.75%)</title><rect x="697.3" y="1139.0" width="492.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="700.3" y="1150.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 41.75%)</title><rect x="697.3" y="1123.0" width="492.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="700.3" y="1134.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::check_break_at(methodHandle, int, bool) (1 samples, 0.52%)</title><rect x="697.3" y="1107.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="700.3" y="1118.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 41.24%)</title><rect x="703.4" y="1107.0" width="486.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="706.4" y="1118.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 40.21%)</title><rect x="703.4" y="1091.0" width="474.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="706.4" y="1102.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 40.21%)</title><rect x="703.4" y="1075.0" width="474.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="706.4" y="1086.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 22.68%)</title><rect x="703.4" y="1059.0" width="267.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="706.4" y="1070.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.55%)</title><rect x="703.4" y="1043.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="706.4" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.52%)</title><rect x="703.4" y="1027.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="706.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.52%)</title><rect x="709.5" y="1027.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="712.5" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.52%)</title><rect x="709.5" y="1011.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="712.5" y="1022.0"></text>
</g>
<g>
<title>MultiNode::ideal_reg() const (1 samples, 0.52%)</title><rect x="715.6" y="1027.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="718.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.52%)</title><rect x="721.6" y="1043.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="724.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.52%)</title><rect x="721.6" y="1027.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="724.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.52%)</title><rect x="721.6" y="1011.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="724.6" y="1022.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.52%)</title><rect x="721.6" y="995.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 20.10%)</title><rect x="727.7" y="1043.0" width="237.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="730.7" y="1054.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachSpillCopyNode::in_RegMask(unsigned int) const (1 samples, 0.52%)</title><rect x="727.7" y="1027.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="730.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.03%)</title><rect x="733.8" y="1027.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="736.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.52%)</title><rect x="746.0" y="1027.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.52%)</title><rect x="746.0" y="1011.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="749.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="746.0" y="995.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="749.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.58%)</title><rect x="752.1" y="1027.0" width="30.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.1" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.52%)</title><rect x="776.4" y="1011.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.61%)</title><rect x="782.5" y="1027.0" width="42.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="785.5" y="1038.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.55%)</title><rect x="806.8" y="1011.0" width="18.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="809.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="819.0" y="995.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="822.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.52%)</title><rect x="825.1" y="1027.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.52%)</title><rect x="825.1" y="1011.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.52%)</title><rect x="831.1" y="1027.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.52%)</title><rect x="837.2" y="1027.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="840.2" y="1038.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.52%)</title><rect x="837.2" y="1011.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.2" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 2.58%)</title><rect x="843.3" y="1027.0" width="30.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="846.3" y="1038.0">Ph..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.52%)</title><rect x="861.5" y="1011.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="864.5" y="1022.0"></text>
</g>
<g>
<title>jmpConNode::oper_input_base() const (1 samples, 0.52%)</title><rect x="867.6" y="1011.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.06%)</title><rect x="873.7" y="1027.0" width="24.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.7" y="1038.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.55%)</title><rect x="879.8" y="1011.0" width="18.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.52%)</title><rect x="898.0" y="1027.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="901.0" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.52%)</title><rect x="898.0" y="1011.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.0" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.52%)</title><rect x="898.0" y="995.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.0" y="1006.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.52%)</title><rect x="898.0" y="979.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.52%)</title><rect x="904.1" y="1027.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="907.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.52%)</title><rect x="910.2" y="1027.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.2" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.58%)</title><rect x="916.3" y="1027.0" width="30.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.3" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.55%)</title><rect x="928.5" y="1011.0" width="18.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.03%)</title><rect x="934.5" y="995.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.5" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 1.03%)</title><rect x="946.7" y="1027.0" width="12.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="949.7" y="1038.0"></text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 0.52%)</title><rect x="958.9" y="1027.0" width="6.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="961.9" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="964.9" y="1043.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="967.9" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 11.34%)</title><rect x="971.0" y="1059.0" width="133.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.0" y="1070.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.52%)</title><rect x="971.0" y="1043.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.0" y="1054.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.52%)</title><rect x="971.0" y="1027.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.0" y="1038.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.52%)</title><rect x="971.0" y="1011.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.55%)</title><rect x="977.1" y="1043.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.03%)</title><rect x="977.1" y="1027.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.52%)</title><rect x="983.2" y="1011.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.52%)</title><rect x="983.2" y="995.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.2" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.52%)</title><rect x="983.2" y="979.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.2" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.52%)</title><rect x="983.2" y="963.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.2" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.52%)</title><rect x="983.2" y="947.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.2" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.52%)</title><rect x="983.2" y="931.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.2" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.52%)</title><rect x="983.2" y="915.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.2" y="926.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.52%)</title><rect x="989.3" y="1027.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.3" y="1038.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.52%)</title><rect x="989.3" y="1011.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.3" y="1022.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.52%)</title><rect x="989.3" y="995.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.3" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="989.3" y="979.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="992.3" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.03%)</title><rect x="995.4" y="1043.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.4" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1001.4" y="1027.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.4" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1001.4" y="1011.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 4.12%)</title><rect x="1007.5" y="1043.0" width="48.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.5" y="1054.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.03%)</title><rect x="1007.5" y="1027.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1013.6" y="1011.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.52%)</title><rect x="1013.6" y="995.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.52%)</title><rect x="1019.7" y="1027.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.52%)</title><rect x="1019.7" y="1011.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.52%)</title><rect x="1019.7" y="995.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.52%)</title><rect x="1025.8" y="1027.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.55%)</title><rect x="1031.9" y="1027.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.9" y="1038.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.52%)</title><rect x="1037.9" y="1011.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.52%)</title><rect x="1044.0" y="1011.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.0" y="1022.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.52%)</title><rect x="1044.0" y="995.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.52%)</title><rect x="1050.1" y="1027.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1053.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.52%)</title><rect x="1050.1" y="1011.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.1" y="1022.0"></text>
</g>
<g>
<title>CmpUNode::Value(PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1050.1" y="995.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.09%)</title><rect x="1056.2" y="1043.0" width="36.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1059.2" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.58%)</title><rect x="1056.2" y="1027.0" width="30.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.2" y="1038.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 1.03%)</title><rect x="1062.3" y="1011.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.3" y="1022.0"></text>
</g>
<g>
<title>IfNode::is_range_check(Node*&amp;, Node*&amp;, int&amp;) [clone .part.132] (1 samples, 0.52%)</title><rect x="1068.4" y="995.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.4" y="1006.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.52%)</title><rect x="1068.4" y="979.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.4" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1074.4" y="1011.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.4" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1080.5" y="1011.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.52%)</title><rect x="1080.5" y="995.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="979.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="963.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="947.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="931.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="915.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="899.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="883.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.5" y="894.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.52%)</title><rect x="1080.5" y="867.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.5" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1080.5" y="851.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.5" y="862.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1086.6" y="1027.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.6" y="1038.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1092.7" y="1043.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.7" y="1054.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1092.7" y="1027.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.7" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1092.7" y="1011.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.7" y="1022.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.52%)</title><rect x="1098.8" y="1043.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.8" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="1098.8" y="1027.0" width="6.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1101.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="1098.8" y="1011.0" width="6.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1101.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.12%)</title><rect x="1104.8" y="1059.0" width="48.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.8" y="1070.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.12%)</title><rect x="1104.8" y="1043.0" width="48.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.8" y="1054.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.12%)</title><rect x="1104.8" y="1027.0" width="48.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.8" y="1038.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.12%)</title><rect x="1104.8" y="1011.0" width="48.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.8" y="1022.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.12%)</title><rect x="1104.8" y="995.0" width="48.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.8" y="1006.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.12%)</title><rect x="1104.8" y="979.0" width="48.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.8" y="990.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1104.8" y="963.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.8" y="974.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.52%)</title><rect x="1104.8" y="947.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.8" y="958.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.52%)</title><rect x="1104.8" y="931.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.61%)</title><rect x="1110.9" y="963.0" width="42.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.9" y="974.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.61%)</title><rect x="1110.9" y="947.0" width="42.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.9" y="958.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.61%)</title><rect x="1110.9" y="931.0" width="42.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.9" y="942.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.61%)</title><rect x="1110.9" y="915.0" width="42.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.9" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.61%)</title><rect x="1110.9" y="899.0" width="42.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.9" y="910.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.61%)</title><rect x="1110.9" y="883.0" width="42.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.9" y="894.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1110.9" y="867.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.9" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.52%)</title><rect x="1110.9" y="851.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.9" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.52%)</title><rect x="1110.9" y="835.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.9" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.52%)</title><rect x="1110.9" y="819.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.52%)</title><rect x="1110.9" y="803.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1110.9" y="787.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.58%)</title><rect x="1117.0" y="867.0" width="30.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.0" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.58%)</title><rect x="1117.0" y="851.0" width="30.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.0" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.58%)</title><rect x="1117.0" y="835.0" width="30.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.0" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.58%)</title><rect x="1117.0" y="819.0" width="30.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.0" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.58%)</title><rect x="1117.0" y="803.0" width="30.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.0" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.58%)</title><rect x="1117.0" y="787.0" width="30.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.0" y="798.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.06%)</title><rect x="1117.0" y="771.0" width="24.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.0" y="782.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.06%)</title><rect x="1117.0" y="755.0" width="24.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.06%)</title><rect x="1117.0" y="739.0" width="24.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.06%)</title><rect x="1117.0" y="723.0" width="24.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.0" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.06%)</title><rect x="1117.0" y="707.0" width="24.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.06%)</title><rect x="1117.0" y="691.0" width="24.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.0" y="702.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.55%)</title><rect x="1117.0" y="675.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.55%)</title><rect x="1117.0" y="659.0" width="18.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.55%)</title><rect x="1117.0" y="643.0" width="18.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.55%)</title><rect x="1117.0" y="627.0" width="18.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.55%)</title><rect x="1117.0" y="611.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1117.0" y="595.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1117.0" y="579.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1117.0" y="563.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1117.0" y="547.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1117.0" y="531.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1117.0" y="515.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1117.0" y="499.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1117.0" y="483.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1117.0" y="467.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1117.0" y="451.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1117.0" y="435.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1117.0" y="419.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1117.0" y="403.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1117.0" y="387.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1117.0" y="371.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1117.0" y="355.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1117.0" y="339.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1117.0" y="323.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1117.0" y="307.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1117.0" y="291.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1117.0" y="275.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1117.0" y="259.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1117.0" y="243.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1117.0" y="227.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1117.0" y="211.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1117.0" y="195.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1117.0" y="179.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1117.0" y="163.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1117.0" y="147.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1117.0" y="131.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="115.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.52%)</title><rect x="1117.0" y="99.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="83.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.52%)</title><rect x="1117.0" y="67.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="78.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.52%)</title><rect x="1117.0" y="51.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.0" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="1117.0" y="35.0" width="6.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1120.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1123.1" y="403.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.1" y="414.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.52%)</title><rect x="1123.1" y="387.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1123.1" y="371.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.1" y="382.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.52%)</title><rect x="1123.1" y="355.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.1" y="366.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.52%)</title><rect x="1123.1" y="339.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.52%)</title><rect x="1129.2" y="595.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.2" y="606.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.52%)</title><rect x="1129.2" y="579.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.52%)</title><rect x="1129.2" y="563.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.2" y="574.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.52%)</title><rect x="1129.2" y="547.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="558.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.52%)</title><rect x="1135.3" y="675.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.3" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.52%)</title><rect x="1141.3" y="771.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1141.3" y="755.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1141.3" y="739.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.3" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.52%)</title><rect x="1141.3" y="723.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="867.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.4" y="878.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="851.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="835.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.52%)</title><rect x="1147.4" y="819.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.52%)</title><rect x="1147.4" y="803.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.52%)</title><rect x="1147.4" y="787.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.4" y="798.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.03%)</title><rect x="1153.5" y="1059.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.5" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1153.5" y="1043.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.5" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1159.6" y="1043.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1054.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 1.03%)</title><rect x="1165.7" y="1059.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="1070.0"></text>
</g>
<g>
<title>CodeBuffer::free_blob() (1 samples, 0.52%)</title><rect x="1165.7" y="1043.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="1054.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.52%)</title><rect x="1165.7" y="1027.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.52%)</title><rect x="1165.7" y="1011.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="1022.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.52%)</title><rect x="1171.8" y="1043.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="1054.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.52%)</title><rect x="1171.8" y="1027.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.52%)</title><rect x="1171.8" y="1011.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.52%)</title><rect x="1171.8" y="995.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.03%)</title><rect x="1177.8" y="1091.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.03%)</title><rect x="1177.8" y="1075.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.03%)</title><rect x="1177.8" y="1059.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.52%)</title><rect x="1177.8" y="1043.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="1054.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.52%)</title><rect x="1177.8" y="1027.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1038.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1177.8" y="1011.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1022.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1177.8" y="995.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.52%)</title><rect x="1177.8" y="979.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1177.8" y="963.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1177.8" y="947.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1177.8" y="931.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1177.8" y="915.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.52%)</title><rect x="1177.8" y="899.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="910.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.52%)</title><rect x="1183.9" y="1043.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="1054.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.52%)</title><rect x="1183.9" y="1027.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="1038.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.52%)</title><rect x="1183.9" y="1011.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.52%)</title><rect x="1183.9" y="995.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.52%)</title><rect x="1183.9" y="979.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="990.0"></text>
</g>
</g>
</svg>
