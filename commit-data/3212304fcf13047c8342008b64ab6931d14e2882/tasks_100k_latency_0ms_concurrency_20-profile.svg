<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (186 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (37 samples, 19.89%)</title><rect x="10.0" y="1139.0" width="234.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.54%)</title><rect x="10.0" y="1123.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (36 samples, 19.35%)</title><rect x="16.3" y="1123.0" width="228.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1134.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.54%)</title><rect x="16.3" y="1107.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.54%)</title><rect x="16.3" y="1091.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.54%)</title><rect x="16.3" y="1075.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.54%)</title><rect x="16.3" y="1059.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.54%)</title><rect x="16.3" y="1043.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.54%)</title><rect x="16.3" y="1027.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.54%)</title><rect x="16.3" y="1011.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.54%)</title><rect x="16.3" y="995.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.54%)</title><rect x="16.3" y="979.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.54%)</title><rect x="16.3" y="963.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.54%)</title><rect x="16.3" y="947.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 1.08%)</title><rect x="22.7" y="1107.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 1.08%)</title><rect x="22.7" y="1091.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 1.08%)</title><rect x="22.7" y="1075.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 1.08%)</title><rect x="22.7" y="1059.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 1.08%)</title><rect x="22.7" y="1043.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 1.08%)</title><rect x="22.7" y="1027.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 1.08%)</title><rect x="22.7" y="1011.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.54%)</title><rect x="22.7" y="995.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.54%)</title><rect x="22.7" y="979.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.54%)</title><rect x="22.7" y="963.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$267/1837829228.test (1 samples, 0.54%)</title><rect x="22.7" y="947.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.7" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.54%)</title><rect x="29.0" y="995.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.54%)</title><rect x="29.0" y="979.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.getFence (1 samples, 0.54%)</title><rect x="29.0" y="963.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 12.90%)</title><rect x="35.4" y="1107.0" width="152.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.4" y="1118.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/574740033.accept (23 samples, 12.37%)</title><rect x="35.4" y="1091.0" width="145.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.4" y="1102.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (23 samples, 12.37%)</title><rect x="35.4" y="1075.0" width="145.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.4" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (15 samples, 8.06%)</title><rect x="35.4" y="1059.0" width="95.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.4" y="1070.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (15 samples, 8.06%)</title><rect x="35.4" y="1043.0" width="95.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.4" y="1054.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (15 samples, 8.06%)</title><rect x="35.4" y="1027.0" width="95.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.4" y="1038.0">com/linecor..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (15 samples, 8.06%)</title><rect x="35.4" y="1011.0" width="95.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.4" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 8.06%)</title><rect x="35.4" y="995.0" width="95.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.4" y="1006.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (15 samples, 8.06%)</title><rect x="35.4" y="979.0" width="95.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.4" y="990.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (2 samples, 1.08%)</title><rect x="48.1" y="963.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.30%)</title><rect x="60.8" y="963.0" width="50.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.8" y="974.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.54%)</title><rect x="60.8" y="947.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.54%)</title><rect x="60.8" y="931.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.54%)</title><rect x="60.8" y="915.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.54%)</title><rect x="67.1" y="947.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.54%)</title><rect x="67.1" y="931.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.23%)</title><rect x="73.4" y="947.0" width="38.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.4" y="958.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.23%)</title><rect x="73.4" y="931.0" width="38.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.4" y="942.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.69%)</title><rect x="79.8" y="915.0" width="31.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.8" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.69%)</title><rect x="79.8" y="899.0" width="31.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.8" y="910.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.69%)</title><rect x="79.8" y="883.0" width="31.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.8" y="894.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.69%)</title><rect x="79.8" y="867.0" width="31.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="82.8" y="878.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.69%)</title><rect x="79.8" y="851.0" width="31.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="82.8" y="862.0">__..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 1.61%)</title><rect x="111.5" y="963.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 1.61%)</title><rect x="111.5" y="947.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.61%)</title><rect x="111.5" y="931.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 1.61%)</title><rect x="111.5" y="915.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 1.61%)</title><rect x="111.5" y="899.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.54%)</title><rect x="117.8" y="883.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.54%)</title><rect x="124.2" y="883.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 1.08%)</title><rect x="130.5" y="1059.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 1.08%)</title><rect x="130.5" y="1043.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 3.23%)</title><rect x="143.2" y="1059.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.2" y="1070.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.15%)</title><rect x="143.2" y="1043.0" width="25.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.2" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.15%)</title><rect x="143.2" y="1027.0" width="25.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.2" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.54%)</title><rect x="162.3" y="1011.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.54%)</title><rect x="162.3" y="995.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.3" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.08%)</title><rect x="168.6" y="1043.0" width="12.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="171.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.54%)</title><rect x="181.3" y="1091.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.54%)</title><rect x="181.3" y="1075.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.54%)</title><rect x="181.3" y="1059.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.54%)</title><rect x="181.3" y="1043.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.54%)</title><rect x="181.3" y="1027.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.54%)</title><rect x="181.3" y="1011.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.84%)</title><rect x="187.6" y="1107.0" width="57.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.6" y="1118.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.84%)</title><rect x="187.6" y="1091.0" width="57.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.6" y="1102.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.15%)</title><rect x="187.6" y="1075.0" width="25.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.6" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.54%)</title><rect x="187.6" y="1059.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.6" y="1070.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.54%)</title><rect x="187.6" y="1043.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="190.6" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.54%)</title><rect x="187.6" y="1027.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="190.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.61%)</title><rect x="194.0" y="1059.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.54%)</title><rect x="194.0" y="1043.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.0" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.iterator (1 samples, 0.54%)</title><rect x="194.0" y="1027.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.08%)</title><rect x="200.3" y="1043.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.08%)</title><rect x="200.3" y="1027.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.08%)</title><rect x="200.3" y="1011.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.54%)</title><rect x="200.3" y="995.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.54%)</title><rect x="206.7" y="995.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.54%)</title><rect x="206.7" y="979.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.54%)</title><rect x="206.7" y="963.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.7" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.54%)</title><rect x="206.7" y="947.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.54%)</title><rect x="213.0" y="1075.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.54%)</title><rect x="213.0" y="1059.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.54%)</title><rect x="213.0" y="1043.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.54%)</title><rect x="213.0" y="1027.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.54%)</title><rect x="213.0" y="1011.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.54%)</title><rect x="213.0" y="995.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.54%)</title><rect x="219.4" y="1075.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.54%)</title><rect x="219.4" y="1059.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.54%)</title><rect x="219.4" y="1043.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.08%)</title><rect x="225.7" y="1075.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="225.7" y="1059.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.54%)</title><rect x="225.7" y="1043.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.54%)</title><rect x="225.7" y="1027.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.54%)</title><rect x="225.7" y="1011.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.54%)</title><rect x="225.7" y="995.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.54%)</title><rect x="225.7" y="979.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.54%)</title><rect x="225.7" y="963.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.54%)</title><rect x="232.0" y="1059.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.54%)</title><rect x="232.0" y="1043.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.54%)</title><rect x="232.0" y="1027.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.54%)</title><rect x="232.0" y="1011.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.54%)</title><rect x="232.0" y="995.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.54%)</title><rect x="232.0" y="979.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.54%)</title><rect x="232.0" y="963.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.54%)</title><rect x="232.0" y="947.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.54%)</title><rect x="232.0" y="931.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.54%)</title><rect x="232.0" y="915.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.54%)</title><rect x="232.0" y="899.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.54%)</title><rect x="232.0" y="883.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.54%)</title><rect x="232.0" y="867.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.54%)</title><rect x="232.0" y="851.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.54%)</title><rect x="232.0" y="835.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.54%)</title><rect x="238.4" y="1075.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.54%)</title><rect x="238.4" y="1059.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.54%)</title><rect x="238.4" y="1043.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.54%)</title><rect x="238.4" y="1027.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.4" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.54%)</title><rect x="238.4" y="1011.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.54%)</title><rect x="238.4" y="995.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.54%)</title><rect x="238.4" y="979.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.4" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.54%)</title><rect x="238.4" y="963.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.4" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (53 samples, 28.49%)</title><rect x="244.7" y="1139.0" width="336.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.7" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (53 samples, 28.49%)</title><rect x="244.7" y="1123.0" width="336.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.7" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (53 samples, 28.49%)</title><rect x="244.7" y="1107.0" width="336.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/643950722.run (29 samples, 15.59%)</title><rect x="244.7" y="1091.0" width="184.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.7" y="1102.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (29 samples, 15.59%)</title><rect x="244.7" y="1075.0" width="184.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.7" y="1086.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (29 samples, 15.59%)</title><rect x="244.7" y="1059.0" width="184.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.7" y="1070.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (29 samples, 15.59%)</title><rect x="244.7" y="1043.0" width="184.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.7" y="1054.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 4.30%)</title><rect x="244.7" y="1027.0" width="50.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.7" y="1038.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 4.30%)</title><rect x="244.7" y="1011.0" width="50.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.7" y="1022.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.30%)</title><rect x="244.7" y="995.0" width="50.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.7" y="1006.0">com/l..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="251.1" y="979.0" width="6.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="254.1" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="251.1" y="963.0" width="6.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="254.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 3.23%)</title><rect x="257.4" y="979.0" width="38.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.4" y="990.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 3.23%)</title><rect x="257.4" y="963.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.4" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 3.23%)</title><rect x="257.4" y="947.0" width="38.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.4" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.61%)</title><rect x="257.4" y="931.0" width="19.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.61%)</title><rect x="257.4" y="915.0" width="19.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.61%)</title><rect x="257.4" y="899.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.54%)</title><rect x="257.4" y="883.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.54%)</title><rect x="257.4" y="867.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.08%)</title><rect x="263.8" y="883.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.08%)</title><rect x="263.8" y="867.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 1.08%)</title><rect x="263.8" y="851.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 1.08%)</title><rect x="263.8" y="835.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (2 samples, 1.08%)</title><rect x="263.8" y="819.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (2 samples, 1.08%)</title><rect x="276.5" y="931.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.54%)</title><rect x="276.5" y="915.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.54%)</title><rect x="276.5" y="899.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.54%)</title><rect x="282.8" y="915.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.54%)</title><rect x="282.8" y="899.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.54%)</title><rect x="289.1" y="931.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.54%)</title><rect x="289.1" y="915.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.54%)</title><rect x="289.1" y="899.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.54%)</title><rect x="289.1" y="883.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.54%)</title><rect x="289.1" y="867.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 10.22%)</title><rect x="295.5" y="1027.0" width="120.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.5" y="1038.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.08%)</title><rect x="295.5" y="1011.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.5" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.08%)</title><rect x="295.5" y="995.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.5" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.08%)</title><rect x="295.5" y="979.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.5" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.54%)</title><rect x="295.5" y="963.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.54%)</title><rect x="295.5" y="947.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.54%)</title><rect x="295.5" y="931.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.54%)</title><rect x="295.5" y="915.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.5" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.54%)</title><rect x="301.8" y="963.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 4.84%)</title><rect x="308.2" y="1011.0" width="57.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.2" y="1022.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 4.84%)</title><rect x="308.2" y="995.0" width="57.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.2" y="1006.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.15%)</title><rect x="308.2" y="979.0" width="25.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.2" y="990.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.15%)</title><rect x="308.2" y="963.0" width="25.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.2" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.15%)</title><rect x="308.2" y="947.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.2" y="958.0">j..</text>
</g>
<g>
<title>SharedRuntime::resolve_static_call_C(JavaThread*) (1 samples, 0.54%)</title><rect x="314.5" y="931.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="317.5" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.54%)</title><rect x="314.5" y="915.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="317.5" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.54%)</title><rect x="314.5" y="899.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="317.5" y="910.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.54%)</title><rect x="314.5" y="883.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="317.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.08%)</title><rect x="320.9" y="931.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.9" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.54%)</title><rect x="327.2" y="915.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.2" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="327.2" y="899.0" width="6.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="330.2" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.69%)</title><rect x="333.5" y="979.0" width="31.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.5" y="990.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.69%)</title><rect x="333.5" y="963.0" width="31.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.5" y="974.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="333.5" y="947.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.54%)</title><rect x="333.5" y="931.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.54%)</title><rect x="333.5" y="915.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.5" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.15%)</title><rect x="339.9" y="947.0" width="25.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.9" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.61%)</title><rect x="346.2" y="931.0" width="19.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.54%)</title><rect x="358.9" y="915.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.54%)</title><rect x="358.9" y="899.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.15%)</title><rect x="365.3" y="1011.0" width="25.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.3" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.15%)</title><rect x="365.3" y="995.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.3" y="1006.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1709782537.process (3 samples, 1.61%)</title><rect x="365.3" y="979.0" width="19.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.61%)</title><rect x="365.3" y="963.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.08%)</title><rect x="365.3" y="947.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (2 samples, 1.08%)</title><rect x="365.3" y="931.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.54%)</title><rect x="378.0" y="947.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="378.0" y="931.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.54%)</title><rect x="378.0" y="915.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.54%)</title><rect x="378.0" y="899.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.54%)</title><rect x="384.3" y="979.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.54%)</title><rect x="384.3" y="963.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.54%)</title><rect x="390.6" y="1011.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.54%)</title><rect x="390.6" y="995.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.6" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="390.6" y="979.0" width="6.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="393.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="390.6" y="963.0" width="6.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="393.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.61%)</title><rect x="397.0" y="1011.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.61%)</title><rect x="397.0" y="995.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.54%)</title><rect x="409.7" y="979.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/873767396.accept (1 samples, 0.54%)</title><rect x="409.7" y="963.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.54%)</title><rect x="409.7" y="947.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.54%)</title><rect x="409.7" y="931.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.7" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.54%)</title><rect x="409.7" y="915.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.7" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.54%)</title><rect x="409.7" y="899.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.08%)</title><rect x="416.0" y="1027.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.08%)</title><rect x="416.0" y="1011.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.08%)</title><rect x="416.0" y="995.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/873767396.accept (2 samples, 1.08%)</title><rect x="416.0" y="979.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.08%)</title><rect x="416.0" y="963.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.08%)</title><rect x="416.0" y="947.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.0" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.08%)</title><rect x="416.0" y="931.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.0" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.08%)</title><rect x="416.0" y="915.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.54%)</title><rect x="428.7" y="1091.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.54%)</title><rect x="428.7" y="1075.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 12.37%)</title><rect x="435.1" y="1091.0" width="145.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.1" y="1102.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (23 samples, 12.37%)</title><rect x="435.1" y="1075.0" width="145.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.1" y="1086.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (17 samples, 9.14%)</title><rect x="447.7" y="1059.0" width="107.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.7" y="1070.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.61%)</title><rect x="447.7" y="1043.0" width="19.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.61%)</title><rect x="447.7" y="1027.0" width="19.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.61%)</title><rect x="447.7" y="1011.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.61%)</title><rect x="447.7" y="995.0" width="19.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 7.53%)</title><rect x="466.8" y="1043.0" width="88.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.8" y="1054.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (14 samples, 7.53%)</title><rect x="466.8" y="1027.0" width="88.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.8" y="1038.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (14 samples, 7.53%)</title><rect x="466.8" y="1011.0" width="88.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="469.8" y="1022.0">Unsafe_Park</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.54%)</title><rect x="473.1" y="995.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="476.1" y="1006.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.54%)</title><rect x="479.5" y="995.0" width="6.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="482.5" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.69%)</title><rect x="485.8" y="995.0" width="31.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="488.8" y="1006.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.69%)</title><rect x="517.5" y="995.0" width="31.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="520.5" y="1006.0">__..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.54%)</title><rect x="549.2" y="995.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 2.15%)</title><rect x="555.6" y="1059.0" width="25.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.6" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 2.15%)</title><rect x="555.6" y="1043.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="558.6" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 2.15%)</title><rect x="555.6" y="1027.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="558.6" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 2.15%)</title><rect x="555.6" y="1011.0" width="25.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="558.6" y="1022.0">j..</text>
</g>
<g>
<title>start_thread (96 samples, 51.61%)</title><rect x="581.0" y="1139.0" width="609.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="584.0" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (96 samples, 51.61%)</title><rect x="581.0" y="1123.0" width="609.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="584.0" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.53%)</title><rect x="581.0" y="1107.0" width="88.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="584.0" y="1118.0">GangWorker..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.54%)</title><rect x="581.0" y="1091.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="584.0" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.54%)</title><rect x="581.0" y="1075.0" width="6.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="584.0" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 6.99%)</title><rect x="587.3" y="1091.0" width="82.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="590.3" y="1102.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.76%)</title><rect x="587.3" y="1075.0" width="44.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.3" y="1086.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.08%)</title><rect x="587.3" y="1059.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.3" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.54%)</title><rect x="593.7" y="1043.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="596.7" y="1054.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.54%)</title><rect x="593.7" y="1027.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.7" y="1038.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.54%)</title><rect x="593.7" y="1011.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="596.7" y="1022.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.15%)</title><rect x="600.0" y="1059.0" width="25.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="603.0" y="1070.0">G..</text>
</g>
<g>
<title>SpinPause (1 samples, 0.54%)</title><rect x="625.4" y="1059.0" width="6.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="628.4" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 2.15%)</title><rect x="631.7" y="1075.0" width="25.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.7" y="1086.0">G..</text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 1.08%)</title><rect x="631.7" y="1059.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="634.7" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 1.08%)</title><rect x="631.7" y="1043.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.7" y="1054.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 1.08%)</title><rect x="631.7" y="1027.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="634.7" y="1038.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.54%)</title><rect x="638.1" y="1011.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="641.1" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.54%)</title><rect x="638.1" y="995.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="641.1" y="1006.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.54%)</title><rect x="638.1" y="979.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="641.1" y="990.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.54%)</title><rect x="638.1" y="963.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.1" y="974.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 1.08%)</title><rect x="644.4" y="1059.0" width="12.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="647.4" y="1070.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.54%)</title><rect x="650.8" y="1043.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="653.8" y="1054.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.54%)</title><rect x="650.8" y="1027.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="653.8" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.54%)</title><rect x="650.8" y="1011.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.8" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.08%)</title><rect x="657.1" y="1075.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="660.1" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.08%)</title><rect x="657.1" y="1059.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.1" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.54%)</title><rect x="657.1" y="1043.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.1" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.54%)</title><rect x="657.1" y="1027.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="660.1" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (1 samples, 0.54%)</title><rect x="657.1" y="1011.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.1" y="1022.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.54%)</title><rect x="657.1" y="995.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.1" y="1006.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.54%)</title><rect x="657.1" y="979.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.1" y="990.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.54%)</title><rect x="663.4" y="1043.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="666.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.54%)</title><rect x="663.4" y="1027.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="666.4" y="1038.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.54%)</title><rect x="663.4" y="1011.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="666.4" y="1022.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.54%)</title><rect x="663.4" y="995.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="666.4" y="1006.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.54%)</title><rect x="663.4" y="979.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.4" y="990.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.54%)</title><rect x="663.4" y="963.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="666.4" y="974.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.54%)</title><rect x="663.4" y="947.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="666.4" y="958.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.54%)</title><rect x="663.4" y="931.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="666.4" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (82 samples, 44.09%)</title><rect x="669.8" y="1107.0" width="520.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="672.8" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (82 samples, 44.09%)</title><rect x="669.8" y="1091.0" width="520.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="672.8" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (82 samples, 44.09%)</title><rect x="669.8" y="1075.0" width="520.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="672.8" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 41.94%)</title><rect x="669.8" y="1059.0" width="494.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="672.8" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 41.94%)</title><rect x="669.8" y="1043.0" width="494.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.8" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 21.51%)</title><rect x="669.8" y="1027.0" width="253.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="672.8" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.54%)</title><rect x="669.8" y="1011.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="672.8" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.54%)</title><rect x="669.8" y="995.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="672.8" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.08%)</title><rect x="676.1" y="1011.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="679.1" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.54%)</title><rect x="676.1" y="995.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.1" y="1006.0"></text>
</g>
<g>
<title>storeImmCM0_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.54%)</title><rect x="682.5" y="995.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="685.5" y="1006.0"></text>
</g>
<g>
<title>Address::make_raw(int, int, int, int, relocInfo::relocType) (1 samples, 0.54%)</title><rect x="682.5" y="979.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="685.5" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 3.76%)</title><rect x="688.8" y="1011.0" width="44.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="691.8" y="1022.0">Matc..</text>
</g>
<g>
<title>CallLeafNode::Opcode() const (1 samples, 0.54%)</title><rect x="688.8" y="995.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.8" y="1006.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.54%)</title><rect x="695.2" y="995.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="698.2" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.69%)</title><rect x="701.5" y="995.0" width="31.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="704.5" y="1006.0">Ma..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 2.15%)</title><rect x="707.8" y="979.0" width="25.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="710.8" y="990.0">M..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.54%)</title><rect x="714.2" y="963.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.2" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.54%)</title><rect x="720.5" y="963.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="723.5" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.54%)</title><rect x="720.5" y="947.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="723.5" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="720.5" y="931.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="723.5" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.54%)</title><rect x="720.5" y="915.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="723.5" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.54%)</title><rect x="726.9" y="963.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="729.9" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.54%)</title><rect x="726.9" y="947.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="729.9" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.54%)</title><rect x="726.9" y="931.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="729.9" y="942.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.54%)</title><rect x="726.9" y="915.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="729.9" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.15%)</title><rect x="733.2" y="1011.0" width="25.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.2" y="1022.0">P..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.54%)</title><rect x="733.2" y="995.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.61%)</title><rect x="739.6" y="995.0" width="19.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="742.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.54%)</title><rect x="739.6" y="979.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 1.08%)</title><rect x="745.9" y="979.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.9" y="990.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.54%)</title><rect x="752.3" y="963.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 13.98%)</title><rect x="758.6" y="1011.0" width="164.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.6" y="1022.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.54%)</title><rect x="764.9" y="995.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.61%)</title><rect x="771.3" y="995.0" width="19.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="774.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 2.15%)</title><rect x="790.3" y="995.0" width="25.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="793.3" y="1006.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.54%)</title><rect x="803.0" y="979.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="806.0" y="990.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.54%)</title><rect x="803.0" y="963.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="806.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.54%)</title><rect x="809.4" y="979.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.54%)</title><rect x="815.7" y="995.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="818.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.54%)</title><rect x="815.7" y="979.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="818.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.61%)</title><rect x="822.0" y="995.0" width="19.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.0" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 1.08%)</title><rect x="828.4" y="979.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.61%)</title><rect x="841.1" y="995.0" width="19.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.61%)</title><rect x="841.1" y="979.0" width="19.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="844.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.54%)</title><rect x="847.4" y="963.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.54%)</title><rect x="853.8" y="963.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.8" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 2.15%)</title><rect x="860.1" y="995.0" width="25.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="863.1" y="1006.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.08%)</title><rect x="872.8" y="979.0" width="12.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.8" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.15%)</title><rect x="885.5" y="995.0" width="25.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="888.5" y="1006.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 2.15%)</title><rect x="885.5" y="979.0" width="25.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.5" y="990.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 1.08%)</title><rect x="898.2" y="963.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.2" y="974.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.54%)</title><rect x="904.5" y="947.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="907.5" y="958.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.54%)</title><rect x="904.5" y="931.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="907.5" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.54%)</title><rect x="910.9" y="995.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="913.9" y="1006.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.54%)</title><rect x="917.2" y="995.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.2" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 16.13%)</title><rect x="923.5" y="1027.0" width="190.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.5" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 1.08%)</title><rect x="923.5" y="1011.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.54%)</title><rect x="929.9" y="995.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="932.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.54%)</title><rect x="929.9" y="979.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.54%)</title><rect x="929.9" y="963.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="932.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.54%)</title><rect x="929.9" y="947.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="932.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.54%)</title><rect x="936.2" y="1011.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.54%)</title><rect x="936.2" y="995.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="979.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="963.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="947.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="931.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="915.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="899.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="883.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="939.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="867.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="851.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="835.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="819.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="803.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="787.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="771.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="755.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="739.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="723.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="939.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="707.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="691.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="675.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="659.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="643.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="939.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="627.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="611.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="595.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="579.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="563.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="547.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="531.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="515.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="499.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="939.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="483.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="467.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="451.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="435.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="419.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="403.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="387.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="371.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="939.2" y="382.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.54%)</title><rect x="942.6" y="1011.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 1.08%)</title><rect x="948.9" y="1011.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 1.08%)</title><rect x="948.9" y="995.0" width="12.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.54%)</title><rect x="955.3" y="979.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 9.68%)</title><rect x="961.6" y="1011.0" width="114.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="964.6" y="1022.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="961.6" y="995.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.6" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="961.6" y="979.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.6" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="961.6" y="963.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="961.6" y="947.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.54%)</title><rect x="961.6" y="931.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.54%)</title><rect x="968.0" y="995.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.0" y="1006.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.54%)</title><rect x="968.0" y="979.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.08%)</title><rect x="974.3" y="995.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 6.99%)</title><rect x="987.0" y="995.0" width="82.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.0" y="1006.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 5.38%)</title><rect x="1006.0" y="979.0" width="63.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.0" y="990.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 4.30%)</title><rect x="1018.7" y="963.0" width="50.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.7" y="974.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 3.23%)</title><rect x="1031.4" y="947.0" width="38.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.4" y="958.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.54%)</title><rect x="1069.5" y="995.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.5" y="1006.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.54%)</title><rect x="1069.5" y="979.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.23%)</title><rect x="1075.8" y="1011.0" width="38.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.8" y="1022.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.23%)</title><rect x="1075.8" y="995.0" width="38.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.8" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.54%)</title><rect x="1075.8" y="979.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.8" y="990.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.54%)</title><rect x="1075.8" y="963.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 1.08%)</title><rect x="1082.2" y="979.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.2" y="990.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.54%)</title><rect x="1082.2" y="963.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.54%)</title><rect x="1088.5" y="963.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.5" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.08%)</title><rect x="1094.8" y="979.0" width="12.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.8" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.54%)</title><rect x="1094.8" y="963.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.54%)</title><rect x="1094.8" y="947.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.8" y="958.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.54%)</title><rect x="1094.8" y="931.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.8" y="942.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.54%)</title><rect x="1101.2" y="963.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.2" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1107.5" y="979.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.54%)</title><rect x="1107.5" y="963.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1107.5" y="947.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1107.5" y="931.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.5" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.54%)</title><rect x="1107.5" y="915.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.5" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="1107.5" y="899.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.30%)</title><rect x="1113.9" y="1027.0" width="50.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1038.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.30%)</title><rect x="1113.9" y="1011.0" width="50.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="1022.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.30%)</title><rect x="1113.9" y="995.0" width="50.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.9" y="1006.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.30%)</title><rect x="1113.9" y="979.0" width="50.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="990.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.30%)</title><rect x="1113.9" y="963.0" width="50.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="974.0">Parse..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.54%)</title><rect x="1113.9" y="947.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.9" y="958.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.54%)</title><rect x="1113.9" y="931.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.9" y="942.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.54%)</title><rect x="1113.9" y="915.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.9" y="926.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.54%)</title><rect x="1113.9" y="899.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.9" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.54%)</title><rect x="1113.9" y="883.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="894.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.54%)</title><rect x="1113.9" y="867.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="878.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.54%)</title><rect x="1113.9" y="851.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.23%)</title><rect x="1120.2" y="947.0" width="38.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.2" y="958.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1120.2" y="931.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.2" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1120.2" y="915.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.2" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1120.2" y="899.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.2" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1120.2" y="883.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1120.2" y="867.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.2" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1120.2" y="851.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.2" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1120.2" y="835.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.2" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1120.2" y="819.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.2" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.54%)</title><rect x="1120.2" y="803.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.2" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1120.2" y="787.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.69%)</title><rect x="1126.6" y="931.0" width="31.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.6" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.69%)</title><rect x="1126.6" y="915.0" width="31.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.6" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.69%)</title><rect x="1126.6" y="899.0" width="31.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.6" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.69%)</title><rect x="1126.6" y="883.0" width="31.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.69%)</title><rect x="1126.6" y="867.0" width="31.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.6" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.69%)</title><rect x="1126.6" y="851.0" width="31.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.6" y="862.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.15%)</title><rect x="1126.6" y="835.0" width="25.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.6" y="846.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.15%)</title><rect x="1126.6" y="819.0" width="25.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.6" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.15%)</title><rect x="1126.6" y="803.0" width="25.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="814.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.15%)</title><rect x="1126.6" y="787.0" width="25.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.15%)</title><rect x="1126.6" y="771.0" width="25.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.6" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.15%)</title><rect x="1126.6" y="755.0" width="25.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="766.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.15%)</title><rect x="1126.6" y="739.0" width="25.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="750.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.15%)</title><rect x="1126.6" y="723.0" width="25.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.6" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.15%)</title><rect x="1126.6" y="707.0" width="25.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.6" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.15%)</title><rect x="1126.6" y="691.0" width="25.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.6" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.15%)</title><rect x="1126.6" y="675.0" width="25.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.6" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.15%)</title><rect x="1126.6" y="659.0" width="25.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.6" y="670.0">P..</text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1126.6" y="643.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.6" y="654.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.54%)</title><rect x="1126.6" y="627.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.6" y="638.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_getClass() (1 samples, 0.54%)</title><rect x="1126.6" y="611.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.6" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.54%)</title><rect x="1126.6" y="595.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="606.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.54%)</title><rect x="1126.6" y="579.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.08%)</title><rect x="1132.9" y="643.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.08%)</title><rect x="1132.9" y="627.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.08%)</title><rect x="1132.9" y="611.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.08%)</title><rect x="1132.9" y="595.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.08%)</title><rect x="1132.9" y="579.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::round_double_result(ciMethod*) (1 samples, 0.54%)</title><rect x="1132.9" y="563.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1139.2" y="563.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.54%)</title><rect x="1139.2" y="547.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.2" y="558.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.54%)</title><rect x="1139.2" y="531.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.2" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="1139.2" y="515.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.2" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.54%)</title><rect x="1139.2" y="499.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.2" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="643.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="627.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="611.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="595.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="579.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="563.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.6" y="547.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="531.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="515.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="499.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="483.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="467.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.6" y="451.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="435.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="419.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="403.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="387.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="371.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.6" y="355.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="339.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="323.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="307.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="291.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="275.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.6" y="259.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.6" y="243.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.6" y="227.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.6" y="211.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.6" y="195.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.6" y="179.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.54%)</title><rect x="1145.6" y="163.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.54%)</title><rect x="1145.6" y="147.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.6" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.54%)</title><rect x="1145.6" y="131.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.6" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.54%)</title><rect x="1145.6" y="115.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1145.6" y="99.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.6" y="110.0"></text>
</g>
<g>
<title>SubLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1145.6" y="83.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="94.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.54%)</title><rect x="1145.6" y="67.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.6" y="78.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.54%)</title><rect x="1145.6" y="51.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.6" y="62.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.54%)</title><rect x="1145.6" y="35.0" width="6.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1148.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="835.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="819.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="803.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="787.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="771.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="755.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1151.9" y="739.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="723.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="707.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="691.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="675.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="659.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1151.9" y="643.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="627.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="611.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="595.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="579.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="563.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.54%)</title><rect x="1151.9" y="547.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.54%)</title><rect x="1151.9" y="531.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.54%)</title><rect x="1151.9" y="515.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.54%)</title><rect x="1151.9" y="499.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.54%)</title><rect x="1151.9" y="483.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.54%)</title><rect x="1151.9" y="467.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.54%)</title><rect x="1151.9" y="451.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_monitor_enter() (1 samples, 0.54%)</title><rect x="1158.3" y="947.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.54%)</title><rect x="1158.3" y="931.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.3" y="942.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.54%)</title><rect x="1158.3" y="915.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.3" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.61%)</title><rect x="1164.6" y="1059.0" width="19.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.61%)</title><rect x="1164.6" y="1043.0" width="19.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.61%)</title><rect x="1164.6" y="1027.0" width="19.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.61%)</title><rect x="1164.6" y="1011.0" width="19.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="1022.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.08%)</title><rect x="1164.6" y="995.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="1006.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.54%)</title><rect x="1164.6" y="979.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="990.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.54%)</title><rect x="1164.6" y="963.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.54%)</title><rect x="1164.6" y="947.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.54%)</title><rect x="1164.6" y="931.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.54%)</title><rect x="1164.6" y="915.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1164.6" y="899.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.54%)</title><rect x="1164.6" y="883.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.6" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1164.6" y="867.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="878.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.54%)</title><rect x="1164.6" y="851.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="862.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.54%)</title><rect x="1171.0" y="979.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="990.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.54%)</title><rect x="1171.0" y="963.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="974.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.54%)</title><rect x="1171.0" y="947.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.54%)</title><rect x="1177.3" y="995.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.54%)</title><rect x="1177.3" y="979.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="990.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.54%)</title><rect x="1177.3" y="963.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="974.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.54%)</title><rect x="1177.3" y="947.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="958.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.54%)</title><rect x="1177.3" y="931.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="942.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.54%)</title><rect x="1183.7" y="1059.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="1070.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.54%)</title><rect x="1183.7" y="1043.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.54%)</title><rect x="1183.7" y="1027.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="1038.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.54%)</title><rect x="1183.7" y="1011.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="1022.0"></text>
</g>
</g>
</svg>
