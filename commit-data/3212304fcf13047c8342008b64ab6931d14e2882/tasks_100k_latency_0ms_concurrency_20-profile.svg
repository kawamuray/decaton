<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (167 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.60%)</title><rect x="10.0" y="931.0" width="7.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 13.77%)</title><rect x="17.1" y="931.0" width="162.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.1" y="942.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 13.77%)</title><rect x="17.1" y="915.0" width="162.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.1" y="926.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.60%)</title><rect x="17.1" y="899.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 5.39%)</title><rect x="24.1" y="899.0" width="63.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.1" y="910.0">java/la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1802216064.accept (8 samples, 4.79%)</title><rect x="24.1" y="883.0" width="56.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.1" y="894.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (7 samples, 4.19%)</title><rect x="31.2" y="867.0" width="49.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.2" y="878.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.80%)</title><rect x="31.2" y="851.0" width="21.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.2" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.80%)</title><rect x="31.2" y="835.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.2" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.80%)</title><rect x="31.2" y="819.0" width="21.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.2" y="830.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.80%)</title><rect x="31.2" y="803.0" width="21.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.2" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.80%)</title><rect x="31.2" y="787.0" width="21.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.80%)</title><rect x="31.2" y="771.0" width="21.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.2" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (3 samples, 1.80%)</title><rect x="31.2" y="755.0" width="21.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.2" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.60%)</title><rect x="31.2" y="739.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.60%)</title><rect x="31.2" y="723.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.60%)</title><rect x="31.2" y="707.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.60%)</title><rect x="31.2" y="691.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.60%)</title><rect x="38.3" y="739.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.60%)</title><rect x="38.3" y="723.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.60%)</title><rect x="38.3" y="707.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.60%)</title><rect x="45.3" y="739.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.60%)</title><rect x="45.3" y="723.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.60%)</title><rect x="45.3" y="707.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.60%)</title><rect x="45.3" y="691.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.3" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.60%)</title><rect x="45.3" y="675.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.3" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.60%)</title><rect x="45.3" y="659.0" width="7.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="48.3" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.60%)</title><rect x="45.3" y="643.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="48.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 2.40%)</title><rect x="52.4" y="851.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.4" y="862.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.40%)</title><rect x="52.4" y="835.0" width="28.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.4" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.60%)</title><rect x="66.5" y="819.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.5" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.60%)</title><rect x="66.5" y="803.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.5" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.60%)</title><rect x="66.5" y="787.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.5" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="66.5" y="771.0" width="7.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="69.5" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="73.6" y="819.0" width="7.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="76.6" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.60%)</title><rect x="80.7" y="883.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="83.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 7.78%)</title><rect x="87.7" y="899.0" width="91.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.7" y="910.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 7.78%)</title><rect x="87.7" y="883.0" width="91.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.7" y="894.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.79%)</title><rect x="87.7" y="867.0" width="56.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.7" y="878.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 4.79%)</title><rect x="87.7" y="851.0" width="56.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.7" y="862.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (8 samples, 4.79%)</title><rect x="87.7" y="835.0" width="56.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.7" y="846.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 3.59%)</title><rect x="87.7" y="819.0" width="42.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.7" y="830.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 3.59%)</title><rect x="87.7" y="803.0" width="42.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.7" y="814.0">org/..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.60%)</title><rect x="87.7" y="787.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.60%)</title><rect x="94.8" y="787.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 2.40%)</title><rect x="101.9" y="787.0" width="28.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.9" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 2.40%)</title><rect x="101.9" y="771.0" width="28.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.9" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 2.40%)</title><rect x="101.9" y="755.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.9" y="766.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 2.40%)</title><rect x="101.9" y="739.0" width="28.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.9" y="750.0">ja..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 1.20%)</title><rect x="116.0" y="723.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 1.20%)</title><rect x="130.1" y="819.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 1.20%)</title><rect x="130.1" y="803.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.60%)</title><rect x="130.1" y="787.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.60%)</title><rect x="130.1" y="771.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.1" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.60%)</title><rect x="130.1" y="755.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.1" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.60%)</title><rect x="130.1" y="739.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.1" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.60%)</title><rect x="130.1" y="723.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="137.2" y="787.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="137.2" y="771.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.60%)</title><rect x="137.2" y="755.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.60%)</title><rect x="137.2" y="739.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.60%)</title><rect x="137.2" y="723.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.60%)</title><rect x="137.2" y="707.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="140.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.40%)</title><rect x="144.3" y="867.0" width="28.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.3" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.80%)</title><rect x="144.3" y="851.0" width="21.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="147.3" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.20%)</title><rect x="144.3" y="835.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.60%)</title><rect x="144.3" y="819.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.3" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.60%)</title><rect x="144.3" y="803.0" width="7.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="147.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.60%)</title><rect x="151.3" y="819.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.60%)</title><rect x="151.3" y="803.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.60%)</title><rect x="151.3" y="787.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.60%)</title><rect x="158.4" y="835.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.60%)</title><rect x="158.4" y="819.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.60%)</title><rect x="158.4" y="803.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.60%)</title><rect x="158.4" y="787.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.60%)</title><rect x="158.4" y="771.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.60%)</title><rect x="158.4" y="755.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.60%)</title><rect x="158.4" y="739.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.60%)</title><rect x="158.4" y="723.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.60%)</title><rect x="158.4" y="707.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.4" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.60%)</title><rect x="158.4" y="691.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.60%)</title><rect x="165.4" y="851.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.60%)</title><rect x="165.4" y="835.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.60%)</title><rect x="165.4" y="819.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.60%)</title><rect x="172.5" y="867.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.60%)</title><rect x="172.5" y="851.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (72 samples, 43.11%)</title><rect x="179.6" y="931.0" width="508.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.6" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (72 samples, 43.11%)</title><rect x="179.6" y="915.0" width="508.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.6" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (72 samples, 43.11%)</title><rect x="179.6" y="899.0" width="508.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.6" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1151207336.run (41 samples, 24.55%)</title><rect x="200.8" y="883.0" width="289.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.8" y="894.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (41 samples, 24.55%)</title><rect x="200.8" y="867.0" width="289.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.8" y="878.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (41 samples, 24.55%)</title><rect x="200.8" y="851.0" width="289.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.8" y="862.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (41 samples, 24.55%)</title><rect x="200.8" y="835.0" width="289.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.8" y="846.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 6.59%)</title><rect x="207.8" y="819.0" width="77.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.8" y="830.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 6.59%)</title><rect x="207.8" y="803.0" width="77.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.8" y="814.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 6.59%)</title><rect x="207.8" y="787.0" width="77.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.8" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 6.59%)</title><rect x="207.8" y="771.0" width="77.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.8" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 6.59%)</title><rect x="207.8" y="755.0" width="77.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.8" y="766.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 6.59%)</title><rect x="207.8" y="739.0" width="77.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.8" y="750.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.40%)</title><rect x="207.8" y="723.0" width="28.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.8" y="734.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="214.9" y="707.0" width="7.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="217.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.20%)</title><rect x="222.0" y="707.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.20%)</title><rect x="222.0" y="691.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.20%)</title><rect x="222.0" y="675.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.20%)</title><rect x="222.0" y="659.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.20%)</title><rect x="222.0" y="643.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.20%)</title><rect x="222.0" y="627.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.19%)</title><rect x="236.1" y="723.0" width="49.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.1" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.59%)</title><rect x="236.1" y="707.0" width="42.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.1" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.20%)</title><rect x="236.1" y="691.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.40%)</title><rect x="250.2" y="691.0" width="28.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.2" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.40%)</title><rect x="250.2" y="675.0" width="28.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.2" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.40%)</title><rect x="250.2" y="659.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.2" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.80%)</title><rect x="257.3" y="643.0" width="21.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.3" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 1.20%)</title><rect x="264.4" y="627.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 1.20%)</title><rect x="264.4" y="611.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.60%)</title><rect x="271.4" y="595.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.60%)</title><rect x="278.5" y="707.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (27 samples, 16.17%)</title><rect x="285.6" y="819.0" width="190.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.6" y="830.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.99%)</title><rect x="285.6" y="803.0" width="35.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.6" y="814.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.99%)</title><rect x="285.6" y="787.0" width="35.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.6" y="798.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.99%)</title><rect x="285.6" y="771.0" width="35.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.6" y="782.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.99%)</title><rect x="285.6" y="755.0" width="35.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.6" y="766.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.60%)</title><rect x="313.8" y="739.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.60%)</title><rect x="313.8" y="723.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.60%)</title><rect x="313.8" y="707.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="320.9" y="803.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.60%)</title><rect x="320.9" y="787.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.60%)</title><rect x="320.9" y="771.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 5.39%)</title><rect x="328.0" y="803.0" width="63.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.0" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 5.39%)</title><rect x="328.0" y="787.0" width="63.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.0" y="798.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.80%)</title><rect x="328.0" y="771.0" width="21.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.0" y="782.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.20%)</title><rect x="328.0" y="755.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.0" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.20%)</title><rect x="328.0" y="739.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.0" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.20%)</title><rect x="328.0" y="723.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.0" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.20%)</title><rect x="328.0" y="707.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.60%)</title><rect x="335.0" y="691.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="338.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.60%)</title><rect x="335.0" y="675.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="338.0" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.60%)</title><rect x="342.1" y="755.0" width="7.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="345.1" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.59%)</title><rect x="349.2" y="771.0" width="42.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.2" y="782.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.99%)</title><rect x="356.2" y="755.0" width="35.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="359.2" y="766.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.60%)</title><rect x="356.2" y="739.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="359.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.60%)</title><rect x="356.2" y="723.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="359.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.60%)</title><rect x="356.2" y="707.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.60%)</title><rect x="356.2" y="691.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.40%)</title><rect x="363.3" y="739.0" width="28.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.3" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.80%)</title><rect x="370.4" y="723.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.4" y="734.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.20%)</title><rect x="377.4" y="707.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.60%)</title><rect x="384.5" y="691.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (8 samples, 4.79%)</title><rect x="391.6" y="803.0" width="56.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.6" y="814.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (8 samples, 4.79%)</title><rect x="391.6" y="787.0" width="56.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.6" y="798.0">com/li..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.60%)</title><rect x="391.6" y="771.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="394.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="391.6" y="755.0" width="7.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="394.6" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.60%)</title><rect x="398.6" y="771.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/564617543.process (2 samples, 1.20%)</title><rect x="405.7" y="771.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.20%)</title><rect x="405.7" y="755.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.20%)</title><rect x="405.7" y="739.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 0.60%)</title><rect x="412.8" y="723.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="412.8" y="707.0" width="7.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="415.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.60%)</title><rect x="419.8" y="771.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.8" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.60%)</title><rect x="419.8" y="755.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.20%)</title><rect x="426.9" y="771.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="429.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.20%)</title><rect x="426.9" y="755.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.9" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 1.20%)</title><rect x="426.9" y="739.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="429.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.60%)</title><rect x="441.0" y="771.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.60%)</title><rect x="441.0" y="755.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.20%)</title><rect x="448.1" y="803.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="451.1" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.20%)</title><rect x="448.1" y="787.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.20%)</title><rect x="462.2" y="803.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.20%)</title><rect x="462.2" y="787.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.20%)</title><rect x="462.2" y="771.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="465.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$279/669562081.accept (2 samples, 1.20%)</title><rect x="462.2" y="755.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.20%)</title><rect x="462.2" y="739.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.2" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 1.20%)</title><rect x="462.2" y="723.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.2" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 1.20%)</title><rect x="462.2" y="707.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.60%)</title><rect x="476.3" y="819.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.60%)</title><rect x="476.3" y="803.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.60%)</title><rect x="476.3" y="787.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1274402527.accept (1 samples, 0.60%)</title><rect x="476.3" y="771.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.60%)</title><rect x="476.3" y="755.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$274/1163661424.complete (1 samples, 0.60%)</title><rect x="476.3" y="739.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="479.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.60%)</title><rect x="476.3" y="723.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.60%)</title><rect x="476.3" y="707.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.60%)</title><rect x="476.3" y="691.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.60%)</title><rect x="476.3" y="675.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.3" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.60%)</title><rect x="476.3" y="659.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="479.3" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.60%)</title><rect x="476.3" y="643.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="479.3" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.60%)</title><rect x="483.4" y="819.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="486.4" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.60%)</title><rect x="483.4" y="803.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="486.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.60%)</title><rect x="490.5" y="883.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (27 samples, 16.17%)</title><rect x="497.5" y="883.0" width="190.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.5" y="894.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (27 samples, 16.17%)</title><rect x="497.5" y="867.0" width="190.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.5" y="878.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.60%)</title><rect x="511.7" y="851.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="514.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 13.17%)</title><rect x="518.7" y="851.0" width="155.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.7" y="862.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 3.59%)</title><rect x="525.8" y="835.0" width="42.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.8" y="846.0">java..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.60%)</title><rect x="525.8" y="819.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="528.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.60%)</title><rect x="525.8" y="803.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="528.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.99%)</title><rect x="532.9" y="819.0" width="35.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="535.9" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.99%)</title><rect x="532.9" y="803.0" width="35.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.9" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.99%)</title><rect x="532.9" y="787.0" width="35.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.9" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 8.98%)</title><rect x="568.2" y="835.0" width="106.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.2" y="846.0">java/util/con..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (15 samples, 8.98%)</title><rect x="568.2" y="819.0" width="106.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.2" y="830.0">sun/misc/Unsa..</text>
</g>
<g>
<title>Unsafe_Park (14 samples, 8.38%)</title><rect x="575.3" y="803.0" width="98.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="578.3" y="814.0">Unsafe_Park</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.60%)</title><rect x="575.3" y="787.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.3" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.60%)</title><rect x="582.3" y="787.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="585.3" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.60%)</title><rect x="582.3" y="771.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="585.3" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.60%)</title><rect x="582.3" y="755.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="585.3" y="766.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.60%)</title><rect x="589.4" y="787.0" width="7.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="592.4" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.60%)</title><rect x="596.5" y="787.0" width="7.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="599.5" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (8 samples, 4.79%)</title><rect x="603.5" y="787.0" width="56.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="606.5" y="798.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.60%)</title><rect x="660.1" y="787.0" width="7.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="663.1" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.60%)</title><rect x="667.1" y="787.0" width="7.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="670.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.60%)</title><rect x="674.2" y="851.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.60%)</title><rect x="674.2" y="835.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="677.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.60%)</title><rect x="674.2" y="819.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.60%)</title><rect x="674.2" y="803.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.2" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.60%)</title><rect x="674.2" y="787.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="677.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.60%)</title><rect x="681.3" y="851.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.60%)</title><rect x="681.3" y="835.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.60%)</title><rect x="681.3" y="819.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.3" y="830.0"></text>
</g>
<g>
<title>start_thread (71 samples, 42.51%)</title><rect x="688.3" y="931.0" width="501.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="691.3" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (71 samples, 42.51%)</title><rect x="688.3" y="915.0" width="501.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="691.3" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 7.78%)</title><rect x="688.3" y="899.0" width="91.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="691.3" y="910.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.80%)</title><rect x="688.3" y="883.0" width="21.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="691.3" y="894.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.80%)</title><rect x="688.3" y="867.0" width="21.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="691.3" y="878.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.60%)</title><rect x="688.3" y="851.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="691.3" y="862.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.20%)</title><rect x="695.4" y="851.0" width="14.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="698.4" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 5.99%)</title><rect x="709.5" y="883.0" width="70.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="712.5" y="894.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.99%)</title><rect x="709.5" y="867.0" width="70.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="712.5" y="878.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.60%)</title><rect x="709.5" y="851.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="712.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.60%)</title><rect x="709.5" y="835.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="712.5" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.59%)</title><rect x="716.6" y="851.0" width="42.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="719.6" y="862.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.60%)</title><rect x="744.9" y="835.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="747.9" y="846.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.60%)</title><rect x="751.9" y="835.0" width="7.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="754.9" y="846.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.80%)</title><rect x="759.0" y="851.0" width="21.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="762.0" y="862.0">G..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 34.73%)</title><rect x="780.2" y="899.0" width="409.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.2" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 34.73%)</title><rect x="780.2" y="883.0" width="409.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.2" y="894.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (58 samples, 34.73%)</title><rect x="780.2" y="867.0" width="409.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.2" y="878.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (54 samples, 32.34%)</title><rect x="780.2" y="851.0" width="381.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.2" y="862.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (54 samples, 32.34%)</title><rect x="780.2" y="835.0" width="381.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.2" y="846.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (30 samples, 17.96%)</title><rect x="780.2" y="819.0" width="212.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.2" y="830.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.20%)</title><rect x="780.2" y="803.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.2" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.60%)</title><rect x="780.2" y="787.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="783.2" y="798.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.60%)</title><rect x="787.2" y="787.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="790.2" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.60%)</title><rect x="787.2" y="771.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.2" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.60%)</title><rect x="787.2" y="755.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="790.2" y="766.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.60%)</title><rect x="787.2" y="739.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.2" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.80%)</title><rect x="794.3" y="803.0" width="21.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="797.3" y="814.0">C..</text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 1.20%)</title><rect x="794.3" y="787.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.3" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (2 samples, 1.20%)</title><rect x="794.3" y="771.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.3" y="782.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.60%)</title><rect x="808.4" y="787.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="811.4" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.59%)</title><rect x="815.5" y="803.0" width="42.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="818.5" y="814.0">Matc..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 3.59%)</title><rect x="815.5" y="787.0" width="42.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.5" y="798.0">Matc..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.60%)</title><rect x="836.7" y="771.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.7" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.20%)</title><rect x="843.8" y="771.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.8" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.60%)</title><rect x="843.8" y="755.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.8" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.60%)</title><rect x="843.8" y="739.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.8" y="750.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.60%)</title><rect x="843.8" y="723.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="846.8" y="734.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.60%)</title><rect x="850.8" y="755.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="853.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 11.38%)</title><rect x="857.9" y="803.0" width="134.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.9" y="814.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.60%)</title><rect x="857.9" y="787.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.60%)</title><rect x="865.0" y="787.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.0" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.60%)</title><rect x="865.0" y="771.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="868.0" y="782.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.60%)</title><rect x="865.0" y="755.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="868.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.99%)</title><rect x="872.0" y="787.0" width="35.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.0" y="798.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.60%)</title><rect x="900.3" y="771.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.60%)</title><rect x="907.4" y="787.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.80%)</title><rect x="914.4" y="787.0" width="21.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.4" y="798.0">P..</text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.60%)</title><rect x="921.5" y="771.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.5" y="782.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.60%)</title><rect x="928.6" y="771.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.60%)</title><rect x="935.6" y="787.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.60%)</title><rect x="935.6" y="771.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.6" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.60%)</title><rect x="942.7" y="787.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="945.7" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.60%)</title><rect x="942.7" y="771.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.60%)</title><rect x="949.8" y="787.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.8" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.40%)</title><rect x="956.8" y="787.0" width="28.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.8" y="798.0">Ph..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.60%)</title><rect x="978.0" y="771.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.0" y="782.0"></text>
</g>
<g>
<title>free (1 samples, 0.60%)</title><rect x="985.1" y="787.0" width="7.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="988.1" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 9.58%)</title><rect x="992.2" y="819.0" width="113.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.2" y="830.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 1.20%)</title><rect x="992.2" y="803.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.60%)</title><rect x="999.2" y="787.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="999.2" y="771.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.2" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="999.2" y="755.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.2" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.60%)</title><rect x="999.2" y="739.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.2" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="723.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.2" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="707.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.2" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="691.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="675.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1002.2" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="659.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.2" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="643.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.2" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="627.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.2" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="611.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1002.2" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="595.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.2" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="579.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.2" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="563.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="547.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.2" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.60%)</title><rect x="999.2" y="531.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.2" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.60%)</title><rect x="999.2" y="515.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.60%)</title><rect x="1006.3" y="803.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.3" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.60%)</title><rect x="1006.3" y="787.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.3" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.60%)</title><rect x="1006.3" y="771.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.3" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.60%)</title><rect x="1006.3" y="755.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.3" y="766.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.60%)</title><rect x="1006.3" y="739.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.3" y="750.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.60%)</title><rect x="1006.3" y="723.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.3" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.60%)</title><rect x="1013.4" y="803.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 5.99%)</title><rect x="1020.4" y="803.0" width="70.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.4" y="814.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.20%)</title><rect x="1020.4" y="787.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1023.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.60%)</title><rect x="1027.5" y="771.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.5" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.60%)</title><rect x="1027.5" y="755.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.40%)</title><rect x="1034.6" y="787.0" width="28.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.6" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.80%)</title><rect x="1041.6" y="771.0" width="21.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.6" y="782.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.80%)</title><rect x="1041.6" y="755.0" width="21.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.6" y="766.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.60%)</title><rect x="1055.7" y="739.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.60%)</title><rect x="1055.7" y="723.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.20%)</title><rect x="1062.8" y="787.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.60%)</title><rect x="1069.9" y="771.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.20%)</title><rect x="1076.9" y="787.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.9" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.60%)</title><rect x="1076.9" y="771.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.60%)</title><rect x="1084.0" y="771.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.0" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1084.0" y="755.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.0" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.60%)</title><rect x="1084.0" y="739.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.0" y="750.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.60%)</title><rect x="1084.0" y="723.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.20%)</title><rect x="1091.1" y="803.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.20%)</title><rect x="1091.1" y="787.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.60%)</title><rect x="1091.1" y="771.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.1" y="782.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.60%)</title><rect x="1098.1" y="771.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.19%)</title><rect x="1105.2" y="819.0" width="49.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.2" y="830.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.19%)</title><rect x="1105.2" y="803.0" width="49.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.2" y="814.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.19%)</title><rect x="1105.2" y="787.0" width="49.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="798.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.19%)</title><rect x="1105.2" y="771.0" width="49.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="782.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.59%)</title><rect x="1112.3" y="755.0" width="42.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.3" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.59%)</title><rect x="1112.3" y="739.0" width="42.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.3" y="750.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1112.3" y="723.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.3" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1112.3" y="707.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.3" y="718.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1112.3" y="691.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.3" y="702.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.60%)</title><rect x="1112.3" y="675.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.3" y="686.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.60%)</title><rect x="1112.3" y="659.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.3" y="670.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.60%)</title><rect x="1112.3" y="643.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.40%)</title><rect x="1119.3" y="723.0" width="28.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.3" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.40%)</title><rect x="1119.3" y="707.0" width="28.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.3" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.40%)</title><rect x="1119.3" y="691.0" width="28.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.3" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.40%)</title><rect x="1119.3" y="675.0" width="28.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.3" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.40%)</title><rect x="1119.3" y="659.0" width="28.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.3" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.40%)</title><rect x="1119.3" y="643.0" width="28.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.3" y="654.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1119.3" y="627.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.3" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1119.3" y="611.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.3" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="1119.3" y="595.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.60%)</title><rect x="1119.3" y="579.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.60%)</title><rect x="1119.3" y="563.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1119.3" y="547.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.60%)</title><rect x="1119.3" y="531.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.60%)</title><rect x="1119.3" y="515.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.60%)</title><rect x="1119.3" y="499.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.3" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.60%)</title><rect x="1119.3" y="483.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1119.3" y="467.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.3" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.60%)</title><rect x="1119.3" y="451.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.80%)</title><rect x="1126.4" y="627.0" width="21.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.4" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.80%)</title><rect x="1126.4" y="611.0" width="21.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.4" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.80%)</title><rect x="1126.4" y="595.0" width="21.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.4" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.80%)</title><rect x="1126.4" y="579.0" width="21.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.4" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.80%)</title><rect x="1126.4" y="563.0" width="21.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.4" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.80%)</title><rect x="1126.4" y="547.0" width="21.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.4" y="558.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.80%)</title><rect x="1126.4" y="531.0" width="21.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="542.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.80%)</title><rect x="1126.4" y="515.0" width="21.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.4" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.80%)</title><rect x="1126.4" y="499.0" width="21.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.80%)</title><rect x="1126.4" y="483.0" width="21.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.4" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.80%)</title><rect x="1126.4" y="467.0" width="21.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.80%)</title><rect x="1126.4" y="451.0" width="21.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.4" y="462.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.60%)</title><rect x="1126.4" y="435.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.4" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.60%)</title><rect x="1126.4" y="419.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.4" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.60%)</title><rect x="1126.4" y="403.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.4" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.60%)</title><rect x="1126.4" y="387.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.4" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.60%)</title><rect x="1126.4" y="371.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.4" y="382.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.60%)</title><rect x="1126.4" y="355.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="366.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.60%)</title><rect x="1126.4" y="339.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1133.5" y="435.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1133.5" y="419.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1133.5" y="403.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1133.5" y="387.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1133.5" y="371.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1133.5" y="355.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1133.5" y="339.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1133.5" y="323.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1133.5" y="307.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1133.5" y="291.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1133.5" y="275.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1133.5" y="259.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1133.5" y="243.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1133.5" y="227.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.20%)</title><rect x="1133.5" y="211.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.20%)</title><rect x="1133.5" y="195.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.20%)</title><rect x="1133.5" y="179.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.20%)</title><rect x="1133.5" y="163.0" width="14.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.20%)</title><rect x="1133.5" y="147.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.20%)</title><rect x="1133.5" y="131.0" width="14.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1133.5" y="115.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1133.5" y="99.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1133.5" y="83.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1133.5" y="67.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1133.5" y="51.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.5" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1133.5" y="35.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.60%)</title><rect x="1140.5" y="115.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.5" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.60%)</title><rect x="1140.5" y="99.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.5" y="110.0"></text>
</g>
<g>
<title>MulNode::Ideal(PhaseGVN*, bool) (1 samples, 0.60%)</title><rect x="1140.5" y="83.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.5" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1147.6" y="723.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.60%)</title><rect x="1147.6" y="707.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.60%)</title><rect x="1147.6" y="691.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.60%)</title><rect x="1147.6" y="675.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.60%)</title><rect x="1147.6" y="659.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.60%)</title><rect x="1147.6" y="643.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.60%)</title><rect x="1147.6" y="627.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.60%)</title><rect x="1147.6" y="611.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.6" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.60%)</title><rect x="1147.6" y="595.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.6" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.60%)</title><rect x="1147.6" y="579.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.6" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.60%)</title><rect x="1154.7" y="819.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="830.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.60%)</title><rect x="1154.7" y="803.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.7" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 2.40%)</title><rect x="1161.7" y="851.0" width="28.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.7" y="862.0">Co..</text>
</g>
<g>
<title>CodeBuffer::CodeBuffer(CodeBlob*) (1 samples, 0.60%)</title><rect x="1161.7" y="835.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.80%)</title><rect x="1168.8" y="835.0" width="21.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.8" y="846.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.80%)</title><rect x="1168.8" y="819.0" width="21.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.8" y="830.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.20%)</title><rect x="1168.8" y="803.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.8" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.60%)</title><rect x="1168.8" y="787.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.60%)</title><rect x="1168.8" y="771.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.8" y="782.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.60%)</title><rect x="1168.8" y="755.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.8" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.60%)</title><rect x="1168.8" y="739.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.60%)</title><rect x="1168.8" y="723.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.8" y="734.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.60%)</title><rect x="1168.8" y="707.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.8" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.60%)</title><rect x="1175.9" y="787.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.60%)</title><rect x="1175.9" y="771.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.60%)</title><rect x="1175.9" y="755.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.60%)</title><rect x="1175.9" y="739.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.60%)</title><rect x="1182.9" y="803.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.60%)</title><rect x="1182.9" y="787.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.60%)</title><rect x="1182.9" y="771.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.60%)</title><rect x="1182.9" y="755.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
</g>
</svg>
