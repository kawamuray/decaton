<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,433 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="2035.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="2019.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="2003.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1987.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1971.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1939.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1779.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1763.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1747.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1715.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1699.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1667.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1651.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1635.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1619.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1603.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1587.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1571.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1555.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1539.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1523.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1507.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1491.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1475.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1459.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1443.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1427.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1411.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1395.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1363.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1347.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1331.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1315.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1283.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1267.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1219.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1107.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1059.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1011.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="995.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="979.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="931.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="915.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="883.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="851.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="819.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="803.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="787.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="723.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="707.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="675.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="643.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="627.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="611.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="579.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="563.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="547.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="531.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="515.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="499.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="483.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="467.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="451.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="435.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="419.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="403.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="387.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="371.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="355.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="339.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="323.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="307.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="291.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="275.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="243.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="227.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="211.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="195.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="179.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="163.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="147.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="131.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="115.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="99.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="83.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="67.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="51.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.8" y="35.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.8" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (270 samples, 18.84%)</title><rect x="11.6" y="2035.0" width="222.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.6" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (270 samples, 18.84%)</title><rect x="11.6" y="2019.0" width="222.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.6" y="2030.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.42%)</title><rect x="12.5" y="2003.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.5" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.42%)</title><rect x="12.5" y="1987.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/699474138.accept (6 samples, 0.42%)</title><rect x="12.5" y="1971.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.5" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.42%)</title><rect x="12.5" y="1955.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.35%)</title><rect x="13.3" y="1939.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.28%)</title><rect x="14.1" y="1923.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.35%)</title><rect x="17.4" y="2003.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.35%)</title><rect x="17.4" y="1987.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.4" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.07%)</title><rect x="17.4" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.28%)</title><rect x="18.2" y="1971.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.28%)</title><rect x="18.2" y="1955.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.28%)</title><rect x="18.2" y="1939.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.21%)</title><rect x="18.2" y="1923.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.21%)</title><rect x="18.2" y="1907.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="18.2" y="1891.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="18.2" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="18.2" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/1746406231.test (1 samples, 0.07%)</title><rect x="18.2" y="1843.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$64 (1 samples, 0.07%)</title><rect x="18.2" y="1827.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.07%)</title><rect x="18.2" y="1811.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.07%)</title><rect x="18.2" y="1795.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="19.1" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="19.9" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="19.9" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="19.9" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="19.9" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/895331028.get (1 samples, 0.07%)</title><rect x="19.9" y="1827.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="20.7" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="20.7" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (4 samples, 0.28%)</title><rect x="21.5" y="2003.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (4 samples, 0.28%)</title><rect x="21.5" y="1987.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.5" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="22.4" y="1971.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.21%)</title><rect x="22.4" y="1955.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="25.4" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="23.2" y="1939.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="23.2" y="1923.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="23.2" y="1907.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="23.2" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="23.2" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="23.2" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$267/770514484.test (1 samples, 0.07%)</title><rect x="23.2" y="1843.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="24.0" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="24.0" y="1875.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="24.0" y="1859.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="24.0" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/895331028.get (1 samples, 0.07%)</title><rect x="24.0" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (193 samples, 13.47%)</title><rect x="24.8" y="2003.0" width="158.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.8" y="2014.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1314265891.accept (182 samples, 12.70%)</title><rect x="24.8" y="1987.0" width="149.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.8" y="1998.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (182 samples, 12.70%)</title><rect x="24.8" y="1971.0" width="149.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.8" y="1982.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (135 samples, 9.42%)</title><rect x="24.8" y="1955.0" width="111.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.8" y="1966.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (135 samples, 9.42%)</title><rect x="24.8" y="1939.0" width="111.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.8" y="1950.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (135 samples, 9.42%)</title><rect x="24.8" y="1923.0" width="111.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.8" y="1934.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (135 samples, 9.42%)</title><rect x="24.8" y="1907.0" width="111.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.8" y="1918.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (123 samples, 8.58%)</title><rect x="34.7" y="1891.0" width="101.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.7" y="1902.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (118 samples, 8.23%)</title><rect x="38.8" y="1875.0" width="97.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.8" y="1886.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 6.63%)</title><rect x="40.5" y="1859.0" width="78.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.5" y="1870.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 6.63%)</title><rect x="40.5" y="1843.0" width="78.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.5" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 6.63%)</title><rect x="40.5" y="1827.0" width="78.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.5" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 6.63%)</title><rect x="40.5" y="1811.0" width="78.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.5" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 6.63%)</title><rect x="40.5" y="1795.0" width="78.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.5" y="1806.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 4.75%)</title><rect x="62.7" y="1779.0" width="56.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.7" y="1790.0">sun/m..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="63.5" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="66.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 4.33%)</title><rect x="64.3" y="1763.0" width="51.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="67.3" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.21%)</title><rect x="66.8" y="1747.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="69.8" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="69.3" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="72.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 2.37%)</title><rect x="70.1" y="1747.0" width="28.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="73.1" y="1758.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="98.1" y="1747.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.1" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.33%)</title><rect x="99.8" y="1747.0" width="15.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="102.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="115.4" y="1763.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="118.4" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="116.2" y="1763.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="119.2" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="117.9" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="120.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.47%)</title><rect x="118.7" y="1859.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.47%)</title><rect x="118.7" y="1843.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.47%)</title><rect x="118.7" y="1827.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.47%)</title><rect x="118.7" y="1811.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.14%)</title><rect x="136.0" y="1955.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.14%)</title><rect x="136.0" y="1939.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.0" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="136.8" y="1923.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="139.8" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="136.8" y="1907.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="139.8" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="136.8" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="139.8" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="136.8" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="139.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.35%)</title><rect x="137.6" y="1955.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="140.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.35%)</title><rect x="137.6" y="1939.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="140.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.35%)</title><rect x="137.6" y="1923.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (40 samples, 2.79%)</title><rect x="141.8" y="1955.0" width="32.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.8" y="1966.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.14%)</title><rect x="141.8" y="1939.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="144.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.51%)</title><rect x="143.4" y="1939.0" width="29.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.4" y="1950.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 0.98%)</title><rect x="159.9" y="1923.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.9" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.56%)</title><rect x="163.2" y="1907.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.56%)</title><rect x="163.2" y="1891.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.56%)</title><rect x="163.2" y="1875.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.2" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="167.3" y="1859.0" width="2.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="170.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="169.7" y="1907.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="172.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="170.6" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.6" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="171.4" y="1923.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="174.4" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="172.2" y="1923.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="175.2" y="1934.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="173.0" y="1939.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="176.0" y="1950.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="173.9" y="1939.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="176.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="174.7" y="1987.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.7" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.07%)</title><rect x="174.7" y="1971.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="177.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.56%)</title><rect x="175.5" y="1987.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.49%)</title><rect x="176.3" y="1971.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.49%)</title><rect x="176.3" y="1955.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.49%)</title><rect x="176.3" y="1939.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (7 samples, 0.49%)</title><rect x="176.3" y="1923.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (7 samples, 0.49%)</title><rect x="176.3" y="1907.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.14%)</title><rect x="182.1" y="1987.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="182.9" y="1971.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="185.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="182.9" y="1955.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="182.9" y="1939.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="182.9" y="1923.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="182.9" y="1907.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="185.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="182.9" y="1891.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.26%)</title><rect x="183.7" y="2003.0" width="50.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.7" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.26%)</title><rect x="183.7" y="1987.0" width="50.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.7" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 2.58%)</title><rect x="185.4" y="1971.0" width="30.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.4" y="1982.0">or..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.07%)</title><rect x="185.4" y="1955.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 2.51%)</title><rect x="186.2" y="1955.0" width="29.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.2" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 2.51%)</title><rect x="186.2" y="1939.0" width="29.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.2" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.09%)</title><rect x="186.2" y="1923.0" width="24.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.2" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.09%)</title><rect x="186.2" y="1907.0" width="24.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.2" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.84%)</title><rect x="188.7" y="1891.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.49%)</title><rect x="188.7" y="1875.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.49%)</title><rect x="188.7" y="1859.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="191.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.49%)</title><rect x="188.7" y="1843.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.49%)</title><rect x="188.7" y="1827.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.49%)</title><rect x="188.7" y="1811.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.49%)</title><rect x="188.7" y="1795.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.49%)</title><rect x="188.7" y="1779.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.35%)</title><rect x="194.5" y="1875.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.35%)</title><rect x="194.5" y="1859.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (5 samples, 0.35%)</title><rect x="194.5" y="1843.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.05%)</title><rect x="198.6" y="1891.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="201.0" y="1875.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.77%)</title><rect x="201.9" y="1875.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.49%)</title><rect x="201.9" y="1859.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.9" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.49%)</title><rect x="201.9" y="1843.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.9" y="1854.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="205.2" y="1827.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="208.2" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="206.0" y="1827.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="209.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.28%)</title><rect x="207.6" y="1859.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.6" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.28%)</title><rect x="207.6" y="1843.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="210.9" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="210.9" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="210.9" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="210.9" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="210.9" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.07%)</title><rect x="210.9" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.21%)</title><rect x="211.7" y="1923.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.21%)</title><rect x="211.7" y="1907.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="211.7" y="1891.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="211.7" y="1875.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="211.7" y="1859.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.14%)</title><rect x="212.6" y="1843.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="213.4" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.07%)</title><rect x="213.4" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.14%)</title><rect x="214.2" y="1923.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$400 (1 samples, 0.07%)</title><rect x="214.2" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.position (1 samples, 0.07%)</title><rect x="214.2" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.07%)</title><rect x="214.2" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="215.0" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="215.0" y="1891.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.0" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="215.0" y="1875.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="215.0" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.42%)</title><rect x="215.9" y="1971.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.35%)</title><rect x="215.9" y="1955.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.21%)</title><rect x="215.9" y="1939.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="215.9" y="1923.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$224/1308801765.accept (1 samples, 0.07%)</title><rect x="216.7" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="216.7" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="216.7" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="216.7" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.7" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="216.7" y="1843.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="216.7" y="1827.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="217.5" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="217.5" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.5" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.07%)</title><rect x="217.5" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="218.3" y="1939.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="218.3" y="1923.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="218.3" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="218.3" y="1891.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="218.3" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="218.3" y="1859.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="218.3" y="1843.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="218.3" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="218.3" y="1811.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="218.3" y="1795.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.3" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="218.3" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.07%)</title><rect x="218.3" y="1763.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$238/98338706.test (1 samples, 0.07%)</title><rect x="218.3" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.07%)</title><rect x="218.3" y="1731.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2400 (1 samples, 0.07%)</title><rect x="218.3" y="1715.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.07%)</title><rect x="218.3" y="1699.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.3" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="219.2" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.2" y="1934.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="219.2" y="1907.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="219.2" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="219.2" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="220.0" y="1955.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="220.0" y="1939.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="220.0" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="220.8" y="1971.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.07%)</title><rect x="220.8" y="1955.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="220.8" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.07%)</title><rect x="220.8" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.35%)</title><rect x="221.6" y="1971.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.28%)</title><rect x="221.6" y="1955.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="221.6" y="1939.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.21%)</title><rect x="222.4" y="1939.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="222.4" y="1923.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.14%)</title><rect x="222.4" y="1907.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="222.4" y="1891.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.4" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="222.4" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="225.4" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="222.4" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="225.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="223.3" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="223.3" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="223.3" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="223.3" y="1827.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.3" y="1838.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.07%)</title><rect x="223.3" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="224.1" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.1" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="224.1" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.1" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="224.1" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.1" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="224.1" y="1875.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.1" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="224.1" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.1" y="1870.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="224.1" y="1843.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="227.1" y="1854.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="224.1" y="1827.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="227.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="224.9" y="1955.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="224.9" y="1939.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="224.9" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="224.9" y="1907.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="224.9" y="1891.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="224.9" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="224.9" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.07%)</title><rect x="224.9" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.42%)</title><rect x="225.7" y="1971.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="225.7" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="225.7" y="1939.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.07%)</title><rect x="225.7" y="1923.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.07%)</title><rect x="225.7" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$100 (1 samples, 0.07%)</title><rect x="226.6" y="1955.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.maybeUpdateAssignment (1 samples, 0.07%)</title><rect x="226.6" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignmentId (1 samples, 0.07%)</title><rect x="226.6" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.28%)</title><rect x="227.4" y="1955.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="227.4" y="1939.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$255/527687506.accept (1 samples, 0.07%)</title><rect x="227.4" y="1923.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="227.4" y="1907.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="227.4" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.07%)</title><rect x="227.4" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$226/1632714053.apply (1 samples, 0.07%)</title><rect x="227.4" y="1859.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.07%)</title><rect x="227.4" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.4" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="228.2" y="1939.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="228.2" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.07%)</title><rect x="228.2" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.14%)</title><rect x="229.0" y="1939.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="229.0" y="1923.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="229.0" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="229.0" y="1891.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="229.0" y="1875.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="229.0" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="229.0" y="1843.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="229.0" y="1827.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="229.0" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.0" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="229.0" y="1795.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="229.9" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="1918.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.07%)</title><rect x="229.9" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.9" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="229.9" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.14%)</title><rect x="230.7" y="1971.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="230.7" y="1955.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.5" y="1939.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.5" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="231.5" y="1923.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="234.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="231.5" y="1907.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="234.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.14%)</title><rect x="232.3" y="1971.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="232.3" y="1955.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="232.3" y="1939.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="232.3" y="1923.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="232.3" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="232.3" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="233.2" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="233.2" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.07%)</title><rect x="233.2" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (702 samples, 48.99%)</title><rect x="234.0" y="2035.0" width="578.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.0" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (702 samples, 48.99%)</title><rect x="234.0" y="2019.0" width="578.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.0" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (702 samples, 48.99%)</title><rect x="234.0" y="2003.0" width="578.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.0" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/777643363.run (469 samples, 32.73%)</title><rect x="237.3" y="1987.0" width="386.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.3" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (469 samples, 32.73%)</title><rect x="237.3" y="1971.0" width="386.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.3" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (469 samples, 32.73%)</title><rect x="237.3" y="1955.0" width="386.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.3" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (464 samples, 32.38%)</title><rect x="237.3" y="1939.0" width="382.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.3" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (158 samples, 11.03%)</title><rect x="245.5" y="1923.0" width="130.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.5" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (158 samples, 11.03%)</title><rect x="245.5" y="1907.0" width="130.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.5" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (158 samples, 11.03%)</title><rect x="245.5" y="1891.0" width="130.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.5" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (158 samples, 11.03%)</title><rect x="245.5" y="1875.0" width="130.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.5" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (158 samples, 11.03%)</title><rect x="245.5" y="1859.0" width="130.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.5" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (158 samples, 11.03%)</title><rect x="245.5" y="1843.0" width="130.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.5" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 3.63%)</title><rect x="245.5" y="1827.0" width="42.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.5" y="1838.0">com/..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="260.3" y="1811.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="263.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.14%)</title><rect x="260.3" y="1795.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="263.3" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="262.0" y="1811.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="265.0" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.63%)</title><rect x="262.8" y="1811.0" width="7.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="265.8" y="1822.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.56%)</title><rect x="263.6" y="1795.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="266.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.42%)</title><rect x="270.2" y="1811.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.42%)</title><rect x="270.2" y="1795.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="271.0" y="1779.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.0" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="271.0" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="274.0" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="271.0" y="1747.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="274.0" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="271.0" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="274.0" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="271.0" y="1715.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="274.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.28%)</title><rect x="271.9" y="1779.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.28%)</title><rect x="271.9" y="1763.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.28%)</title><rect x="271.9" y="1747.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.9" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.28%)</title><rect x="271.9" y="1731.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (16 samples, 1.12%)</title><rect x="275.2" y="1811.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.21%)</title><rect x="285.9" y="1795.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="285.9" y="1779.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="288.9" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="285.9" y="1763.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="288.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="285.9" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="288.9" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="285.9" y="1731.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="288.9" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="285.9" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="288.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.07%)</title><rect x="286.7" y="1779.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="286.7" y="1763.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="287.5" y="1779.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="287.5" y="1763.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="287.5" y="1747.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.5" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="287.5" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="290.5" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="287.5" y="1715.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="290.5" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="287.5" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="290.5" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="287.5" y="1683.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="290.5" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="287.5" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="290.5" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="287.5" y="1651.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="290.5" y="1662.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="287.5" y="1635.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="290.5" y="1646.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="287.5" y="1619.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="290.5" y="1630.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="287.5" y="1603.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="290.5" y="1614.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="287.5" y="1587.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="290.5" y="1598.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="287.5" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="290.5" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (93 samples, 6.49%)</title><rect x="288.3" y="1827.0" width="76.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.3" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="289.1" y="1811.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.07%)</title><rect x="290.8" y="1811.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.21%)</title><rect x="291.6" y="1811.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="292.4" y="1795.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.56%)</title><rect x="294.1" y="1811.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.49%)</title><rect x="294.9" y="1795.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.35%)</title><rect x="295.7" y="1779.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.35%)</title><rect x="295.7" y="1763.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="298.2" y="1747.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="301.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="298.2" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="299.0" y="1747.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="299.9" y="1779.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.70%)</title><rect x="300.7" y="1811.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.7" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="303.1" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="306.1" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="303.1" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="306.1" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="303.1" y="1763.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="306.1" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="303.1" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="306.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.42%)</title><rect x="304.0" y="1795.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (62 samples, 4.33%)</title><rect x="308.9" y="1811.0" width="51.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.9" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.70%)</title><rect x="309.7" y="1795.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.42%)</title><rect x="309.7" y="1779.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.42%)</title><rect x="309.7" y="1763.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.42%)</title><rect x="309.7" y="1747.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.21%)</title><rect x="314.7" y="1779.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="317.1" y="1779.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="318.0" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 3.49%)</title><rect x="318.8" y="1795.0" width="41.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.8" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 3.49%)</title><rect x="318.8" y="1779.0" width="41.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.8" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 3.49%)</title><rect x="318.8" y="1763.0" width="41.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.8" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.19%)</title><rect x="327.0" y="1747.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.21%)</title><rect x="333.6" y="1731.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.21%)</title><rect x="333.6" y="1715.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.21%)</title><rect x="333.6" y="1699.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="336.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="334.4" y="1683.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.28%)</title><rect x="336.1" y="1731.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="339.4" y="1731.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="339.4" y="1715.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="340.2" y="1699.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="343.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 0.84%)</title><rect x="341.0" y="1747.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 0.84%)</title><rect x="341.0" y="1731.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 0.84%)</title><rect x="341.0" y="1715.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 0.84%)</title><rect x="341.0" y="1699.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.0" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 0.84%)</title><rect x="341.0" y="1683.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.0" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.56%)</title><rect x="343.5" y="1667.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="347.6" y="1651.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.6" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor19.newInstance (2 samples, 0.14%)</title><rect x="348.4" y="1651.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.4" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor19.newInstance (1 samples, 0.07%)</title><rect x="350.1" y="1667.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.1" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.49%)</title><rect x="350.9" y="1747.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.9" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.49%)</title><rect x="350.9" y="1731.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.9" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.49%)</title><rect x="350.9" y="1715.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.28%)</title><rect x="356.7" y="1747.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (4 samples, 0.28%)</title><rect x="360.0" y="1811.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="363.3" y="1811.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 0.91%)</title><rect x="364.9" y="1827.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.9" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="364.9" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 0.84%)</title><rect x="365.7" y="1811.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 0.84%)</title><rect x="365.7" y="1795.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 0.84%)</title><rect x="365.7" y="1779.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 0.84%)</title><rect x="365.7" y="1763.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (281 samples, 19.61%)</title><rect x="375.6" y="1923.0" width="231.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.6" y="1934.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="376.4" y="1907.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.4" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="376.4" y="1891.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.4" y="1902.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="376.4" y="1875.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.4" y="1886.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="376.4" y="1859.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="376.4" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (2 samples, 0.14%)</title><rect x="377.3" y="1907.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="377.3" y="1891.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="380.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (52 samples, 3.63%)</title><rect x="378.9" y="1907.0" width="42.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.9" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 3.63%)</title><rect x="378.9" y="1891.0" width="42.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.9" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 3.56%)</title><rect x="379.7" y="1875.0" width="42.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.7" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 1.54%)</title><rect x="379.7" y="1859.0" width="18.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 0.91%)</title><rect x="387.1" y="1843.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 0.91%)</title><rect x="387.1" y="1827.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 0.91%)</title><rect x="387.1" y="1811.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="397.8" y="1859.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="397.8" y="1843.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="397.8" y="1827.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.14%)</title><rect x="397.8" y="1811.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 1.88%)</title><rect x="399.5" y="1859.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.5" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.40%)</title><rect x="405.3" y="1843.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="407.7" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.70%)</title><rect x="408.5" y="1827.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.70%)</title><rect x="408.5" y="1811.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.42%)</title><rect x="416.8" y="1827.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.70%)</title><rect x="421.7" y="1907.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.70%)</title><rect x="421.7" y="1891.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.7" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (10 samples, 0.70%)</title><rect x="421.7" y="1875.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (146 samples, 10.19%)</title><rect x="430.0" y="1907.0" width="120.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.0" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="430.0" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="433.0" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="430.0" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="433.0" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="430.0" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="433.0" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="430.0" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.0" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="430.0" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="433.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (145 samples, 10.12%)</title><rect x="430.8" y="1891.0" width="119.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.8" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 3.70%)</title><rect x="438.2" y="1875.0" width="43.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="441.2" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (38 samples, 2.65%)</title><rect x="442.3" y="1859.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.3" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 2.58%)</title><rect x="443.1" y="1843.0" width="30.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="446.1" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 1.47%)</title><rect x="450.5" y="1827.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 1.47%)</title><rect x="450.5" y="1811.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="453.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 1.47%)</title><rect x="450.5" y="1795.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.70%)</title><rect x="455.5" y="1779.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="458.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.14%)</title><rect x="455.5" y="1763.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="458.5" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="455.5" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="458.5" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="456.3" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.3" y="1758.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.56%)</title><rect x="457.1" y="1763.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="460.1" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="458.0" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="461.0" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.42%)</title><rect x="458.8" y="1747.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="461.8" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="458.8" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="458.8" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="461.8" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="458.8" y="1699.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="461.8" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="458.8" y="1683.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="461.8" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="458.8" y="1667.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.8" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.14%)</title><rect x="459.6" y="1731.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="462.6" y="1742.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="461.2" y="1731.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="464.2" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="462.1" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.1" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="462.9" y="1731.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="465.9" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.35%)</title><rect x="463.7" y="1779.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="466.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="467.8" y="1827.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.8" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="471.1" y="1827.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="474.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="473.6" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.6" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="473.6" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="476.6" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="473.6" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="476.6" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="474.4" y="1859.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="477.4" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.56%)</title><rect x="475.2" y="1859.0" width="6.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="478.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.35%)</title><rect x="481.8" y="1875.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.35%)</title><rect x="481.8" y="1859.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.35%)</title><rect x="481.8" y="1843.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="484.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.14%)</title><rect x="486.0" y="1875.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.14%)</title><rect x="486.0" y="1859.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.14%)</title><rect x="486.0" y="1843.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.14%)</title><rect x="486.0" y="1827.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="486.0" y="1811.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.0" y="1822.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 5.30%)</title><rect x="487.6" y="1875.0" width="62.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.6" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 5.23%)</title><rect x="488.4" y="1859.0" width="61.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.4" y="1870.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (29 samples, 2.02%)</title><rect x="488.4" y="1843.0" width="23.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.4" y="1854.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 1.05%)</title><rect x="500.0" y="1827.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (15 samples, 1.05%)</title><rect x="500.0" y="1811.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (15 samples, 1.05%)</title><rect x="500.0" y="1795.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="512.3" y="1843.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="512.3" y="1827.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="512.3" y="1811.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.21%)</title><rect x="512.3" y="1795.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.3" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (43 samples, 3.00%)</title><rect x="514.8" y="1843.0" width="35.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.8" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (39 samples, 2.72%)</title><rect x="518.1" y="1827.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="521.1" y="1838.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="521.4" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.28%)</title><rect x="522.2" y="1811.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.28%)</title><rect x="522.2" y="1795.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="525.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 2.09%)</title><rect x="525.5" y="1811.0" width="24.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.5" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.21%)</title><rect x="539.5" y="1795.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.70%)</title><rect x="541.9" y="1795.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="548.5" y="1779.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="551.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="548.5" y="1763.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="551.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="548.5" y="1747.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="551.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="548.5" y="1731.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="551.5" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.14%)</title><rect x="548.5" y="1715.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.5" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="549.4" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="552.4" y="1710.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used() const (1 samples, 0.07%)</title><rect x="549.4" y="1683.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="552.4" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 4.05%)</title><rect x="550.2" y="1907.0" width="47.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.2" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 4.05%)</title><rect x="550.2" y="1891.0" width="47.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.2" y="1902.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="551.8" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="554.8" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="551.8" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="554.8" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="551.8" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="554.8" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="551.8" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="554.8" y="1838.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="551.8" y="1811.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="554.8" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="551.8" y="1795.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="554.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (29 samples, 2.02%)</title><rect x="552.7" y="1875.0" width="23.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="555.7" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (28 samples, 1.95%)</title><rect x="553.5" y="1859.0" width="23.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.5" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 1.74%)</title><rect x="554.3" y="1843.0" width="20.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.3" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="555.1" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="558.1" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="555.1" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="558.1" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="555.1" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="558.1" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="555.1" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="558.1" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="555.1" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="558.1" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.07%)</title><rect x="555.1" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="558.1" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="555.9" y="1827.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="558.9" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="555.9" y="1811.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="558.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.14%)</title><rect x="555.9" y="1795.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.14%)</title><rect x="555.9" y="1779.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="556.8" y="1763.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (11 samples, 0.77%)</title><rect x="557.6" y="1827.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.6" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.49%)</title><rect x="560.9" y="1811.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="561.7" y="1795.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="564.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.14%)</title><rect x="566.7" y="1827.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.56%)</title><rect x="568.3" y="1827.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.14%)</title><rect x="574.9" y="1843.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="577.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="574.9" y="1827.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="574.9" y="1811.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="574.9" y="1795.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.35%)</title><rect x="576.5" y="1875.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="579.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.35%)</title><rect x="576.5" y="1859.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="579.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.42%)</title><rect x="580.6" y="1875.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.42%)</title><rect x="580.6" y="1859.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1943145019.get$Lambda (6 samples, 0.42%)</title><rect x="580.6" y="1843.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.6" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="580.6" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="583.6" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="580.6" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="583.6" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="580.6" y="1795.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="583.6" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="580.6" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="583.6" y="1790.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="580.6" y="1763.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="583.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1943145019.&lt;init&gt; (5 samples, 0.35%)</title><rect x="581.5" y="1827.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.5" y="1838.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="583.9" y="1811.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="586.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="583.9" y="1795.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="586.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="584.8" y="1811.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.21%)</title><rect x="585.6" y="1875.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="588.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="586.4" y="1859.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.4" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.07%)</title><rect x="587.2" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="590.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.42%)</title><rect x="588.1" y="1875.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.42%)</title><rect x="588.1" y="1859.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="591.1" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.28%)</title><rect x="588.1" y="1843.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="591.1" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.14%)</title><rect x="591.4" y="1843.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.42%)</title><rect x="593.0" y="1875.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="596.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="597.1" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="600.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.42%)</title><rect x="597.9" y="1907.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="600.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (4 samples, 0.28%)</title><rect x="597.9" y="1891.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.9" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="597.9" y="1875.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="600.9" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="597.9" y="1859.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="600.9" y="1870.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.07%)</title><rect x="600.4" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.4" y="1886.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.14%)</title><rect x="601.2" y="1891.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="604.2" y="1902.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.14%)</title><rect x="601.2" y="1875.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.2" y="1886.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (2 samples, 0.14%)</title><rect x="602.9" y="1907.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="605.9" y="1918.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (2 samples, 0.14%)</title><rect x="602.9" y="1891.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/842070074.linkToTargetMethod (2 samples, 0.14%)</title><rect x="602.9" y="1875.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="605.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/362920854.invokeStatic_D_L (2 samples, 0.14%)</title><rect x="602.9" y="1859.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.9" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$275/2042801740.get$Lambda (2 samples, 0.14%)</title><rect x="602.9" y="1843.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.21%)</title><rect x="604.5" y="1907.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.21%)</title><rect x="604.5" y="1891.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.21%)</title><rect x="604.5" y="1875.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/826676416.accept (2 samples, 0.14%)</title><rect x="604.5" y="1859.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (2 samples, 0.14%)</title><rect x="604.5" y="1843.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="607.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.14%)</title><rect x="604.5" y="1827.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.5" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.14%)</title><rect x="604.5" y="1811.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="607.5" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.14%)</title><rect x="604.5" y="1795.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.5" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="605.4" y="1779.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="608.4" y="1790.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="605.4" y="1763.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="608.4" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/657838270.accept (1 samples, 0.07%)</title><rect x="606.2" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.2" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="606.2" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.2" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="606.2" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="606.2" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="606.2" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.2" y="1806.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="606.2" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.70%)</title><rect x="607.0" y="1923.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.70%)</title><rect x="607.0" y="1907.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="607.0" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.63%)</title><rect x="607.8" y="1891.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="610.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/826676416.accept (9 samples, 0.63%)</title><rect x="607.8" y="1875.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (9 samples, 0.63%)</title><rect x="607.8" y="1859.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.63%)</title><rect x="607.8" y="1843.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.8" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.63%)</title><rect x="607.8" y="1827.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.63%)</title><rect x="607.8" y="1811.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="610.8" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.35%)</title><rect x="615.2" y="1923.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="615.2" y="1907.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="618.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.35%)</title><rect x="619.4" y="1939.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.4" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="619.4" y="1923.0" width="4.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="622.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="619.4" y="1907.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="622.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.70%)</title><rect x="623.5" y="1987.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.5" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.70%)</title><rect x="623.5" y="1971.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.70%)</title><rect x="623.5" y="1955.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.70%)</title><rect x="623.5" y="1939.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.5" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/777643363.run (2 samples, 0.14%)</title><rect x="630.1" y="1923.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="633.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 15.28%)</title><rect x="631.7" y="1987.0" width="180.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.7" y="1998.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (219 samples, 15.28%)</title><rect x="631.7" y="1971.0" width="180.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.7" y="1982.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (187 samples, 13.05%)</title><rect x="647.3" y="1955.0" width="154.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="650.3" y="1966.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 0.77%)</title><rect x="654.8" y="1939.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.77%)</title><rect x="654.8" y="1923.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.21%)</title><rect x="659.7" y="1907.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.21%)</title><rect x="659.7" y="1891.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="662.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="660.5" y="1875.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="662.2" y="1907.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.14%)</title><rect x="663.8" y="1939.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.14%)</title><rect x="663.8" y="1923.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (165 samples, 11.51%)</title><rect x="665.5" y="1939.0" width="135.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.5" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (165 samples, 11.51%)</title><rect x="665.5" y="1923.0" width="135.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.5" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="672.9" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="675.9" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.21%)</title><rect x="673.7" y="1907.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="676.7" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (143 samples, 9.98%)</title><rect x="676.2" y="1907.0" width="117.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="679.2" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="677.8" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="680.8" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (35 samples, 2.44%)</title><rect x="678.6" y="1891.0" width="28.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="681.6" y="1902.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.42%)</title><rect x="689.3" y="1875.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="692.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="691.0" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="694.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="691.8" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="694.8" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="692.6" y="1859.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="695.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="694.3" y="1875.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="697.3" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (14 samples, 0.98%)</title><rect x="695.9" y="1875.0" width="11.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="698.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.21%)</title><rect x="707.5" y="1891.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="710.5" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.56%)</title><rect x="709.9" y="1891.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="712.9" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (23 samples, 1.61%)</title><rect x="716.5" y="1891.0" width="19.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="719.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 3.42%)</title><rect x="735.5" y="1891.0" width="40.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="738.5" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.21%)</title><rect x="775.8" y="1891.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="778.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="778.3" y="1891.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="781.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="779.1" y="1891.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="782.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="779.9" y="1891.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="782.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.56%)</title><rect x="780.7" y="1891.0" width="6.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="783.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="787.3" y="1891.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="790.3" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="788.2" y="1891.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="791.2" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.35%)</title><rect x="789.0" y="1891.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.0" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="793.1" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="796.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="793.9" y="1907.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="796.9" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="795.6" y="1907.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="798.6" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.42%)</title><rect x="796.4" y="1907.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="799.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.91%)</title><rect x="801.3" y="1955.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.91%)</title><rect x="801.3" y="1939.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="804.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.91%)</title><rect x="801.3" y="1923.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.91%)</title><rect x="801.3" y="1907.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="812.0" y="2035.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.0" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="812.0" y="2019.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="815.0" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="812.0" y="2003.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.0" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="812.0" y="1987.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="812.0" y="1971.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="812.0" y="1955.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="815.0" y="1966.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="812.0" y="1939.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="815.0" y="1950.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="812.0" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.0" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="812.0" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="815.0" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="812.0" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="815.0" y="1902.0"></text>
</g>
<g>
<title>start_thread (458 samples, 31.96%)</title><rect x="812.9" y="2035.0" width="377.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="815.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (458 samples, 31.96%)</title><rect x="812.9" y="2019.0" width="377.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="815.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.40%)</title><rect x="812.9" y="2003.0" width="16.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="815.9" y="2014.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="812.9" y="1987.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.9" y="1998.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="812.9" y="1971.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="815.9" y="1982.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.28%)</title><rect x="813.7" y="1987.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.28%)</title><rect x="813.7" y="1971.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.7" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="813.7" y="1955.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="816.7" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="814.5" y="1955.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="817.5" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.05%)</title><rect x="817.0" y="1987.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="820.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.21%)</title><rect x="817.0" y="1971.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="820.0" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="817.0" y="1955.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="820.0" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="817.0" y="1939.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.0" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.07%)</title><rect x="817.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="820.0" y="1934.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="817.8" y="1955.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="820.8" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.35%)</title><rect x="819.4" y="1971.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="822.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.28%)</title><rect x="819.4" y="1955.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="822.4" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.28%)</title><rect x="819.4" y="1939.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="822.4" y="1950.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="822.7" y="1955.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.7" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="823.6" y="1971.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="826.6" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="823.6" y="1955.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="826.6" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.35%)</title><rect x="823.6" y="1939.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.6" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.35%)</title><rect x="823.6" y="1923.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="826.6" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.35%)</title><rect x="823.6" y="1907.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="826.6" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.35%)</title><rect x="823.6" y="1891.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.6" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.07%)</title><rect x="826.9" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="829.9" y="1886.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="826.9" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="829.9" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="826.9" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.9" y="1854.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="826.9" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="829.9" y="1838.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.14%)</title><rect x="827.7" y="1939.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.7" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.14%)</title><rect x="827.7" y="1923.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="830.7" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.14%)</title><rect x="827.7" y="1907.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="830.7" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="828.5" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="831.5" y="1902.0"></text>
</g>
<g>
<title>JavaThread::run() (435 samples, 30.36%)</title><rect x="829.3" y="2003.0" width="358.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.3" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (435 samples, 30.36%)</title><rect x="829.3" y="1987.0" width="358.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="832.3" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (434 samples, 30.29%)</title><rect x="829.3" y="1971.0" width="357.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="832.3" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (433 samples, 30.22%)</title><rect x="829.3" y="1955.0" width="356.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="832.3" y="1966.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (431 samples, 30.08%)</title><rect x="829.3" y="1939.0" width="354.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.3" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (431 samples, 30.08%)</title><rect x="829.3" y="1923.0" width="354.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.3" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (116 samples, 8.09%)</title><rect x="829.3" y="1907.0" width="95.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.3" y="1918.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.35%)</title><rect x="829.3" y="1891.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.3" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.21%)</title><rect x="829.3" y="1875.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="832.3" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="831.0" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="834.0" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="831.0" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="834.0" y="1854.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.14%)</title><rect x="831.8" y="1875.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="834.8" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.14%)</title><rect x="831.8" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="834.8" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.42%)</title><rect x="833.4" y="1891.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="836.4" y="1902.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="833.4" y="1875.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.4" y="1886.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;) (1 samples, 0.07%)</title><rect x="833.4" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.4" y="1870.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.14%)</title><rect x="834.3" y="1875.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="837.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="834.3" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="837.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="834.3" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="837.3" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="835.1" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="838.1" y="1870.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="835.1" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="838.1" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="835.9" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="838.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="835.9" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="838.9" y="1870.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.07%)</title><rect x="836.7" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.7" y="1886.0"></text>
</g>
<g>
<title>MachSpillCopyNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="837.6" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="840.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.77%)</title><rect x="838.4" y="1891.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="841.4" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.77%)</title><rect x="838.4" y="1875.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="841.4" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 0.35%)</title><rect x="840.0" y="1859.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="843.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="844.2" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="847.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="844.2" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.2" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="844.2" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="847.2" y="1838.0"></text>
</g>
<g>
<title>SafePointNode::match_edge(unsigned int) const (1 samples, 0.07%)</title><rect x="844.2" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="847.2" y="1822.0"></text>
</g>
<g>
<title>Assembler::is_polling_page_far() (1 samples, 0.07%)</title><rect x="844.2" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="847.2" y="1806.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.21%)</title><rect x="845.0" y="1859.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="845.0" y="1843.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.0" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="845.0" y="1827.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.0" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="845.8" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.8" y="1822.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.07%)</title><rect x="846.6" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="849.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="847.4" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="847.4" y="1875.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.56%)</title><rect x="848.3" y="1891.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="851.3" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="848.3" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="851.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.07%)</title><rect x="848.3" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.49%)</title><rect x="849.1" y="1875.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="852.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::map_node_to_block(Node const*, Block*) (1 samples, 0.07%)</title><rect x="849.1" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="852.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="849.9" y="1859.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.9" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="850.7" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.7" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.21%)</title><rect x="851.6" y="1859.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.6" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="851.6" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="852.4" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="853.2" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.2" y="1854.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="853.2" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.2" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="853.2" y="1811.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="856.2" y="1822.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="854.0" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="857.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (85 samples, 5.93%)</title><rect x="854.9" y="1891.0" width="69.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="857.9" y="1902.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="854.9" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="857.9" y="1886.0"></text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.07%)</title><rect x="855.7" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="858.7" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.14%)</title><rect x="856.5" y="1875.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="859.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.21%)</title><rect x="858.2" y="1875.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.2" y="1886.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.07%)</title><rect x="859.8" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.21%)</title><rect x="860.6" y="1875.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="863.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="861.4" y="1859.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.35%)</title><rect x="863.1" y="1875.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.28%)</title><rect x="863.9" y="1859.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="866.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="866.4" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.63%)</title><rect x="867.2" y="1875.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.2" y="1886.0"></text>
</g>
<g>
<title>MachSafePointNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="872.1" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.14%)</title><rect x="873.0" y="1859.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="876.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="873.0" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="873.0" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.0" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="873.8" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.8" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="873.8" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.8" y="1838.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="873.8" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.8" y="1822.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="873.8" y="1795.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="876.8" y="1806.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 1.12%)</title><rect x="874.6" y="1875.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="877.9" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="880.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="878.7" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="881.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.49%)</title><rect x="879.6" y="1859.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="882.6" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="882.9" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="885.9" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="883.7" y="1843.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="886.7" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.14%)</title><rect x="885.3" y="1859.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.3" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="887.0" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="887.8" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="890.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="887.8" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.56%)</title><rect x="888.6" y="1875.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.6" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="892.7" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="895.7" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="893.6" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="896.6" y="1870.0"></text>
</g>
<g>
<title>loadConINode::out_RegMask() const (1 samples, 0.07%)</title><rect x="894.4" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="897.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="895.2" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="898.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.56%)</title><rect x="896.0" y="1875.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.42%)</title><rect x="897.7" y="1859.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="900.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 0.84%)</title><rect x="902.6" y="1875.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="905.6" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 0.77%)</title><rect x="903.4" y="1859.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.4" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (11 samples, 0.77%)</title><rect x="903.4" y="1843.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="906.4" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="903.4" y="1827.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="906.4" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (8 samples, 0.56%)</title><rect x="904.3" y="1827.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.3" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="910.0" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.14%)</title><rect x="910.9" y="1827.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="912.5" y="1875.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="913.3" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="916.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.21%)</title><rect x="914.1" y="1875.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="915.0" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.49%)</title><rect x="916.6" y="1875.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="919.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="919.1" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="919.9" y="1859.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="921.6" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.6" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="921.6" y="1843.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="924.6" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (2 samples, 0.14%)</title><rect x="922.4" y="1875.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.4" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="924.0" y="1875.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="927.0" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (298 samples, 20.80%)</title><rect x="924.8" y="1907.0" width="245.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="927.8" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.14%)</title><rect x="924.8" y="1891.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.8" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.14%)</title><rect x="924.8" y="1875.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.8" y="1886.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="924.8" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.8" y="1870.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.07%)</title><rect x="924.8" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.8" y="1854.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="924.8" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.8" y="1838.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.07%)</title><rect x="925.7" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.7" y="1870.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.21%)</title><rect x="926.5" y="1891.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="928.1" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="928.1" y="1859.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="931.1" y="1870.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="928.1" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (16 samples, 1.12%)</title><rect x="929.0" y="1891.0" width="13.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (16 samples, 1.12%)</title><rect x="929.0" y="1875.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="932.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="929.0" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.0" y="1870.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.07%)</title><rect x="929.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="929.8" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="929.8" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="929.8" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="932.8" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="929.8" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.8" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="929.8" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="932.8" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="929.8" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.8" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="929.8" y="1763.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.8" y="1774.0"></text>
</g>
<g>
<title>ciMetadata::is_loaded() const (1 samples, 0.07%)</title><rect x="929.8" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (14 samples, 0.98%)</title><rect x="930.6" y="1859.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (12 samples, 0.84%)</title><rect x="931.4" y="1843.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="931.4" y="1827.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1811.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1795.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="934.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1779.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1763.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1747.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="934.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1715.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1683.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1667.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1651.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="934.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1635.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1619.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1603.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1571.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1555.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1539.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1523.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1507.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1491.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1475.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="934.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1459.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1443.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="934.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1427.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1411.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1395.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1379.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1363.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="934.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1347.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1331.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1315.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="934.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1299.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1283.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1267.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1251.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="934.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="931.4" y="1235.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.4" y="1246.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="931.4" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="932.3" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.3" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="932.3" y="1795.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.3" y="1806.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="932.3" y="1779.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="935.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.70%)</title><rect x="933.1" y="1827.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="936.1" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (5 samples, 0.35%)</title><rect x="933.1" y="1811.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="936.1" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (3 samples, 0.21%)</title><rect x="933.9" y="1795.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.9" y="1806.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="935.6" y="1779.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.6" y="1790.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="936.4" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.4" y="1806.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="936.4" y="1779.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.4" y="1790.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="936.4" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.4" y="1774.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="936.4" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.35%)</title><rect x="937.2" y="1811.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.35%)</title><rect x="937.2" y="1795.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.35%)</title><rect x="937.2" y="1779.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.2" y="1790.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="937.2" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.2" y="1774.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="937.2" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1763.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="941.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1747.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1731.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1715.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1699.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1683.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1667.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="941.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1651.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1635.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1619.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="941.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1603.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1587.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1571.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="938.0" y="1555.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.0" y="1566.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="938.0" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.0" y="1550.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="938.8" y="1539.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1763.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1747.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1731.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1715.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1699.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1683.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1667.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1651.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1635.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1619.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1603.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1587.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1571.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1555.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1539.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1523.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1507.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1491.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="939.7" y="1475.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.7" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="939.7" y="1443.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="939.7" y="1427.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.5" y="1459.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.5" y="1443.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="943.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="940.5" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="940.5" y="1411.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.5" y="1422.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="941.3" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.3" y="1854.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="941.3" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.3" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="942.1" y="1891.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="945.1" y="1902.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="942.1" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="943.0" y="1891.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="943.0" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.0" y="1886.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.07%)</title><rect x="943.0" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (246 samples, 17.17%)</title><rect x="943.8" y="1891.0" width="202.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.8" y="1902.0">PhaseIdealLoop::build_and_..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="943.8" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="943.8" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="946.8" y="1870.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.07%)</title><rect x="943.8" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.8" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="943.8" y="1827.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="946.8" y="1838.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="944.6" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.14%)</title><rect x="945.4" y="1875.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="947.1" y="1875.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="948.7" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="949.6" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="952.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (224 samples, 15.63%)</title><rect x="951.2" y="1875.0" width="184.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.2" y="1886.0">PhaseIdealLoop::build_lo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (222 samples, 15.49%)</title><rect x="952.8" y="1859.0" width="182.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.8" y="1870.0">PhaseIdealLoop::build_lo..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.07%)</title><rect x="956.1" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (12 samples, 0.84%)</title><rect x="957.0" y="1843.0" width="9.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (204 samples, 14.24%)</title><rect x="966.8" y="1843.0" width="168.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.8" y="1854.0">PhaseIdealLoop::get_l..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (31 samples, 2.16%)</title><rect x="1108.5" y="1827.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.5" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1134.0" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1134.8" y="1843.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1137.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.28%)</title><rect x="1135.7" y="1875.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.14%)</title><rect x="1137.3" y="1859.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1138.9" y="1875.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="1139.8" y="1875.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1141.4" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.14%)</title><rect x="1142.2" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1143.1" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1143.1" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="1838.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.07%)</title><rect x="1143.1" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1143.9" y="1875.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1143.9" y="1859.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.9" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1144.7" y="1843.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.7" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1144.7" y="1827.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 1.88%)</title><rect x="1146.4" y="1891.0" width="22.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.4" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.81%)</title><rect x="1147.2" y="1875.0" width="21.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.2" y="1886.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1147.2" y="1859.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="1870.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.07%)</title><rect x="1147.2" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1148.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1148.0" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.0" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1148.0" y="1811.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.0" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1148.8" y="1859.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.8" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.8" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.8" y="1854.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1148.8" y="1827.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.8" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1148.8" y="1811.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.8" y="1822.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1148.8" y="1795.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.8" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1148.8" y="1779.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.8" y="1790.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1148.8" y="1763.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.8" y="1774.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1149.7" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.7" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.7" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.7" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1149.7" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.7" y="1822.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1150.5" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (9 samples, 0.63%)</title><rect x="1151.3" y="1859.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.3" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1156.2" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.2" y="1854.0"></text>
</g>
<g>
<title>Compile::set_node_notes_at(int, Node_Notes*) (1 samples, 0.07%)</title><rect x="1156.2" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1157.1" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1157.1" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1157.1" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="1822.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1157.9" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (6 samples, 0.42%)</title><rect x="1158.7" y="1859.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1161.2" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1161.2" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="1838.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1162.0" y="1843.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.6" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1163.6" y="1843.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.6" y="1854.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1164.5" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1165.3" y="1859.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.21%)</title><rect x="1165.3" y="1843.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1827.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1811.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.3" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1795.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.3" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1779.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1763.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1747.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.21%)</title><rect x="1165.3" y="1731.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.3" y="1715.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.3" y="1699.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.3" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1165.3" y="1683.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.3" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1667.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1651.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1635.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1603.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1587.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.3" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1571.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.3" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1555.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1539.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1523.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.3" y="1507.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1165.3" y="1491.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.1" y="1667.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1651.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="1662.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.9" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.9" y="1699.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="1710.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1167.8" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="1854.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1167.8" y="1827.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1167.8" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1168.6" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.6" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1168.6" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.6" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1168.6" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.6" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.6" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1168.6" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.6" y="1838.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1168.6" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.6" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1169.4" y="1891.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1172.4" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 1.19%)</title><rect x="1170.2" y="1907.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 1.19%)</title><rect x="1170.2" y="1891.0" width="14.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 1.12%)</title><rect x="1170.2" y="1875.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.2" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 1.12%)</title><rect x="1170.2" y="1859.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.2" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 1.12%)</title><rect x="1170.2" y="1843.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 1.12%)</title><rect x="1170.2" y="1827.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.2" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1170.2" y="1811.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.2" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1170.2" y="1795.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1170.2" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1170.2" y="1763.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.2" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1170.2" y="1747.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1170.2" y="1731.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.2" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1170.2" y="1715.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1170.2" y="1699.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1170.2" y="1683.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1170.2" y="1667.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.2" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1170.2" y="1651.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.2" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1170.2" y="1635.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="1646.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1170.2" y="1619.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.2" y="1630.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1170.2" y="1603.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.2" y="1614.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1170.2" y="1587.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1170.2" y="1571.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.2" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1170.2" y="1555.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.2" y="1566.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1171.1" y="1811.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.1" y="1822.0"></text>
</g>
<g>
<title>MethodLiveness::MethodLiveness(Arena*, ciMethod*) (1 samples, 0.07%)</title><rect x="1171.1" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.1" y="1806.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.70%)</title><rect x="1171.9" y="1811.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.70%)</title><rect x="1171.9" y="1795.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="1806.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1171.9" y="1779.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="1790.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1171.9" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="1774.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.9" y="1747.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.9" y="1758.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1171.9" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.9" y="1742.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.63%)</title><rect x="1172.7" y="1779.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.63%)</title><rect x="1172.7" y="1763.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.63%)</title><rect x="1172.7" y="1747.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.56%)</title><rect x="1172.7" y="1731.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="1742.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.07%)</title><rect x="1172.7" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.7" y="1726.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1172.7" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1173.5" y="1715.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1173.5" y="1699.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1173.5" y="1683.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1173.5" y="1667.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1173.5" y="1651.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1173.5" y="1635.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1646.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1619.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="1630.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1603.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="1614.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.5" y="1587.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="1598.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.5" y="1571.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.5" y="1555.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.5" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.5" y="1539.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.5" y="1523.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.5" y="1507.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.5" y="1491.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.5" y="1475.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="1486.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1173.5" y="1459.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.5" y="1443.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="1454.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.5" y="1427.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.5" y="1438.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.5" y="1411.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.5" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.5" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.5" y="1379.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="1390.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1363.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.5" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1347.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="1358.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1173.5" y="1331.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="1619.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.4" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.4" y="1587.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.4" y="1571.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.4" y="1555.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.4" y="1539.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="1523.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.4" y="1507.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1518.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1174.4" y="1491.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1502.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1174.4" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1486.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1174.4" y="1459.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="1470.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1174.4" y="1443.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="1454.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1174.4" y="1427.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1438.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1174.4" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1422.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="1619.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="1603.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.2" y="1587.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.2" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.2" y="1555.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.2" y="1539.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.2" y="1523.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="1507.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.2" y="1491.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.2" y="1475.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.2" y="1459.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.2" y="1443.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.2" y="1427.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1438.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1411.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="1422.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1395.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="1406.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1379.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1175.2" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1374.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1175.2" y="1347.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="1358.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.2" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="1342.0"></text>
</g>
<g>
<title>SignatureStream::is_object() const (1 samples, 0.07%)</title><rect x="1175.2" y="1315.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1326.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.0" y="1715.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.0" y="1699.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1176.0" y="1683.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1176.0" y="1667.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1176.0" y="1651.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1176.0" y="1635.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1176.0" y="1619.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.0" y="1603.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1176.0" y="1587.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1176.0" y="1571.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1176.0" y="1555.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1176.0" y="1539.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1176.0" y="1523.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1176.0" y="1507.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1176.0" y="1491.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1176.0" y="1475.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1176.0" y="1459.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1176.0" y="1443.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1176.0" y="1427.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.0" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.0" y="1395.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.0" y="1379.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.0" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.0" y="1347.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1176.0" y="1331.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="1342.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1176.0" y="1315.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="1326.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1176.0" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="1310.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1176.0" y="1283.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1294.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1176.0" y="1267.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1176.8" y="1411.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1176.8" y="1395.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1176.8" y="1379.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1176.8" y="1363.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1176.8" y="1347.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1176.8" y="1331.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1176.8" y="1315.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1176.8" y="1299.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1176.8" y="1283.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1176.8" y="1267.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1176.8" y="1251.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1176.8" y="1235.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1176.8" y="1219.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1203.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="1155.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="1091.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="1059.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="1043.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="1027.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="1011.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1176.8" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1176.8" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1176.8" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1176.8" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.8" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.8" y="931.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.8" y="915.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1176.8" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1176.8" y="883.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1176.8" y="867.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="878.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1176.8" y="851.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1176.8" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1176.8" y="819.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1176.8" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="1203.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="1187.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.6" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.6" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.6" y="1139.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.6" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.6" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="1091.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.6" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.6" y="1059.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.6" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.6" y="1027.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.6" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.6" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.6" y="963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.6" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.6" y="931.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.6" y="883.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1177.6" y="851.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1177.6" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.5" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="1230.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1178.5" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="1214.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1178.5" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="1198.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1178.5" y="1171.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1178.5" y="1155.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1178.5" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="1150.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1178.5" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="1742.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="1715.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="1726.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.3" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="1710.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1179.3" y="1683.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="1694.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1667.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="1678.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="1651.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="1662.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1635.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="1646.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1179.3" y="1619.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="1630.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1180.1" y="1811.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1180.1" y="1795.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1180.1" y="1779.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1180.1" y="1763.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1180.1" y="1747.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1180.1" y="1731.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1180.1" y="1715.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1180.1" y="1699.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1180.1" y="1683.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1180.1" y="1667.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1180.1" y="1651.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1180.1" y="1635.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1180.1" y="1619.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1180.1" y="1603.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1180.1" y="1587.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1180.1" y="1571.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1180.1" y="1555.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1180.1" y="1539.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1180.1" y="1523.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.1" y="1507.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.1" y="1491.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.1" y="1475.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.1" y="1459.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.1" y="1443.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.1" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="1438.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1411.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="1422.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.1" y="1395.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="1406.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1180.1" y="1379.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="1390.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1180.1" y="1363.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1180.1" y="1347.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1180.1" y="1331.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1180.1" y="1315.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1180.1" y="1299.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1180.1" y="1283.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="1294.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1180.1" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="1278.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1180.1" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1180.1" y="1235.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1180.1" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1180.1" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="1214.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1507.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1491.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.9" y="1475.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.9" y="1459.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.9" y="1443.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.9" y="1427.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.9" y="1411.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1395.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.9" y="1379.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.9" y="1363.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.9" y="1347.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.9" y="1331.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1315.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1299.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1283.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1267.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1251.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1235.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1219.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.8" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.8" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.8" y="1171.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.8" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.8" y="1139.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.8" y="1123.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.8" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.8" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.8" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.8" y="1059.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.8" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="995.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1181.8" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="947.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="931.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="915.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="899.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="883.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="867.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1181.8" y="851.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1182.6" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.6" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.6" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="1182.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1182.6" y="1155.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1182.6" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1182.6" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1182.6" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1182.6" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1182.6" y="1059.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1043.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1183.4" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="1886.0"></text>
</g>
<g>
<title>GraphKit::use_exception_state(SafePointNode*) (1 samples, 0.07%)</title><rect x="1183.4" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="1870.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.4" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1183.4" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="1838.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.14%)</title><rect x="1184.2" y="1939.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.14%)</title><rect x="1184.2" y="1923.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.14%)</title><rect x="1184.2" y="1907.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.14%)</title><rect x="1184.2" y="1891.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.07%)</title><rect x="1184.2" y="1875.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1184.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.07%)</title><rect x="1184.2" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1184.2" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.2" y="1779.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::collect_args_for_profiling(Values*, ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1747.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1758.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1184.2" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="1742.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.07%)</title><rect x="1184.2" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1726.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1184.2" y="1699.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1187.2" y="1710.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.07%)</title><rect x="1185.1" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="1886.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.07%)</title><rect x="1185.1" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="1870.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.07%)</title><rect x="1185.1" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="1854.0"></text>
</g>
<g>
<title>PatchingStub::emit_code(LIR_Assembler*) (1 samples, 0.07%)</title><rect x="1185.1" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="1838.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.07%)</title><rect x="1185.1" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1822.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.07%)</title><rect x="1185.1" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="1806.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.07%)</title><rect x="1185.1" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.1" y="1790.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.07%)</title><rect x="1185.1" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.1" y="1774.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1185.9" y="1955.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1966.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1185.9" y="1939.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="1950.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1185.9" y="1923.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="1934.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.07%)</title><rect x="1185.9" y="1907.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.7" y="1971.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.7" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1939.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1923.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1186.7" y="1907.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.21%)</title><rect x="1187.5" y="2003.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.21%)</title><rect x="1187.5" y="1987.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.21%)</title><rect x="1187.5" y="1971.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.21%)</title><rect x="1187.5" y="1955.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.21%)</title><rect x="1187.5" y="1939.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="1950.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="1187.5" y="1923.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.14%)</title><rect x="1188.4" y="1923.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.07%)</title><rect x="1188.4" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.4" y="1886.0"></text>
</g>
<g>
<title>ConcurrentG1Refine::thread_num() (1 samples, 0.07%)</title><rect x="1188.4" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
</g>
</svg>
