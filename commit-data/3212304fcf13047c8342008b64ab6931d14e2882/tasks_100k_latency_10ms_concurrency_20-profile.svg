<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (327 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 5.50%)</title><rect x="10.0" y="1107.0" width="65.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.61%)</title><rect x="10.0" y="1091.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.61%)</title><rect x="10.0" y="1075.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.61%)</title><rect x="10.0" y="1059.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.61%)</title><rect x="10.0" y="1043.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.61%)</title><rect x="10.0" y="1027.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.31%)</title><rect x="10.0" y="1011.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.&lt;init&gt; (1 samples, 0.31%)</title><rect x="10.0" y="995.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest$Builder.&lt;init&gt; (1 samples, 0.31%)</title><rect x="10.0" y="979.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.latestVersion (1 samples, 0.31%)</title><rect x="10.0" y="963.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="13.6" y="1011.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="13.6" y="995.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="13.6" y="979.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.31%)</title><rect x="13.6" y="963.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.31%)</title><rect x="13.6" y="947.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.31%)</title><rect x="13.6" y="931.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.31%)</title><rect x="13.6" y="915.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.31%)</title><rect x="13.6" y="899.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (16 samples, 4.89%)</title><rect x="17.2" y="1091.0" width="57.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="1102.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.31%)</title><rect x="17.2" y="1075.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.31%)</title><rect x="17.2" y="1059.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.31%)</title><rect x="17.2" y="1043.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$286/2133822792.get$Lambda (1 samples, 0.31%)</title><rect x="17.2" y="1027.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.83%)</title><rect x="20.8" y="1075.0" width="21.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.8" y="1086.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1314265891.accept (6 samples, 1.83%)</title><rect x="20.8" y="1059.0" width="21.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.8" y="1070.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (6 samples, 1.83%)</title><rect x="20.8" y="1043.0" width="21.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.8" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.22%)</title><rect x="20.8" y="1027.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.22%)</title><rect x="20.8" y="1011.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.22%)</title><rect x="20.8" y="995.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.22%)</title><rect x="20.8" y="979.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.22%)</title><rect x="20.8" y="963.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.22%)</title><rect x="20.8" y="947.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.92%)</title><rect x="20.8" y="931.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.92%)</title><rect x="20.8" y="915.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.92%)</title><rect x="20.8" y="899.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.31%)</title><rect x="31.7" y="931.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.31%)</title><rect x="31.7" y="915.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.31%)</title><rect x="31.7" y="899.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.31%)</title><rect x="31.7" y="883.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="34.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.31%)</title><rect x="31.7" y="867.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="34.7" y="878.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.31%)</title><rect x="31.7" y="851.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="34.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.31%)</title><rect x="35.3" y="1027.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.31%)</title><rect x="35.3" y="1011.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.3" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="38.9" y="1027.0" width="3.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="41.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.75%)</title><rect x="42.5" y="1075.0" width="32.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.5" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.75%)</title><rect x="42.5" y="1059.0" width="32.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.5" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.14%)</title><rect x="42.5" y="1043.0" width="25.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.5" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.92%)</title><rect x="42.5" y="1027.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="46.1" y="1011.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.31%)</title><rect x="46.1" y="995.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.completeResponses (1 samples, 0.31%)</title><rect x="46.1" y="979.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientResponse.onComplete (1 samples, 0.31%)</title><rect x="46.1" y="963.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.onComplete (1 samples, 0.31%)</title><rect x="46.1" y="947.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.access$500 (1 samples, 0.31%)</title><rect x="46.1" y="931.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.1" y="942.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.31%)</title><rect x="46.1" y="915.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="49.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.31%)</title><rect x="49.7" y="995.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.nodes (1 samples, 0.31%)</title><rect x="49.7" y="979.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.92%)</title><rect x="53.3" y="1027.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.92%)</title><rect x="53.3" y="1011.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.92%)</title><rect x="53.3" y="995.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.92%)</title><rect x="53.3" y="979.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.31%)</title><rect x="56.9" y="963.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.31%)</title><rect x="60.5" y="963.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.31%)</title><rect x="60.5" y="947.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.31%)</title><rect x="60.5" y="931.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.5" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.31%)</title><rect x="60.5" y="915.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.5" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.31%)</title><rect x="60.5" y="899.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.31%)</title><rect x="64.1" y="1027.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.31%)</title><rect x="64.1" y="1011.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.31%)</title><rect x="64.1" y="995.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.31%)</title><rect x="64.1" y="979.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.31%)</title><rect x="64.1" y="963.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.31%)</title><rect x="64.1" y="947.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.1" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.31%)</title><rect x="64.1" y="931.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.31%)</title><rect x="64.1" y="915.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.1" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.31%)</title><rect x="64.1" y="899.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.31%)</title><rect x="64.1" y="883.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.31%)</title><rect x="64.1" y="867.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.31%)</title><rect x="64.1" y="851.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.31%)</title><rect x="64.1" y="835.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/895331028.get (1 samples, 0.31%)</title><rect x="64.1" y="819.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.31%)</title><rect x="67.7" y="1043.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.31%)</title><rect x="67.7" y="1027.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.31%)</title><rect x="67.7" y="1011.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.31%)</title><rect x="67.7" y="995.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.31%)</title><rect x="67.7" y="979.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.7" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.31%)</title><rect x="67.7" y="963.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.7" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.31%)</title><rect x="67.7" y="947.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.7" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.31%)</title><rect x="67.7" y="931.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.31%)</title><rect x="71.3" y="1043.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="71.3" y="1027.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="71.3" y="1011.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="71.3" y="995.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.31%)</title><rect x="71.3" y="979.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.31%)</title><rect x="71.3" y="963.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.31%)</title><rect x="71.3" y="947.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (156 samples, 47.71%)</title><rect x="75.0" y="1107.0" width="562.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.0" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (156 samples, 47.71%)</title><rect x="75.0" y="1091.0" width="562.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.0" y="1102.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (156 samples, 47.71%)</title><rect x="75.0" y="1075.0" width="562.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="1086.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/777643363.run (145 samples, 44.34%)</title><rect x="78.6" y="1059.0" width="523.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.6" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/7776433..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (145 samples, 44.34%)</title><rect x="78.6" y="1043.0" width="523.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.6" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (145 samples, 44.34%)</title><rect x="78.6" y="1027.0" width="523.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.6" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (144 samples, 44.04%)</title><rect x="78.6" y="1011.0" width="519.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.6" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.31%)</title><rect x="89.4" y="995.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (33 samples, 10.09%)</title><rect x="93.0" y="995.0" width="119.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.0" y="1006.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (33 samples, 10.09%)</title><rect x="93.0" y="979.0" width="119.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.0" y="990.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (33 samples, 10.09%)</title><rect x="93.0" y="963.0" width="119.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.0" y="974.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 10.09%)</title><rect x="93.0" y="947.0" width="119.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.0" y="958.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 10.09%)</title><rect x="93.0" y="931.0" width="119.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.0" y="942.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (33 samples, 10.09%)</title><rect x="93.0" y="915.0" width="119.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.0" y="926.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.14%)</title><rect x="93.0" y="899.0" width="25.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.0" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.31%)</title><rect x="100.2" y="883.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.31%)</title><rect x="100.2" y="867.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.31%)</title><rect x="100.2" y="851.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.31%)</title><rect x="100.2" y="835.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.31%)</title><rect x="100.2" y="819.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.2" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.31%)</title><rect x="100.2" y="803.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.22%)</title><rect x="103.8" y="883.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 7.34%)</title><rect x="118.3" y="899.0" width="86.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="910.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.92%)</title><rect x="118.3" y="883.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.61%)</title><rect x="121.9" y="867.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.22%)</title><rect x="129.1" y="883.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.61%)</title><rect x="136.3" y="867.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.31%)</title><rect x="136.3" y="851.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.31%)</title><rect x="139.9" y="851.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.61%)</title><rect x="143.5" y="883.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.61%)</title><rect x="143.5" y="867.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 4.59%)</title><rect x="150.7" y="883.0" width="54.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.7" y="894.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 2.45%)</title><rect x="150.7" y="867.0" width="28.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.7" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 1.22%)</title><rect x="150.7" y="851.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 1.22%)</title><rect x="150.7" y="835.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 1.22%)</title><rect x="150.7" y="819.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 1.22%)</title><rect x="150.7" y="803.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.61%)</title><rect x="158.0" y="787.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.22%)</title><rect x="165.2" y="851.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.61%)</title><rect x="165.2" y="835.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.31%)</title><rect x="168.8" y="819.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.61%)</title><rect x="172.4" y="835.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.61%)</title><rect x="172.4" y="819.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.61%)</title><rect x="172.4" y="803.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.61%)</title><rect x="172.4" y="787.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.14%)</title><rect x="179.6" y="867.0" width="25.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.6" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.14%)</title><rect x="179.6" y="851.0" width="25.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.6" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.14%)</title><rect x="179.6" y="835.0" width="25.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.6" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.83%)</title><rect x="179.6" y="819.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.6" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.61%)</title><rect x="179.6" y="803.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.61%)</title><rect x="186.8" y="803.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.31%)</title><rect x="190.4" y="787.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.31%)</title><rect x="190.4" y="771.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.61%)</title><rect x="194.0" y="803.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.61%)</title><rect x="194.0" y="787.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.31%)</title><rect x="201.3" y="819.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.31%)</title><rect x="201.3" y="803.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.31%)</title><rect x="201.3" y="787.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.31%)</title><rect x="201.3" y="771.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.31%)</title><rect x="201.3" y="755.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.61%)</title><rect x="204.9" y="899.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.61%)</title><rect x="204.9" y="883.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.61%)</title><rect x="204.9" y="867.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.61%)</title><rect x="204.9" y="851.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.61%)</title><rect x="204.9" y="835.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (102 samples, 31.19%)</title><rect x="212.1" y="995.0" width="368.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.1" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (7 samples, 2.14%)</title><rect x="215.7" y="979.0" width="25.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.7" y="990.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 1.83%)</title><rect x="219.3" y="963.0" width="21.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.3" y="974.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.22%)</title><rect x="226.5" y="947.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.22%)</title><rect x="226.5" y="931.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.22%)</title><rect x="226.5" y="915.0" width="14.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.92%)</title><rect x="230.1" y="899.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.31%)</title><rect x="240.9" y="979.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.31%)</title><rect x="240.9" y="963.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.31%)</title><rect x="240.9" y="947.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 6.12%)</title><rect x="244.6" y="979.0" width="72.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.6" y="990.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 6.12%)</title><rect x="244.6" y="963.0" width="72.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="974.0">com/line..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="248.2" y="947.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="251.2" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="248.2" y="931.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="251.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 3.36%)</title><rect x="251.8" y="947.0" width="39.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.8" y="958.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.83%)</title><rect x="255.4" y="931.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.4" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.53%)</title><rect x="255.4" y="915.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.4" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.92%)</title><rect x="259.0" y="899.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.0" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.92%)</title><rect x="259.0" y="883.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.0" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.92%)</title><rect x="259.0" y="867.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.92%)</title><rect x="259.0" y="851.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.61%)</title><rect x="259.0" y="835.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="262.0" y="846.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.31%)</title><rect x="259.0" y="819.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="262.0" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.31%)</title><rect x="262.6" y="819.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="265.6" y="830.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.31%)</title><rect x="262.6" y="803.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="265.6" y="814.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.31%)</title><rect x="262.6" y="787.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.6" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="266.2" y="835.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="269.2" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="266.2" y="819.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="269.2" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="266.2" y="803.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="269.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.31%)</title><rect x="269.8" y="899.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.8" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="273.4" y="915.0" width="3.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="276.4" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 1.22%)</title><rect x="277.0" y="931.0" width="14.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="280.0" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.14%)</title><rect x="291.5" y="947.0" width="25.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.5" y="958.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.14%)</title><rect x="291.5" y="931.0" width="25.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.5" y="942.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.14%)</title><rect x="291.5" y="915.0" width="25.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.5" y="926.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.83%)</title><rect x="295.1" y="899.0" width="21.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.1" y="910.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.53%)</title><rect x="298.7" y="883.0" width="18.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.31%)</title><rect x="309.5" y="867.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.5" y="878.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.31%)</title><rect x="313.1" y="867.0" width="3.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="316.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (68 samples, 20.80%)</title><rect x="316.7" y="979.0" width="245.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.7" y="990.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (68 samples, 20.80%)</title><rect x="316.7" y="963.0" width="245.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.7" y="974.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="327.6" y="947.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="330.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="327.6" y="931.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="327.6" y="915.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="330.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="327.6" y="899.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="330.6" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.31%)</title><rect x="327.6" y="883.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="330.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (57 samples, 17.43%)</title><rect x="331.2" y="947.0" width="205.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.2" y="958.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (55 samples, 16.82%)</title><rect x="338.4" y="931.0" width="198.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.4" y="942.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (55 samples, 16.82%)</title><rect x="338.4" y="915.0" width="198.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.4" y="926.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (54 samples, 16.51%)</title><rect x="338.4" y="899.0" width="194.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.4" y="910.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (54 samples, 16.51%)</title><rect x="338.4" y="883.0" width="194.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.4" y="894.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (46 samples, 14.07%)</title><rect x="367.2" y="867.0" width="166.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="370.2" y="878.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.92%)</title><rect x="374.5" y="851.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="377.5" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.31%)</title><rect x="385.3" y="851.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="388.3" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.92%)</title><rect x="388.9" y="851.0" width="10.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="391.9" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.92%)</title><rect x="399.7" y="851.0" width="10.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="402.7" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.31%)</title><rect x="410.6" y="851.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.6" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.31%)</title><rect x="414.2" y="851.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="417.2" y="862.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 9.79%)</title><rect x="417.8" y="851.0" width="115.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="420.8" y="862.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.61%)</title><rect x="450.2" y="835.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.2" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.61%)</title><rect x="457.5" y="835.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="460.5" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.31%)</title><rect x="464.7" y="835.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="467.7" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.31%)</title><rect x="464.7" y="819.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.7" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.31%)</title><rect x="464.7" y="803.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="467.7" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.53%)</title><rect x="468.3" y="835.0" width="18.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="471.3" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.31%)</title><rect x="486.3" y="835.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="489.3" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 2.45%)</title><rect x="489.9" y="835.0" width="28.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="492.9" y="846.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.31%)</title><rect x="518.8" y="835.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="521.8" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.92%)</title><rect x="522.4" y="835.0" width="10.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="525.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.31%)</title><rect x="533.2" y="899.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="536.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.61%)</title><rect x="536.9" y="947.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="539.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.61%)</title><rect x="536.9" y="931.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="539.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.31%)</title><rect x="544.1" y="947.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="547.1" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.31%)</title><rect x="544.1" y="931.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="547.1" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.31%)</title><rect x="544.1" y="915.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.31%)</title><rect x="547.7" y="947.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.7" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.31%)</title><rect x="547.7" y="931.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.92%)</title><rect x="551.3" y="947.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="554.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.53%)</title><rect x="562.1" y="979.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.53%)</title><rect x="562.1" y="963.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.1" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="572.9" y="947.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="575.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.31%)</title><rect x="576.5" y="947.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="579.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/619457625.accept (1 samples, 0.31%)</title><rect x="576.5" y="931.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="579.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.31%)</title><rect x="576.5" y="915.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="579.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.31%)</title><rect x="576.5" y="899.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.5" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.31%)</title><rect x="576.5" y="883.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="579.5" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.31%)</title><rect x="576.5" y="867.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="579.5" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="576.5" y="851.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="579.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.53%)</title><rect x="580.2" y="995.0" width="18.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.53%)</title><rect x="580.2" y="979.0" width="18.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.2" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="583.8" y="963.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="586.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.31%)</title><rect x="583.8" y="947.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="586.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.31%)</title><rect x="583.8" y="931.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="586.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.92%)</title><rect x="587.4" y="963.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/619457625.accept (3 samples, 0.92%)</title><rect x="587.4" y="947.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="590.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 0.92%)</title><rect x="587.4" y="931.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="590.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.92%)</title><rect x="587.4" y="915.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="590.4" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.92%)</title><rect x="587.4" y="899.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.4" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.92%)</title><rect x="587.4" y="883.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.31%)</title><rect x="598.2" y="1011.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.92%)</title><rect x="601.8" y="1059.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.92%)</title><rect x="601.8" y="1043.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="604.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.92%)</title><rect x="601.8" y="1027.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="604.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.92%)</title><rect x="601.8" y="1011.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.14%)</title><rect x="612.6" y="1059.0" width="25.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.6" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.83%)</title><rect x="616.2" y="1043.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.2" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.22%)</title><rect x="616.2" y="1027.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="619.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.22%)</title><rect x="616.2" y="1011.0" width="14.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="619.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.22%)</title><rect x="616.2" y="995.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.22%)</title><rect x="616.2" y="979.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.22%)</title><rect x="616.2" y="963.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.61%)</title><rect x="630.7" y="1027.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="633.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.61%)</title><rect x="630.7" y="1011.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.61%)</title><rect x="630.7" y="995.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.61%)</title><rect x="630.7" y="979.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.61%)</title><rect x="637.9" y="1107.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.31%)</title><rect x="637.9" y="1091.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.9" y="1102.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.31%)</title><rect x="637.9" y="1075.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="640.9" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.31%)</title><rect x="637.9" y="1059.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="640.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.31%)</title><rect x="641.5" y="1091.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="641.5" y="1075.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.31%)</title><rect x="641.5" y="1059.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="641.5" y="1043.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.31%)</title><rect x="641.5" y="1027.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.31%)</title><rect x="641.5" y="1011.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="644.5" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.31%)</title><rect x="641.5" y="995.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.31%)</title><rect x="641.5" y="979.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.5" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.31%)</title><rect x="641.5" y="963.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.5" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.31%)</title><rect x="641.5" y="947.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="644.5" y="958.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.31%)</title><rect x="641.5" y="931.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="644.5" y="942.0"></text>
</g>
<g>
<title>start_thread (151 samples, 46.18%)</title><rect x="645.1" y="1107.0" width="544.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="648.1" y="1118.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (151 samples, 46.18%)</title><rect x="645.1" y="1091.0" width="544.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="648.1" y="1102.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.06%)</title><rect x="645.1" y="1075.0" width="36.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="648.1" y="1086.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.31%)</title><rect x="645.1" y="1059.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="648.1" y="1070.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.31%)</title><rect x="645.1" y="1043.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="648.1" y="1054.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.31%)</title><rect x="645.1" y="1027.0" width="3.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="648.1" y="1038.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 2.75%)</title><rect x="648.7" y="1059.0" width="32.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="651.7" y="1070.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.45%)</title><rect x="648.7" y="1043.0" width="28.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="651.7" y="1054.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 1.83%)</title><rect x="648.7" y="1027.0" width="21.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="651.7" y="1038.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.53%)</title><rect x="652.3" y="1011.0" width="18.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.3" y="1022.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.31%)</title><rect x="670.4" y="1027.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="673.4" y="1038.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.31%)</title><rect x="674.0" y="1027.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="677.0" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.31%)</title><rect x="677.6" y="1043.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="680.6" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.31%)</title><rect x="677.6" y="1027.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.6" y="1038.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.31%)</title><rect x="677.6" y="1011.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="680.6" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.31%)</title><rect x="677.6" y="995.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.6" y="1006.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.31%)</title><rect x="677.6" y="979.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.6" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (141 samples, 43.12%)</title><rect x="681.2" y="1075.0" width="508.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.2" y="1086.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (141 samples, 43.12%)</title><rect x="681.2" y="1059.0" width="508.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="684.2" y="1070.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (141 samples, 43.12%)</title><rect x="681.2" y="1043.0" width="508.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="684.2" y="1054.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (141 samples, 43.12%)</title><rect x="681.2" y="1027.0" width="508.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.2" y="1038.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (139 samples, 42.51%)</title><rect x="681.2" y="1011.0" width="501.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="684.2" y="1022.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (139 samples, 42.51%)</title><rect x="681.2" y="995.0" width="501.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.2" y="1006.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (58 samples, 17.74%)</title><rect x="681.2" y="979.0" width="209.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.2" y="990.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 1.53%)</title><rect x="681.2" y="963.0" width="18.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="684.2" y="974.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.61%)</title><rect x="681.2" y="947.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="684.2" y="958.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.61%)</title><rect x="681.2" y="931.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="684.2" y="942.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.92%)</title><rect x="688.4" y="947.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="691.4" y="958.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.92%)</title><rect x="688.4" y="931.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="691.4" y="942.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.61%)</title><rect x="692.0" y="915.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="695.0" y="926.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.31%)</title><rect x="692.0" y="899.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.0" y="910.0"></text>
</g>
<g>
<title>compI_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.31%)</title><rect x="695.6" y="899.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.6" y="910.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.92%)</title><rect x="699.2" y="963.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.2" y="974.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.31%)</title><rect x="699.2" y="947.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.2" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.31%)</title><rect x="699.2" y="931.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="702.2" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.31%)</title><rect x="699.2" y="915.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="702.2" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.61%)</title><rect x="702.8" y="947.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.8" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.61%)</title><rect x="702.8" y="931.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="705.8" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.83%)</title><rect x="710.1" y="963.0" width="21.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.1" y="974.0">M..</text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.31%)</title><rect x="710.1" y="947.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="713.1" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.53%)</title><rect x="713.7" y="947.0" width="18.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="716.7" y="958.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.92%)</title><rect x="713.7" y="931.0" width="10.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="716.7" y="942.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.31%)</title><rect x="724.5" y="931.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.5" y="942.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.31%)</title><rect x="724.5" y="915.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="727.5" y="926.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.31%)</title><rect x="724.5" y="899.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="727.5" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.31%)</title><rect x="728.1" y="931.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.1" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="728.1" y="915.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="731.1" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="728.1" y="899.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="731.1" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.92%)</title><rect x="731.7" y="963.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="734.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.92%)</title><rect x="731.7" y="947.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="734.7" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.31%)</title><rect x="731.7" y="931.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="734.7" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.31%)</title><rect x="731.7" y="915.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.61%)</title><rect x="735.3" y="931.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.3" y="942.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.31%)</title><rect x="735.3" y="915.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="738.3" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="738.9" y="915.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="741.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 12.54%)</title><rect x="742.5" y="963.0" width="148.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="745.5" y="974.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.31%)</title><rect x="746.1" y="947.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="749.1" y="958.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.31%)</title><rect x="749.8" y="947.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="752.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.31%)</title><rect x="753.4" y="947.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="756.4" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.31%)</title><rect x="753.4" y="931.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="756.4" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="753.4" y="915.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="756.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.61%)</title><rect x="757.0" y="947.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.0" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.61%)</title><rect x="757.0" y="931.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.0" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.61%)</title><rect x="757.0" y="915.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="760.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.83%)</title><rect x="764.2" y="947.0" width="21.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="767.2" y="958.0">P..</text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.31%)</title><rect x="778.6" y="931.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.31%)</title><rect x="782.2" y="931.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="785.2" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.31%)</title><rect x="782.2" y="915.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="785.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.06%)</title><rect x="785.8" y="947.0" width="36.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.8" y="958.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="803.9" y="931.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.22%)</title><rect x="807.5" y="931.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="810.5" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.92%)</title><rect x="811.1" y="915.0" width="10.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="814.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.31%)</title><rect x="821.9" y="947.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.31%)</title><rect x="821.9" y="931.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="824.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.61%)</title><rect x="825.5" y="947.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="828.5" y="958.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.31%)</title><rect x="829.1" y="931.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.31%)</title><rect x="832.8" y="947.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="835.8" y="958.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.45%)</title><rect x="836.4" y="947.0" width="28.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.4" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.45%)</title><rect x="836.4" y="931.0" width="28.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.4" y="942.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.45%)</title><rect x="836.4" y="915.0" width="28.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="839.4" y="926.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.92%)</title><rect x="836.4" y="899.0" width="10.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.4" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="843.6" y="883.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="846.6" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.53%)</title><rect x="847.2" y="899.0" width="18.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.2" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.92%)</title><rect x="865.2" y="947.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.2" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.61%)</title><rect x="868.8" y="931.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="871.8" y="942.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.92%)</title><rect x="876.1" y="947.0" width="10.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="879.1" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="883.3" y="931.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.3" y="942.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.31%)</title><rect x="886.9" y="947.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="889.9" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (74 samples, 22.63%)</title><rect x="890.5" y="979.0" width="267.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="893.5" y="990.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.31%)</title><rect x="890.5" y="963.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.5" y="974.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.31%)</title><rect x="890.5" y="947.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="893.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.31%)</title><rect x="894.1" y="963.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.31%)</title><rect x="894.1" y="947.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="897.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="894.1" y="931.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="897.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.31%)</title><rect x="894.1" y="915.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="897.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.31%)</title><rect x="894.1" y="899.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (64 samples, 19.57%)</title><rect x="897.7" y="963.0" width="231.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="900.7" y="974.0">PhaseIdealLoop::build_and_opti..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.31%)</title><rect x="897.7" y="947.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.61%)</title><rect x="901.3" y="947.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="904.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (56 samples, 17.13%)</title><rect x="908.5" y="947.0" width="202.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.5" y="958.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (56 samples, 17.13%)</title><rect x="908.5" y="931.0" width="202.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.5" y="942.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.53%)</title><rect x="912.1" y="915.0" width="18.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (50 samples, 15.29%)</title><rect x="930.2" y="915.0" width="180.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.2" y="926.0">PhaseIdealLoop::get_lat..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.31%)</title><rect x="1070.9" y="899.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.31%)</title><rect x="1070.9" y="883.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 3.06%)</title><rect x="1074.5" y="899.0" width="36.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.5" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.31%)</title><rect x="1110.6" y="947.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.92%)</title><rect x="1114.2" y="947.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.92%)</title><rect x="1114.2" y="931.0" width="10.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.31%)</title><rect x="1114.2" y="915.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.31%)</title><rect x="1114.2" y="899.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.31%)</title><rect x="1117.8" y="915.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.31%)</title><rect x="1117.8" y="899.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.31%)</title><rect x="1121.4" y="915.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.4" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.31%)</title><rect x="1125.0" y="947.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.31%)</title><rect x="1125.0" y="931.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.0" y="942.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1125.0" y="915.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.0" y="926.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.31%)</title><rect x="1125.0" y="899.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.0" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 1.83%)</title><rect x="1128.7" y="963.0" width="21.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.7" y="974.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.83%)</title><rect x="1128.7" y="947.0" width="21.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.7" y="958.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1128.7" y="931.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.7" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.31%)</title><rect x="1128.7" y="915.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1128.7" y="899.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.7" y="910.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1132.3" y="931.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.3" y="942.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1132.3" y="915.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="926.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1132.3" y="899.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="910.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.31%)</title><rect x="1132.3" y="883.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.3" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.31%)</title><rect x="1132.3" y="867.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.3" y="878.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.31%)</title><rect x="1132.3" y="851.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.3" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.31%)</title><rect x="1132.3" y="835.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.3" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.31%)</title><rect x="1132.3" y="819.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.3" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.31%)</title><rect x="1132.3" y="803.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.3" y="814.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.31%)</title><rect x="1132.3" y="787.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.3" y="798.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1135.9" y="931.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.9" y="942.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.31%)</title><rect x="1135.9" y="915.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.9" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.31%)</title><rect x="1135.9" y="899.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.9" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.31%)</title><rect x="1135.9" y="883.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.9" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.31%)</title><rect x="1135.9" y="867.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.9" y="878.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.31%)</title><rect x="1139.5" y="931.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.5" y="942.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.31%)</title><rect x="1139.5" y="915.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.5" y="926.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.31%)</title><rect x="1139.5" y="899.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.5" y="910.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.31%)</title><rect x="1139.5" y="883.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.5" y="894.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.31%)</title><rect x="1139.5" y="867.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1143.1" y="931.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="942.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.31%)</title><rect x="1143.1" y="915.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="926.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1146.7" y="931.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="942.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1146.7" y="915.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.7" y="926.0"></text>
</g>
<g>
<title>RShiftLNode::Opcode() const (1 samples, 0.31%)</title><rect x="1150.3" y="963.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.31%)</title><rect x="1153.9" y="963.0" width="3.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1156.9" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.14%)</title><rect x="1157.5" y="979.0" width="25.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="990.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.14%)</title><rect x="1157.5" y="963.0" width="25.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.5" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.14%)</title><rect x="1157.5" y="947.0" width="25.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.5" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.14%)</title><rect x="1157.5" y="931.0" width="25.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.14%)</title><rect x="1157.5" y="915.0" width="25.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.5" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.14%)</title><rect x="1157.5" y="899.0" width="25.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.5" y="910.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1157.5" y="883.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.5" y="894.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.31%)</title><rect x="1157.5" y="867.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1157.5" y="851.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1157.5" y="835.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="846.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1157.5" y="819.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="830.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.31%)</title><rect x="1157.5" y="803.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.5" y="814.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.31%)</title><rect x="1157.5" y="787.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.5" y="798.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.31%)</title><rect x="1157.5" y="771.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.83%)</title><rect x="1161.1" y="883.0" width="21.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.1" y="894.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.83%)</title><rect x="1161.1" y="867.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.1" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.83%)</title><rect x="1161.1" y="851.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.83%)</title><rect x="1161.1" y="835.0" width="21.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.1" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.83%)</title><rect x="1161.1" y="819.0" width="21.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.22%)</title><rect x="1161.1" y="803.0" width="14.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.1" y="787.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.1" y="771.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.1" y="755.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.1" y="739.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.1" y="723.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.1" y="707.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.1" y="691.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.1" y="675.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.1" y="659.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.1" y="643.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.1" y="627.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.1" y="611.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.1" y="595.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.1" y="579.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.1" y="563.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.1" y="547.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.1" y="531.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.1" y="515.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.1" y="499.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.1" y="483.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.1" y="467.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.1" y="451.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.1" y="435.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.1" y="419.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.1" y="403.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.1" y="387.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.1" y="371.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.1" y="355.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.1" y="339.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.1" y="323.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.1" y="307.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.1" y="291.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.1" y="275.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.1" y="286.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.31%)</title><rect x="1161.1" y="259.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1161.1" y="243.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.1" y="254.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1161.1" y="227.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.1" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.92%)</title><rect x="1164.7" y="787.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1164.7" y="771.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1164.7" y="755.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1164.7" y="739.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1164.7" y="723.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1164.7" y="707.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1164.7" y="691.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1164.7" y="675.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1164.7" y="659.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1164.7" y="643.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1164.7" y="627.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1164.7" y="611.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1164.7" y="595.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1164.7" y="579.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1164.7" y="563.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1164.7" y="547.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1164.7" y="531.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1164.7" y="515.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1164.7" y="499.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1164.7" y="483.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1164.7" y="467.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1164.7" y="451.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1164.7" y="435.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1164.7" y="419.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1164.7" y="403.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1164.7" y="387.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1164.7" y="371.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1164.7" y="355.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1164.7" y="339.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1164.7" y="323.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1164.7" y="307.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1164.7" y="291.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1164.7" y="275.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1164.7" y="259.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1164.7" y="243.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.31%)</title><rect x="1164.7" y="227.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="238.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.31%)</title><rect x="1164.7" y="211.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.31%)</title><rect x="1164.7" y="195.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.31%)</title><rect x="1164.7" y="179.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="227.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="211.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="195.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="179.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="163.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="147.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="131.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="115.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1168.3" y="99.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1168.3" y="83.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1168.3" y="67.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="78.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.31%)</title><rect x="1168.3" y="51.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="62.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.31%)</title><rect x="1168.3" y="35.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1172.0" y="771.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1172.0" y="755.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1172.0" y="739.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1172.0" y="723.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1172.0" y="707.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1172.0" y="691.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1172.0" y="675.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1172.0" y="659.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1172.0" y="643.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1172.0" y="627.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1172.0" y="611.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1172.0" y="595.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1172.0" y="579.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1172.0" y="563.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1172.0" y="547.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.31%)</title><rect x="1172.0" y="531.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.31%)</title><rect x="1172.0" y="515.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.31%)</title><rect x="1172.0" y="499.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1172.0" y="483.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1175.6" y="803.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1175.6" y="787.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.31%)</title><rect x="1175.6" y="771.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="782.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.31%)</title><rect x="1175.6" y="755.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1175.6" y="739.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="750.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1175.6" y="723.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1175.6" y="707.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.31%)</title><rect x="1175.6" y="691.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.31%)</title><rect x="1175.6" y="675.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.31%)</title><rect x="1175.6" y="659.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.31%)</title><rect x="1175.6" y="643.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="654.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.31%)</title><rect x="1175.6" y="627.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="638.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.31%)</title><rect x="1179.2" y="803.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.31%)</title><rect x="1182.8" y="1011.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.31%)</title><rect x="1182.8" y="995.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.31%)</title><rect x="1182.8" y="979.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.31%)</title><rect x="1182.8" y="963.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="974.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.31%)</title><rect x="1182.8" y="947.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="958.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.31%)</title><rect x="1182.8" y="931.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="942.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.31%)</title><rect x="1182.8" y="915.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.31%)</title><rect x="1182.8" y="899.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1182.8" y="883.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.31%)</title><rect x="1182.8" y="867.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1182.8" y="851.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1182.8" y="835.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1182.8" y="819.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1182.8" y="803.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.31%)</title><rect x="1182.8" y="787.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1182.8" y="771.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.31%)</title><rect x="1182.8" y="755.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1182.8" y="739.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1182.8" y="723.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1182.8" y="707.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.31%)</title><rect x="1182.8" y="691.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.31%)</title><rect x="1182.8" y="675.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.31%)</title><rect x="1182.8" y="659.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="1182.8" y="643.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="1182.8" y="627.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.31%)</title><rect x="1186.4" y="1011.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.31%)</title><rect x="1186.4" y="995.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="1006.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.31%)</title><rect x="1186.4" y="979.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.4" y="990.0"></text>
</g>
</g>
</svg>
