<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (94 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 4.26%)</title><rect x="10.0" y="1059.0" width="50.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (4 samples, 4.26%)</title><rect x="10.0" y="1043.0" width="50.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/l..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.06%)</title><rect x="10.0" y="1027.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/370619068.accept (1 samples, 1.06%)</title><rect x="10.0" y="1011.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.06%)</title><rect x="10.0" y="995.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 1.06%)</title><rect x="10.0" y="979.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 3.19%)</title><rect x="22.6" y="1027.0" width="37.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.6" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (3 samples, 3.19%)</title><rect x="22.6" y="1011.0" width="37.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.6" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 1.06%)</title><rect x="22.6" y="995.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 1.06%)</title><rect x="22.6" y="979.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 1.06%)</title><rect x="22.6" y="963.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 1.06%)</title><rect x="22.6" y="947.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 1.06%)</title><rect x="22.6" y="931.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 1.06%)</title><rect x="22.6" y="915.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 1.06%)</title><rect x="22.6" y="899.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 1.06%)</title><rect x="22.6" y="883.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 2.13%)</title><rect x="35.1" y="995.0" width="25.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="38.1" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.06%)</title><rect x="35.1" y="979.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.06%)</title><rect x="35.1" y="963.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 1.06%)</title><rect x="35.1" y="947.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 1.06%)</title><rect x="35.1" y="931.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 1.06%)</title><rect x="35.1" y="915.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 1.06%)</title><rect x="35.1" y="899.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 1.06%)</title><rect x="35.1" y="883.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.1" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 1.06%)</title><rect x="35.1" y="867.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 1.06%)</title><rect x="35.1" y="851.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 1.06%)</title><rect x="35.1" y="835.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 1.06%)</title><rect x="35.1" y="819.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 1.06%)</title><rect x="35.1" y="803.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.1" y="814.0"></text>
</g>
<g>
<title>__writev (1 samples, 1.06%)</title><rect x="35.1" y="787.0" width="12.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="38.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 1.06%)</title><rect x="47.7" y="979.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 1.06%)</title><rect x="47.7" y="963.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 1.06%)</title><rect x="47.7" y="947.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 1.06%)</title><rect x="47.7" y="931.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 1.06%)</title><rect x="47.7" y="915.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 1.06%)</title><rect x="47.7" y="899.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 1.06%)</title><rect x="47.7" y="883.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 1.06%)</title><rect x="47.7" y="867.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 1.06%)</title><rect x="47.7" y="851.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 1.06%)</title><rect x="47.7" y="835.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 1.06%)</title><rect x="47.7" y="819.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 1.06%)</title><rect x="47.7" y="803.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 1.06%)</title><rect x="47.7" y="787.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.7" y="798.0"></text>
</g>
<g>
<title>start_thread (90 samples, 95.74%)</title><rect x="60.2" y="1059.0" width="1129.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="63.2" y="1070.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (90 samples, 95.74%)</title><rect x="60.2" y="1043.0" width="1129.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="63.2" y="1054.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (90 samples, 95.74%)</title><rect x="60.2" y="1027.0" width="1129.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="63.2" y="1038.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (90 samples, 95.74%)</title><rect x="60.2" y="1011.0" width="1129.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="63.2" y="1022.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (90 samples, 95.74%)</title><rect x="60.2" y="995.0" width="1129.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="63.2" y="1006.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (88 samples, 93.62%)</title><rect x="60.2" y="979.0" width="1104.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="63.2" y="990.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (88 samples, 93.62%)</title><rect x="60.2" y="963.0" width="1104.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="63.2" y="974.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (52 samples, 55.32%)</title><rect x="60.2" y="947.0" width="652.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="63.2" y="958.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 3.19%)</title><rect x="60.2" y="931.0" width="37.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="63.2" y="942.0">Com..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.06%)</title><rect x="60.2" y="915.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="63.2" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 1.06%)</title><rect x="72.8" y="915.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="75.8" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 1.06%)</title><rect x="72.8" y="899.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="75.8" y="910.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 1.06%)</title><rect x="85.3" y="915.0" width="12.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="88.3" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.06%)</title><rect x="97.9" y="931.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="100.9" y="942.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 1.06%)</title><rect x="110.4" y="931.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="113.4" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 4.26%)</title><rect x="123.0" y="931.0" width="50.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="126.0" y="942.0">Match..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 4.26%)</title><rect x="123.0" y="915.0" width="50.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="126.0" y="926.0">Match..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 2.13%)</title><rect x="123.0" y="899.0" width="25.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="126.0" y="910.0">A..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 2.13%)</title><rect x="148.1" y="899.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="151.1" y="910.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.06%)</title><rect x="148.1" y="883.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="151.1" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.06%)</title><rect x="148.1" y="867.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="151.1" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 1.06%)</title><rect x="160.6" y="883.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="163.6" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 1.06%)</title><rect x="160.6" y="867.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="163.6" y="878.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 1.06%)</title><rect x="160.6" y="851.0" width="12.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="163.6" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 1.06%)</title><rect x="160.6" y="835.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="163.6" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 2.13%)</title><rect x="173.2" y="931.0" width="25.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="176.2" y="942.0">P..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 1.06%)</title><rect x="173.2" y="915.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="176.2" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 1.06%)</title><rect x="173.2" y="899.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="176.2" y="910.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 1.06%)</title><rect x="173.2" y="883.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="176.2" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 1.06%)</title><rect x="185.7" y="915.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="188.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.06%)</title><rect x="185.7" y="899.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="188.7" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 1.06%)</title><rect x="185.7" y="883.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="188.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 43.62%)</title><rect x="198.3" y="931.0" width="514.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="201.3" y="942.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 1.06%)</title><rect x="198.3" y="915.0" width="12.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="201.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 1.06%)</title><rect x="198.3" y="899.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="201.3" y="910.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 1.06%)</title><rect x="198.3" y="883.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="201.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 4.26%)</title><rect x="210.9" y="915.0" width="50.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="213.9" y="926.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.06%)</title><rect x="223.4" y="899.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="226.4" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.06%)</title><rect x="236.0" y="899.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="239.0" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 1.06%)</title><rect x="248.5" y="899.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="251.5" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.06%)</title><rect x="248.5" y="883.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 7.45%)</title><rect x="261.1" y="915.0" width="87.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="264.1" y="926.0">PhaseChait..</text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 1.06%)</title><rect x="336.4" y="899.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="339.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 9.57%)</title><rect x="348.9" y="915.0" width="113.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="351.9" y="926.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 5.32%)</title><rect x="386.6" y="899.0" width="62.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="389.6" y="910.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 3.19%)</title><rect x="411.7" y="883.0" width="37.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="414.7" y="894.0">Ind..</text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 1.06%)</title><rect x="449.4" y="899.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="452.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 2.13%)</title><rect x="461.9" y="915.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.9" y="926.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 1.06%)</title><rect x="474.5" y="899.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="477.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 2.13%)</title><rect x="487.0" y="915.0" width="25.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="490.0" y="926.0">P..</text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 1.06%)</title><rect x="499.6" y="899.0" width="12.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="502.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 1.06%)</title><rect x="512.1" y="915.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 5.32%)</title><rect x="524.7" y="915.0" width="62.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="527.7" y="926.0">PhaseC..</text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 2.13%)</title><rect x="562.3" y="899.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="565.3" y="910.0">R..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 3.19%)</title><rect x="587.4" y="915.0" width="37.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.4" y="926.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 3.19%)</title><rect x="587.4" y="899.0" width="37.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="590.4" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 1.06%)</title><rect x="612.6" y="883.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="615.6" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.06%)</title><rect x="612.6" y="867.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="615.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 1.06%)</title><rect x="625.1" y="915.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="628.1" y="926.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 1.06%)</title><rect x="637.7" y="915.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="640.7" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 1.06%)</title><rect x="637.7" y="899.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="640.7" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 1.06%)</title><rect x="637.7" y="883.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.7" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 1.06%)</title><rect x="637.7" y="867.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.7" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 3.19%)</title><rect x="650.2" y="915.0" width="37.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="653.2" y="926.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.06%)</title><rect x="675.3" y="899.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="678.3" y="910.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 1.06%)</title><rect x="687.9" y="915.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.9" y="926.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 1.06%)</title><rect x="700.4" y="915.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.4" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 31.91%)</title><rect x="713.0" y="947.0" width="376.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.0" y="958.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 1.06%)</title><rect x="713.0" y="931.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="716.0" y="942.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 1.06%)</title><rect x="713.0" y="915.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.0" y="926.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 1.06%)</title><rect x="713.0" y="899.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="716.0" y="910.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 1.06%)</title><rect x="725.5" y="931.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.06%)</title><rect x="738.1" y="931.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="741.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.06%)</title><rect x="738.1" y="915.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 1.06%)</title><rect x="738.1" y="899.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="741.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 1.06%)</title><rect x="738.1" y="883.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="741.1" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 2.13%)</title><rect x="750.6" y="931.0" width="25.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="753.6" y="942.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 20.21%)</title><rect x="775.7" y="931.0" width="238.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="778.7" y="942.0">PhaseIdealLoop::build_and_optimi..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 1.06%)</title><rect x="775.7" y="915.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="778.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 2.13%)</title><rect x="788.3" y="915.0" width="25.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.3" y="926.0">P..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 1.06%)</title><rect x="800.9" y="899.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="803.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.06%)</title><rect x="813.4" y="915.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="816.4" y="926.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 1.06%)</title><rect x="813.4" y="899.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 13.83%)</title><rect x="826.0" y="915.0" width="163.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="829.0" y="926.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 9.57%)</title><rect x="876.2" y="899.0" width="112.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="879.2" y="910.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 9.57%)</title><rect x="876.2" y="883.0" width="112.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="879.2" y="894.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (9 samples, 9.57%)</title><rect x="876.2" y="867.0" width="112.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.2" y="878.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 1.06%)</title><rect x="989.1" y="915.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.06%)</title><rect x="1001.7" y="915.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.06%)</title><rect x="1001.7" y="899.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1004.7" y="910.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 1.06%)</title><rect x="1001.7" y="883.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 5.32%)</title><rect x="1014.3" y="931.0" width="62.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1017.3" y="942.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 5.32%)</title><rect x="1014.3" y="915.0" width="62.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.3" y="926.0">PhaseI..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.06%)</title><rect x="1014.3" y="899.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.3" y="910.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.06%)</title><rect x="1014.3" y="883.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.3" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.06%)</title><rect x="1014.3" y="867.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1017.3" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.06%)</title><rect x="1014.3" y="851.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.3" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.06%)</title><rect x="1014.3" y="835.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.3" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.06%)</title><rect x="1026.8" y="899.0" width="12.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.8" y="910.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 2.13%)</title><rect x="1039.4" y="899.0" width="25.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.4" y="910.0">R..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.06%)</title><rect x="1051.9" y="883.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.9" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.06%)</title><rect x="1051.9" y="867.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.9" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 1.06%)</title><rect x="1051.9" y="851.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.9" y="862.0"></text>
</g>
<g>
<title>URShiftLNode::Opcode() const (1 samples, 1.06%)</title><rect x="1064.5" y="899.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.5" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 1.06%)</title><rect x="1077.0" y="931.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.0" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 1.06%)</title><rect x="1077.0" y="915.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.0" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 1.06%)</title><rect x="1077.0" y="899.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.0" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 1.06%)</title><rect x="1077.0" y="883.0" width="12.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.0" y="894.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 1.06%)</title><rect x="1077.0" y="867.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 6.38%)</title><rect x="1089.6" y="947.0" width="75.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.6" y="958.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 6.38%)</title><rect x="1089.6" y="931.0" width="75.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.6" y="942.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 6.38%)</title><rect x="1089.6" y="915.0" width="75.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="926.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 6.38%)</title><rect x="1089.6" y="899.0" width="75.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="910.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 6.38%)</title><rect x="1089.6" y="883.0" width="75.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.6" y="894.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 6.38%)</title><rect x="1089.6" y="867.0" width="75.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.6" y="878.0">Parse::d..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 6.38%)</title><rect x="1089.6" y="851.0" width="75.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="862.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 6.38%)</title><rect x="1089.6" y="835.0" width="75.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.6" y="846.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 6.38%)</title><rect x="1089.6" y="819.0" width="75.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.6" y="830.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 6.38%)</title><rect x="1089.6" y="803.0" width="75.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.6" y="814.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 6.38%)</title><rect x="1089.6" y="787.0" width="75.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.6" y="798.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 6.38%)</title><rect x="1089.6" y="771.0" width="75.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.6" y="782.0">Parse::d..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.19%)</title><rect x="1089.6" y="755.0" width="37.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.6" y="766.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.19%)</title><rect x="1089.6" y="739.0" width="37.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.6" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.19%)</title><rect x="1089.6" y="723.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.6" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.19%)</title><rect x="1089.6" y="707.0" width="37.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.6" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.19%)</title><rect x="1089.6" y="691.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.6" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.19%)</title><rect x="1089.6" y="675.0" width="37.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.6" y="686.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.13%)</title><rect x="1089.6" y="659.0" width="25.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="670.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.13%)</title><rect x="1089.6" y="643.0" width="25.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.6" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.13%)</title><rect x="1089.6" y="627.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.6" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.13%)</title><rect x="1089.6" y="611.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.6" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.13%)</title><rect x="1089.6" y="595.0" width="25.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.6" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.13%)</title><rect x="1089.6" y="579.0" width="25.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.6" y="590.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.13%)</title><rect x="1089.6" y="563.0" width="25.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.6" y="574.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.13%)</title><rect x="1089.6" y="547.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.6" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1089.6" y="531.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1089.6" y="515.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1089.6" y="499.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1089.6" y="483.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1089.6" y="467.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1089.6" y="451.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1089.6" y="435.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1089.6" y="419.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1089.6" y="403.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1089.6" y="387.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1089.6" y="371.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1089.6" y="355.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1089.6" y="339.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1089.6" y="323.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1089.6" y="307.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1089.6" y="291.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1089.6" y="275.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1089.6" y="259.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1089.6" y="243.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1089.6" y="227.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1089.6" y="211.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1089.6" y="195.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1089.6" y="179.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1089.6" y="163.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1089.6" y="147.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1089.6" y="131.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1089.6" y="115.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 1.06%)</title><rect x="1089.6" y="99.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.6" y="110.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 1.06%)</title><rect x="1089.6" y="83.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.06%)</title><rect x="1089.6" y="67.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.6" y="78.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 1.06%)</title><rect x="1089.6" y="51.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.6" y="62.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 1.06%)</title><rect x="1089.6" y="35.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.6" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 1.06%)</title><rect x="1102.1" y="531.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.1" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 1.06%)</title><rect x="1102.1" y="515.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.1" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 1.06%)</title><rect x="1102.1" y="499.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.1" y="510.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 1.06%)</title><rect x="1102.1" y="483.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.1" y="494.0"></text>
</g>
<g>
<title>Mutex::Mutex(int, char const*, bool) (1 samples, 1.06%)</title><rect x="1102.1" y="467.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="659.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="643.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1114.7" y="627.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1114.7" y="611.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1114.7" y="595.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1114.7" y="579.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1114.7" y="563.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="547.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1114.7" y="531.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1114.7" y="515.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1114.7" y="499.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1114.7" y="483.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1114.7" y="467.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="451.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1114.7" y="435.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1114.7" y="419.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1114.7" y="403.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1114.7" y="387.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1114.7" y="371.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.7" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="355.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="339.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1114.7" y="323.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1114.7" y="307.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1114.7" y="291.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1114.7" y="275.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1114.7" y="259.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1114.7" y="243.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1114.7" y="227.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1114.7" y="211.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1114.7" y="195.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1114.7" y="179.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.06%)</title><rect x="1114.7" y="163.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.06%)</title><rect x="1114.7" y="147.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.7" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 1.06%)</title><rect x="1114.7" y="131.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="142.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 1.06%)</title><rect x="1114.7" y="115.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.06%)</title><rect x="1114.7" y="99.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 1.06%)</title><rect x="1114.7" y="83.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="94.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 1.06%)</title><rect x="1114.7" y="67.0" width="12.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1117.7" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 3.19%)</title><rect x="1127.2" y="755.0" width="37.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="766.0">Pre..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.19%)</title><rect x="1127.2" y="739.0" width="37.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="750.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.19%)</title><rect x="1127.2" y="723.0" width="37.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.2" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.19%)</title><rect x="1127.2" y="707.0" width="37.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.19%)</title><rect x="1127.2" y="691.0" width="37.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="702.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.19%)</title><rect x="1127.2" y="675.0" width="37.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.2" y="686.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.19%)</title><rect x="1127.2" y="659.0" width="37.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.2" y="670.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.19%)</title><rect x="1127.2" y="643.0" width="37.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="654.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.19%)</title><rect x="1127.2" y="627.0" width="37.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="638.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.19%)</title><rect x="1127.2" y="611.0" width="37.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.19%)</title><rect x="1127.2" y="595.0" width="37.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.19%)</title><rect x="1127.2" y="579.0" width="37.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.2" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.19%)</title><rect x="1127.2" y="563.0" width="37.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="574.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.13%)</title><rect x="1127.2" y="547.0" width="25.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.13%)</title><rect x="1127.2" y="531.0" width="25.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.13%)</title><rect x="1127.2" y="515.0" width="25.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.2" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.13%)</title><rect x="1127.2" y="499.0" width="25.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.2" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.13%)</title><rect x="1127.2" y="483.0" width="25.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.2" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1127.2" y="467.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1127.2" y="451.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1127.2" y="435.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1127.2" y="419.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1127.2" y="403.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1127.2" y="387.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1127.2" y="371.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1127.2" y="355.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1127.2" y="339.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1127.2" y="323.0" width="12.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1127.2" y="307.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1127.2" y="291.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.06%)</title><rect x="1127.2" y="275.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1127.2" y="259.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.06%)</title><rect x="1127.2" y="243.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.06%)</title><rect x="1127.2" y="227.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.06%)</title><rect x="1127.2" y="211.0" width="12.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.06%)</title><rect x="1127.2" y="195.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.06%)</title><rect x="1127.2" y="179.0" width="12.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.06%)</title><rect x="1127.2" y="163.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 1.06%)</title><rect x="1127.2" y="147.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="158.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 1.06%)</title><rect x="1127.2" y="131.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.06%)</title><rect x="1127.2" y="115.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.2" y="126.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.06%)</title><rect x="1127.2" y="99.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.2" y="110.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.06%)</title><rect x="1127.2" y="83.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.2" y="94.0"></text>
</g>
<g>
<title>ShenandoahBarrierNode::skip_through_barrier(Node*) (1 samples, 1.06%)</title><rect x="1127.2" y="67.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.06%)</title><rect x="1139.8" y="467.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 1.06%)</title><rect x="1139.8" y="451.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 1.06%)</title><rect x="1139.8" y="435.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.8" y="446.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 1.06%)</title><rect x="1139.8" y="419.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.06%)</title><rect x="1139.8" y="403.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="414.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 1.06%)</title><rect x="1139.8" y="387.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.8" y="398.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 1.06%)</title><rect x="1139.8" y="371.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.06%)</title><rect x="1152.3" y="547.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 1.06%)</title><rect x="1152.3" y="531.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.3" y="542.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 1.06%)</title><rect x="1152.3" y="515.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.3" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 2.13%)</title><rect x="1164.9" y="979.0" width="25.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="990.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 2.13%)</title><rect x="1164.9" y="963.0" width="25.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="974.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 2.13%)</title><rect x="1164.9" y="947.0" width="25.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="958.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 1.06%)</title><rect x="1164.9" y="931.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="942.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.06%)</title><rect x="1164.9" y="915.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.06%)</title><rect x="1164.9" y="899.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="910.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.06%)</title><rect x="1164.9" y="883.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.06%)</title><rect x="1164.9" y="867.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.06%)</title><rect x="1164.9" y="851.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.06%)</title><rect x="1164.9" y="835.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 1.06%)</title><rect x="1164.9" y="819.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="830.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 1.06%)</title><rect x="1164.9" y="803.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.06%)</title><rect x="1177.4" y="931.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.06%)</title><rect x="1177.4" y="915.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 1.06%)</title><rect x="1177.4" y="899.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 1.06%)</title><rect x="1177.4" y="883.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 1.06%)</title><rect x="1177.4" y="867.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
</g>
</svg>
