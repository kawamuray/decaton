<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (278 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.55%)</title><rect x="10.0" y="915.0" width="89.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.55%)</title><rect x="10.0" y="899.0" width="89.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.36%)</title><rect x="10.0" y="883.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.36%)</title><rect x="10.0" y="867.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.88%)</title><rect x="14.2" y="883.0" width="34.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="894.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1218505439.accept (8 samples, 2.88%)</title><rect x="14.2" y="867.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (8 samples, 2.88%)</title><rect x="14.2" y="851.0" width="34.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="862.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.08%)</title><rect x="14.2" y="835.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.08%)</title><rect x="14.2" y="819.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.08%)</title><rect x="14.2" y="803.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.08%)</title><rect x="14.2" y="787.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.08%)</title><rect x="14.2" y="771.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.08%)</title><rect x="14.2" y="755.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.36%)</title><rect x="22.7" y="739.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.36%)</title><rect x="22.7" y="723.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.36%)</title><rect x="22.7" y="707.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 1.80%)</title><rect x="27.0" y="835.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.0" y="846.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.80%)</title><rect x="27.0" y="819.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.0" y="830.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.08%)</title><rect x="31.2" y="803.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.2" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.72%)</title><rect x="31.2" y="787.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.2" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.72%)</title><rect x="31.2" y="771.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.2" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.72%)</title><rect x="31.2" y="755.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.2" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="35.5" y="739.0" width="4.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="38.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.36%)</title><rect x="39.7" y="787.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.7" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="44.0" y="803.0" width="4.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="47.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.32%)</title><rect x="48.2" y="883.0" width="50.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.2" y="894.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.32%)</title><rect x="48.2" y="867.0" width="50.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.2" y="878.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.88%)</title><rect x="48.2" y="851.0" width="34.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.2" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.72%)</title><rect x="48.2" y="835.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.72%)</title><rect x="48.2" y="819.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="48.2" y="803.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="48.2" y="787.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.36%)</title><rect x="48.2" y="771.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.36%)</title><rect x="48.2" y="755.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.36%)</title><rect x="48.2" y="739.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.36%)</title><rect x="48.2" y="723.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="48.2" y="707.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.36%)</title><rect x="48.2" y="691.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.36%)</title><rect x="52.4" y="803.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.36%)</title><rect x="52.4" y="787.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.36%)</title><rect x="52.4" y="771.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.36%)</title><rect x="52.4" y="755.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.36%)</title><rect x="52.4" y="739.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.36%)</title><rect x="52.4" y="723.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="52.4" y="707.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.16%)</title><rect x="56.7" y="835.0" width="25.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.7" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.16%)</title><rect x="56.7" y="819.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.7" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.80%)</title><rect x="56.7" y="803.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.7" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.80%)</title><rect x="56.7" y="787.0" width="21.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.7" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.08%)</title><rect x="56.7" y="771.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.72%)</title><rect x="60.9" y="755.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.72%)</title><rect x="60.9" y="739.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.72%)</title><rect x="60.9" y="723.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.72%)</title><rect x="60.9" y="707.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.72%)</title><rect x="60.9" y="691.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.72%)</title><rect x="60.9" y="675.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.72%)</title><rect x="60.9" y="659.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.72%)</title><rect x="69.4" y="771.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.72%)</title><rect x="69.4" y="755.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.72%)</title><rect x="69.4" y="739.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.4" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.72%)</title><rect x="69.4" y="723.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.4" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.36%)</title><rect x="73.7" y="707.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="76.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.36%)</title><rect x="77.9" y="803.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.36%)</title><rect x="77.9" y="787.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="77.9" y="771.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.08%)</title><rect x="82.2" y="851.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.08%)</title><rect x="82.2" y="835.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.08%)</title><rect x="82.2" y="819.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.36%)</title><rect x="86.4" y="803.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.36%)</title><rect x="86.4" y="787.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="86.4" y="771.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="86.4" y="755.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="86.4" y="739.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="86.4" y="723.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="86.4" y="707.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.36%)</title><rect x="86.4" y="691.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/336310473.get (1 samples, 0.36%)</title><rect x="86.4" y="675.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.36%)</title><rect x="90.6" y="803.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.36%)</title><rect x="90.6" y="787.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="90.6" y="771.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="90.6" y="755.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="90.6" y="739.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="90.6" y="723.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="90.6" y="707.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.36%)</title><rect x="90.6" y="691.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.36%)</title><rect x="90.6" y="675.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.36%)</title><rect x="90.6" y="659.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.36%)</title><rect x="90.6" y="643.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.6" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="90.6" y="627.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="93.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="94.9" y="851.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="94.9" y="835.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="94.9" y="819.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.36%)</title><rect x="94.9" y="803.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.36%)</title><rect x="94.9" y="787.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.36%)</title><rect x="94.9" y="771.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.36%)</title><rect x="94.9" y="755.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.36%)</title><rect x="94.9" y="739.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.36%)</title><rect x="94.9" y="723.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (142 samples, 51.08%)</title><rect x="99.1" y="915.0" width="602.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (142 samples, 51.08%)</title><rect x="99.1" y="899.0" width="602.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.1" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (142 samples, 51.08%)</title><rect x="99.1" y="883.0" width="602.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.1" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="99.1" y="867.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="102.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="99.1" y="851.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.1" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="99.1" y="835.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="102.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.36%)</title><rect x="99.1" y="819.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="102.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/194043057.run (131 samples, 47.12%)</title><rect x="103.4" y="867.0" width="556.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.4" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/194043057.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (131 samples, 47.12%)</title><rect x="103.4" y="851.0" width="556.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.4" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 47.12%)</title><rect x="103.4" y="835.0" width="556.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.4" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (131 samples, 47.12%)</title><rect x="103.4" y="819.0" width="556.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.4" y="830.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (15 samples, 5.40%)</title><rect x="111.9" y="803.0" width="63.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.9" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (15 samples, 5.40%)</title><rect x="111.9" y="787.0" width="63.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.9" y="798.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 5.40%)</title><rect x="111.9" y="771.0" width="63.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.9" y="782.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 3.96%)</title><rect x="128.8" y="755.0" width="46.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.8" y="766.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 3.96%)</title><rect x="128.8" y="739.0" width="46.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.8" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 3.96%)</title><rect x="128.8" y="723.0" width="46.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.8" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.44%)</title><rect x="128.8" y="707.0" width="17.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="131.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.08%)</title><rect x="133.1" y="691.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 2.16%)</title><rect x="145.8" y="707.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.8" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.16%)</title><rect x="145.8" y="691.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.8" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.72%)</title><rect x="145.8" y="675.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="145.8" y="659.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="145.8" y="643.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="145.8" y="627.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.36%)</title><rect x="150.1" y="659.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.44%)</title><rect x="154.3" y="675.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="157.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.44%)</title><rect x="154.3" y="659.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.44%)</title><rect x="154.3" y="643.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.36%)</title><rect x="158.6" y="627.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.36%)</title><rect x="158.6" y="611.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="161.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.36%)</title><rect x="158.6" y="595.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.36%)</title><rect x="158.6" y="579.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.36%)</title><rect x="158.6" y="563.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="162.8" y="627.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="162.8" y="611.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="162.8" y="595.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.36%)</title><rect x="167.1" y="627.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.36%)</title><rect x="167.1" y="611.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.36%)</title><rect x="171.3" y="707.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.36%)</title><rect x="171.3" y="691.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.36%)</title><rect x="171.3" y="675.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.36%)</title><rect x="171.3" y="659.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="174.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="171.3" y="643.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="174.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (111 samples, 39.93%)</title><rect x="175.5" y="803.0" width="471.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.5" y="814.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 5.04%)</title><rect x="175.5" y="787.0" width="59.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="178.5" y="798.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 5.04%)</title><rect x="175.5" y="771.0" width="59.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="178.5" y="782.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 5.04%)</title><rect x="175.5" y="755.0" width="59.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.5" y="766.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="179.8" y="739.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="179.8" y="723.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="179.8" y="707.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="179.8" y="691.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 4.32%)</title><rect x="184.0" y="739.0" width="51.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.0" y="750.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.16%)</title><rect x="209.5" y="723.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.5" y="734.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.36%)</title><rect x="209.5" y="707.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.36%)</title><rect x="209.5" y="691.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.80%)</title><rect x="213.7" y="707.0" width="21.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.7" y="718.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="235.0" y="787.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="235.0" y="771.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="235.0" y="755.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 7.19%)</title><rect x="239.2" y="787.0" width="84.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.2" y="798.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 7.19%)</title><rect x="239.2" y="771.0" width="84.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.2" y="782.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.44%)</title><rect x="243.5" y="755.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.44%)</title><rect x="243.5" y="739.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.5" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.72%)</title><rect x="243.5" y="723.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.5" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.72%)</title><rect x="243.5" y="707.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.5" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.72%)</title><rect x="243.5" y="691.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.72%)</title><rect x="243.5" y="675.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="247.7" y="659.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="250.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="247.7" y="643.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="250.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="247.7" y="627.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="250.7" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.36%)</title><rect x="247.7" y="611.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="250.7" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.72%)</title><rect x="251.9" y="723.0" width="8.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="254.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.72%)</title><rect x="260.4" y="755.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.72%)</title><rect x="260.4" y="739.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.72%)</title><rect x="260.4" y="723.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.4" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 4.68%)</title><rect x="268.9" y="755.0" width="55.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.9" y="766.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 4.68%)</title><rect x="268.9" y="739.0" width="55.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.9" y="750.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 4.68%)</title><rect x="268.9" y="723.0" width="55.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.9" y="734.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.96%)</title><rect x="277.4" y="707.0" width="46.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.4" y="718.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.88%)</title><rect x="290.1" y="691.0" width="34.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.1" y="702.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.36%)</title><rect x="307.1" y="675.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.36%)</title><rect x="311.4" y="675.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="311.4" y="659.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="314.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="311.4" y="643.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="314.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="311.4" y="627.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="314.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="311.4" y="611.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="314.4" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.36%)</title><rect x="311.4" y="595.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="314.4" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.36%)</title><rect x="311.4" y="579.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="314.4" y="590.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.72%)</title><rect x="315.6" y="675.0" width="8.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="318.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (68 samples, 24.46%)</title><rect x="324.1" y="787.0" width="288.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.1" y="798.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (68 samples, 24.46%)</title><rect x="324.1" y="771.0" width="288.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.1" y="782.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1702093299.process (56 samples, 20.14%)</title><rect x="332.6" y="755.0" width="237.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.6" y="766.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (56 samples, 20.14%)</title><rect x="332.6" y="739.0" width="237.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.6" y="750.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 20.14%)</title><rect x="332.6" y="723.0" width="237.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.6" y="734.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (52 samples, 18.71%)</title><rect x="332.6" y="707.0" width="220.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.6" y="718.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (52 samples, 18.71%)</title><rect x="332.6" y="691.0" width="220.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.6" y="702.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (40 samples, 14.39%)</title><rect x="370.8" y="675.0" width="169.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="373.8" y="686.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.80%)</title><rect x="383.5" y="659.0" width="21.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="386.5" y="670.0">H..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="404.7" y="659.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="407.7" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="409.0" y="659.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="412.0" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="409.0" y="643.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="412.0" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.36%)</title><rect x="413.2" y="659.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="416.2" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 10.43%)</title><rect x="417.5" y="659.0" width="123.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="420.5" y="670.0">os::sleep(Threa..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="442.9" y="643.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="445.9" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="442.9" y="627.0" width="4.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="445.9" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.72%)</title><rect x="447.2" y="643.0" width="8.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="450.2" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 3.60%)</title><rect x="455.7" y="643.0" width="42.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="458.7" y="654.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.72%)</title><rect x="498.1" y="643.0" width="8.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="501.1" y="654.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.36%)</title><rect x="506.6" y="643.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="509.6" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.36%)</title><rect x="510.9" y="643.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="513.9" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.80%)</title><rect x="515.1" y="643.0" width="21.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="518.1" y="654.0">o..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="536.3" y="643.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="539.3" y="654.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.72%)</title><rect x="540.6" y="675.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.6" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="549.1" y="675.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="552.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.44%)</title><rect x="553.3" y="707.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.3" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 2.16%)</title><rect x="570.3" y="755.0" width="25.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.3" y="766.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 2.16%)</title><rect x="570.3" y="739.0" width="25.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.3" y="750.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/2088743645.get$Lambda (6 samples, 2.16%)</title><rect x="570.3" y="723.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.3" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/2088743645.&lt;init&gt; (5 samples, 1.80%)</title><rect x="574.5" y="707.0" width="21.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="577.5" y="718.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="591.5" y="691.0" width="4.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="594.5" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="591.5" y="675.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="594.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="595.8" y="755.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="598.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="595.8" y="739.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.8" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.36%)</title><rect x="595.8" y="723.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="598.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 1.08%)</title><rect x="600.0" y="755.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/SubscriptionScope.subscriptionId (1 samples, 0.36%)</title><rect x="612.7" y="787.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 1.80%)</title><rect x="617.0" y="787.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.0" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.36%)</title><rect x="617.0" y="771.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="617.0" y="755.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="620.0" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.44%)</title><rect x="621.2" y="771.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.2" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.36%)</title><rect x="638.2" y="787.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.2" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.36%)</title><rect x="638.2" y="771.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="641.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/674257536.linkToTargetMethod (1 samples, 0.36%)</title><rect x="638.2" y="755.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.2" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/678628769.invokeStatic_D_L (1 samples, 0.36%)</title><rect x="638.2" y="739.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="641.2" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$259/2059201302.get$Lambda (1 samples, 0.36%)</title><rect x="638.2" y="723.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="641.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.36%)</title><rect x="642.4" y="787.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.36%)</title><rect x="642.4" y="771.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="645.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="642.4" y="755.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/896474223.accept (1 samples, 0.36%)</title><rect x="642.4" y="739.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.36%)</title><rect x="642.4" y="723.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="642.4" y="707.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.4" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="642.4" y="691.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.4" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="642.4" y="675.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.08%)</title><rect x="646.7" y="803.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="649.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.08%)</title><rect x="646.7" y="787.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="649.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="655.2" y="771.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/896474223.accept (1 samples, 0.36%)</title><rect x="655.2" y="755.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.36%)</title><rect x="655.2" y="739.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="655.2" y="723.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.2" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="655.2" y="707.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.2" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="655.2" y="691.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 1.80%)</title><rect x="659.4" y="867.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.4" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.80%)</title><rect x="659.4" y="851.0" width="21.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.4" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.80%)</title><rect x="659.4" y="835.0" width="21.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.4" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.80%)</title><rect x="659.4" y="819.0" width="21.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.4" y="830.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="672.2" y="803.0" width="4.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="675.2" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="672.2" y="787.0" width="4.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="675.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.36%)</title><rect x="676.4" y="803.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.80%)</title><rect x="680.6" y="867.0" width="21.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.6" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.80%)</title><rect x="680.6" y="851.0" width="21.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.6" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.36%)</title><rect x="684.9" y="835.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.36%)</title><rect x="684.9" y="819.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="687.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.36%)</title><rect x="684.9" y="803.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="687.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.36%)</title><rect x="684.9" y="787.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="687.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.08%)</title><rect x="689.1" y="835.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.08%)</title><rect x="689.1" y="819.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.08%)</title><rect x="689.1" y="803.0" width="12.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.08%)</title><rect x="689.1" y="787.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="692.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.72%)</title><rect x="701.9" y="915.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.72%)</title><rect x="701.9" y="899.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="704.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.72%)</title><rect x="701.9" y="883.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.72%)</title><rect x="701.9" y="867.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.72%)</title><rect x="701.9" y="851.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.72%)</title><rect x="701.9" y="835.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.36%)</title><rect x="701.9" y="819.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.36%)</title><rect x="701.9" y="803.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.36%)</title><rect x="701.9" y="787.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.9" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.36%)</title><rect x="701.9" y="771.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.9" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.36%)</title><rect x="701.9" y="755.0" width="4.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="704.9" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.36%)</title><rect x="701.9" y="739.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="704.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.36%)</title><rect x="706.1" y="819.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="709.1" y="830.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.36%)</title><rect x="706.1" y="803.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="709.1" y="814.0"></text>
</g>
<g>
<title>start_thread (113 samples, 40.65%)</title><rect x="710.4" y="915.0" width="479.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="713.4" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (113 samples, 40.65%)</title><rect x="710.4" y="899.0" width="479.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="713.4" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.24%)</title><rect x="710.4" y="883.0" width="38.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.4" y="894.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.36%)</title><rect x="710.4" y="867.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="713.4" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.36%)</title><rect x="710.4" y="851.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="713.4" y="862.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.36%)</title><rect x="710.4" y="835.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="713.4" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.88%)</title><rect x="714.6" y="867.0" width="34.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="717.6" y="878.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.16%)</title><rect x="714.6" y="851.0" width="25.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.6" y="862.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.80%)</title><rect x="714.6" y="835.0" width="21.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="717.6" y="846.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.08%)</title><rect x="723.1" y="819.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.1" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.36%)</title><rect x="727.3" y="803.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="730.3" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.36%)</title><rect x="731.6" y="803.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="734.6" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.36%)</title><rect x="735.8" y="835.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="738.8" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="740.1" y="851.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.1" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.36%)</title><rect x="740.1" y="835.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="743.1" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="740.1" y="819.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.1" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="740.1" y="803.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="743.1" y="814.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.36%)</title><rect x="740.1" y="787.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="743.1" y="798.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.36%)</title><rect x="740.1" y="771.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="743.1" y="782.0"></text>
</g>
<g>
<title>metadata_Relocation::value() (1 samples, 0.36%)</title><rect x="740.1" y="755.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.1" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="744.3" y="851.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="747.3" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="744.3" y="835.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="747.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="744.3" y="819.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.3" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.36%)</title><rect x="744.3" y="803.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.3" y="814.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.36%)</title><rect x="744.3" y="787.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="747.3" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (104 samples, 37.41%)</title><rect x="748.6" y="883.0" width="441.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="751.6" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 37.41%)</title><rect x="748.6" y="867.0" width="441.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="751.6" y="878.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 37.41%)</title><rect x="748.6" y="851.0" width="441.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.6" y="862.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 37.41%)</title><rect x="748.6" y="835.0" width="441.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="751.6" y="846.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (100 samples, 35.97%)</title><rect x="748.6" y="819.0" width="424.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="751.6" y="830.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (100 samples, 35.97%)</title><rect x="748.6" y="803.0" width="424.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.6" y="814.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 19.06%)</title><rect x="748.6" y="787.0" width="224.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="751.6" y="798.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.36%)</title><rect x="748.6" y="771.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="751.6" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.36%)</title><rect x="748.6" y="755.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="751.6" y="766.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.36%)</title><rect x="748.6" y="739.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="751.6" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.44%)</title><rect x="752.8" y="771.0" width="17.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="755.8" y="782.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.36%)</title><rect x="752.8" y="755.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="755.8" y="766.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.36%)</title><rect x="757.1" y="755.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.1" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="757.1" y="739.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.1" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="757.1" y="723.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.1" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.72%)</title><rect x="761.3" y="755.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="764.3" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.72%)</title><rect x="761.3" y="739.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.3" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.16%)</title><rect x="769.8" y="771.0" width="25.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="772.8" y="782.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.36%)</title><rect x="769.8" y="755.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.8" y="766.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.36%)</title><rect x="769.8" y="739.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="772.8" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.80%)</title><rect x="774.0" y="755.0" width="21.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="777.0" y="766.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 1.44%)</title><rect x="774.0" y="739.0" width="17.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="777.0" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.36%)</title><rect x="791.0" y="739.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="794.0" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.36%)</title><rect x="791.0" y="723.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="794.0" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.36%)</title><rect x="791.0" y="707.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.0" y="718.0"></text>
</g>
<g>
<title>State::_sub_Op_RegP(Node const*) (1 samples, 0.36%)</title><rect x="791.0" y="691.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.72%)</title><rect x="795.3" y="771.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.3" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.72%)</title><rect x="795.3" y="755.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="795.3" y="739.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="798.3" y="750.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.36%)</title><rect x="795.3" y="723.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="798.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="799.5" y="739.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="802.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 13.67%)</title><rect x="803.7" y="771.0" width="161.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.7" y="782.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.36%)</title><rect x="808.0" y="755.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.0" y="766.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="812.2" y="755.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="815.2" y="766.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.36%)</title><rect x="812.2" y="739.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="815.2" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="812.2" y="723.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="815.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.08%)</title><rect x="816.5" y="755.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.36%)</title><rect x="816.5" y="739.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.5" y="750.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.36%)</title><rect x="816.5" y="723.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="819.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.72%)</title><rect x="820.7" y="739.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="823.7" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="820.7" y="723.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="823.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.36%)</title><rect x="829.2" y="755.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="832.2" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.36%)</title><rect x="829.2" y="739.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="832.2" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.36%)</title><rect x="829.2" y="723.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.80%)</title><rect x="833.5" y="755.0" width="21.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="836.5" y="766.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.52%)</title><rect x="854.7" y="755.0" width="29.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.7" y="766.0">Ph..</text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.36%)</title><rect x="867.4" y="739.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.08%)</title><rect x="871.7" y="739.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="874.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.36%)</title><rect x="884.4" y="755.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.44%)</title><rect x="888.6" y="755.0" width="17.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.6" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.36%)</title><rect x="897.1" y="739.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="900.1" y="750.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.36%)</title><rect x="901.4" y="739.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="904.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.72%)</title><rect x="905.6" y="755.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="908.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.36%)</title><rect x="909.9" y="739.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.9" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 2.52%)</title><rect x="914.1" y="755.0" width="29.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.1" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.52%)</title><rect x="914.1" y="739.0" width="29.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.1" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.52%)</title><rect x="914.1" y="723.0" width="29.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="917.1" y="734.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.36%)</title><rect x="914.1" y="707.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.1" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.80%)</title><rect x="918.3" y="707.0" width="21.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.3" y="718.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="935.3" y="691.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="938.3" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.36%)</title><rect x="939.6" y="707.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.36%)</title><rect x="943.8" y="755.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="943.8" y="739.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.36%)</title><rect x="948.1" y="755.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="951.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.36%)</title><rect x="948.1" y="739.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="951.1" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.72%)</title><rect x="952.3" y="755.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="955.3" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="956.5" y="739.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.5" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="956.5" y="723.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="959.5" y="734.0"></text>
</g>
<g>
<title>storePNode::oper_input_base() const (1 samples, 0.36%)</title><rect x="960.8" y="755.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.8" y="766.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.36%)</title><rect x="965.0" y="771.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="968.0" y="782.0"></text>
</g>
<g>
<title>jmpConUNode::out_RegMask() const (1 samples, 0.36%)</title><rect x="969.3" y="771.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="972.3" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 14.39%)</title><rect x="973.5" y="787.0" width="169.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.5" y="798.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.36%)</title><rect x="973.5" y="771.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.36%)</title><rect x="973.5" y="755.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="973.5" y="739.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.36%)</title><rect x="973.5" y="723.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="976.5" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.36%)</title><rect x="977.8" y="771.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.8" y="782.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="977.8" y="755.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (33 samples, 11.87%)</title><rect x="982.0" y="771.0" width="140.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.0" y="782.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="982.0" y="755.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.0" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="982.0" y="739.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.0" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="982.0" y="723.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.0" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="982.0" y="707.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="982.0" y="691.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.36%)</title><rect x="982.0" y="675.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.72%)</title><rect x="986.3" y="755.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="994.7" y="755.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.36%)</title><rect x="994.7" y="739.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (25 samples, 8.99%)</title><rect x="999.0" y="755.0" width="106.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.0" y="766.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (24 samples, 8.63%)</title><rect x="1003.2" y="739.0" width="101.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.2" y="750.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1007.5" y="723.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (22 samples, 7.91%)</title><rect x="1011.7" y="723.0" width="93.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.7" y="734.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.72%)</title><rect x="1096.6" y="707.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.72%)</title><rect x="1105.1" y="755.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.72%)</title><rect x="1113.6" y="755.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.72%)</title><rect x="1113.6" y="739.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1113.6" y="723.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.6" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.36%)</title><rect x="1113.6" y="707.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.6" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1117.8" y="723.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.8" y="734.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.36%)</title><rect x="1117.8" y="707.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.80%)</title><rect x="1122.1" y="771.0" width="21.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.1" y="782.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.80%)</title><rect x="1122.1" y="755.0" width="21.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.1" y="766.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1122.1" y="739.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.1" y="750.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.36%)</title><rect x="1122.1" y="723.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.1" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.36%)</title><rect x="1122.1" y="707.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.1" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1122.1" y="691.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.1" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1126.3" y="739.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.72%)</title><rect x="1130.6" y="739.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.6" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1130.6" y="723.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.36%)</title><rect x="1134.8" y="723.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="734.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.36%)</title><rect x="1134.8" y="707.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1139.1" y="739.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.1" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.36%)</title><rect x="1139.1" y="723.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.1" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="707.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.1" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="691.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.1" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="675.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="659.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.1" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="643.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="627.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.1" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="611.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.1" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="595.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="579.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="563.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.1" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="547.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.1" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="531.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.1" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="515.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="499.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.1" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="483.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.1" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="467.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.1" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="451.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.1" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="435.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="419.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.1" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="403.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.1" y="414.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.36%)</title><rect x="1139.1" y="387.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.1" y="398.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.36%)</title><rect x="1139.1" y="371.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.16%)</title><rect x="1143.3" y="787.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="798.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.16%)</title><rect x="1143.3" y="771.0" width="25.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.3" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.16%)</title><rect x="1143.3" y="755.0" width="25.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.16%)</title><rect x="1143.3" y="739.0" width="25.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.3" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.16%)</title><rect x="1143.3" y="723.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.16%)</title><rect x="1143.3" y="707.0" width="25.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.3" y="718.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1143.3" y="691.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.3" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1143.3" y="675.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.3" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1143.3" y="659.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.3" y="670.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1143.3" y="643.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.3" y="654.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.36%)</title><rect x="1143.3" y="627.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.3" y="638.0"></text>
</g>
<g>
<title>ciMethod::is_unboxing_method() const (1 samples, 0.36%)</title><rect x="1143.3" y="611.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.36%)</title><rect x="1143.3" y="595.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="606.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.36%)</title><rect x="1147.6" y="691.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.6" y="702.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.36%)</title><rect x="1147.6" y="675.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.36%)</title><rect x="1147.6" y="659.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.6" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1147.6" y="643.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.6" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1147.6" y="627.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.6" y="638.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1147.6" y="611.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.6" y="622.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.36%)</title><rect x="1147.6" y="595.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.6" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.36%)</title><rect x="1147.6" y="579.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.6" y="590.0"></text>
</g>
<g>
<title>ciObjArrayKlass::make_impl(ciKlass*) (1 samples, 0.36%)</title><rect x="1147.6" y="563.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.44%)</title><rect x="1151.8" y="691.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.44%)</title><rect x="1151.8" y="675.0" width="17.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.44%)</title><rect x="1151.8" y="659.0" width="17.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.44%)</title><rect x="1151.8" y="643.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.44%)</title><rect x="1151.8" y="627.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.44%)</title><rect x="1151.8" y="611.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1151.8" y="595.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1151.8" y="579.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1151.8" y="563.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1151.8" y="547.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1151.8" y="531.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1151.8" y="515.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1151.8" y="499.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.8" y="510.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.36%)</title><rect x="1151.8" y="483.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.8" y="494.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.36%)</title><rect x="1151.8" y="467.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="478.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.36%)</title><rect x="1151.8" y="451.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="462.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.36%)</title><rect x="1151.8" y="435.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1156.0" y="595.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1156.0" y="579.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1156.0" y="563.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1156.0" y="547.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1156.0" y="531.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1156.0" y="515.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1156.0" y="499.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1156.0" y="483.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1156.0" y="467.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1156.0" y="451.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1156.0" y="435.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1156.0" y="419.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1156.0" y="403.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1156.0" y="387.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1156.0" y="371.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1156.0" y="355.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.36%)</title><rect x="1156.0" y="339.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1156.0" y="323.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1156.0" y="307.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1156.0" y="291.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.36%)</title><rect x="1156.0" y="275.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.36%)</title><rect x="1156.0" y="259.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="1156.0" y="243.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.3" y="483.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.3" y="467.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.3" y="451.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.3" y="435.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.3" y="419.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.3" y="403.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.3" y="387.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.3" y="371.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.3" y="355.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.3" y="339.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.3" y="323.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.3" y="307.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.3" y="291.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.3" y="275.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.3" y="259.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.3" y="243.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.3" y="227.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.3" y="211.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.3" y="195.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.3" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.3" y="179.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.3" y="163.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.3" y="147.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.3" y="131.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.3" y="115.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.3" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.3" y="99.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.3" y="83.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.36%)</title><rect x="1160.3" y="67.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.36%)</title><rect x="1160.3" y="51.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.36%)</title><rect x="1160.3" y="35.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.3" y="46.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1164.5" y="595.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1164.5" y="579.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.36%)</title><rect x="1164.5" y="563.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.5" y="574.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.36%)</title><rect x="1168.8" y="787.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1168.8" y="771.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.8" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.44%)</title><rect x="1173.0" y="819.0" width="17.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.44%)</title><rect x="1173.0" y="803.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.44%)</title><rect x="1173.0" y="787.0" width="17.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.08%)</title><rect x="1173.0" y="771.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.36%)</title><rect x="1173.0" y="755.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.0" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.36%)</title><rect x="1173.0" y="739.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="750.0"></text>
</g>
<g>
<title>LIR_OpBranch::emit_code(LIR_Assembler*) (1 samples, 0.36%)</title><rect x="1173.0" y="723.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_opBranch(LIR_OpBranch*) (1 samples, 0.36%)</title><rect x="1173.0" y="707.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.72%)</title><rect x="1177.3" y="755.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.3" y="766.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.72%)</title><rect x="1177.3" y="739.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="750.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.72%)</title><rect x="1177.3" y="723.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (2 samples, 0.72%)</title><rect x="1177.3" y="707.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.36%)</title><rect x="1177.3" y="691.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="702.0"></text>
</g>
<g>
<title>LIR_Address::as_address() (1 samples, 0.36%)</title><rect x="1177.3" y="675.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1181.5" y="691.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1181.5" y="675.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1181.5" y="659.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="670.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1181.5" y="643.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1181.5" y="627.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.36%)</title><rect x="1181.5" y="611.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value_for_constant(LIR_OprDesc*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.36%)</title><rect x="1181.5" y="595.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.36%)</title><rect x="1185.8" y="771.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
</g>
</svg>
