<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (197 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (32 samples, 16.24%)</title><rect x="10.0" y="723.0" width="191.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (29 samples, 14.72%)</title><rect x="22.0" y="707.0" width="173.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="718.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.51%)</title><rect x="22.0" y="691.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.51%)</title><rect x="22.0" y="675.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/359850378.accept (1 samples, 0.51%)</title><rect x="22.0" y="659.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.51%)</title><rect x="22.0" y="643.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.51%)</title><rect x="22.0" y="627.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.51%)</title><rect x="22.0" y="611.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.51%)</title><rect x="28.0" y="691.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.51%)</title><rect x="28.0" y="675.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.51%)</title><rect x="28.0" y="659.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.51%)</title><rect x="28.0" y="643.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.51%)</title><rect x="28.0" y="627.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.51%)</title><rect x="28.0" y="611.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.51%)</title><rect x="28.0" y="595.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.51%)</title><rect x="28.0" y="579.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 11.17%)</title><rect x="34.0" y="691.0" width="131.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.0" y="702.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2068375625.accept (20 samples, 10.15%)</title><rect x="34.0" y="675.0" width="119.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.0" y="686.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 9.64%)</title><rect x="39.9" y="659.0" width="113.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.9" y="670.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 7.11%)</title><rect x="39.9" y="643.0" width="83.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.9" y="654.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 7.11%)</title><rect x="39.9" y="627.0" width="83.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.9" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 7.11%)</title><rect x="39.9" y="611.0" width="83.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.9" y="622.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 7.11%)</title><rect x="39.9" y="595.0" width="83.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.9" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 7.11%)</title><rect x="39.9" y="579.0" width="83.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.9" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 7.11%)</title><rect x="39.9" y="563.0" width="83.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.9" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 3.05%)</title><rect x="39.9" y="547.0" width="36.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.9" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.05%)</title><rect x="39.9" y="531.0" width="36.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.9" y="542.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.05%)</title><rect x="39.9" y="515.0" width="36.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.9" y="526.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.05%)</title><rect x="39.9" y="499.0" width="36.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.9" y="510.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.05%)</title><rect x="39.9" y="483.0" width="36.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.9" y="494.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 3.05%)</title><rect x="39.9" y="467.0" width="36.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.9" y="478.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.54%)</title><rect x="39.9" y="451.0" width="30.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="42.9" y="462.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.03%)</title><rect x="39.9" y="435.0" width="24.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="42.9" y="446.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.51%)</title><rect x="63.9" y="435.0" width="6.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="66.9" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.51%)</title><rect x="69.9" y="451.0" width="6.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="72.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.54%)</title><rect x="75.9" y="547.0" width="29.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.9" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.54%)</title><rect x="75.9" y="531.0" width="29.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.9" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.54%)</title><rect x="75.9" y="515.0" width="29.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.9" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.02%)</title><rect x="105.8" y="547.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 1.02%)</title><rect x="105.8" y="531.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.02%)</title><rect x="105.8" y="515.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.51%)</title><rect x="117.8" y="547.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.51%)</title><rect x="117.8" y="531.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.51%)</title><rect x="117.8" y="515.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.51%)</title><rect x="117.8" y="499.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.54%)</title><rect x="123.8" y="643.0" width="30.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.8" y="654.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.54%)</title><rect x="123.8" y="627.0" width="30.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.8" y="638.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.02%)</title><rect x="135.8" y="611.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.8" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.02%)</title><rect x="135.8" y="595.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.8" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.51%)</title><rect x="141.8" y="579.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.8" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.51%)</title><rect x="147.8" y="611.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="150.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.51%)</title><rect x="153.8" y="675.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.51%)</title><rect x="153.8" y="659.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.51%)</title><rect x="153.8" y="643.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.51%)</title><rect x="153.8" y="627.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.51%)</title><rect x="153.8" y="611.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.51%)</title><rect x="153.8" y="595.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="156.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.51%)</title><rect x="159.7" y="675.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.51%)</title><rect x="159.7" y="659.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.54%)</title><rect x="165.7" y="691.0" width="30.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.7" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.54%)</title><rect x="165.7" y="675.0" width="30.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.7" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.02%)</title><rect x="165.7" y="659.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.02%)</title><rect x="165.7" y="643.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.02%)</title><rect x="165.7" y="627.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.02%)</title><rect x="165.7" y="611.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.02%)</title><rect x="165.7" y="595.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.51%)</title><rect x="165.7" y="579.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.51%)</title><rect x="165.7" y="563.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.51%)</title><rect x="165.7" y="547.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.51%)</title><rect x="165.7" y="531.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.51%)</title><rect x="165.7" y="515.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.51%)</title><rect x="165.7" y="499.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.51%)</title><rect x="165.7" y="483.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.51%)</title><rect x="165.7" y="467.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.51%)</title><rect x="171.7" y="579.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.51%)</title><rect x="171.7" y="563.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.02%)</title><rect x="177.7" y="659.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.51%)</title><rect x="177.7" y="643.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.51%)</title><rect x="177.7" y="627.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.51%)</title><rect x="177.7" y="611.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.51%)</title><rect x="177.7" y="595.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.7" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.51%)</title><rect x="177.7" y="579.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.7" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.51%)</title><rect x="177.7" y="563.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.51%)</title><rect x="177.7" y="547.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.51%)</title><rect x="183.7" y="643.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.51%)</title><rect x="183.7" y="627.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.51%)</title><rect x="183.7" y="611.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.51%)</title><rect x="183.7" y="595.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.51%)</title><rect x="183.7" y="579.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.51%)</title><rect x="189.7" y="659.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.51%)</title><rect x="189.7" y="643.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.51%)</title><rect x="189.7" y="627.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.51%)</title><rect x="189.7" y="611.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.7" y="622.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.51%)</title><rect x="195.7" y="707.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.7" y="718.0"></text>
</g>
<g>
<title>JVM_CurrentTimeMillis (1 samples, 0.51%)</title><rect x="195.7" y="691.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="198.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (54 samples, 27.41%)</title><rect x="201.7" y="723.0" width="323.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.7" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (54 samples, 27.41%)</title><rect x="201.7" y="707.0" width="323.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.7" y="718.0">java/util/concurrent/ThreadPoolExecutor$Work..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (54 samples, 27.41%)</title><rect x="201.7" y="691.0" width="323.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.7" y="702.0">java/util/concurrent/ThreadPoolExecutor.runW..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/559362890.run (32 samples, 16.24%)</title><rect x="219.6" y="675.0" width="191.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.6" y="686.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (32 samples, 16.24%)</title><rect x="219.6" y="659.0" width="191.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.6" y="670.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (32 samples, 16.24%)</title><rect x="219.6" y="643.0" width="191.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.6" y="654.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (31 samples, 15.74%)</title><rect x="219.6" y="627.0" width="185.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.6" y="638.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (11 samples, 5.58%)</title><rect x="231.6" y="611.0" width="65.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.6" y="622.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (11 samples, 5.58%)</title><rect x="231.6" y="595.0" width="65.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.6" y="606.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 5.58%)</title><rect x="231.6" y="579.0" width="65.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.6" y="590.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 5.58%)</title><rect x="231.6" y="563.0" width="65.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.6" y="574.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 5.58%)</title><rect x="231.6" y="547.0" width="65.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.6" y="558.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 5.58%)</title><rect x="231.6" y="531.0" width="65.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.6" y="542.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.02%)</title><rect x="231.6" y="515.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.6" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="231.6" y="499.0" width="6.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="234.6" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="231.6" y="483.0" width="6.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="234.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.51%)</title><rect x="237.6" y="499.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 4.57%)</title><rect x="243.6" y="515.0" width="53.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.6" y="526.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 4.57%)</title><rect x="243.6" y="499.0" width="53.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.6" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.51%)</title><rect x="243.6" y="483.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.51%)</title><rect x="243.6" y="467.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 4.06%)</title><rect x="249.6" y="483.0" width="47.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.6" y="494.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 4.06%)</title><rect x="249.6" y="467.0" width="47.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.6" y="478.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 4.06%)</title><rect x="249.6" y="451.0" width="47.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.6" y="462.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.02%)</title><rect x="255.6" y="435.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.51%)</title><rect x="255.6" y="419.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.51%)</title><rect x="255.6" y="403.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.51%)</title><rect x="255.6" y="387.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.51%)</title><rect x="255.6" y="371.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.51%)</title><rect x="261.6" y="419.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.51%)</title><rect x="261.6" y="403.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.52%)</title><rect x="267.6" y="435.0" width="17.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.52%)</title><rect x="267.6" y="419.0" width="17.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.52%)</title><rect x="267.6" y="403.0" width="17.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.52%)</title><rect x="267.6" y="387.0" width="17.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.52%)</title><rect x="267.6" y="371.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.51%)</title><rect x="285.5" y="435.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.51%)</title><rect x="285.5" y="419.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.51%)</title><rect x="285.5" y="403.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.51%)</title><rect x="291.5" y="435.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.51%)</title><rect x="291.5" y="419.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.5" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 8.63%)</title><rect x="297.5" y="611.0" width="101.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.5" y="622.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.02%)</title><rect x="297.5" y="595.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.5" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.02%)</title><rect x="297.5" y="579.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.5" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.51%)</title><rect x="303.5" y="563.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.51%)</title><rect x="303.5" y="547.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 5.08%)</title><rect x="309.5" y="595.0" width="59.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.5" y="606.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 5.08%)</title><rect x="309.5" y="579.0" width="59.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.5" y="590.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.03%)</title><rect x="309.5" y="563.0" width="24.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.5" y="574.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.52%)</title><rect x="315.5" y="547.0" width="18.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.5" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.52%)</title><rect x="315.5" y="531.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.5" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.02%)</title><rect x="315.5" y="515.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.5" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.51%)</title><rect x="327.5" y="515.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.5" y="526.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.05%)</title><rect x="333.5" y="563.0" width="35.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.5" y="574.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.05%)</title><rect x="333.5" y="547.0" width="35.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.5" y="558.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.51%)</title><rect x="333.5" y="531.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.51%)</title><rect x="333.5" y="515.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.51%)</title><rect x="333.5" y="499.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.51%)</title><rect x="333.5" y="483.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.5" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.54%)</title><rect x="339.4" y="531.0" width="30.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.4" y="542.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.03%)</title><rect x="345.4" y="515.0" width="24.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.4" y="526.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.02%)</title><rect x="357.4" y="499.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.02%)</title><rect x="357.4" y="483.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.03%)</title><rect x="369.4" y="595.0" width="24.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="372.4" y="606.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.03%)</title><rect x="369.4" y="579.0" width="24.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.4" y="590.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="369.4" y="563.0" width="6.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="372.4" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="369.4" y="547.0" width="6.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="372.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1650938323.process (1 samples, 0.51%)</title><rect x="375.4" y="563.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.51%)</title><rect x="375.4" y="547.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.51%)</title><rect x="375.4" y="531.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.51%)</title><rect x="375.4" y="515.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.51%)</title><rect x="375.4" y="499.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.4" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.51%)</title><rect x="375.4" y="483.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.4" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.51%)</title><rect x="375.4" y="467.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.4" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.51%)</title><rect x="375.4" y="451.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.4" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.51%)</title><rect x="375.4" y="435.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="378.4" y="446.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="375.4" y="419.0" width="6.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="378.4" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.51%)</title><rect x="381.4" y="563.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.4" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.51%)</title><rect x="387.4" y="563.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.4" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.51%)</title><rect x="387.4" y="547.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.51%)</title><rect x="393.4" y="595.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.51%)</title><rect x="393.4" y="579.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.51%)</title><rect x="393.4" y="563.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1391353689.accept (1 samples, 0.51%)</title><rect x="393.4" y="547.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.51%)</title><rect x="393.4" y="531.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.4" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.51%)</title><rect x="393.4" y="515.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.4" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.51%)</title><rect x="393.4" y="499.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.4" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.51%)</title><rect x="393.4" y="483.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.4" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="393.4" y="467.0" width="5.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="396.4" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="393.4" y="451.0" width="5.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="396.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.51%)</title><rect x="399.3" y="611.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.51%)</title><rect x="399.3" y="595.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="402.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.51%)</title><rect x="399.3" y="579.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1391353689.accept (1 samples, 0.51%)</title><rect x="399.3" y="563.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.51%)</title><rect x="399.3" y="547.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.51%)</title><rect x="399.3" y="531.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.3" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.51%)</title><rect x="399.3" y="515.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="402.3" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.51%)</title><rect x="399.3" y="499.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.51%)</title><rect x="405.3" y="627.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.3" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="405.3" y="611.0" width="6.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="408.3" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="405.3" y="595.0" width="6.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="408.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.02%)</title><rect x="411.3" y="675.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.02%)</title><rect x="411.3" y="659.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.3" y="670.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.51%)</title><rect x="411.3" y="643.0" width="6.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="414.3" y="654.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.51%)</title><rect x="417.3" y="643.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.51%)</title><rect x="423.3" y="675.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="426.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.51%)</title><rect x="423.3" y="659.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.51%)</title><rect x="423.3" y="643.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.beforeExecute (1 samples, 0.51%)</title><rect x="429.3" y="675.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 7.11%)</title><rect x="435.3" y="675.0" width="83.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.3" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 7.11%)</title><rect x="435.3" y="659.0" width="83.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.3" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 6.60%)</title><rect x="435.3" y="643.0" width="77.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.3" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.51%)</title><rect x="441.3" y="627.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 5.58%)</title><rect x="447.3" y="627.0" width="65.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.3" y="638.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 5.58%)</title><rect x="447.3" y="611.0" width="65.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.3" y="622.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.08%)</title><rect x="453.2" y="595.0" width="59.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="456.2" y="606.0">Unsafe..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.51%)</title><rect x="453.2" y="579.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="456.2" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.51%)</title><rect x="459.2" y="579.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="462.2" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.52%)</title><rect x="465.2" y="579.0" width="18.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="468.2" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.54%)</title><rect x="483.2" y="579.0" width="29.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="486.2" y="590.0">__..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.51%)</title><rect x="513.1" y="643.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.51%)</title><rect x="513.1" y="627.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="516.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.51%)</title><rect x="513.1" y="611.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.51%)</title><rect x="519.1" y="675.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.1" y="686.0"></text>
</g>
<g>
<title>start_thread (111 samples, 56.35%)</title><rect x="525.1" y="723.0" width="664.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="528.1" y="734.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (111 samples, 56.35%)</title><rect x="525.1" y="707.0" width="664.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="528.1" y="718.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 8.12%)</title><rect x="525.1" y="691.0" width="95.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.1" y="702.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.52%)</title><rect x="525.1" y="675.0" width="18.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="528.1" y="686.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.52%)</title><rect x="525.1" y="659.0" width="18.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="528.1" y="670.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.52%)</title><rect x="525.1" y="643.0" width="18.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="528.1" y="654.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 6.60%)</title><rect x="543.1" y="675.0" width="77.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="546.1" y="686.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.08%)</title><rect x="543.1" y="659.0" width="59.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="546.1" y="670.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.51%)</title><rect x="543.1" y="643.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.1" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.05%)</title><rect x="549.1" y="643.0" width="35.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="552.1" y="654.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.52%)</title><rect x="567.1" y="627.0" width="17.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="570.1" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.51%)</title><rect x="573.0" y="611.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.0" y="622.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.51%)</title><rect x="579.0" y="611.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="582.0" y="622.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.51%)</title><rect x="579.0" y="595.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="582.0" y="606.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.52%)</title><rect x="585.0" y="643.0" width="18.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="588.0" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.02%)</title><rect x="603.0" y="659.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="606.0" y="670.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.51%)</title><rect x="603.0" y="643.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.0" y="654.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.51%)</title><rect x="603.0" y="627.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="606.0" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.51%)</title><rect x="609.0" y="643.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="612.0" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.51%)</title><rect x="609.0" y="627.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="612.0" y="638.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.51%)</title><rect x="609.0" y="611.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.0" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.51%)</title><rect x="609.0" y="595.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.0" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.51%)</title><rect x="615.0" y="659.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="618.0" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.51%)</title><rect x="615.0" y="643.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="618.0" y="654.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.51%)</title><rect x="615.0" y="627.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="618.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.51%)</title><rect x="615.0" y="611.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="618.0" y="622.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.51%)</title><rect x="615.0" y="595.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.0" y="606.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.51%)</title><rect x="615.0" y="579.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="618.0" y="590.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.51%)</title><rect x="615.0" y="563.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="618.0" y="574.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.51%)</title><rect x="615.0" y="547.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="618.0" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (95 samples, 48.22%)</title><rect x="621.0" y="691.0" width="569.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.0" y="702.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (94 samples, 47.72%)</title><rect x="621.0" y="675.0" width="563.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.0" y="686.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (93 samples, 47.21%)</title><rect x="621.0" y="659.0" width="557.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.0" y="670.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (90 samples, 45.69%)</title><rect x="621.0" y="643.0" width="539.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.0" y="654.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (90 samples, 45.69%)</title><rect x="621.0" y="627.0" width="539.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.0" y="638.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 29.95%)</title><rect x="621.0" y="611.0" width="353.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.0" y="622.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.52%)</title><rect x="621.0" y="595.0" width="17.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.0" y="606.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 1.52%)</title><rect x="621.0" y="579.0" width="17.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="624.0" y="590.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 1.52%)</title><rect x="621.0" y="563.0" width="17.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="624.0" y="574.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 1.02%)</title><rect x="621.0" y="547.0" width="11.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="624.0" y="558.0"></text>
</g>
<g>
<title>PhaseRegAlloc::reg2offset(int) const (1 samples, 0.51%)</title><rect x="621.0" y="531.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="624.0" y="542.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.51%)</title><rect x="627.0" y="531.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="630.0" y="542.0"></text>
</g>
<g>
<title>immPOper::constant_reloc() const (1 samples, 0.51%)</title><rect x="627.0" y="515.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.0" y="526.0"></text>
</g>
<g>
<title>loadConINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.51%)</title><rect x="632.9" y="547.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="635.9" y="558.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.02%)</title><rect x="638.9" y="595.0" width="12.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="641.9" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 1.02%)</title><rect x="638.9" y="579.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="641.9" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (2 samples, 1.02%)</title><rect x="638.9" y="563.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="641.9" y="574.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.05%)</title><rect x="650.9" y="595.0" width="36.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="653.9" y="606.0">Mat..</text>
</g>
<g>
<title>LShiftLNode::Opcode() const (1 samples, 0.51%)</title><rect x="650.9" y="579.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.9" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.54%)</title><rect x="656.9" y="579.0" width="30.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="659.9" y="590.0">Ma..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.51%)</title><rect x="662.9" y="563.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="665.9" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.51%)</title><rect x="662.9" y="547.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="665.9" y="558.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.51%)</title><rect x="662.9" y="531.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.9" y="542.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.51%)</title><rect x="662.9" y="515.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.9" y="526.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.51%)</title><rect x="662.9" y="499.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="665.9" y="510.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.02%)</title><rect x="668.9" y="563.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.9" y="574.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.51%)</title><rect x="668.9" y="547.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="671.9" y="558.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.51%)</title><rect x="674.9" y="547.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="677.9" y="558.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.51%)</title><rect x="674.9" y="531.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="677.9" y="542.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.51%)</title><rect x="680.9" y="563.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="683.9" y="574.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.51%)</title><rect x="680.9" y="547.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="683.9" y="558.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.51%)</title><rect x="686.9" y="595.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="689.9" y="606.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.51%)</title><rect x="686.9" y="579.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="689.9" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 2.54%)</title><rect x="692.8" y="595.0" width="30.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="695.8" y="606.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 2.54%)</title><rect x="692.8" y="579.0" width="30.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.8" y="590.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.51%)</title><rect x="692.8" y="563.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="695.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.52%)</title><rect x="698.8" y="563.0" width="18.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="701.8" y="574.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 1.02%)</title><rect x="698.8" y="547.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="701.8" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.51%)</title><rect x="710.8" y="547.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="713.8" y="558.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.51%)</title><rect x="710.8" y="531.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="713.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.51%)</title><rect x="716.8" y="563.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="719.8" y="574.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.51%)</title><rect x="716.8" y="547.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 21.32%)</title><rect x="722.8" y="595.0" width="251.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="725.8" y="606.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 2.54%)</title><rect x="722.8" y="579.0" width="29.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.8" y="590.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.02%)</title><rect x="728.8" y="563.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="731.8" y="574.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.51%)</title><rect x="728.8" y="547.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="731.8" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="734.8" y="547.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="737.8" y="558.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.51%)</title><rect x="740.8" y="563.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.8" y="574.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.51%)</title><rect x="746.8" y="563.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="749.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.51%)</title><rect x="752.7" y="579.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="755.7" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.51%)</title><rect x="752.7" y="563.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="755.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.54%)</title><rect x="758.7" y="579.0" width="30.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="761.7" y="590.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.51%)</title><rect x="776.7" y="563.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="779.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.51%)</title><rect x="776.7" y="547.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.7" y="558.0"></text>
</g>
<g>
<title>loadConI0Node::rule() const (1 samples, 0.51%)</title><rect x="782.7" y="563.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 5.08%)</title><rect x="788.7" y="579.0" width="59.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.7" y="590.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.51%)</title><rect x="812.6" y="563.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="815.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.52%)</title><rect x="818.6" y="563.0" width="18.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="821.6" y="574.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.51%)</title><rect x="836.6" y="563.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.6" y="574.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.51%)</title><rect x="842.6" y="563.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="845.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.02%)</title><rect x="848.6" y="579.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.02%)</title><rect x="848.6" y="563.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="851.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.51%)</title><rect x="860.6" y="579.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.02%)</title><rect x="866.5" y="579.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="869.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.51%)</title><rect x="878.5" y="579.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="881.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.03%)</title><rect x="884.5" y="579.0" width="24.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="887.5" y="590.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.51%)</title><rect x="902.5" y="563.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.5" y="574.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.02%)</title><rect x="908.5" y="579.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.5" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.02%)</title><rect x="908.5" y="563.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.5" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.51%)</title><rect x="908.5" y="547.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.5" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.51%)</title><rect x="914.5" y="547.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.5" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="914.5" y="531.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="917.5" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.52%)</title><rect x="920.5" y="579.0" width="17.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.5" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="932.4" y="563.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.4" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.51%)</title><rect x="938.4" y="579.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.4" y="590.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.51%)</title><rect x="938.4" y="563.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.4" y="574.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.54%)</title><rect x="944.4" y="579.0" width="30.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="947.4" y="590.0">Ph..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.51%)</title><rect x="950.4" y="563.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="953.4" y="574.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.52%)</title><rect x="956.4" y="563.0" width="18.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.4" y="574.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.51%)</title><rect x="962.4" y="547.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.4" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="968.4" y="547.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.4" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 11.17%)</title><rect x="974.4" y="611.0" width="131.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.4" y="622.0">Compile::Optimiz..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.51%)</title><rect x="974.4" y="595.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.51%)</title><rect x="974.4" y="579.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.4" y="590.0"></text>
</g>
<g>
<title>CompileBroker::maybe_block() (1 samples, 0.51%)</title><rect x="974.4" y="563.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="977.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 8.12%)</title><rect x="980.4" y="595.0" width="95.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.4" y="606.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.52%)</title><rect x="980.4" y="579.0" width="17.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.4" y="590.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.51%)</title><rect x="986.3" y="563.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.3" y="574.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.51%)</title><rect x="992.3" y="563.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.02%)</title><rect x="998.3" y="579.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.54%)</title><rect x="1010.3" y="579.0" width="30.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.3" y="590.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.51%)</title><rect x="1016.3" y="563.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.52%)</title><rect x="1022.3" y="563.0" width="18.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.52%)</title><rect x="1022.3" y="547.0" width="18.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.51%)</title><rect x="1022.3" y="531.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.3" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.51%)</title><rect x="1022.3" y="515.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.3" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.02%)</title><rect x="1028.3" y="531.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.3" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.02%)</title><rect x="1040.3" y="579.0" width="11.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1043.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.02%)</title><rect x="1052.2" y="579.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.51%)</title><rect x="1052.2" y="563.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_shenandoah_read_barrier(Node*, Node*) (1 samples, 0.51%)</title><rect x="1058.2" y="563.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.02%)</title><rect x="1064.2" y="579.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.2" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.02%)</title><rect x="1064.2" y="563.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.2" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1064.2" y="547.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.51%)</title><rect x="1064.2" y="531.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.2" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.51%)</title><rect x="1064.2" y="515.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.2" y="526.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.51%)</title><rect x="1064.2" y="499.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.2" y="510.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.51%)</title><rect x="1070.2" y="547.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.52%)</title><rect x="1076.2" y="595.0" width="18.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.52%)</title><rect x="1076.2" y="579.0" width="18.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.2" y="590.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1076.2" y="563.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.2" y="574.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1076.2" y="547.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.51%)</title><rect x="1082.2" y="563.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.2" y="574.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.51%)</title><rect x="1082.2" y="547.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.2" y="558.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1088.2" y="563.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.2" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.51%)</title><rect x="1088.2" y="547.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.2" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1088.2" y="531.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.2" y="542.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.02%)</title><rect x="1094.2" y="595.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.2" y="606.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.02%)</title><rect x="1094.2" y="579.0" width="11.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.2" y="590.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.51%)</title><rect x="1094.2" y="563.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.2" y="574.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.51%)</title><rect x="1100.2" y="563.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.2" y="574.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.51%)</title><rect x="1100.2" y="547.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.2" y="558.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.51%)</title><rect x="1106.1" y="611.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.1" y="622.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.51%)</title><rect x="1106.1" y="595.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1106.1" y="579.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1106.1" y="563.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1106.1" y="547.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1106.1" y="531.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1106.1" y="515.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1106.1" y="499.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1106.1" y="483.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1106.1" y="467.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1106.1" y="451.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1106.1" y="435.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1106.1" y="419.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1106.1" y="403.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1106.1" y="387.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1106.1" y="371.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1106.1" y="355.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1106.1" y="339.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1106.1" y="323.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1106.1" y="307.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1106.1" y="291.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1106.1" y="275.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1106.1" y="259.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1106.1" y="243.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1106.1" y="227.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1106.1" y="211.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.1" y="222.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1106.1" y="195.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="206.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.51%)</title><rect x="1106.1" y="179.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.1" y="190.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.51%)</title><rect x="1106.1" y="163.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_arraycopy(TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.51%)</title><rect x="1106.1" y="147.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_block_arraycopy(TypePtr const*, BasicType, AllocateNode*, Node*, Node*, Node*, Node*, Node*, bool) (1 samples, 0.51%)</title><rect x="1106.1" y="131.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.51%)</title><rect x="1106.1" y="115.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.1" y="126.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.51%)</title><rect x="1106.1" y="99.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.55%)</title><rect x="1112.1" y="611.0" width="42.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.1" y="622.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.55%)</title><rect x="1112.1" y="595.0" width="42.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.1" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.05%)</title><rect x="1112.1" y="579.0" width="36.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.1" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.05%)</title><rect x="1112.1" y="563.0" width="36.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.1" y="574.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.05%)</title><rect x="1112.1" y="547.0" width="36.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.1" y="558.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.05%)</title><rect x="1112.1" y="531.0" width="36.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.1" y="542.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.03%)</title><rect x="1118.1" y="515.0" width="24.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.1" y="526.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.03%)</title><rect x="1118.1" y="499.0" width="24.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.1" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.03%)</title><rect x="1118.1" y="483.0" width="24.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.1" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.03%)</title><rect x="1118.1" y="467.0" width="24.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.1" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.03%)</title><rect x="1118.1" y="451.0" width="24.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.1" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.03%)</title><rect x="1118.1" y="435.0" width="24.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.1" y="446.0">P..</text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.51%)</title><rect x="1118.1" y="419.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.1" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::with_inline_depth(int) const (1 samples, 0.51%)</title><rect x="1118.1" y="403.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.1" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.51%)</title><rect x="1118.1" y="387.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.1" y="398.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.51%)</title><rect x="1118.1" y="371.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.52%)</title><rect x="1124.1" y="419.0" width="18.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.52%)</title><rect x="1124.1" y="403.0" width="18.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.52%)</title><rect x="1124.1" y="387.0" width="18.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.52%)</title><rect x="1124.1" y="371.0" width="18.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.52%)</title><rect x="1124.1" y="355.0" width="18.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.02%)</title><rect x="1124.1" y="339.0" width="12.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1124.1" y="323.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1124.1" y="307.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1124.1" y="291.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1124.1" y="275.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1124.1" y="259.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.51%)</title><rect x="1124.1" y="243.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.51%)</title><rect x="1124.1" y="227.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.1" y="238.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.51%)</title><rect x="1124.1" y="211.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.1" y="222.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.51%)</title><rect x="1124.1" y="195.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.1" y="206.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.51%)</title><rect x="1124.1" y="179.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.1" y="190.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.51%)</title><rect x="1124.1" y="163.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.1" y="174.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.51%)</title><rect x="1124.1" y="147.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.1" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.51%)</title><rect x="1124.1" y="131.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.1" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1130.1" y="323.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.1" y="334.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.51%)</title><rect x="1130.1" y="307.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.1" y="318.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.51%)</title><rect x="1130.1" y="291.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.1" y="302.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.51%)</title><rect x="1130.1" y="275.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.1" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.51%)</title><rect x="1130.1" y="259.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.1" y="270.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.51%)</title><rect x="1130.1" y="243.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.1" y="254.0"></text>
</g>
<g>
<title>TypeKlassPtr::eq(Type const*) const (1 samples, 0.51%)</title><rect x="1130.1" y="227.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.51%)</title><rect x="1136.1" y="339.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.1" y="350.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.51%)</title><rect x="1136.1" y="323.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.1" y="334.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.51%)</title><rect x="1136.1" y="307.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="318.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.51%)</title><rect x="1136.1" y="291.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.1" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1142.1" y="515.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1142.1" y="499.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1142.1" y="483.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1142.1" y="467.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1142.1" y="451.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1142.1" y="435.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1142.1" y="419.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1142.1" y="403.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1142.1" y="387.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1142.1" y="371.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1142.1" y="355.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1142.1" y="339.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1142.1" y="323.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1142.1" y="307.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1142.1" y="291.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1142.1" y="275.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1142.1" y="259.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1142.1" y="243.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1142.1" y="227.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1142.1" y="211.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1142.1" y="195.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1142.1" y="179.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1142.1" y="163.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1142.1" y="147.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.51%)</title><rect x="1142.1" y="131.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.51%)</title><rect x="1142.1" y="115.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.51%)</title><rect x="1142.1" y="99.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.51%)</title><rect x="1142.1" y="83.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.1" y="94.0"></text>
</g>
<g>
<title>OptoRuntime::g1_wb_pre_Type() (1 samples, 0.51%)</title><rect x="1142.1" y="67.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.1" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.51%)</title><rect x="1142.1" y="51.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.1" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.51%)</title><rect x="1142.1" y="35.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.1" y="46.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.51%)</title><rect x="1148.1" y="579.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.1" y="590.0"></text>
</g>
<g>
<title>ciMethod::live_local_oops_at_bci(int) (1 samples, 0.51%)</title><rect x="1148.1" y="563.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.1" y="574.0"></text>
</g>
<g>
<title>OopMapCache::compute_one_oop_map(methodHandle, int, InterpreterOopMap*) (1 samples, 0.51%)</title><rect x="1148.1" y="547.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.1" y="558.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.51%)</title><rect x="1148.1" y="531.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.1" y="542.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.51%)</title><rect x="1154.1" y="611.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.1" y="622.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.51%)</title><rect x="1154.1" y="595.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.1" y="606.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.52%)</title><rect x="1160.1" y="643.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.52%)</title><rect x="1160.1" y="627.0" width="17.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.1" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.52%)</title><rect x="1160.1" y="611.0" width="17.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.52%)</title><rect x="1160.1" y="595.0" width="17.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.1" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.02%)</title><rect x="1160.1" y="579.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.51%)</title><rect x="1160.1" y="563.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.51%)</title><rect x="1160.1" y="547.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.51%)</title><rect x="1160.1" y="531.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.51%)</title><rect x="1160.1" y="515.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.51%)</title><rect x="1160.1" y="499.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.51%)</title><rect x="1160.1" y="483.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.1" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.51%)</title><rect x="1160.1" y="467.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.1" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.51%)</title><rect x="1160.1" y="451.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.1" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.51%)</title><rect x="1160.1" y="435.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.51%)</title><rect x="1160.1" y="419.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.51%)</title><rect x="1160.1" y="403.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.1" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.51%)</title><rect x="1160.1" y="387.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.1" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.51%)</title><rect x="1160.1" y="371.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.1" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.51%)</title><rect x="1160.1" y="355.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.51%)</title><rect x="1160.1" y="339.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.1" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.51%)</title><rect x="1160.1" y="323.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.1" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.51%)</title><rect x="1160.1" y="307.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.51%)</title><rect x="1160.1" y="291.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.1" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.51%)</title><rect x="1160.1" y="275.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.51%)</title><rect x="1160.1" y="259.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.1" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.51%)</title><rect x="1160.1" y="243.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.1" y="254.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.51%)</title><rect x="1166.0" y="563.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.0" y="574.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.51%)</title><rect x="1166.0" y="547.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.0" y="558.0"></text>
</g>
<g>
<title>LoadField::visit(InstructionVisitor*) (1 samples, 0.51%)</title><rect x="1166.0" y="531.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.0" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.51%)</title><rect x="1172.0" y="579.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.51%)</title><rect x="1172.0" y="563.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="574.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.51%)</title><rect x="1172.0" y="547.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="558.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.51%)</title><rect x="1178.0" y="659.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.51%)</title><rect x="1178.0" y="643.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.51%)</title><rect x="1178.0" y="627.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.51%)</title><rect x="1178.0" y="611.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="622.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.51%)</title><rect x="1178.0" y="595.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="606.0"></text>
</g>
<g>
<title>nmethod::flush_dependencies(BoolObjectClosure*) [clone .part.163] (1 samples, 0.51%)</title><rect x="1178.0" y="579.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::remove_dependent_nmethod(nmethod*, bool) (1 samples, 0.51%)</title><rect x="1178.0" y="563.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.51%)</title><rect x="1184.0" y="675.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.51%)</title><rect x="1184.0" y="659.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.51%)</title><rect x="1184.0" y="643.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.51%)</title><rect x="1184.0" y="627.0" width="6.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
</g>
</svg>
