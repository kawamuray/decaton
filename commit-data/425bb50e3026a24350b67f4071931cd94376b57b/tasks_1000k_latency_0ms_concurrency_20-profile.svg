<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (1,009 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.10%)</title><rect x="10.0" y="1187.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.10%)</title><rect x="10.0" y="1171.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (262 samples, 25.97%)</title><rect x="11.2" y="1187.0" width="306.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1198.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.10%)</title><rect x="11.2" y="1171.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="11.2" y="1155.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (261 samples, 25.87%)</title><rect x="12.3" y="1171.0" width="305.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="1182.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.20%)</title><rect x="12.3" y="1155.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.20%)</title><rect x="12.3" y="1139.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/1374767079.accept (2 samples, 0.20%)</title><rect x="12.3" y="1123.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.20%)</title><rect x="12.3" y="1107.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.20%)</title><rect x="12.3" y="1091.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.3" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.10%)</title><rect x="12.3" y="1075.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="13.5" y="1075.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.5" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="13.5" y="1059.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="13.5" y="1043.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="13.5" y="1027.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (6 samples, 0.59%)</title><rect x="14.7" y="1155.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (6 samples, 0.59%)</title><rect x="14.7" y="1139.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (6 samples, 0.59%)</title><rect x="14.7" y="1123.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.59%)</title><rect x="14.7" y="1107.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="14.7" y="1091.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="14.7" y="1075.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="14.7" y="1059.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="14.7" y="1043.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="14.7" y="1027.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.50%)</title><rect x="15.8" y="1091.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.40%)</title><rect x="17.0" y="1075.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="17.0" y="1059.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="17.0" y="1043.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.20%)</title><rect x="18.2" y="1043.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="19.4" y="1027.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="22.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="20.5" y="1059.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (195 samples, 19.33%)</title><rect x="21.7" y="1155.0" width="228.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="1166.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/941727178.accept (189 samples, 18.73%)</title><rect x="21.7" y="1139.0" width="221.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.7" y="1150.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (189 samples, 18.73%)</title><rect x="21.7" y="1123.0" width="221.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1134.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (153 samples, 15.16%)</title><rect x="21.7" y="1107.0" width="178.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.7" y="1118.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (153 samples, 15.16%)</title><rect x="21.7" y="1091.0" width="178.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.7" y="1102.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (153 samples, 15.16%)</title><rect x="21.7" y="1075.0" width="178.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="1086.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (153 samples, 15.16%)</title><rect x="21.7" y="1059.0" width="178.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.7" y="1070.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (153 samples, 15.16%)</title><rect x="21.7" y="1043.0" width="178.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1054.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (153 samples, 15.16%)</title><rect x="21.7" y="1027.0" width="178.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.7" y="1038.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (93 samples, 9.22%)</title><rect x="21.7" y="1011.0" width="108.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.7" y="1022.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.88%)</title><rect x="21.7" y="995.0" width="22.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.7" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.88%)</title><rect x="21.7" y="979.0" width="22.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 1.09%)</title><rect x="31.1" y="963.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (11 samples, 1.09%)</title><rect x="31.1" y="947.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.99%)</title><rect x="43.9" y="995.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.99%)</title><rect x="43.9" y="979.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.50%)</title><rect x="43.9" y="963.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.9" y="974.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.50%)</title><rect x="43.9" y="947.0" width="5.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="46.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.50%)</title><rect x="49.8" y="963.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (64 samples, 6.34%)</title><rect x="55.6" y="995.0" width="74.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.6" y="1006.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (64 samples, 6.34%)</title><rect x="55.6" y="979.0" width="74.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.6" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (62 samples, 6.14%)</title><rect x="55.6" y="963.0" width="72.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.6" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (62 samples, 6.14%)</title><rect x="55.6" y="947.0" width="72.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.6" y="958.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (62 samples, 6.14%)</title><rect x="55.6" y="931.0" width="72.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.6" y="942.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (56 samples, 5.55%)</title><rect x="55.6" y="915.0" width="65.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="58.6" y="926.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.40%)</title><rect x="56.8" y="899.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="59.8" y="910.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.20%)</title><rect x="61.5" y="899.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="64.5" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="63.8" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="66.8" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (31 samples, 3.07%)</title><rect x="65.0" y="899.0" width="36.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="68.0" y="910.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="101.2" y="899.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="104.2" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.59%)</title><rect x="102.4" y="899.0" width="18.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="105.4" y="910.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="121.1" y="915.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="124.1" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.30%)</title><rect x="122.3" y="915.0" width="3.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="125.3" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="125.8" y="915.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="128.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.20%)</title><rect x="128.1" y="963.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (50 samples, 4.96%)</title><rect x="130.5" y="1011.0" width="58.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.5" y="1022.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (50 samples, 4.96%)</title><rect x="130.5" y="995.0" width="58.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.5" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (50 samples, 4.96%)</title><rect x="130.5" y="979.0" width="58.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.5" y="990.0">java/u..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="185.4" y="963.0" width="3.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="188.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.79%)</title><rect x="188.9" y="1011.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (8 samples, 0.79%)</title><rect x="188.9" y="995.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.79%)</title><rect x="188.9" y="979.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.20%)</title><rect x="198.3" y="1011.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="198.3" y="995.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="198.3" y="979.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="198.3" y="963.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="199.5" y="979.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="199.5" y="963.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (16 samples, 1.59%)</title><rect x="200.6" y="1107.0" width="18.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 1.29%)</title><rect x="204.1" y="1091.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.10%)</title><rect x="218.2" y="1075.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.30%)</title><rect x="219.3" y="1107.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="219.3" y="1091.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="219.3" y="1075.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (17 samples, 1.68%)</title><rect x="222.8" y="1107.0" width="19.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="222.8" y="1091.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.59%)</title><rect x="224.0" y="1091.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.10%)</title><rect x="228.7" y="1075.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.69%)</title><rect x="229.9" y="1075.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.30%)</title><rect x="229.9" y="1059.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.30%)</title><rect x="229.9" y="1043.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.30%)</title><rect x="229.9" y="1027.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.9" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="232.2" y="1011.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="235.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.20%)</title><rect x="233.4" y="1059.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.20%)</title><rect x="235.7" y="1059.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.7" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="238.0" y="1075.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="241.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="242.7" y="1139.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="242.7" y="1123.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.50%)</title><rect x="243.9" y="1139.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.50%)</title><rect x="243.9" y="1123.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.50%)</title><rect x="243.9" y="1107.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.50%)</title><rect x="243.9" y="1091.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.75%)</title><rect x="249.7" y="1155.0" width="67.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.7" y="1166.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.55%)</title><rect x="249.7" y="1139.0" width="65.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.7" y="1150.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.57%)</title><rect x="249.7" y="1123.0" width="42.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.7" y="1134.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.10%)</title><rect x="249.7" y="1107.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.47%)</title><rect x="250.9" y="1107.0" width="40.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.9" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 3.37%)</title><rect x="250.9" y="1091.0" width="39.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.9" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.87%)</title><rect x="250.9" y="1075.0" width="33.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.9" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.87%)</title><rect x="250.9" y="1059.0" width="33.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.9" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.89%)</title><rect x="252.1" y="1043.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.10%)</title><rect x="255.6" y="1027.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.50%)</title><rect x="256.8" y="1027.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.50%)</title><rect x="256.8" y="1011.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.50%)</title><rect x="256.8" y="995.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.50%)</title><rect x="256.8" y="979.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.50%)</title><rect x="256.8" y="963.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.50%)</title><rect x="256.8" y="947.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.50%)</title><rect x="256.8" y="931.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (19 samples, 1.88%)</title><rect x="262.6" y="1043.0" width="22.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.6" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (19 samples, 1.88%)</title><rect x="262.6" y="1027.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.6" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (19 samples, 1.88%)</title><rect x="262.6" y="1011.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.6" y="1022.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (19 samples, 1.88%)</title><rect x="262.6" y="995.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.6" y="1006.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (14 samples, 1.39%)</title><rect x="267.3" y="979.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="282.5" y="963.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="285.5" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="283.7" y="979.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="286.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="284.8" y="1075.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="284.8" y="1059.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="284.8" y="1043.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="284.8" y="1027.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="286.0" y="1075.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="286.0" y="1059.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="286.0" y="1043.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="286.0" y="1027.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.10%)</title><rect x="287.2" y="1075.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.10%)</title><rect x="288.3" y="1075.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="288.3" y="1059.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="288.3" y="1043.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.3" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="288.3" y="1027.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="288.3" y="1011.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="289.5" y="1075.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$400 (1 samples, 0.10%)</title><rect x="289.5" y="1059.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.position (1 samples, 0.10%)</title><rect x="289.5" y="1043.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.10%)</title><rect x="289.5" y="1027.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.10%)</title><rect x="290.7" y="1091.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.99%)</title><rect x="291.8" y="1123.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.99%)</title><rect x="291.8" y="1107.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.99%)</title><rect x="291.8" y="1091.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.20%)</title><rect x="293.0" y="1075.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.20%)</title><rect x="293.0" y="1059.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$224/1181808523.accept (2 samples, 0.20%)</title><rect x="293.0" y="1043.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="295.4" y="1075.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="295.4" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="295.4" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="295.4" y="1027.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="295.4" y="1011.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="295.4" y="995.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/620934437.get (1 samples, 0.10%)</title><rect x="295.4" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.20%)</title><rect x="296.5" y="1075.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.20%)</title><rect x="296.5" y="1059.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (2 samples, 0.20%)</title><rect x="296.5" y="1043.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.10%)</title><rect x="297.7" y="1027.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.30%)</title><rect x="298.9" y="1075.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.30%)</title><rect x="298.9" y="1059.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.9" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.30%)</title><rect x="298.9" y="1043.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="298.9" y="1027.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (2 samples, 0.20%)</title><rect x="300.0" y="1027.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.0" y="1038.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (2 samples, 0.20%)</title><rect x="300.0" y="1011.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="302.4" y="1075.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="302.4" y="1059.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="302.4" y="1043.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="302.4" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="302.4" y="1011.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="302.4" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.40%)</title><rect x="303.5" y="1123.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.40%)</title><rect x="303.5" y="1107.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="303.5" y="1091.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.10%)</title><rect x="303.5" y="1075.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.30%)</title><rect x="304.7" y="1091.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.30%)</title><rect x="304.7" y="1075.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="304.7" y="1059.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="304.7" y="1043.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="304.7" y="1027.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="304.7" y="1011.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="304.7" y="995.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="304.7" y="979.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.7" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="304.7" y="963.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.10%)</title><rect x="304.7" y="947.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.10%)</title><rect x="304.7" y="931.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.10%)</title><rect x="304.7" y="915.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.7" y="926.0"></text>
</g>
<g>
<title>__read (1 samples, 0.10%)</title><rect x="304.7" y="899.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="307.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.20%)</title><rect x="305.9" y="1059.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.9" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="305.9" y="1043.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="308.9" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="305.9" y="1027.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.40%)</title><rect x="308.2" y="1123.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.40%)</title><rect x="308.2" y="1107.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="309.4" y="1091.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$255/277853379.accept (1 samples, 0.10%)</title><rect x="309.4" y="1075.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="309.4" y="1059.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="309.4" y="1043.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.10%)</title><rect x="309.4" y="1027.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.10%)</title><rect x="309.4" y="1011.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.10%)</title><rect x="309.4" y="995.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.equals (1 samples, 0.10%)</title><rect x="309.4" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.20%)</title><rect x="310.6" y="1091.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.20%)</title><rect x="310.6" y="1075.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="311.7" y="1059.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="311.7" y="1043.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="311.7" y="1027.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="311.7" y="1011.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="311.7" y="995.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="311.7" y="979.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.7" y="990.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="311.7" y="963.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.7" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.10%)</title><rect x="311.7" y="947.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.7" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.10%)</title><rect x="311.7" y="931.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.7" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.10%)</title><rect x="311.7" y="915.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="311.7" y="899.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.10%)</title><rect x="312.9" y="1123.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="312.9" y="1107.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="312.9" y="1091.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="312.9" y="1075.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="314.1" y="1123.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="314.1" y="1107.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="314.1" y="1091.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="314.1" y="1075.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="314.1" y="1059.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.1" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="314.1" y="1043.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="317.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (2 samples, 0.20%)</title><rect x="315.2" y="1139.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="315.2" y="1123.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.2" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="316.4" y="1123.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="319.4" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="316.4" y="1107.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="319.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (641 samples, 63.53%)</title><rect x="317.6" y="1187.0" width="749.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.6" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (641 samples, 63.53%)</title><rect x="317.6" y="1171.0" width="749.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.6" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (641 samples, 63.53%)</title><rect x="317.6" y="1155.0" width="749.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.6" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1499673316.run (408 samples, 40.44%)</title><rect x="321.1" y="1139.0" width="477.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.1" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (408 samples, 40.44%)</title><rect x="321.1" y="1123.0" width="477.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.1" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (408 samples, 40.44%)</title><rect x="321.1" y="1107.0" width="477.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.1" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (399 samples, 39.54%)</title><rect x="321.1" y="1091.0" width="466.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.1" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.20%)</title><rect x="330.4" y="1075.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (109 samples, 10.80%)</title><rect x="332.8" y="1075.0" width="127.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.8" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (109 samples, 10.80%)</title><rect x="332.8" y="1059.0" width="127.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.8" y="1070.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (109 samples, 10.80%)</title><rect x="332.8" y="1043.0" width="127.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.8" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (109 samples, 10.80%)</title><rect x="332.8" y="1027.0" width="127.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.8" y="1038.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (109 samples, 10.80%)</title><rect x="332.8" y="1011.0" width="127.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.8" y="1022.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (109 samples, 10.80%)</title><rect x="332.8" y="995.0" width="127.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.8" y="1006.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (38 samples, 3.77%)</title><rect x="332.8" y="979.0" width="44.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.8" y="990.0">com/..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.40%)</title><rect x="345.6" y="963.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="348.6" y="974.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="346.8" y="947.0" width="3.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="349.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="350.3" y="963.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.40%)</title><rect x="350.3" y="947.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.40%)</title><rect x="350.3" y="931.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="350.3" y="915.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="350.3" y="899.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="350.3" y="883.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.10%)</title><rect x="353.8" y="899.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.10%)</title><rect x="353.8" y="883.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="353.8" y="867.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.10%)</title><rect x="353.8" y="851.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="353.8" y="835.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="353.8" y="819.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="353.8" y="803.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="353.8" y="787.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="356.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.88%)</title><rect x="355.0" y="963.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.0" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (17 samples, 1.68%)</title><rect x="355.0" y="947.0" width="19.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.59%)</title><rect x="364.4" y="931.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="364.4" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="367.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="364.4" y="899.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="367.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="364.4" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="367.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="364.4" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="367.4" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="364.4" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.4" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="364.4" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.4" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="364.4" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="367.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="364.4" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="367.4" y="814.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="364.4" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="367.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.50%)</title><rect x="365.5" y="915.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.30%)</title><rect x="371.4" y="931.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.30%)</title><rect x="371.4" y="915.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.30%)</title><rect x="371.4" y="899.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="374.9" y="947.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (59 samples, 5.85%)</title><rect x="377.2" y="979.0" width="69.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.2" y="990.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="378.4" y="963.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.10%)</title><rect x="379.6" y="963.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.40%)</title><rect x="380.7" y="963.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="384.2" y="947.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.79%)</title><rect x="385.4" y="963.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.50%)</title><rect x="388.9" y="947.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="391.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.30%)</title><rect x="391.2" y="931.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.30%)</title><rect x="391.2" y="915.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="393.6" y="899.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.40%)</title><rect x="394.8" y="963.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.40%)</title><rect x="394.8" y="947.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (40 samples, 3.96%)</title><rect x="399.4" y="963.0" width="46.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.4" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.69%)</title><rect x="399.4" y="947.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.20%)</title><rect x="400.6" y="931.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.20%)</title><rect x="400.6" y="915.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.20%)</title><rect x="400.6" y="899.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.40%)</title><rect x="402.9" y="931.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="407.6" y="947.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (32 samples, 3.17%)</title><rect x="408.8" y="947.0" width="37.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.8" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (32 samples, 3.17%)</title><rect x="408.8" y="931.0" width="37.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.8" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (32 samples, 3.17%)</title><rect x="408.8" y="915.0" width="37.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.8" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.79%)</title><rect x="413.5" y="899.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.40%)</title><rect x="415.8" y="883.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.40%)</title><rect x="415.8" y="867.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.40%)</title><rect x="415.8" y="851.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.30%)</title><rect x="417.0" y="835.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="420.5" y="883.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="421.7" y="883.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="421.7" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="421.7" y="851.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.59%)</title><rect x="422.8" y="899.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.40%)</title><rect x="425.2" y="883.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.40%)</title><rect x="425.2" y="867.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.40%)</title><rect x="425.2" y="851.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.40%)</title><rect x="425.2" y="835.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.20%)</title><rect x="429.8" y="899.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.79%)</title><rect x="432.2" y="899.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.79%)</title><rect x="432.2" y="883.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="435.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.79%)</title><rect x="432.2" y="867.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.79%)</title><rect x="432.2" y="851.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.2" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.79%)</title><rect x="432.2" y="835.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.2" y="846.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.79%)</title><rect x="432.2" y="819.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="439.2" y="803.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.2" y="814.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (1 samples, 0.10%)</title><rect x="440.4" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.40%)</title><rect x="441.5" y="899.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.40%)</title><rect x="441.5" y="883.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.40%)</title><rect x="441.5" y="867.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="443.9" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="446.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.10%)</title><rect x="443.9" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="446.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="443.9" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="446.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="443.9" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="446.9" y="814.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="443.9" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="446.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="445.0" y="851.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.19%)</title><rect x="446.2" y="979.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.19%)</title><rect x="446.2" y="963.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.19%)</title><rect x="446.2" y="947.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.19%)</title><rect x="446.2" y="931.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.19%)</title><rect x="446.2" y="915.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (253 samples, 25.07%)</title><rect x="460.2" y="1075.0" width="295.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.2" y="1086.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (57 samples, 5.65%)</title><rect x="462.6" y="1059.0" width="66.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.6" y="1070.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (57 samples, 5.65%)</title><rect x="462.6" y="1043.0" width="66.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.6" y="1054.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (54 samples, 5.35%)</title><rect x="466.1" y="1027.0" width="63.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.1" y="1038.0">ch/qos/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="494.2" y="1011.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.30%)</title><rect x="494.2" y="995.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="494.2" y="979.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 0.30%)</title><rect x="494.2" y="963.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.2" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.68%)</title><rect x="497.7" y="1011.0" width="31.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.7" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.88%)</title><rect x="507.0" y="995.0" width="22.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.0" y="1006.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="507.0" y="979.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.78%)</title><rect x="508.2" y="979.0" width="21.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.2" y="990.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.40%)</title><rect x="524.6" y="963.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.50%)</title><rect x="529.2" y="1059.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="530.4" y="1043.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.40%)</title><rect x="530.4" y="1027.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="533.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (120 samples, 11.89%)</title><rect x="535.1" y="1059.0" width="140.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.1" y="1070.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (120 samples, 11.89%)</title><rect x="535.1" y="1043.0" width="140.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.1" y="1054.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="538.6" y="1027.0" width="5.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="541.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="539.8" y="1011.0" width="4.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="542.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 5.25%)</title><rect x="544.4" y="1027.0" width="62.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="547.4" y="1038.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (38 samples, 3.77%)</title><rect x="552.6" y="1011.0" width="44.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.6" y="1022.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 3.67%)</title><rect x="553.8" y="995.0" width="43.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.8" y="1006.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 2.48%)</title><rect x="560.8" y="979.0" width="29.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="563.8" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 2.48%)</title><rect x="560.8" y="963.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.8" y="974.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 2.48%)</title><rect x="560.8" y="947.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="563.8" y="958.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 1.59%)</title><rect x="564.3" y="931.0" width="18.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="567.3" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="564.3" y="915.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="567.3" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="564.3" y="899.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="567.3" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.59%)</title><rect x="565.5" y="915.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="568.5" y="926.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.20%)</title><rect x="565.5" y="899.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="568.5" y="910.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="567.8" y="899.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="570.8" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="567.8" y="883.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="570.8" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.30%)</title><rect x="569.0" y="899.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.0" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="569.0" y="883.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.0" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.20%)</title><rect x="570.2" y="883.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="573.2" y="894.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="570.2" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="573.2" y="878.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="571.3" y="867.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="574.3" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.89%)</title><rect x="572.5" y="915.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="575.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (7 samples, 0.69%)</title><rect x="572.5" y="899.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="575.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="574.9" y="883.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="577.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="574.9" y="867.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="577.9" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="574.9" y="851.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="577.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="574.9" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="577.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="574.9" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="577.9" y="830.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="574.9" y="803.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="577.9" y="814.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.10%)</title><rect x="574.9" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="577.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.20%)</title><rect x="576.0" y="883.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.0" y="894.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.20%)</title><rect x="578.4" y="883.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="581.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (2 samples, 0.20%)</title><rect x="580.7" y="899.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="583.7" y="910.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.10%)</title><rect x="583.0" y="931.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="586.0" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.50%)</title><rect x="584.2" y="931.0" width="5.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="587.2" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="590.1" y="979.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="593.1" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="593.6" y="979.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="596.6" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="595.9" y="979.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="598.9" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="597.1" y="1011.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="600.1" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="597.1" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="600.1" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="597.1" y="979.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="597.1" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.1" y="974.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="597.1" y="947.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="600.1" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.20%)</title><rect x="598.2" y="1011.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="601.2" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.50%)</title><rect x="600.6" y="1011.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="603.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="606.4" y="1027.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="609.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.50%)</title><rect x="607.6" y="1027.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.20%)</title><rect x="607.6" y="1011.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.20%)</title><rect x="607.6" y="995.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="608.8" y="979.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.30%)</title><rect x="609.9" y="1011.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="612.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="609.9" y="995.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.9" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (52 samples, 5.15%)</title><rect x="613.4" y="1027.0" width="60.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.4" y="1038.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (51 samples, 5.05%)</title><rect x="614.6" y="1011.0" width="59.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.6" y="1022.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.79%)</title><rect x="614.6" y="995.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.79%)</title><rect x="614.6" y="979.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.79%)</title><rect x="614.6" y="963.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="617.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.79%)</title><rect x="614.6" y="947.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.20%)</title><rect x="624.0" y="995.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.20%)</title><rect x="624.0" y="979.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.20%)</title><rect x="624.0" y="963.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="624.0" y="947.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.0" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (41 samples, 4.06%)</title><rect x="626.3" y="995.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="629.3" y="1006.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (35 samples, 3.47%)</title><rect x="633.3" y="979.0" width="41.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.3" y="990.0">jav..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.10%)</title><rect x="657.9" y="963.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.9" y="974.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.10%)</title><rect x="657.9" y="947.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 1.29%)</title><rect x="659.1" y="963.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="666.1" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="669.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.30%)</title><rect x="667.2" y="947.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.2" y="958.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="670.8" y="947.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="673.8" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="674.3" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="677.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 5.15%)</title><rect x="675.4" y="1059.0" width="60.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.4" y="1070.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 5.15%)</title><rect x="675.4" y="1043.0" width="60.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.4" y="1054.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/173717178.process (19 samples, 1.88%)</title><rect x="683.6" y="1027.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.6" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.78%)</title><rect x="683.6" y="1011.0" width="21.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.6" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.78%)</title><rect x="683.6" y="995.0" width="21.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="686.6" y="1006.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.20%)</title><rect x="696.5" y="979.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.5" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.20%)</title><rect x="696.5" y="963.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.5" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.20%)</title><rect x="696.5" y="947.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.5" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.20%)</title><rect x="696.5" y="931.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="699.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.20%)</title><rect x="696.5" y="915.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="699.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="697.7" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.50%)</title><rect x="698.8" y="979.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="701.8" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="698.8" y="963.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="701.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.40%)</title><rect x="700.0" y="963.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.0" y="974.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="700.0" y="947.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="703.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="704.7" y="1011.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="705.8" y="1027.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.40%)</title><rect x="705.8" y="1011.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="708.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.69%)</title><rect x="710.5" y="1027.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="713.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.69%)</title><rect x="710.5" y="1011.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1396881199.get$Lambda (7 samples, 0.69%)</title><rect x="710.5" y="995.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1396881199.&lt;init&gt; (7 samples, 0.69%)</title><rect x="710.5" y="979.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="717.5" y="963.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="720.5" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="717.5" y="947.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="717.5" y="931.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.5" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="717.5" y="915.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="720.5" y="926.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="717.5" y="899.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="720.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (5 samples, 0.50%)</title><rect x="718.7" y="1027.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.30%)</title><rect x="721.0" y="1011.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.0" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.10%)</title><rect x="723.4" y="995.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.79%)</title><rect x="724.5" y="1027.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="727.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.50%)</title><rect x="728.1" y="1011.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.40%)</title><rect x="728.1" y="995.0" width="4.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="731.1" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="732.7" y="995.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="735.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="733.9" y="1027.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="736.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="735.1" y="1027.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="735.1" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="738.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="736.2" y="1059.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.2" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="736.2" y="1043.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.2" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="736.2" y="1027.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="739.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="736.2" y="1011.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="736.2" y="995.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="739.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.59%)</title><rect x="737.4" y="1059.0" width="18.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="740.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.59%)</title><rect x="737.4" y="1043.0" width="18.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.4" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="739.8" y="1027.0" width="5.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="742.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="740.9" y="1011.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="743.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.89%)</title><rect x="745.6" y="1027.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1773840744.accept (9 samples, 0.89%)</title><rect x="745.6" y="1011.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (9 samples, 0.89%)</title><rect x="745.6" y="995.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.89%)</title><rect x="745.6" y="979.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.6" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.89%)</title><rect x="745.6" y="963.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.6" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.89%)</title><rect x="745.6" y="947.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.6" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="752.6" y="931.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="755.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="752.6" y="915.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="755.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.88%)</title><rect x="756.1" y="1075.0" width="22.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.1" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.88%)</title><rect x="756.1" y="1059.0" width="22.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.1" y="1070.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="758.5" y="1043.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="761.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="758.5" y="1027.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="758.5" y="1011.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="761.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="758.5" y="995.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="761.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="759.6" y="1043.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.49%)</title><rect x="760.8" y="1043.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="763.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1773840744.accept (15 samples, 1.49%)</title><rect x="760.8" y="1027.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="763.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (15 samples, 1.49%)</title><rect x="760.8" y="1011.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (15 samples, 1.49%)</title><rect x="760.8" y="995.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.8" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (15 samples, 1.49%)</title><rect x="760.8" y="979.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.8" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (15 samples, 1.49%)</title><rect x="760.8" y="963.0" width="17.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.79%)</title><rect x="778.3" y="1075.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="781.3" y="1086.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.79%)</title><rect x="778.3" y="1059.0" width="9.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="781.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (9 samples, 0.89%)</title><rect x="787.7" y="1091.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.7" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.59%)</title><rect x="791.2" y="1075.0" width="7.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="794.2" y="1086.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.59%)</title><rect x="791.2" y="1059.0" width="7.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="794.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.10%)</title><rect x="798.2" y="1139.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="798.2" y="1123.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="801.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="798.2" y="1107.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="798.2" y="1091.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (229 samples, 22.70%)</title><rect x="799.4" y="1139.0" width="267.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.4" y="1150.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 22.70%)</title><rect x="799.4" y="1123.0" width="267.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.4" y="1134.0">java/util/concurrent/LinkedBlockingQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (207 samples, 20.52%)</title><rect x="800.6" y="1107.0" width="242.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="803.6" y="1118.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.10%)</title><rect x="814.6" y="1091.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.10%)</title><rect x="814.6" y="1075.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (25 samples, 2.48%)</title><rect x="815.8" y="1091.0" width="29.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.8" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.89%)</title><rect x="845.0" y="1091.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="848.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.89%)</title><rect x="845.0" y="1075.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="848.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.89%)</title><rect x="845.0" y="1059.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.89%)</title><rect x="845.0" y="1043.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (159 samples, 15.76%)</title><rect x="855.5" y="1091.0" width="186.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.5" y="1102.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (159 samples, 15.76%)</title><rect x="855.5" y="1075.0" width="186.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.5" y="1086.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="863.7" y="1059.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="866.7" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.30%)</title><rect x="864.9" y="1059.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.9" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (145 samples, 14.37%)</title><rect x="868.4" y="1059.0" width="169.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="871.4" y="1070.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="871.9" y="1043.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.9" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 3.17%)</title><rect x="873.1" y="1043.0" width="37.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="876.1" y="1054.0">Par..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 1.09%)</title><rect x="883.6" y="1027.0" width="12.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="886.6" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.30%)</title><rect x="884.8" y="1011.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.8" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.20%)</title><rect x="885.9" y="995.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.9" y="1006.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.40%)</title><rect x="888.3" y="1011.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.3" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.30%)</title><rect x="893.0" y="1011.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="896.0" y="1022.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="896.5" y="1027.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.5" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 1.09%)</title><rect x="897.6" y="1027.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="900.6" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.20%)</title><rect x="910.5" y="1043.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="912.8" y="1043.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="915.8" y="1054.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.10%)</title><rect x="914.0" y="1043.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="917.0" y="1054.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.69%)</title><rect x="915.2" y="1043.0" width="8.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="918.2" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.87%)</title><rect x="923.4" y="1043.0" width="33.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="926.4" y="1054.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (46 samples, 4.56%)</title><rect x="957.3" y="1043.0" width="53.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="960.3" y="1054.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.30%)</title><rect x="1011.1" y="1043.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1014.1" y="1054.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.20%)</title><rect x="1014.6" y="1043.0" width="2.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1017.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.50%)</title><rect x="1016.9" y="1043.0" width="5.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1019.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1022.8" y="1043.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1025.8" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.50%)</title><rect x="1025.1" y="1043.0" width="5.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1028.1" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1031.0" y="1043.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1034.0" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.30%)</title><rect x="1032.1" y="1043.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.1" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1035.6" y="1043.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.6" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1036.8" y="1043.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1039.8" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1038.0" y="1059.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1041.0" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1040.3" y="1059.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.3" y="1070.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1041.5" y="1091.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1044.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 2.08%)</title><rect x="1042.6" y="1107.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1045.6" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 2.08%)</title><rect x="1042.6" y="1091.0" width="24.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1045.6" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 2.08%)</title><rect x="1042.6" y="1075.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1045.6" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 2.08%)</title><rect x="1042.6" y="1059.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.6" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.10%)</title><rect x="1066.0" y="1043.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1069.0" y="1054.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.10%)</title><rect x="1067.2" y="1187.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1070.2" y="1198.0"></text>
</g>
<g>
<title>start_thread (104 samples, 10.31%)</title><rect x="1068.4" y="1187.0" width="121.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1071.4" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (104 samples, 10.31%)</title><rect x="1068.4" y="1171.0" width="121.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1071.4" y="1182.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.68%)</title><rect x="1068.4" y="1155.0" width="19.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.4" y="1166.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1068.4" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.4" y="1150.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.30%)</title><rect x="1069.5" y="1139.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.5" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.30%)</title><rect x="1069.5" y="1123.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.5" y="1134.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.30%)</title><rect x="1069.5" y="1107.0" width="3.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1072.5" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.29%)</title><rect x="1073.1" y="1139.0" width="15.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.1" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.40%)</title><rect x="1073.1" y="1123.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.1" y="1134.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.10%)</title><rect x="1073.1" y="1107.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.1" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1074.2" y="1107.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.2" y="1118.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1075.4" y="1107.0" width="2.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1078.4" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.30%)</title><rect x="1077.7" y="1123.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.7" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1077.7" y="1107.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.7" y="1118.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1077.7" y="1091.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1078.9" y="1075.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.9" y="1086.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1078.9" y="1059.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.9" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1078.9" y="1043.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.9" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="1078.9" y="1027.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.9" y="1038.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.10%)</title><rect x="1078.9" y="1011.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.9" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1080.1" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.1" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1080.1" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.1" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.59%)</title><rect x="1081.2" y="1123.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.2" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.59%)</title><rect x="1081.2" y="1107.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.2" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.59%)</title><rect x="1081.2" y="1091.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.2" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.59%)</title><rect x="1081.2" y="1075.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.2" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="1081.2" y="1059.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.2" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="1081.2" y="1043.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.2" y="1054.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.50%)</title><rect x="1082.4" y="1059.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.4" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.50%)</title><rect x="1082.4" y="1043.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.4" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.50%)</title><rect x="1082.4" y="1027.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.4" y="1038.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1084.7" y="1011.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.7" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1085.9" y="1011.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.9" y="1022.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.10%)</title><rect x="1087.1" y="1011.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.1" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 8.42%)</title><rect x="1088.3" y="1155.0" width="99.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.3" y="1166.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 8.42%)</title><rect x="1088.3" y="1139.0" width="99.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.3" y="1150.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 8.42%)</title><rect x="1088.3" y="1123.0" width="99.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.3" y="1134.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 8.42%)</title><rect x="1088.3" y="1107.0" width="99.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.3" y="1118.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (84 samples, 8.33%)</title><rect x="1088.3" y="1091.0" width="98.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.3" y="1102.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (84 samples, 8.33%)</title><rect x="1088.3" y="1075.0" width="98.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.3" y="1086.0">Compile::Com..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.10%)</title><rect x="1088.3" y="1059.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.3" y="1070.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.10%)</title><rect x="1088.3" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.3" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1088.3" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1088.3" y="1011.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.3" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1088.3" y="995.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1088.3" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.3" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1088.3" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.3" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1088.3" y="947.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.3" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1088.3" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.3" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1088.3" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.3" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1088.3" y="899.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.3" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1088.3" y="883.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.3" y="894.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1088.3" y="867.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.3" y="878.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1088.3" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.3" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1088.3" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.3" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1088.3" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.3" y="830.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.10%)</title><rect x="1088.3" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.3" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 3.27%)</title><rect x="1089.4" y="1059.0" width="38.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.4" y="1070.0">Com..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1089.4" y="1043.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.4" y="1054.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1089.4" y="1027.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.4" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1089.4" y="1011.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.4" y="1022.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.10%)</title><rect x="1089.4" y="995.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.4" y="1006.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="1089.4" y="979.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.4" y="990.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, RegisterImpl*) (1 samples, 0.10%)</title><rect x="1089.4" y="963.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.4" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.50%)</title><rect x="1090.6" y="1043.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.6" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.20%)</title><rect x="1091.8" y="1027.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.8" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.10%)</title><rect x="1091.8" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.8" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::add_gc_map(int, OopMap*) (1 samples, 0.10%)</title><rect x="1091.8" y="995.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.8" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="1092.9" y="1011.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.9" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1092.9" y="995.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.9" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1094.1" y="1027.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.1" y="1038.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="1095.3" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.3" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.20%)</title><rect x="1096.4" y="1043.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.4" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1096.4" y="1027.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.10%)</title><rect x="1097.6" y="1027.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.6" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1097.6" y="1011.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.40%)</title><rect x="1098.8" y="1043.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.10%)</title><rect x="1098.8" y="1027.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.10%)</title><rect x="1098.8" y="1011.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.8" y="1022.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.10%)</title><rect x="1098.8" y="995.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.8" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1098.8" y="979.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.8" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.30%)</title><rect x="1100.0" y="1027.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1100.0" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.20%)</title><rect x="1101.1" y="1011.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.1" y="1022.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="1101.1" y="995.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.1" y="1006.0"></text>
</g>
<g>
<title>membar_acquire_lockNode::adr_type() const (1 samples, 0.10%)</title><rect x="1102.3" y="995.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 2.08%)</title><rect x="1103.5" y="1043.0" width="24.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.5" y="1054.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1103.5" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.5" y="1038.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1103.5" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1104.6" y="1027.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1104.6" y="1011.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.6" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1104.6" y="995.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.30%)</title><rect x="1105.8" y="1027.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.8" y="1038.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.10%)</title><rect x="1108.1" y="1011.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.59%)</title><rect x="1109.3" y="1027.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.3" y="1038.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.10%)</title><rect x="1111.6" y="1011.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.30%)</title><rect x="1112.8" y="1011.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1115.2" y="995.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="1116.3" y="1027.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.3" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1116.3" y="1011.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.3" y="1022.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1117.5" y="1011.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.40%)</title><rect x="1118.7" y="1027.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.20%)</title><rect x="1121.0" y="1011.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.20%)</title><rect x="1123.3" y="1027.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1125.7" y="1027.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.7" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1125.7" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.7" y="1022.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1126.8" y="1027.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.8" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (44 samples, 4.36%)</title><rect x="1128.0" y="1059.0" width="51.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.0" y="1070.0">Compi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.30%)</title><rect x="1128.0" y="1043.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.30%)</title><rect x="1128.0" y="1027.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.10%)</title><rect x="1128.0" y="1011.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.10%)</title><rect x="1128.0" y="995.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.0" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.10%)</title><rect x="1128.0" y="979.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.0" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1128.0" y="963.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.0" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.10%)</title><rect x="1128.0" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.0" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.10%)</title><rect x="1128.0" y="931.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.0" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1128.0" y="915.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.0" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1128.0" y="899.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.0" y="910.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1128.0" y="883.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1129.2" y="1011.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1130.4" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1130.4" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1130.4" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1130.4" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.4" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.10%)</title><rect x="1130.4" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 3.07%)</title><rect x="1131.5" y="1043.0" width="36.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.5" y="1054.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1131.5" y="1027.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.10%)</title><rect x="1131.5" y="1011.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1132.7" y="1027.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (24 samples, 2.38%)</title><rect x="1135.0" y="1027.0" width="28.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (24 samples, 2.38%)</title><rect x="1135.0" y="1011.0" width="28.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.0" y="1022.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1135.0" y="995.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (23 samples, 2.28%)</title><rect x="1136.2" y="995.0" width="26.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.2" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.20%)</title><rect x="1160.8" y="979.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1163.1" y="1027.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.20%)</title><rect x="1163.1" y="1011.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.20%)</title><rect x="1163.1" y="995.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1163.1" y="979.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="990.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1163.1" y="963.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.1" y="974.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.10%)</title><rect x="1164.3" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1165.4" y="1027.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1165.4" y="1011.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="1022.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1166.6" y="1027.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.99%)</title><rect x="1167.8" y="1043.0" width="11.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.89%)</title><rect x="1167.8" y="1027.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.8" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1167.8" y="1011.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1167.8" y="995.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.8" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1167.8" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1167.8" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.10%)</title><rect x="1168.9" y="1011.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1168.9" y="995.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="1006.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1168.9" y="979.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="990.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1170.1" y="1011.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="1022.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.10%)</title><rect x="1170.1" y="995.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1171.3" y="1011.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.5" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.10%)</title><rect x="1172.5" y="979.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.10%)</title><rect x="1172.5" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1173.6" y="1011.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1173.6" y="995.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="979.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="963.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="947.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="931.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="915.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="899.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="883.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="867.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="851.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="835.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="819.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="803.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.6" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1173.6" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="771.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="782.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1174.8" y="1011.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1174.8" y="995.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.8" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1174.8" y="979.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1174.8" y="963.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1176.0" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1176.0" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1176.0" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.10%)</title><rect x="1176.0" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1176.0" y="947.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1179.0" y="958.0"></text>
</g>
<g>
<title>URShiftINode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1177.1" y="1011.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="1022.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.10%)</title><rect x="1178.3" y="1027.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.50%)</title><rect x="1179.5" y="1059.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.50%)</title><rect x="1179.5" y="1043.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.50%)</title><rect x="1179.5" y="1027.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.50%)</title><rect x="1179.5" y="1011.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.50%)</title><rect x="1179.5" y="995.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.50%)</title><rect x="1179.5" y="979.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1179.5" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1179.5" y="931.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1179.5" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1179.5" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1179.5" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1179.5" y="867.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1179.5" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="835.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1179.5" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.5" y="803.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.5" y="787.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1179.5" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1179.5" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1179.5" y="739.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.10%)</title><rect x="1179.5" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="707.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1179.5" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1179.5" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1179.5" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1179.5" y="643.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1180.6" y="963.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1180.6" y="947.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1180.6" y="931.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1180.6" y="915.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1180.6" y="899.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1180.6" y="883.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.6" y="867.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.6" y="851.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.6" y="835.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.6" y="819.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.6" y="803.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.6" y="787.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.6" y="771.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.6" y="755.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.6" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.6" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.6" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.6" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.6" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.6" y="659.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.6" y="643.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.6" y="627.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.6" y="611.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.6" y="595.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.6" y="579.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.6" y="563.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.6" y="547.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.6" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.6" y="515.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1180.6" y="467.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1180.6" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="435.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1180.6" y="419.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1180.6" y="403.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="387.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="371.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.10%)</title><rect x="1180.6" y="355.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1180.6" y="339.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1180.6" y="323.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1180.6" y="307.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1180.6" y="291.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1181.8" y="867.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1181.8" y="851.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1181.8" y="835.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1181.8" y="819.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1181.8" y="803.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1181.8" y="787.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1181.8" y="771.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1181.8" y="755.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1181.8" y="739.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1181.8" y="723.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1181.8" y="707.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1181.8" y="691.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1181.8" y="675.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1181.8" y="659.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1181.8" y="643.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1181.8" y="627.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1181.8" y="611.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1181.8" y="595.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.8" y="579.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1181.8" y="563.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1181.8" y="547.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1181.8" y="531.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1181.8" y="515.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1181.8" y="499.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.8" y="483.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="451.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.10%)</title><rect x="1181.8" y="435.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1181.8" y="419.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.10%)</title><rect x="1181.8" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.10%)</title><rect x="1181.8" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="451.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="419.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="403.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="355.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="339.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="323.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="307.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="291.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="275.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="259.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="243.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="227.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="211.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="195.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="179.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="163.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="147.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="131.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="115.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="99.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="83.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1183.0" y="67.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="78.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.10%)</title><rect x="1183.0" y="51.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="62.0"></text>
</g>
<g>
<title>PhaseTransform::set_type(Node const*, Type const*) (1 samples, 0.10%)</title><rect x="1183.0" y="35.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="659.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="627.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="579.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1184.2" y="547.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.2" y="531.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.2" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="526.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1184.2" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="435.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="446.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1184.2" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="430.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1185.3" y="1059.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1185.3" y="1043.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.5" y="1091.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1186.5" y="1075.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.5" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1186.5" y="1059.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="1070.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.10%)</title><rect x="1186.5" y="1043.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.5" y="1054.0"></text>
</g>
<g>
<title>Dependencies::initialize(ciEnv*) (1 samples, 0.10%)</title><rect x="1186.5" y="1027.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="1038.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.7" y="1155.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="1166.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="1187.7" y="1139.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="1139.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="1150.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="1123.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="1134.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="1107.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="1118.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="1091.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="1075.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.10%)</title><rect x="1188.8" y="1059.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.10%)</title><rect x="1188.8" y="1043.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="1054.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.10%)</title><rect x="1188.8" y="1027.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="1038.0"></text>
</g>
</g>
</svg>
