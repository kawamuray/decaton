<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (331 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (42 samples, 12.69%)</title><rect x="10.0" y="979.0" width="149.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.30%)</title><rect x="13.6" y="963.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.30%)</title><rect x="13.6" y="947.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.30%)</title><rect x="13.6" y="931.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.30%)</title><rect x="13.6" y="915.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.30%)</title><rect x="13.6" y="899.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="13.6" y="883.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="13.6" y="867.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="13.6" y="851.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.30%)</title><rect x="13.6" y="835.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.30%)</title><rect x="13.6" y="819.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="13.6" y="803.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.30%)</title><rect x="13.6" y="787.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.30%)</title><rect x="13.6" y="771.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.30%)</title><rect x="13.6" y="755.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.30%)</title><rect x="13.6" y="739.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.30%)</title><rect x="13.6" y="723.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.30%)</title><rect x="13.6" y="707.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.30%)</title><rect x="13.6" y="691.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.30%)</title><rect x="13.6" y="675.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (40 samples, 12.08%)</title><rect x="17.1" y="963.0" width="142.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.1" y="974.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.30%)</title><rect x="17.1" y="947.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.30%)</title><rect x="17.1" y="931.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.30%)</title><rect x="17.1" y="915.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="17.1" y="899.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.30%)</title><rect x="17.1" y="883.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.30%)</title><rect x="17.1" y="867.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.30%)</title><rect x="17.1" y="851.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.30%)</title><rect x="17.1" y="835.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.30%)</title><rect x="17.1" y="819.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.30%)</title><rect x="17.1" y="803.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.1" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="17.1" y="787.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 6.34%)</title><rect x="20.7" y="947.0" width="74.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="958.0">java/lan..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1802216064.accept (21 samples, 6.34%)</title><rect x="20.7" y="931.0" width="74.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.7" y="942.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (21 samples, 6.34%)</title><rect x="20.7" y="915.0" width="74.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="926.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (15 samples, 4.53%)</title><rect x="20.7" y="899.0" width="53.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.7" y="910.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (15 samples, 4.53%)</title><rect x="20.7" y="883.0" width="53.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.7" y="894.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (15 samples, 4.53%)</title><rect x="20.7" y="867.0" width="53.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="878.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (15 samples, 4.53%)</title><rect x="20.7" y="851.0" width="53.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 3.93%)</title><rect x="27.8" y="835.0" width="46.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.8" y="846.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 3.93%)</title><rect x="27.8" y="819.0" width="46.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.8" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 3.32%)</title><rect x="27.8" y="803.0" width="39.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.8" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 3.32%)</title><rect x="27.8" y="787.0" width="39.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.8" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 3.32%)</title><rect x="27.8" y="771.0" width="39.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.8" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 3.32%)</title><rect x="27.8" y="755.0" width="39.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.8" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 3.32%)</title><rect x="27.8" y="739.0" width="39.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.8" y="750.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 3.02%)</title><rect x="31.4" y="723.0" width="35.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.4" y="734.0">sun..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.30%)</title><rect x="31.4" y="707.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="34.4" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 2.72%)</title><rect x="35.0" y="707.0" width="32.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="38.0" y="718.0">Un..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.30%)</title><rect x="35.0" y="691.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="38.0" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 2.11%)</title><rect x="38.5" y="691.0" width="25.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="41.5" y="702.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.30%)</title><rect x="63.5" y="691.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="66.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.60%)</title><rect x="67.0" y="803.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.60%)</title><rect x="67.0" y="787.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.60%)</title><rect x="67.0" y="771.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.60%)</title><rect x="67.0" y="755.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.30%)</title><rect x="74.2" y="899.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="77.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.30%)</title><rect x="74.2" y="883.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.30%)</title><rect x="77.7" y="899.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="77.7" y="883.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="77.7" y="867.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.21%)</title><rect x="81.3" y="899.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.3" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.21%)</title><rect x="81.3" y="883.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.3" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.21%)</title><rect x="81.3" y="867.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.3" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.91%)</title><rect x="84.9" y="851.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.9" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.91%)</title><rect x="84.9" y="835.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 5.44%)</title><rect x="95.6" y="947.0" width="64.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.6" y="958.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 5.44%)</title><rect x="95.6" y="931.0" width="64.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.6" y="942.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.51%)</title><rect x="99.1" y="915.0" width="17.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.51%)</title><rect x="99.1" y="899.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.21%)</title><rect x="99.1" y="883.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.60%)</title><rect x="99.1" y="867.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.60%)</title><rect x="99.1" y="851.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.60%)</title><rect x="99.1" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.30%)</title><rect x="99.1" y="819.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.30%)</title><rect x="99.1" y="803.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.30%)</title><rect x="99.1" y="787.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.30%)</title><rect x="99.1" y="771.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.30%)</title><rect x="99.1" y="755.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.30%)</title><rect x="99.1" y="739.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.30%)</title><rect x="99.1" y="723.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.30%)</title><rect x="102.7" y="819.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.30%)</title><rect x="102.7" y="803.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.30%)</title><rect x="102.7" y="787.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.30%)</title><rect x="102.7" y="771.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.30%)</title><rect x="102.7" y="755.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarlong (1 samples, 0.30%)</title><rect x="102.7" y="739.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.7" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.30%)</title><rect x="102.7" y="723.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.7" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.30%)</title><rect x="102.7" y="707.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.60%)</title><rect x="106.3" y="867.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.60%)</title><rect x="106.3" y="851.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (2 samples, 0.60%)</title><rect x="106.3" y="835.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.30%)</title><rect x="106.3" y="819.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.30%)</title><rect x="106.3" y="803.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.30%)</title><rect x="106.3" y="787.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.30%)</title><rect x="106.3" y="771.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.30%)</title><rect x="109.8" y="819.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="112.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.30%)</title><rect x="113.4" y="883.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 1.51%)</title><rect x="116.9" y="915.0" width="17.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.21%)</title><rect x="116.9" y="899.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.91%)</title><rect x="116.9" y="883.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.9" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.30%)</title><rect x="116.9" y="867.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$224/1125903081.accept (1 samples, 0.30%)</title><rect x="116.9" y="851.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.30%)</title><rect x="116.9" y="835.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.30%)</title><rect x="116.9" y="819.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.30%)</title><rect x="116.9" y="803.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="116.9" y="787.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="116.9" y="771.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.30%)</title><rect x="120.5" y="867.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.30%)</title><rect x="120.5" y="851.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.5" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/376760030.linkToTargetMethod (1 samples, 0.30%)</title><rect x="120.5" y="835.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.5" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.30%)</title><rect x="120.5" y="819.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$80/107507016.get$Lambda (1 samples, 0.30%)</title><rect x="120.5" y="803.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.30%)</title><rect x="124.1" y="867.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.30%)</title><rect x="124.1" y="851.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.30%)</title><rect x="124.1" y="835.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.30%)</title><rect x="124.1" y="819.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.30%)</title><rect x="127.6" y="883.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.30%)</title><rect x="127.6" y="867.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="127.6" y="851.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.30%)</title><rect x="127.6" y="835.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.30%)</title><rect x="131.2" y="899.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.30%)</title><rect x="131.2" y="883.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.30%)</title><rect x="131.2" y="867.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.30%)</title><rect x="131.2" y="851.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.30%)</title><rect x="131.2" y="835.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.30%)</title><rect x="131.2" y="819.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.30%)</title><rect x="131.2" y="803.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.30%)</title><rect x="131.2" y="787.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.21%)</title><rect x="134.8" y="915.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.91%)</title><rect x="134.8" y="899.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.60%)</title><rect x="134.8" y="883.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.maybeThrottle (1 samples, 0.30%)</title><rect x="138.3" y="867.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.30%)</title><rect x="141.9" y="883.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="141.9" y="867.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.30%)</title><rect x="141.9" y="851.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.30%)</title><rect x="141.9" y="835.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.30%)</title><rect x="141.9" y="819.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.30%)</title><rect x="141.9" y="803.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.9" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.30%)</title><rect x="141.9" y="787.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.30%)</title><rect x="141.9" y="771.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="144.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.30%)</title><rect x="141.9" y="755.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.9" y="766.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.30%)</title><rect x="141.9" y="739.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.30%)</title><rect x="145.5" y="899.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.30%)</title><rect x="145.5" y="883.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="145.5" y="867.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="145.5" y="851.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.30%)</title><rect x="145.5" y="835.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.30%)</title><rect x="145.5" y="819.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.30%)</title><rect x="145.5" y="803.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.30%)</title><rect x="145.5" y="787.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.30%)</title><rect x="145.5" y="771.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.30%)</title><rect x="145.5" y="755.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.30%)</title><rect x="145.5" y="739.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.30%)</title><rect x="145.5" y="723.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.30%)</title><rect x="145.5" y="707.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.30%)</title><rect x="145.5" y="691.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.30%)</title><rect x="145.5" y="675.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.5" y="686.0"></text>
</g>
<g>
<title>java/nio/Bits.putLong (1 samples, 0.30%)</title><rect x="145.5" y="659.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Bits.putLongB (1 samples, 0.30%)</title><rect x="145.5" y="643.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.60%)</title><rect x="149.0" y="915.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.60%)</title><rect x="149.0" y="899.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.30%)</title><rect x="152.6" y="883.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.30%)</title><rect x="152.6" y="867.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.30%)</title><rect x="152.6" y="851.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.30%)</title><rect x="152.6" y="835.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.30%)</title><rect x="152.6" y="819.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.6" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="152.6" y="803.0" width="3.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="155.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.30%)</title><rect x="156.2" y="915.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="156.2" y="899.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="156.2" y="883.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="156.2" y="867.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (93 samples, 28.10%)</title><rect x="159.7" y="979.0" width="331.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.7" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (93 samples, 28.10%)</title><rect x="159.7" y="963.0" width="331.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.7" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worke..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (93 samples, 28.10%)</title><rect x="159.7" y="947.0" width="331.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.7" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWo..</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.60%)</title><rect x="163.3" y="931.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1151207336.run (54 samples, 16.31%)</title><rect x="170.4" y="931.0" width="192.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.4" y="942.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (54 samples, 16.31%)</title><rect x="170.4" y="915.0" width="192.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.4" y="926.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (54 samples, 16.31%)</title><rect x="170.4" y="899.0" width="192.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.4" y="910.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (54 samples, 16.31%)</title><rect x="170.4" y="883.0" width="192.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.4" y="894.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 4.23%)</title><rect x="177.6" y="867.0" width="49.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.6" y="878.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (14 samples, 4.23%)</title><rect x="177.6" y="851.0" width="49.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.6" y="862.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 4.23%)</title><rect x="177.6" y="835.0" width="49.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.6" y="846.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 4.23%)</title><rect x="177.6" y="819.0" width="49.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.6" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 4.23%)</title><rect x="177.6" y="803.0" width="49.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.6" y="814.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 4.23%)</title><rect x="177.6" y="787.0" width="49.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.6" y="798.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.51%)</title><rect x="177.6" y="771.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.6" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="184.7" y="755.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="187.7" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="184.7" y="739.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="187.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.30%)</title><rect x="188.2" y="755.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.30%)</title><rect x="188.2" y="739.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.30%)</title><rect x="188.2" y="723.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.30%)</title><rect x="188.2" y="707.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.30%)</title><rect x="188.2" y="691.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.30%)</title><rect x="188.2" y="675.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.30%)</title><rect x="191.8" y="755.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 2.42%)</title><rect x="195.4" y="771.0" width="28.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.4" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.60%)</title><rect x="195.4" y="755.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.60%)</title><rect x="195.4" y="739.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.30%)</title><rect x="198.9" y="723.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.30%)</title><rect x="198.9" y="707.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.30%)</title><rect x="198.9" y="691.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.30%)</title><rect x="202.5" y="755.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.30%)</title><rect x="202.5" y="739.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 1.51%)</title><rect x="206.1" y="755.0" width="17.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.51%)</title><rect x="206.1" y="739.0" width="17.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.51%)</title><rect x="206.1" y="723.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.51%)</title><rect x="206.1" y="707.0" width="17.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.60%)</title><rect x="216.8" y="691.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.60%)</title><rect x="216.8" y="675.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.60%)</title><rect x="216.8" y="659.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.60%)</title><rect x="216.8" y="643.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.30%)</title><rect x="220.3" y="627.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.30%)</title><rect x="220.3" y="611.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.30%)</title><rect x="220.3" y="595.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.30%)</title><rect x="223.9" y="771.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.30%)</title><rect x="223.9" y="755.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.30%)</title><rect x="223.9" y="739.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.30%)</title><rect x="223.9" y="723.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="223.9" y="707.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (34 samples, 10.27%)</title><rect x="227.5" y="867.0" width="121.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.5" y="878.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 1.21%)</title><rect x="227.5" y="851.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.5" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.21%)</title><rect x="227.5" y="835.0" width="14.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.5" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.21%)</title><rect x="227.5" y="819.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.5" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="227.5" y="803.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="227.5" y="787.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="227.5" y="771.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="227.5" y="755.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.60%)</title><rect x="231.0" y="803.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.30%)</title><rect x="234.6" y="787.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="234.6" y="771.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="234.6" y="755.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.30%)</title><rect x="234.6" y="739.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.30%)</title><rect x="238.2" y="803.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.30%)</title><rect x="238.2" y="787.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.30%)</title><rect x="238.2" y="771.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="241.7" y="851.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="241.7" y="835.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.30%)</title><rect x="241.7" y="819.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 6.34%)</title><rect x="245.3" y="851.0" width="74.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.3" y="862.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 6.34%)</title><rect x="245.3" y="835.0" width="74.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.3" y="846.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.11%)</title><rect x="252.4" y="819.0" width="25.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.4" y="830.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.11%)</title><rect x="252.4" y="803.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.4" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.91%)</title><rect x="259.5" y="787.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.5" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.91%)</title><rect x="259.5" y="771.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.5" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.91%)</title><rect x="259.5" y="755.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="266.7" y="739.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="269.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.30%)</title><rect x="266.7" y="723.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="269.7" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.30%)</title><rect x="266.7" y="707.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.7" y="718.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.30%)</title><rect x="266.7" y="691.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.7" y="702.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.30%)</title><rect x="270.2" y="787.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="273.2" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.30%)</title><rect x="273.8" y="787.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="276.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.recordOffset (1 samples, 0.30%)</title><rect x="277.4" y="819.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.4" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.32%)</title><rect x="280.9" y="819.0" width="39.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.9" y="830.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.02%)</title><rect x="284.5" y="803.0" width="35.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.5" y="814.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 3.02%)</title><rect x="284.5" y="787.0" width="35.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.5" y="798.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.11%)</title><rect x="295.2" y="771.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.2" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.91%)</title><rect x="309.5" y="755.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.30%)</title><rect x="309.5" y="739.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.60%)</title><rect x="313.0" y="739.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 1.81%)</title><rect x="320.2" y="851.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.2" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 1.81%)</title><rect x="320.2" y="835.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.2" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/564617543.process (3 samples, 0.91%)</title><rect x="320.2" y="819.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 0.91%)</title><rect x="320.2" y="803.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.60%)</title><rect x="320.2" y="787.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.2" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.60%)</title><rect x="320.2" y="771.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.60%)</title><rect x="320.2" y="755.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.60%)</title><rect x="320.2" y="739.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.60%)</title><rect x="320.2" y="723.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.30%)</title><rect x="320.2" y="707.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.2" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="323.7" y="707.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="326.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="323.7" y="691.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="326.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.30%)</title><rect x="327.3" y="787.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.30%)</title><rect x="327.3" y="771.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.30%)</title><rect x="327.3" y="755.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.30%)</title><rect x="327.3" y="739.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="330.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.30%)</title><rect x="330.8" y="819.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.8" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="330.8" y="803.0" width="3.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="333.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="330.8" y="787.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="333.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="334.4" y="819.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.30%)</title><rect x="334.4" y="803.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.30%)</title><rect x="338.0" y="819.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.30%)</title><rect x="338.0" y="803.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.0" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.30%)</title><rect x="338.0" y="787.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.0" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.30%)</title><rect x="338.0" y="771.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.0" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="338.0" y="755.0" width="3.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="341.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/SubscriptionScope.subscriptionId (1 samples, 0.30%)</title><rect x="341.5" y="851.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="344.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.30%)</title><rect x="345.1" y="851.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.30%)</title><rect x="345.1" y="835.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.30%)</title><rect x="345.1" y="819.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/692754256.accept (1 samples, 0.30%)</title><rect x="345.1" y="803.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.30%)</title><rect x="345.1" y="787.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="348.1" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.30%)</title><rect x="345.1" y="771.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.1" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.30%)</title><rect x="345.1" y="755.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.1" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="345.1" y="739.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="348.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="345.1" y="723.0" width="3.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="348.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.21%)</title><rect x="348.7" y="867.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.21%)</title><rect x="348.7" y="851.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.21%)</title><rect x="348.7" y="835.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/1936356280.accept (4 samples, 1.21%)</title><rect x="348.7" y="819.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (4 samples, 1.21%)</title><rect x="348.7" y="803.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$274/1163661424.complete (4 samples, 1.21%)</title><rect x="348.7" y="787.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (4 samples, 1.21%)</title><rect x="348.7" y="771.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.21%)</title><rect x="348.7" y="755.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.21%)</title><rect x="348.7" y="739.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.21%)</title><rect x="348.7" y="723.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.21%)</title><rect x="348.7" y="707.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.21%)</title><rect x="348.7" y="691.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.60%)</title><rect x="362.9" y="931.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.60%)</title><rect x="362.9" y="915.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.9" y="926.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.30%)</title><rect x="362.9" y="899.0" width="3.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="365.9" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.30%)</title><rect x="366.5" y="899.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.60%)</title><rect x="370.1" y="931.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.60%)</title><rect x="370.1" y="915.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.30%)</title><rect x="373.6" y="899.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.60%)</title><rect x="377.2" y="931.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="380.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.afterExecute (1 samples, 0.30%)</title><rect x="384.3" y="931.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (29 samples, 8.76%)</title><rect x="387.9" y="931.0" width="103.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.9" y="942.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (29 samples, 8.76%)</title><rect x="387.9" y="915.0" width="103.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.9" y="926.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (25 samples, 7.55%)</title><rect x="402.1" y="899.0" width="89.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.1" y="910.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.30%)</title><rect x="409.3" y="883.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.30%)</title><rect x="409.3" y="867.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.30%)</title><rect x="409.3" y="851.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.30%)</title><rect x="409.3" y="835.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 6.65%)</title><rect x="412.8" y="883.0" width="78.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.8" y="894.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (22 samples, 6.65%)</title><rect x="412.8" y="867.0" width="78.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.8" y="878.0">sun/misc/..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.30%)</title><rect x="416.4" y="851.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="419.4" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park (20 samples, 6.04%)</title><rect x="420.0" y="851.0" width="71.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="423.0" y="862.0">Unsafe_P..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.60%)</title><rect x="420.0" y="835.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="423.0" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.30%)</title><rect x="427.1" y="835.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.1" y="846.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.30%)</title><rect x="430.7" y="835.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="433.7" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="430.7" y="819.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="433.7" y="830.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.30%)</title><rect x="434.2" y="835.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="437.2" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.91%)</title><rect x="437.8" y="835.0" width="10.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="440.8" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_wait (10 samples, 3.02%)</title><rect x="448.5" y="835.0" width="35.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="451.5" y="846.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.30%)</title><rect x="484.1" y="835.0" width="3.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="487.1" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.30%)</title><rect x="487.7" y="835.0" width="3.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="490.7" y="846.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.30%)</title><rect x="491.3" y="979.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="494.3" y="990.0"></text>
</g>
<g>
<title>start_thread (195 samples, 58.91%)</title><rect x="494.8" y="979.0" width="695.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="497.8" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (195 samples, 58.91%)</title><rect x="494.8" y="963.0" width="695.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="497.8" y="974.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 6.65%)</title><rect x="494.8" y="947.0" width="78.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="497.8" y="958.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 1.81%)</title><rect x="494.8" y="931.0" width="21.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.8" y="942.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 1.81%)</title><rect x="494.8" y="915.0" width="21.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="497.8" y="926.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.91%)</title><rect x="494.8" y="899.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="497.8" y="910.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.91%)</title><rect x="505.5" y="899.0" width="10.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="508.5" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (15 samples, 4.53%)</title><rect x="516.2" y="931.0" width="53.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="519.2" y="942.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 3.32%)</title><rect x="516.2" y="915.0" width="39.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="519.2" y="926.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.51%)</title><rect x="516.2" y="899.0" width="17.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="519.2" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.21%)</title><rect x="519.8" y="883.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="522.8" y="894.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.30%)</title><rect x="526.9" y="867.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="529.9" y="878.0"></text>
</g>
<g>
<title>OopClosure::do_oop_v(unsigned int*) (1 samples, 0.30%)</title><rect x="530.5" y="867.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.5" y="878.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 0.91%)</title><rect x="534.0" y="899.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.0" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.30%)</title><rect x="544.7" y="899.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="547.7" y="910.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.60%)</title><rect x="548.3" y="899.0" width="7.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="551.3" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.30%)</title><rect x="555.4" y="915.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="558.4" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.30%)</title><rect x="555.4" y="899.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="558.4" y="910.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.30%)</title><rect x="555.4" y="883.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="558.4" y="894.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.30%)</title><rect x="555.4" y="867.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="558.4" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.60%)</title><rect x="559.0" y="915.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="562.0" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.60%)</title><rect x="559.0" y="899.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="562.0" y="910.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.60%)</title><rect x="559.0" y="883.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="562.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.60%)</title><rect x="559.0" y="867.0" width="7.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="562.0" y="878.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.60%)</title><rect x="559.0" y="851.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="562.0" y="862.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 0.60%)</title><rect x="559.0" y="835.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="562.0" y="846.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.60%)</title><rect x="559.0" y="819.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="562.0" y="830.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.60%)</title><rect x="559.0" y="803.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="562.0" y="814.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.30%)</title><rect x="559.0" y="787.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="562.0" y="798.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.30%)</title><rect x="559.0" y="771.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="562.0" y="782.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.30%)</title><rect x="562.6" y="787.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.6" y="798.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.30%)</title><rect x="562.6" y="771.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="565.6" y="782.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.30%)</title><rect x="566.1" y="915.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="569.1" y="926.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.30%)</title><rect x="569.7" y="931.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="572.7" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (171 samples, 51.66%)</title><rect x="573.3" y="947.0" width="609.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="576.3" y="958.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (168 samples, 50.76%)</title><rect x="573.3" y="931.0" width="598.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="576.3" y="942.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (167 samples, 50.45%)</title><rect x="573.3" y="915.0" width="595.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="576.3" y="926.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (157 samples, 47.43%)</title><rect x="573.3" y="899.0" width="559.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="576.3" y="910.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (157 samples, 47.43%)</title><rect x="573.3" y="883.0" width="559.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.3" y="894.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (2 samples, 0.60%)</title><rect x="573.3" y="867.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="576.3" y="878.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.60%)</title><rect x="573.3" y="851.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.3" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.60%)</title><rect x="573.3" y="835.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="576.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.60%)</title><rect x="573.3" y="819.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.60%)</title><rect x="573.3" y="803.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="576.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.60%)</title><rect x="573.3" y="787.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.60%)</title><rect x="573.3" y="771.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.60%)</title><rect x="573.3" y="755.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="576.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="573.3" y="739.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="576.3" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="573.3" y="723.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="576.3" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="573.3" y="707.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="576.3" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="573.3" y="691.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="576.3" y="702.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="573.3" y="675.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="576.3" y="686.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.30%)</title><rect x="573.3" y="659.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="576.3" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="573.3" y="643.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="576.3" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="573.3" y="627.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.30%)</title><rect x="573.3" y="611.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="576.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.30%)</title><rect x="576.8" y="739.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="579.8" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.30%)</title><rect x="576.8" y="723.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="576.8" y="707.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="579.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="576.8" y="691.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.8" y="702.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.30%)</title><rect x="576.8" y="675.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.8" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.30%)</title><rect x="576.8" y="659.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="579.8" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="576.8" y="643.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="579.8" y="654.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.30%)</title><rect x="576.8" y="627.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="579.8" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="576.8" y="611.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="579.8" y="622.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (93 samples, 28.10%)</title><rect x="580.4" y="867.0" width="331.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="583.4" y="878.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.91%)</title><rect x="580.4" y="851.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="583.4" y="862.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.30%)</title><rect x="580.4" y="835.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="583.4" y="846.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.30%)</title><rect x="580.4" y="819.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="583.4" y="830.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.60%)</title><rect x="584.0" y="835.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="587.0" y="846.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.60%)</title><rect x="584.0" y="819.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="587.0" y="830.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.60%)</title><rect x="584.0" y="803.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="587.0" y="814.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.30%)</title><rect x="587.5" y="787.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="590.5" y="798.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.30%)</title><rect x="587.5" y="771.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.5" y="782.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 1.51%)</title><rect x="591.1" y="851.0" width="17.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="594.1" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.60%)</title><rect x="591.1" y="835.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.1" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.30%)</title><rect x="591.1" y="819.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="594.1" y="830.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.30%)</title><rect x="594.7" y="819.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="597.7" y="830.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.30%)</title><rect x="598.2" y="835.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="601.2" y="846.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.30%)</title><rect x="601.8" y="835.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="604.8" y="846.0"></text>
</g>
<g>
<title>Assembler::movl(Address, RegisterImpl*) (1 samples, 0.30%)</title><rect x="601.8" y="819.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="604.8" y="830.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) [clone .constprop.172] (1 samples, 0.30%)</title><rect x="601.8" y="803.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="604.8" y="814.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.30%)</title><rect x="605.3" y="835.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="608.3" y="846.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.30%)</title><rect x="605.3" y="819.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.3" y="830.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.30%)</title><rect x="608.9" y="851.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.9" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.81%)</title><rect x="612.5" y="851.0" width="21.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="615.5" y="862.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 1.81%)</title><rect x="612.5" y="835.0" width="21.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="615.5" y="846.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.30%)</title><rect x="616.0" y="819.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.0" y="830.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.30%)</title><rect x="619.6" y="819.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="622.6" y="830.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.30%)</title><rect x="619.6" y="803.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="622.6" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.91%)</title><rect x="623.2" y="819.0" width="10.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="626.2" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.30%)</title><rect x="623.2" y="803.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.2" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.30%)</title><rect x="623.2" y="787.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="626.2" y="798.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.30%)</title><rect x="623.2" y="771.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.2" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.60%)</title><rect x="626.7" y="803.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="629.7" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.30%)</title><rect x="626.7" y="787.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.7" y="798.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.30%)</title><rect x="626.7" y="771.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="629.7" y="782.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.30%)</title><rect x="630.3" y="787.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="633.3" y="798.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.30%)</title><rect x="630.3" y="771.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.3" y="782.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.30%)</title><rect x="633.9" y="851.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="636.9" y="862.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.30%)</title><rect x="633.9" y="835.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="636.9" y="846.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.30%)</title><rect x="633.9" y="819.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="636.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 2.42%)</title><rect x="637.4" y="851.0" width="28.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="640.4" y="862.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.30%)</title><rect x="637.4" y="835.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.30%)</title><rect x="641.0" y="835.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="644.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.30%)</title><rect x="641.0" y="819.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="644.0" y="830.0"></text>
</g>
<g>
<title>CFGLoop::push_pred(Block*, int, Block_List&amp;, PhaseCFG*) (1 samples, 0.30%)</title><rect x="641.0" y="803.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="644.0" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 1.81%)</title><rect x="644.6" y="835.0" width="21.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="647.6" y="846.0">P..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.30%)</title><rect x="644.6" y="819.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="647.6" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.30%)</title><rect x="644.6" y="803.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="647.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.60%)</title><rect x="648.1" y="819.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="651.1" y="830.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.30%)</title><rect x="648.1" y="803.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="651.1" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.30%)</title><rect x="651.7" y="803.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="654.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.91%)</title><rect x="655.3" y="819.0" width="10.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="658.3" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.30%)</title><rect x="662.4" y="803.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="665.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (68 samples, 20.54%)</title><rect x="666.0" y="851.0" width="242.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="669.0" y="862.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="666.0" y="835.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="669.0" y="846.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.30%)</title><rect x="669.5" y="835.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.5" y="846.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.30%)</title><rect x="673.1" y="835.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="676.1" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.60%)</title><rect x="676.6" y="835.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="679.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 1.81%)</title><rect x="683.8" y="835.0" width="21.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="686.8" y="846.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="690.9" y="819.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="693.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.30%)</title><rect x="694.5" y="819.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="697.5" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.30%)</title><rect x="698.0" y="819.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.0" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="698.0" y="803.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="701.0" y="814.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.30%)</title><rect x="701.6" y="819.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="704.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.60%)</title><rect x="705.2" y="835.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="708.2" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.60%)</title><rect x="705.2" y="819.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="708.2" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="708.7" y="803.0" width="3.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="711.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 3.63%)</title><rect x="712.3" y="835.0" width="42.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.3" y="846.0">Phas..</text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.30%)</title><rect x="744.4" y="819.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.30%)</title><rect x="747.9" y="819.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="750.9" y="830.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.30%)</title><rect x="747.9" y="803.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="750.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.30%)</title><rect x="751.5" y="819.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="754.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.30%)</title><rect x="751.5" y="803.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="754.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 4.83%)</title><rect x="755.1" y="835.0" width="57.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="758.1" y="846.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.30%)</title><rect x="772.9" y="819.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="775.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="776.5" y="819.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="779.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 2.42%)</title><rect x="780.0" y="819.0" width="28.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.0" y="830.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.60%)</title><rect x="801.4" y="803.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="804.4" y="814.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.30%)</title><rect x="808.5" y="819.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="811.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.60%)</title><rect x="812.1" y="835.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.60%)</title><rect x="812.1" y="819.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.1" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="815.7" y="803.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="818.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.30%)</title><rect x="819.2" y="835.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.30%)</title><rect x="822.8" y="835.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="825.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 0.91%)</title><rect x="826.4" y="835.0" width="10.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="829.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.51%)</title><rect x="837.1" y="835.0" width="17.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.30%)</title><rect x="847.8" y="819.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="850.8" y="830.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.30%)</title><rect x="851.3" y="819.0" width="3.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="854.3" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.60%)</title><rect x="854.9" y="835.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="857.9" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.60%)</title><rect x="854.9" y="819.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="857.9" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 1.21%)</title><rect x="862.0" y="835.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="865.0" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="872.7" y="819.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.7" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.30%)</title><rect x="876.3" y="835.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="879.3" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 2.11%)</title><rect x="879.8" y="835.0" width="25.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.8" y="846.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.91%)</title><rect x="890.5" y="819.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.5" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="897.7" y="803.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="900.7" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="901.2" y="819.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="904.2" y="830.0"></text>
</g>
<g>
<title>free (1 samples, 0.30%)</title><rect x="904.8" y="835.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="907.8" y="846.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.30%)</title><rect x="908.4" y="851.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="911.4" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 14.50%)</title><rect x="911.9" y="867.0" width="171.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.9" y="878.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.60%)</title><rect x="911.9" y="851.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="914.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.30%)</title><rect x="915.5" y="835.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.5" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="915.5" y="819.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.5" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="915.5" y="803.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.5" y="814.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.30%)</title><rect x="915.5" y="787.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="918.5" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.30%)</title><rect x="915.5" y="771.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.30%)</title><rect x="919.1" y="851.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.30%)</title><rect x="919.1" y="835.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.30%)</title><rect x="919.1" y="819.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.1" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 1.21%)</title><rect x="922.6" y="851.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.6" y="862.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.30%)</title><rect x="922.6" y="835.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="925.6" y="846.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.30%)</title><rect x="922.6" y="819.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="925.6" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.30%)</title><rect x="922.6" y="803.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="925.6" y="814.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.30%)</title><rect x="922.6" y="787.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.6" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.30%)</title><rect x="922.6" y="771.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="925.6" y="782.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.30%)</title><rect x="926.2" y="835.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.2" y="846.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (2 samples, 0.60%)</title><rect x="929.8" y="835.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.8" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.30%)</title><rect x="936.9" y="851.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.9" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.30%)</title><rect x="936.9" y="835.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (26 samples, 7.85%)</title><rect x="940.5" y="851.0" width="92.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.5" y="862.0">PhaseIdealL..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="940.5" y="835.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="943.5" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="940.5" y="819.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="943.5" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="940.5" y="803.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.5" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="940.5" y="787.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="943.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.30%)</title><rect x="940.5" y="771.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.30%)</title><rect x="940.5" y="755.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.5" y="766.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.30%)</title><rect x="940.5" y="739.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.60%)</title><rect x="944.0" y="835.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.60%)</title><rect x="951.1" y="835.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 2.42%)</title><rect x="958.3" y="835.0" width="28.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.3" y="846.0">Ph..</text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.30%)</title><rect x="961.8" y="819.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 1.81%)</title><rect x="965.4" y="819.0" width="21.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.4" y="830.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.91%)</title><rect x="976.1" y="803.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.60%)</title><rect x="976.1" y="787.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.30%)</title><rect x="979.7" y="771.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.30%)</title><rect x="983.2" y="787.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.30%)</title><rect x="986.8" y="835.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.30%)</title><rect x="986.8" y="819.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="989.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.30%)</title><rect x="986.8" y="803.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.8" y="814.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.30%)</title><rect x="986.8" y="787.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (9 samples, 2.72%)</title><rect x="990.4" y="835.0" width="32.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.4" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.91%)</title><rect x="1011.8" y="819.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.60%)</title><rect x="1011.8" y="803.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.60%)</title><rect x="1011.8" y="787.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.30%)</title><rect x="1018.9" y="803.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.9" y="814.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.30%)</title><rect x="1018.9" y="787.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.9" y="798.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.30%)</title><rect x="1018.9" y="771.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.9" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.30%)</title><rect x="1018.9" y="755.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.9" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1018.9" y="739.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.9" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="1018.9" y="723.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.91%)</title><rect x="1022.4" y="835.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.91%)</title><rect x="1022.4" y="819.0" width="10.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1025.4" y="830.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.30%)</title><rect x="1022.4" y="803.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.4" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1022.4" y="787.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1025.4" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="1022.4" y="771.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.4" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.60%)</title><rect x="1026.0" y="803.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.0" y="814.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.30%)</title><rect x="1026.0" y="787.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.0" y="798.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.30%)</title><rect x="1029.6" y="787.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.6" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.30%)</title><rect x="1033.1" y="851.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 3.63%)</title><rect x="1036.7" y="851.0" width="42.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.7" y="862.0">Phas..</text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.30%)</title><rect x="1040.3" y="835.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1043.3" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 3.02%)</title><rect x="1043.8" y="835.0" width="35.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1046.8" y="846.0">Pha..</text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (2 samples, 0.60%)</title><rect x="1043.8" y="819.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1046.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1043.8" y="803.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.8" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1043.8" y="787.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.8" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.30%)</title><rect x="1043.8" y="771.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.8" y="782.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.30%)</title><rect x="1043.8" y="755.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1046.8" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1047.4" y="803.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.4" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="1047.4" y="787.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1050.4" y="798.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.30%)</title><rect x="1047.4" y="771.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.4" y="782.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.30%)</title><rect x="1047.4" y="755.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1050.4" y="766.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1051.0" y="819.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.0" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1051.0" y="803.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.0" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.30%)</title><rect x="1051.0" y="787.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.0" y="798.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.30%)</title><rect x="1051.0" y="771.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.0" y="782.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1054.5" y="819.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.5" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.30%)</title><rect x="1058.1" y="819.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.1" y="830.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.30%)</title><rect x="1058.1" y="803.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.1" y="814.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.30%)</title><rect x="1058.1" y="787.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.1" y="798.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.30%)</title><rect x="1058.1" y="771.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.1" y="782.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.30%)</title><rect x="1061.7" y="819.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.7" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.60%)</title><rect x="1065.2" y="819.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.2" y="830.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.60%)</title><rect x="1065.2" y="803.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.2" y="814.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1072.4" y="819.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.30%)</title><rect x="1072.4" y="803.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1072.4" y="787.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1072.4" y="771.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1072.4" y="755.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.4" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.30%)</title><rect x="1072.4" y="739.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.4" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="1072.4" y="723.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.4" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.30%)</title><rect x="1075.9" y="819.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.9" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.30%)</title><rect x="1075.9" y="803.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.9" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.30%)</title><rect x="1075.9" y="787.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.9" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1075.9" y="771.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.9" y="782.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="1075.9" y="755.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.9" y="766.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.30%)</title><rect x="1075.9" y="739.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.9" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.30%)</title><rect x="1075.9" y="723.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.9" y="734.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.30%)</title><rect x="1079.5" y="851.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1082.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 3.63%)</title><rect x="1083.1" y="867.0" width="42.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.1" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 3.63%)</title><rect x="1083.1" y="851.0" width="42.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.1" y="862.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 3.63%)</title><rect x="1083.1" y="835.0" width="42.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.1" y="846.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 3.32%)</title><rect x="1083.1" y="819.0" width="39.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.1" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 3.32%)</title><rect x="1083.1" y="803.0" width="39.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.1" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 3.32%)</title><rect x="1083.1" y="787.0" width="39.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.1" y="798.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 3.02%)</title><rect x="1083.1" y="771.0" width="35.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.1" y="782.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 3.02%)</title><rect x="1083.1" y="755.0" width="35.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.1" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 3.02%)</title><rect x="1083.1" y="739.0" width="35.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.1" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 3.02%)</title><rect x="1083.1" y="723.0" width="35.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.1" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 3.02%)</title><rect x="1083.1" y="707.0" width="35.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.1" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 3.02%)</title><rect x="1083.1" y="691.0" width="35.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.1" y="702.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.60%)</title><rect x="1083.1" y="675.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.1" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.60%)</title><rect x="1083.1" y="659.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.1" y="670.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.30%)</title><rect x="1083.1" y="643.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.1" y="654.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.30%)</title><rect x="1083.1" y="627.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.1" y="638.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.30%)</title><rect x="1083.1" y="611.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.1" y="622.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.30%)</title><rect x="1083.1" y="595.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.1" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.30%)</title><rect x="1083.1" y="579.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.1" y="590.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.30%)</title><rect x="1083.1" y="563.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.1" y="574.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.30%)</title><rect x="1083.1" y="547.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.1" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.30%)</title><rect x="1086.6" y="643.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.30%)</title><rect x="1086.6" y="627.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.30%)</title><rect x="1086.6" y="611.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1086.6" y="595.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.6" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1086.6" y="579.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.6" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1086.6" y="563.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.6" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1086.6" y="547.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.6" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="1086.6" y="531.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.6" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1086.6" y="515.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.6" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1086.6" y="499.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.6" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1086.6" y="483.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.6" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1086.6" y="467.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.6" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1086.6" y="451.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.6" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.30%)</title><rect x="1086.6" y="435.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.6" y="446.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.30%)</title><rect x="1086.6" y="419.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.42%)</title><rect x="1090.2" y="675.0" width="28.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.2" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.42%)</title><rect x="1090.2" y="659.0" width="28.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.2" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.42%)</title><rect x="1090.2" y="643.0" width="28.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.2" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.42%)</title><rect x="1090.2" y="627.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.2" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.42%)</title><rect x="1090.2" y="611.0" width="28.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.2" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.42%)</title><rect x="1090.2" y="595.0" width="28.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.2" y="606.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.42%)</title><rect x="1090.2" y="579.0" width="28.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.2" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.42%)</title><rect x="1090.2" y="563.0" width="28.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.2" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.11%)</title><rect x="1090.2" y="547.0" width="24.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.2" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.11%)</title><rect x="1090.2" y="531.0" width="24.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.2" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.11%)</title><rect x="1090.2" y="515.0" width="24.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.2" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.51%)</title><rect x="1090.2" y="499.0" width="17.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.51%)</title><rect x="1090.2" y="483.0" width="17.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.51%)</title><rect x="1090.2" y="467.0" width="17.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.51%)</title><rect x="1090.2" y="451.0" width="17.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.51%)</title><rect x="1090.2" y="435.0" width="17.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.51%)</title><rect x="1090.2" y="419.0" width="17.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.2" y="430.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1090.2" y="403.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1093.7" y="403.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1093.7" y="387.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1093.7" y="371.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1093.7" y="355.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1093.7" y="339.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1093.7" y="323.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1093.7" y="307.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1093.7" y="291.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1093.7" y="275.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1093.7" y="259.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1093.7" y="243.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1093.7" y="227.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1093.7" y="211.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.7" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1093.7" y="195.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.7" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1093.7" y="179.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1093.7" y="163.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1093.7" y="147.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1093.7" y="131.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1093.7" y="115.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1093.7" y="99.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1093.7" y="83.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1093.7" y="67.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1093.7" y="51.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1093.7" y="35.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.60%)</title><rect x="1097.3" y="403.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.60%)</title><rect x="1097.3" y="387.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.3" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (2 samples, 0.60%)</title><rect x="1097.3" y="371.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.3" y="382.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.30%)</title><rect x="1097.3" y="355.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.3" y="366.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.30%)</title><rect x="1097.3" y="339.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.3" y="350.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.30%)</title><rect x="1097.3" y="323.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.3" y="334.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.30%)</title><rect x="1097.3" y="307.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.3" y="318.0"></text>
</g>
<g>
<title>IdealKit::IdealKit(GraphKit*, bool, bool) (1 samples, 0.30%)</title><rect x="1100.9" y="355.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.30%)</title><rect x="1104.4" y="403.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.4" y="414.0"></text>
</g>
<g>
<title>Parse::branch_prediction(float&amp;, BoolTest::mask, int, Node*) (1 samples, 0.30%)</title><rect x="1104.4" y="387.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="398.0"></text>
</g>
<g>
<title>ciMethod::scale_count(int, float) (1 samples, 0.30%)</title><rect x="1104.4" y="371.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.30%)</title><rect x="1108.0" y="499.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.30%)</title><rect x="1108.0" y="483.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.30%)</title><rect x="1108.0" y="467.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.0" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1108.0" y="451.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.0" y="462.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.30%)</title><rect x="1108.0" y="435.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.0" y="446.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.30%)</title><rect x="1108.0" y="419.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.0" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.30%)</title><rect x="1108.0" y="403.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.0" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1108.0" y="387.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.0" y="398.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.30%)</title><rect x="1108.0" y="371.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.30%)</title><rect x="1111.6" y="499.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.6" y="510.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.30%)</title><rect x="1111.6" y="483.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.30%)</title><rect x="1111.6" y="467.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.6" y="478.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.30%)</title><rect x="1111.6" y="451.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.6" y="462.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.30%)</title><rect x="1111.6" y="435.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.6" y="446.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.30%)</title><rect x="1111.6" y="419.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.6" y="430.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.30%)</title><rect x="1111.6" y="403.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.6" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1115.1" y="547.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.1" y="558.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.30%)</title><rect x="1115.1" y="531.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.1" y="542.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.30%)</title><rect x="1115.1" y="515.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.1" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1118.7" y="771.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1118.7" y="755.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1118.7" y="739.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1118.7" y="723.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1118.7" y="707.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1118.7" y="691.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1118.7" y="675.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1118.7" y="659.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1118.7" y="643.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1118.7" y="627.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1118.7" y="611.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1118.7" y="595.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1118.7" y="579.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1118.7" y="563.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1118.7" y="547.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1118.7" y="531.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1118.7" y="515.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1118.7" y="499.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1118.7" y="483.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1118.7" y="467.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1118.7" y="451.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1118.7" y="435.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.7" y="446.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.30%)</title><rect x="1118.7" y="419.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.30%)</title><rect x="1118.7" y="403.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1118.7" y="387.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.7" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1118.7" y="371.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.7" y="382.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.30%)</title><rect x="1118.7" y="355.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.7" y="366.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.30%)</title><rect x="1118.7" y="339.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.7" y="350.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.30%)</title><rect x="1122.3" y="819.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.3" y="830.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.60%)</title><rect x="1125.8" y="867.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.8" y="878.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.30%)</title><rect x="1129.4" y="851.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (8 samples, 2.42%)</title><rect x="1133.0" y="899.0" width="28.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.0" y="910.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (8 samples, 2.42%)</title><rect x="1133.0" y="883.0" width="28.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.0" y="894.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (8 samples, 2.42%)</title><rect x="1133.0" y="867.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.0" y="878.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (7 samples, 2.11%)</title><rect x="1133.0" y="851.0" width="24.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.0" y="862.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (5 samples, 1.51%)</title><rect x="1133.0" y="835.0" width="17.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.0" y="846.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (5 samples, 1.51%)</title><rect x="1133.0" y="819.0" width="17.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.0" y="830.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (5 samples, 1.51%)</title><rect x="1133.0" y="803.0" width="17.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (5 samples, 1.51%)</title><rect x="1133.0" y="787.0" width="17.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 1.21%)</title><rect x="1133.0" y="771.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 1.21%)</title><rect x="1133.0" y="755.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.30%)</title><rect x="1133.0" y="739.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.0" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="1133.0" y="723.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.0" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1133.0" y="707.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1133.0" y="691.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.0" y="702.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1133.0" y="675.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.0" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1133.0" y="659.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.0" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1133.0" y="643.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.0" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.30%)</title><rect x="1133.0" y="627.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.0" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.30%)</title><rect x="1133.0" y="611.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.0" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.30%)</title><rect x="1133.0" y="595.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.0" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.30%)</title><rect x="1133.0" y="579.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.0" y="590.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.30%)</title><rect x="1133.0" y="563.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.60%)</title><rect x="1136.5" y="739.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.60%)</title><rect x="1136.5" y="723.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.60%)</title><rect x="1136.5" y="707.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.60%)</title><rect x="1136.5" y="691.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.60%)</title><rect x="1136.5" y="675.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.30%)</title><rect x="1136.5" y="659.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.30%)</title><rect x="1136.5" y="643.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.30%)</title><rect x="1136.5" y="627.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.30%)</title><rect x="1136.5" y="611.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.30%)</title><rect x="1136.5" y="595.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.5" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.30%)</title><rect x="1136.5" y="579.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.5" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.30%)</title><rect x="1136.5" y="563.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1136.5" y="547.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.5" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1136.5" y="531.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.5" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1136.5" y="515.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.5" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1136.5" y="499.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.5" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1136.5" y="483.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.5" y="494.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.30%)</title><rect x="1136.5" y="467.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="478.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.30%)</title><rect x="1136.5" y="451.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.5" y="462.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.30%)</title><rect x="1136.5" y="435.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.5" y="446.0"></text>
</g>
<g>
<title>ValueType::is_constant() const (1 samples, 0.30%)</title><rect x="1140.1" y="659.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::load_constant() (1 samples, 0.30%)</title><rect x="1143.7" y="739.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.7" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.30%)</title><rect x="1143.7" y="723.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1143.7" y="707.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.7" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index_impl(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1143.7" y="691.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.7" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.30%)</title><rect x="1143.7" y="675.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.7" y="686.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 0.30%)</title><rect x="1147.2" y="771.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.2" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.30%)</title><rect x="1147.2" y="755.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.30%)</title><rect x="1147.2" y="739.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.2" y="750.0"></text>
</g>
<g>
<title>Instruction::as_Phi() (1 samples, 0.30%)</title><rect x="1147.2" y="723.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.2" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.30%)</title><rect x="1150.8" y="835.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.8" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.30%)</title><rect x="1150.8" y="819.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.30%)</title><rect x="1150.8" y="803.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="814.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.30%)</title><rect x="1150.8" y="787.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="798.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.30%)</title><rect x="1150.8" y="771.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="782.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.30%)</title><rect x="1150.8" y="755.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.8" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.30%)</title><rect x="1154.4" y="835.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.4" y="846.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.30%)</title><rect x="1154.4" y="819.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="830.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.30%)</title><rect x="1154.4" y="803.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="814.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.30%)</title><rect x="1154.4" y="787.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.4" y="798.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.30%)</title><rect x="1157.9" y="851.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.9" y="862.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.30%)</title><rect x="1157.9" y="835.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.9" y="846.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.30%)</title><rect x="1157.9" y="819.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.9" y="830.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.30%)</title><rect x="1157.9" y="803.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.9" y="814.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.30%)</title><rect x="1157.9" y="787.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.30%)</title><rect x="1161.5" y="899.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1161.5" y="883.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1161.5" y="867.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.5" y="878.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1161.5" y="851.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="862.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.30%)</title><rect x="1161.5" y="835.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="1165.0" y="899.0" width="3.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1168.0" y="910.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.30%)</title><rect x="1168.6" y="915.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.6" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.30%)</title><rect x="1168.6" y="899.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.30%)</title><rect x="1168.6" y="883.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.30%)</title><rect x="1168.6" y="867.0" width="3.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.91%)</title><rect x="1172.2" y="931.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.2" y="942.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.91%)</title><rect x="1172.2" y="915.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.2" y="926.0"></text>
</g>
<g>
<title>CodeCache::remove(void const*, _jmethodID*) (1 samples, 0.30%)</title><rect x="1172.2" y="899.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.2" y="910.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.60%)</title><rect x="1175.7" y="899.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.30%)</title><rect x="1175.7" y="883.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, bool, bool) (1 samples, 0.30%)</title><rect x="1175.7" y="867.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.30%)</title><rect x="1179.3" y="883.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.60%)</title><rect x="1182.9" y="947.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.60%)</title><rect x="1182.9" y="931.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.60%)</title><rect x="1182.9" y="915.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
</g>
</svg>
