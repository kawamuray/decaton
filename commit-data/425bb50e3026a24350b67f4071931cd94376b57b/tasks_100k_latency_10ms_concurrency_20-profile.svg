<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (218 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.46%)</title><rect x="10.0" y="883.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.46%)</title><rect x="15.4" y="883.0" width="5.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.4" y="894.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.46%)</title><rect x="15.4" y="867.0" width="5.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 8.72%)</title><rect x="20.8" y="883.0" width="102.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.8" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (5 samples, 2.29%)</title><rect x="20.8" y="867.0" width="27.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.8" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (5 samples, 2.29%)</title><rect x="20.8" y="851.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.8" y="862.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.46%)</title><rect x="20.8" y="835.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.46%)</title><rect x="20.8" y="819.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_1 (1 samples, 0.46%)</title><rect x="20.8" y="803.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (4 samples, 1.83%)</title><rect x="26.2" y="835.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.2" y="846.0">o..</text>
</g>
<g>
<title>java/time/Duration.ofMillis (1 samples, 0.46%)</title><rect x="26.2" y="819.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.2" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.46%)</title><rect x="26.2" y="803.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 1.38%)</title><rect x="31.7" y="819.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (3 samples, 1.38%)</title><rect x="31.7" y="803.0" width="16.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.46%)</title><rect x="31.7" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getOrDefault (1 samples, 0.46%)</title><rect x="31.7" y="771.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.46%)</title><rect x="31.7" y="755.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.46%)</title><rect x="31.7" y="739.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="34.7" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="31.7" y="723.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="34.7" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="31.7" y="707.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="34.7" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.46%)</title><rect x="31.7" y="691.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="34.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.92%)</title><rect x="37.1" y="787.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.92%)</title><rect x="37.1" y="771.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.92%)</title><rect x="37.1" y="755.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.92%)</title><rect x="37.1" y="739.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.46%)</title><rect x="37.1" y="723.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.46%)</title><rect x="37.1" y="707.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.46%)</title><rect x="37.1" y="691.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.isChannelReady (1 samples, 0.46%)</title><rect x="37.1" y="675.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="42.5" y="723.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="42.5" y="707.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="42.5" y="691.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.46%)</title><rect x="42.5" y="675.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.46%)</title><rect x="42.5" y="659.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.46%)</title><rect x="42.5" y="643.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.46%)</title><rect x="42.5" y="627.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="42.5" y="611.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.46%)</title><rect x="42.5" y="595.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="42.5" y="579.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.46%)</title><rect x="42.5" y="563.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="42.5" y="547.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.46%)</title><rect x="42.5" y="531.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.46%)</title><rect x="42.5" y="515.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.5" y="526.0"></text>
</g>
<g>
<title>java/nio/Bits.putLong (1 samples, 0.46%)</title><rect x="42.5" y="499.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.5" y="510.0"></text>
</g>
<g>
<title>java/nio/Bits.putLongB (1 samples, 0.46%)</title><rect x="42.5" y="483.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (14 samples, 6.42%)</title><rect x="47.9" y="867.0" width="75.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.9" y="878.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.46%)</title><rect x="47.9" y="851.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.46%)</title><rect x="47.9" y="835.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/193177141.accept (1 samples, 0.46%)</title><rect x="47.9" y="819.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.46%)</title><rect x="47.9" y="803.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.46%)</title><rect x="47.9" y="787.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.46%)</title><rect x="47.9" y="771.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.46%)</title><rect x="47.9" y="755.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 1.38%)</title><rect x="53.3" y="851.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 1.38%)</title><rect x="53.3" y="835.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 1.38%)</title><rect x="53.3" y="819.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.92%)</title><rect x="58.7" y="803.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.92%)</title><rect x="58.7" y="787.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.92%)</title><rect x="58.7" y="771.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.92%)</title><rect x="58.7" y="755.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.46%)</title><rect x="58.7" y="739.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.46%)</title><rect x="58.7" y="723.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1073113658.test (1 samples, 0.46%)</title><rect x="58.7" y="707.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.46%)</title><rect x="64.1" y="739.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.46%)</title><rect x="64.1" y="723.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.46%)</title><rect x="64.1" y="707.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.46%)</title><rect x="69.5" y="851.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.5" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.46%)</title><rect x="69.5" y="835.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$297/1476007334.accept (1 samples, 0.46%)</title><rect x="69.5" y="819.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$60 (1 samples, 0.46%)</title><rect x="69.5" y="803.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.46%)</title><rect x="69.5" y="787.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.83%)</title><rect x="75.0" y="851.0" width="21.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.0" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/996043323.accept (3 samples, 1.38%)</title><rect x="75.0" y="835.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (3 samples, 1.38%)</title><rect x="75.0" y="819.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.38%)</title><rect x="75.0" y="803.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.38%)</title><rect x="75.0" y="787.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.0" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.46%)</title><rect x="80.4" y="771.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.4" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.46%)</title><rect x="80.4" y="755.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.4" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.46%)</title><rect x="80.4" y="739.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.4" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.46%)</title><rect x="80.4" y="723.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="80.4" y="707.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="83.4" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.46%)</title><rect x="80.4" y="691.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="83.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="85.8" y="771.0" width="5.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="88.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.46%)</title><rect x="91.2" y="835.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.46%)</title><rect x="91.2" y="819.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.46%)</title><rect x="91.2" y="803.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.29%)</title><rect x="96.6" y="851.0" width="27.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.6" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.29%)</title><rect x="96.6" y="835.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.6" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.83%)</title><rect x="96.6" y="819.0" width="21.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.6" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.92%)</title><rect x="96.6" y="803.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.92%)</title><rect x="96.6" y="787.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.46%)</title><rect x="96.6" y="771.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.46%)</title><rect x="96.6" y="755.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="96.6" y="739.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.46%)</title><rect x="96.6" y="723.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="99.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.46%)</title><rect x="102.0" y="771.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="102.0" y="755.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="102.0" y="739.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="102.0" y="723.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.46%)</title><rect x="102.0" y="707.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.46%)</title><rect x="102.0" y="691.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.46%)</title><rect x="102.0" y="675.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.46%)</title><rect x="102.0" y="659.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.46%)</title><rect x="102.0" y="643.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.92%)</title><rect x="107.4" y="803.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.92%)</title><rect x="107.4" y="787.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.92%)</title><rect x="107.4" y="771.0" width="10.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.92%)</title><rect x="107.4" y="755.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="110.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.46%)</title><rect x="107.4" y="739.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.46%)</title><rect x="107.4" y="723.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.46%)</title><rect x="107.4" y="707.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.46%)</title><rect x="112.8" y="739.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.46%)</title><rect x="112.8" y="723.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.46%)</title><rect x="112.8" y="707.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.8" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.46%)</title><rect x="112.8" y="691.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.46%)</title><rect x="118.3" y="819.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.46%)</title><rect x="118.3" y="803.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="121.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.46%)</title><rect x="118.3" y="787.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.46%)</title><rect x="118.3" y="771.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$224/2097589812.accept (1 samples, 0.46%)</title><rect x="118.3" y="755.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.46%)</title><rect x="118.3" y="739.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.46%)</title><rect x="118.3" y="723.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.46%)</title><rect x="118.3" y="707.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.46%)</title><rect x="118.3" y="691.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.46%)</title><rect x="118.3" y="675.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="118.3" y="659.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (136 samples, 62.39%)</title><rect x="123.7" y="883.0" width="736.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.7" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (136 samples, 62.39%)</title><rect x="123.7" y="867.0" width="736.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.7" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (136 samples, 62.39%)</title><rect x="123.7" y="851.0" width="736.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.7" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/967732580.run (134 samples, 61.47%)</title><rect x="129.1" y="835.0" width="725.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.1" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/967732580.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (134 samples, 61.47%)</title><rect x="129.1" y="819.0" width="725.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.1" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (134 samples, 61.47%)</title><rect x="129.1" y="803.0" width="725.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.1" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (133 samples, 61.01%)</title><rect x="129.1" y="787.0" width="719.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.1" y="798.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 14.68%)</title><rect x="129.1" y="771.0" width="173.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.1" y="782.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="129.1" y="755.0" width="5.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="132.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="129.1" y="739.0" width="5.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="132.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (31 samples, 14.22%)</title><rect x="134.5" y="755.0" width="167.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.5" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (31 samples, 14.22%)</title><rect x="134.5" y="739.0" width="167.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="137.5" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 14.22%)</title><rect x="134.5" y="723.0" width="167.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.5" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 14.22%)</title><rect x="134.5" y="707.0" width="167.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.5" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 14.22%)</title><rect x="134.5" y="691.0" width="167.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="137.5" y="702.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.83%)</title><rect x="134.5" y="675.0" width="21.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.5" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.83%)</title><rect x="134.5" y="659.0" width="21.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.5" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.83%)</title><rect x="134.5" y="643.0" width="21.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.5" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.46%)</title><rect x="134.5" y="627.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.46%)</title><rect x="134.5" y="611.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.38%)</title><rect x="139.9" y="627.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="139.9" y="611.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="142.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.92%)</title><rect x="145.3" y="611.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.92%)</title><rect x="145.3" y="595.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.3" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.92%)</title><rect x="145.3" y="579.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="148.3" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="150.7" y="563.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="153.7" y="574.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.46%)</title><rect x="150.7" y="547.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="153.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (26 samples, 11.93%)</title><rect x="156.1" y="675.0" width="140.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.1" y="686.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 1.38%)</title><rect x="156.1" y="659.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 1.38%)</title><rect x="156.1" y="643.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 1.38%)</title><rect x="156.1" y="627.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 1.38%)</title><rect x="156.1" y="611.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 1.38%)</title><rect x="156.1" y="595.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.92%)</title><rect x="156.1" y="579.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="159.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.46%)</title><rect x="167.0" y="579.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.46%)</title><rect x="167.0" y="563.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.46%)</title><rect x="172.4" y="659.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.46%)</title><rect x="172.4" y="643.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.38%)</title><rect x="177.8" y="659.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.38%)</title><rect x="177.8" y="643.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.38%)</title><rect x="177.8" y="627.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 1.38%)</title><rect x="177.8" y="611.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="188.6" y="595.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="191.6" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="188.6" y="579.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="191.6" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="188.6" y="563.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="191.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="188.6" y="547.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="191.6" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.46%)</title><rect x="188.6" y="531.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="191.6" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.46%)</title><rect x="188.6" y="515.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="191.6" y="526.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.46%)</title><rect x="188.6" y="499.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="191.6" y="510.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.46%)</title><rect x="188.6" y="483.0" width="5.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="191.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.92%)</title><rect x="194.0" y="659.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.92%)</title><rect x="194.0" y="643.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 7.80%)</title><rect x="204.9" y="659.0" width="92.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.9" y="670.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.92%)</title><rect x="215.7" y="643.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.46%)</title><rect x="215.7" y="627.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.46%)</title><rect x="221.1" y="627.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.46%)</title><rect x="221.1" y="611.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.46%)</title><rect x="221.1" y="595.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.46%)</title><rect x="221.1" y="579.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.46%)</title><rect x="221.1" y="563.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 5.96%)</title><rect x="226.5" y="643.0" width="70.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.5" y="654.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 5.96%)</title><rect x="226.5" y="627.0" width="70.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.5" y="638.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 5.96%)</title><rect x="226.5" y="611.0" width="70.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.5" y="622.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.29%)</title><rect x="231.9" y="595.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.9" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.46%)</title><rect x="237.3" y="579.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.46%)</title><rect x="242.8" y="579.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.46%)</title><rect x="242.8" y="563.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.46%)</title><rect x="242.8" y="547.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.46%)</title><rect x="242.8" y="531.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.46%)</title><rect x="242.8" y="515.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.46%)</title><rect x="242.8" y="499.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.92%)</title><rect x="248.2" y="579.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.46%)</title><rect x="259.0" y="595.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.38%)</title><rect x="264.4" y="595.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.38%)</title><rect x="264.4" y="579.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.38%)</title><rect x="264.4" y="563.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 1.38%)</title><rect x="280.6" y="595.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.46%)</title><rect x="296.9" y="675.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.46%)</title><rect x="296.9" y="659.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.46%)</title><rect x="296.9" y="643.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.46%)</title><rect x="296.9" y="627.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.46%)</title><rect x="296.9" y="611.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (94 samples, 43.12%)</title><rect x="302.3" y="771.0" width="508.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.3" y="782.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 6.88%)</title><rect x="302.3" y="755.0" width="81.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.3" y="766.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 6.88%)</title><rect x="302.3" y="739.0" width="81.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.3" y="750.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 3.21%)</title><rect x="345.6" y="723.0" width="37.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.6" y="734.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.92%)</title><rect x="351.0" y="707.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.46%)</title><rect x="356.4" y="691.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.46%)</title><rect x="356.4" y="675.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.46%)</title><rect x="356.4" y="659.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.92%)</title><rect x="361.8" y="707.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.92%)</title><rect x="372.7" y="707.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.92%)</title><rect x="372.7" y="691.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.92%)</title><rect x="372.7" y="675.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.46%)</title><rect x="383.5" y="755.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.46%)</title><rect x="383.5" y="739.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.5" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.46%)</title><rect x="383.5" y="723.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (17 samples, 7.80%)</title><rect x="388.9" y="755.0" width="92.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.9" y="766.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (17 samples, 7.80%)</title><rect x="388.9" y="739.0" width="92.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.9" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.75%)</title><rect x="394.3" y="723.0" width="32.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.3" y="734.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.75%)</title><rect x="394.3" y="707.0" width="32.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.3" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.83%)</title><rect x="399.7" y="691.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.7" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.83%)</title><rect x="399.7" y="675.0" width="21.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.7" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.83%)</title><rect x="399.7" y="659.0" width="21.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.7" y="670.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.83%)</title><rect x="399.7" y="643.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.7" y="654.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.38%)</title><rect x="405.1" y="627.0" width="16.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.1" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.92%)</title><rect x="405.1" y="611.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="408.1" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.92%)</title><rect x="405.1" y="595.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="408.1" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.92%)</title><rect x="405.1" y="579.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="408.1" y="590.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.46%)</title><rect x="405.1" y="563.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.1" y="574.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.46%)</title><rect x="410.6" y="563.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="413.6" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.46%)</title><rect x="416.0" y="611.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="419.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="416.0" y="595.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="419.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.46%)</title><rect x="416.0" y="579.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="419.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.46%)</title><rect x="416.0" y="563.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="419.0" y="574.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.46%)</title><rect x="416.0" y="547.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="419.0" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="421.4" y="691.0" width="5.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="424.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="426.8" y="723.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="429.8" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 4.13%)</title><rect x="432.2" y="723.0" width="48.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.2" y="734.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 4.13%)</title><rect x="432.2" y="707.0" width="48.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.2" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.92%)</title><rect x="432.2" y="691.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.92%)</title><rect x="432.2" y="675.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="435.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.92%)</title><rect x="432.2" y="659.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.92%)</title><rect x="432.2" y="643.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.21%)</title><rect x="443.0" y="691.0" width="37.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.0" y="702.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 3.21%)</title><rect x="443.0" y="675.0" width="37.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.0" y="686.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.75%)</title><rect x="448.4" y="659.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.4" y="670.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.92%)</title><rect x="470.1" y="643.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (57 samples, 26.15%)</title><rect x="480.9" y="755.0" width="308.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.9" y="766.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (57 samples, 26.15%)</title><rect x="480.9" y="739.0" width="308.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.9" y="750.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="486.3" y="723.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="489.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="486.3" y="707.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="489.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="486.3" y="691.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="489.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/580786606.process (51 samples, 23.39%)</title><rect x="491.7" y="723.0" width="276.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="494.7" y="734.0">com/linecorp/decaton/benchmark/Decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (51 samples, 23.39%)</title><rect x="491.7" y="707.0" width="276.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.7" y="718.0">com/linecorp/decaton/benchmark/Decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (51 samples, 23.39%)</title><rect x="491.7" y="691.0" width="276.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.7" y="702.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.46%)</title><rect x="491.7" y="675.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.7" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.46%)</title><rect x="491.7" y="659.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="494.7" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="491.7" y="643.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="494.7" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="491.7" y="627.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.7" y="638.0"></text>
</g>
<g>
<title>nmethodLocker::lock_nmethod(nmethod*, bool) (1 samples, 0.46%)</title><rect x="491.7" y="611.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="494.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (50 samples, 22.94%)</title><rect x="497.2" y="675.0" width="270.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.2" y="686.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.46%)</title><rect x="497.2" y="659.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 22.02%)</title><rect x="502.6" y="659.0" width="259.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.6" y="670.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 16.97%)</title><rect x="556.7" y="643.0" width="200.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="559.7" y="654.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.38%)</title><rect x="567.5" y="627.0" width="16.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.5" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="583.8" y="627.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="586.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="583.8" y="611.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="586.8" y="622.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (31 samples, 14.22%)</title><rect x="589.2" y="627.0" width="167.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="592.2" y="638.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="616.2" y="611.0" width="5.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="619.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="616.2" y="595.0" width="5.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="619.2" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.92%)</title><rect x="621.7" y="611.0" width="10.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="624.7" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.46%)</title><rect x="632.5" y="611.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="635.5" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 6.42%)</title><rect x="637.9" y="611.0" width="75.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="640.9" y="622.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 1.83%)</title><rect x="713.7" y="611.0" width="21.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="716.7" y="622.0">_..</text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.46%)</title><rect x="735.3" y="611.0" width="5.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="738.3" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.46%)</title><rect x="740.7" y="611.0" width="5.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="743.7" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.46%)</title><rect x="746.1" y="611.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.1" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.46%)</title><rect x="751.6" y="611.0" width="5.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="754.6" y="622.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.46%)</title><rect x="757.0" y="643.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.0" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.46%)</title><rect x="762.4" y="659.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.4" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="762.4" y="643.0" width="5.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="765.4" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.38%)</title><rect x="767.8" y="723.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.38%)</title><rect x="767.8" y="707.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1007137990.get$Lambda (3 samples, 1.38%)</title><rect x="767.8" y="691.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1007137990.&lt;init&gt; (3 samples, 1.38%)</title><rect x="767.8" y="675.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.8" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="778.6" y="659.0" width="5.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="781.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="778.6" y="643.0" width="5.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="781.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.46%)</title><rect x="784.0" y="723.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.92%)</title><rect x="789.4" y="755.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="792.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.46%)</title><rect x="789.4" y="739.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.4" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.46%)</title><rect x="789.4" y="723.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="792.4" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.46%)</title><rect x="794.9" y="739.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.46%)</title><rect x="800.3" y="755.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.46%)</title><rect x="800.3" y="739.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.46%)</title><rect x="800.3" y="723.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="800.3" y="707.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="803.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="800.3" y="691.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="803.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.46%)</title><rect x="805.7" y="755.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.46%)</title><rect x="805.7" y="739.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="805.7" y="723.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="808.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/2122137778.accept (1 samples, 0.46%)</title><rect x="805.7" y="707.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="808.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.46%)</title><rect x="805.7" y="691.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="808.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.46%)</title><rect x="805.7" y="675.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="808.7" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.46%)</title><rect x="805.7" y="659.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="808.7" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.46%)</title><rect x="805.7" y="643.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="808.7" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="805.7" y="627.0" width="5.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="808.7" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="805.7" y="611.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="808.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.29%)</title><rect x="811.1" y="771.0" width="27.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.1" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.29%)</title><rect x="811.1" y="755.0" width="27.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.1" y="766.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.46%)</title><rect x="811.1" y="739.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.83%)</title><rect x="816.5" y="739.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.5" y="750.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/2122137778.accept (4 samples, 1.83%)</title><rect x="816.5" y="723.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.5" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (4 samples, 1.83%)</title><rect x="816.5" y="707.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="819.5" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.83%)</title><rect x="816.5" y="691.0" width="21.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.5" y="702.0">c..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.83%)</title><rect x="816.5" y="675.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.5" y="686.0">j..</text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.83%)</title><rect x="816.5" y="659.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.5" y="670.0">j..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.92%)</title><rect x="838.2" y="771.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.92%)</title><rect x="838.2" y="755.0" width="10.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="841.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.46%)</title><rect x="849.0" y="787.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.46%)</title><rect x="854.4" y="835.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.46%)</title><rect x="854.4" y="819.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.46%)</title><rect x="854.4" y="803.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="854.4" y="787.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.46%)</title><rect x="854.4" y="771.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.46%)</title><rect x="854.4" y="755.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="857.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.92%)</title><rect x="859.8" y="883.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="862.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.46%)</title><rect x="859.8" y="867.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.46%)</title><rect x="865.2" y="867.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="865.2" y="851.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.46%)</title><rect x="865.2" y="835.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.2" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.46%)</title><rect x="865.2" y="819.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="868.2" y="830.0"></text>
</g>
<g>
<title>start_thread (59 samples, 27.06%)</title><rect x="870.6" y="883.0" width="319.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="873.6" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (59 samples, 27.06%)</title><rect x="870.6" y="867.0" width="319.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="873.6" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 5.05%)</title><rect x="870.6" y="851.0" width="59.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.6" y="862.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 5.05%)</title><rect x="870.6" y="835.0" width="59.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.6" y="846.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 5.05%)</title><rect x="870.6" y="819.0" width="59.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.6" y="830.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.29%)</title><rect x="870.6" y="803.0" width="27.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="873.6" y="814.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.46%)</title><rect x="886.9" y="787.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.9" y="798.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.46%)</title><rect x="892.3" y="787.0" width="5.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="895.3" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.46%)</title><rect x="897.7" y="803.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="900.7" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.38%)</title><rect x="903.1" y="803.0" width="16.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="906.1" y="814.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.92%)</title><rect x="919.4" y="803.0" width="10.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="922.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (48 samples, 22.02%)</title><rect x="930.2" y="851.0" width="259.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.2" y="862.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (48 samples, 22.02%)</title><rect x="930.2" y="835.0" width="259.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.2" y="846.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (48 samples, 22.02%)</title><rect x="930.2" y="819.0" width="259.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.2" y="830.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (48 samples, 22.02%)</title><rect x="930.2" y="803.0" width="259.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.2" y="814.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (46 samples, 21.10%)</title><rect x="930.2" y="787.0" width="249.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="933.2" y="798.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (46 samples, 21.10%)</title><rect x="930.2" y="771.0" width="249.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.2" y="782.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 13.30%)</title><rect x="930.2" y="755.0" width="157.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.2" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.46%)</title><rect x="930.2" y="739.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.2" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.46%)</title><rect x="930.2" y="723.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="933.2" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.46%)</title><rect x="935.6" y="739.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.6" y="750.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.46%)</title><rect x="935.6" y="723.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="938.6" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.46%)</title><rect x="941.0" y="739.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.0" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.46%)</title><rect x="941.0" y="723.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.0" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.46%)</title><rect x="941.0" y="707.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.0" y="718.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.46%)</title><rect x="941.0" y="691.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.0" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.46%)</title><rect x="941.0" y="675.0" width="5.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="944.0" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.46%)</title><rect x="946.4" y="739.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.46%)</title><rect x="946.4" y="723.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.46%)</title><rect x="951.8" y="739.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="954.8" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.46%)</title><rect x="951.8" y="723.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="954.8" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.46%)</title><rect x="951.8" y="707.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.8" y="718.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.46%)</title><rect x="951.8" y="691.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.46%)</title><rect x="957.2" y="739.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (23 samples, 10.55%)</title><rect x="962.7" y="739.0" width="124.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.7" y="750.0">PhaseChaitin::R..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.92%)</title><rect x="962.7" y="723.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.92%)</title><rect x="973.5" y="723.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.46%)</title><rect x="973.5" y="707.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.5" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="973.5" y="691.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.5" y="702.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.46%)</title><rect x="978.9" y="707.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.46%)</title><rect x="984.3" y="723.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.3" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.46%)</title><rect x="984.3" y="707.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.38%)</title><rect x="989.7" y="723.0" width="16.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.7" y="734.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.46%)</title><rect x="1000.6" y="707.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.29%)</title><rect x="1006.0" y="723.0" width="27.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.0" y="734.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.46%)</title><rect x="1016.8" y="707.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1019.8" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.46%)</title><rect x="1022.2" y="707.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.2" y="718.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.46%)</title><rect x="1027.6" y="707.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.92%)</title><rect x="1033.0" y="723.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.46%)</title><rect x="1038.4" y="707.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.38%)</title><rect x="1043.9" y="723.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1046.9" y="734.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.46%)</title><rect x="1049.3" y="707.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.3" y="718.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.46%)</title><rect x="1054.7" y="707.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.7" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1054.7" y="691.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.7" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="1054.7" y="675.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.92%)</title><rect x="1060.1" y="723.0" width="10.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.46%)</title><rect x="1065.5" y="707.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.46%)</title><rect x="1070.9" y="723.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.9" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.46%)</title><rect x="1076.3" y="723.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.3" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.46%)</title><rect x="1076.3" y="707.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.3" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.46%)</title><rect x="1076.3" y="691.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.3" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.46%)</title><rect x="1076.3" y="675.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.3" y="686.0"></text>
</g>
<g>
<title>PhiNode::in_RegMask(unsigned int) const (1 samples, 0.46%)</title><rect x="1081.7" y="723.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.7" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 5.50%)</title><rect x="1087.2" y="755.0" width="64.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.2" y="766.0">Compile..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.92%)</title><rect x="1087.2" y="739.0" width="10.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.2" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.92%)</title><rect x="1087.2" y="723.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.2" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.46%)</title><rect x="1087.2" y="707.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.2" y="718.0"></text>
</g>
<g>
<title>Matcher::narrow_oop_use_complex_address() (1 samples, 0.46%)</title><rect x="1087.2" y="691.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.2" y="702.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.46%)</title><rect x="1092.6" y="707.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 3.21%)</title><rect x="1098.0" y="739.0" width="37.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.0" y="750.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.46%)</title><rect x="1098.0" y="723.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.92%)</title><rect x="1103.4" y="723.0" width="10.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.92%)</title><rect x="1114.2" y="723.0" width="10.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.92%)</title><rect x="1114.2" y="707.0" width="10.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.46%)</title><rect x="1119.6" y="691.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.46%)</title><rect x="1119.6" y="675.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.46%)</title><rect x="1119.6" y="659.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.92%)</title><rect x="1125.0" y="723.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.46%)</title><rect x="1130.5" y="707.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.38%)</title><rect x="1135.9" y="739.0" width="16.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.38%)</title><rect x="1135.9" y="723.0" width="16.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.9" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.46%)</title><rect x="1135.9" y="707.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.9" y="718.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1141.3" y="707.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1146.7" y="707.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="718.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.46%)</title><rect x="1146.7" y="691.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.29%)</title><rect x="1152.1" y="755.0" width="27.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.1" y="766.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.29%)</title><rect x="1152.1" y="739.0" width="27.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.1" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.83%)</title><rect x="1152.1" y="723.0" width="21.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.1" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.83%)</title><rect x="1152.1" y="707.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.83%)</title><rect x="1152.1" y="691.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.83%)</title><rect x="1152.1" y="675.0" width="21.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.1" y="686.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.83%)</title><rect x="1152.1" y="659.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="670.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.83%)</title><rect x="1152.1" y="643.0" width="21.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.83%)</title><rect x="1152.1" y="627.0" width="21.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.83%)</title><rect x="1152.1" y="611.0" width="21.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.1" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.83%)</title><rect x="1152.1" y="595.0" width="21.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.1" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.83%)</title><rect x="1152.1" y="579.0" width="21.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="590.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.83%)</title><rect x="1152.1" y="563.0" width="21.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="574.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.83%)</title><rect x="1152.1" y="547.0" width="21.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.83%)</title><rect x="1152.1" y="531.0" width="21.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.83%)</title><rect x="1152.1" y="515.0" width="21.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.1" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.83%)</title><rect x="1152.1" y="499.0" width="21.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.83%)</title><rect x="1152.1" y="483.0" width="21.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="494.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.38%)</title><rect x="1152.1" y="467.0" width="16.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.38%)</title><rect x="1152.1" y="451.0" width="16.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.38%)</title><rect x="1152.1" y="435.0" width="16.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.38%)</title><rect x="1152.1" y="419.0" width="16.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.38%)</title><rect x="1152.1" y="403.0" width="16.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.38%)</title><rect x="1152.1" y="387.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.38%)</title><rect x="1152.1" y="371.0" width="16.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.38%)</title><rect x="1152.1" y="355.0" width="16.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.46%)</title><rect x="1152.1" y="339.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.1" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.46%)</title><rect x="1152.1" y="323.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.1" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.46%)</title><rect x="1152.1" y="307.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1157.5" y="339.0" width="10.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1157.5" y="323.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1157.5" y="307.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.92%)</title><rect x="1157.5" y="291.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.5" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1157.5" y="275.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1157.5" y="259.0" width="10.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1157.5" y="243.0" width="10.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1157.5" y="227.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1157.5" y="211.0" width="10.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.92%)</title><rect x="1157.5" y="195.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1157.5" y="179.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1157.5" y="163.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1157.5" y="147.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1157.5" y="131.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1157.5" y="115.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.46%)</title><rect x="1157.5" y="99.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.5" y="110.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.46%)</title><rect x="1157.5" y="83.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="94.0"></text>
</g>
<g>
<title>ReplacedNodes::record(Node*, Node*) (1 samples, 0.46%)</title><rect x="1157.5" y="67.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="78.0"></text>
</g>
<g>
<title>GrowableArray&lt;ReplacedNodes::ReplacedNode&gt;::grow(int) (1 samples, 0.46%)</title><rect x="1157.5" y="51.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.5" y="62.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.46%)</title><rect x="1157.5" y="35.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.46%)</title><rect x="1162.9" y="147.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1162.9" y="131.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="142.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1162.9" y="115.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1168.3" y="467.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1168.3" y="451.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1168.3" y="435.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1168.3" y="419.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1168.3" y="403.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1168.3" y="387.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1168.3" y="371.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1168.3" y="355.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1168.3" y="339.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1168.3" y="323.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1168.3" y="307.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1168.3" y="291.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1168.3" y="275.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1168.3" y="259.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="270.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1168.3" y="243.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="254.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1168.3" y="227.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1168.3" y="211.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1168.3" y="195.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1168.3" y="179.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1168.3" y="163.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1168.3" y="147.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.46%)</title><rect x="1168.3" y="131.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1168.3" y="115.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1168.3" y="99.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1168.3" y="83.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1168.3" y="67.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="78.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.46%)</title><rect x="1173.8" y="723.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="734.0"></text>
</g>
<g>
<title>Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&amp;) (1 samples, 0.46%)</title><rect x="1173.8" y="707.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="718.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.46%)</title><rect x="1173.8" y="691.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.46%)</title><rect x="1173.8" y="675.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1173.8" y="659.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1173.8" y="643.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1173.8" y="627.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.46%)</title><rect x="1173.8" y="611.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.46%)</title><rect x="1173.8" y="595.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.46%)</title><rect x="1173.8" y="579.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.46%)</title><rect x="1179.2" y="787.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.46%)</title><rect x="1179.2" y="771.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.46%)</title><rect x="1179.2" y="755.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.46%)</title><rect x="1179.2" y="739.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.46%)</title><rect x="1179.2" y="723.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="734.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.46%)</title><rect x="1179.2" y="707.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::do_BlockBegin(BlockBegin*) (1 samples, 0.46%)</title><rect x="1179.2" y="691.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="702.0"></text>
</g>
<g>
<title>MutexLockerEx::MutexLockerEx(Monitor*, bool) (1 samples, 0.46%)</title><rect x="1184.6" y="787.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="798.0"></text>
</g>
</g>
</svg>
