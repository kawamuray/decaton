<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1317"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1317"> </text>
<g id="frames">
<g>
<title>all (1,239 samples, 100.00%)</title><rect x="10.0" y="1283.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (260 samples, 20.98%)</title><rect x="10.0" y="1267.0" width="247.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (259 samples, 20.90%)</title><rect x="11.0" y="1251.0" width="246.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1262.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.40%)</title><rect x="11.0" y="1235.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.40%)</title><rect x="11.0" y="1219.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (5 samples, 0.40%)</title><rect x="11.0" y="1203.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.40%)</title><rect x="11.0" y="1187.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.40%)</title><rect x="11.0" y="1171.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.32%)</title><rect x="11.0" y="1155.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="14.8" y="1155.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="14.8" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="14.8" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="14.8" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.24%)</title><rect x="15.7" y="1235.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.24%)</title><rect x="15.7" y="1219.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="15.7" y="1203.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="15.7" y="1187.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="16.7" y="1171.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="16.7" y="1155.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="16.7" y="1139.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="16.7" y="1123.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="16.7" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="17.6" y="1123.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="17.6" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="17.6" y="1091.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="17.6" y="1075.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/895331028.get (1 samples, 0.08%)</title><rect x="17.6" y="1059.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (183 samples, 14.77%)</title><rect x="18.6" y="1235.0" width="174.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="1246.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (178 samples, 14.37%)</title><rect x="19.5" y="1219.0" width="169.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.5" y="1230.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (178 samples, 14.37%)</title><rect x="19.5" y="1203.0" width="169.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1214.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (145 samples, 11.70%)</title><rect x="19.5" y="1187.0" width="138.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (145 samples, 11.70%)</title><rect x="19.5" y="1171.0" width="138.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="1182.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (145 samples, 11.70%)</title><rect x="19.5" y="1155.0" width="138.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (145 samples, 11.70%)</title><rect x="19.5" y="1139.0" width="138.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="1150.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (145 samples, 11.70%)</title><rect x="19.5" y="1123.0" width="138.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1134.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (145 samples, 11.70%)</title><rect x="19.5" y="1107.0" width="138.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.5" y="1118.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (98 samples, 7.91%)</title><rect x="19.5" y="1091.0" width="93.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="1102.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 1.86%)</title><rect x="19.5" y="1075.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 1.86%)</title><rect x="19.5" y="1059.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.5" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.53%)</title><rect x="23.3" y="1043.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (19 samples, 1.53%)</title><rect x="23.3" y="1027.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="41.4" y="1075.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.08%)</title><rect x="41.4" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="41.4" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 5.97%)</title><rect x="42.4" y="1075.0" width="70.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.4" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 5.97%)</title><rect x="42.4" y="1059.0" width="70.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.4" y="1070.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 5.89%)</title><rect x="43.3" y="1043.0" width="69.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.3" y="1054.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (73 samples, 5.89%)</title><rect x="43.3" y="1027.0" width="69.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.3" y="1038.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 5.81%)</title><rect x="44.3" y="1011.0" width="68.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.3" y="1022.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.25%)</title><rect x="44.3" y="995.0" width="61.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="47.3" y="1006.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="47.1" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.1" y="990.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="48.1" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.1" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="49.0" y="979.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="52.0" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.39%)</title><rect x="51.0" y="979.0" width="40.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="54.0" y="990.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.48%)</title><rect x="91.0" y="979.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="94.0" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.81%)</title><rect x="96.7" y="979.0" width="9.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="99.7" y="990.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="106.2" y="995.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="109.2" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="107.1" y="995.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="110.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.40%)</title><rect x="108.1" y="995.0" width="4.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="111.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (39 samples, 3.15%)</title><rect x="112.9" y="1091.0" width="37.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.9" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (39 samples, 3.15%)</title><rect x="112.9" y="1075.0" width="37.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.9" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (39 samples, 3.15%)</title><rect x="112.9" y="1059.0" width="37.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.9" y="1070.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="149.0" y="1043.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="152.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.16%)</title><rect x="150.0" y="1091.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.16%)</title><rect x="150.0" y="1075.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.16%)</title><rect x="150.0" y="1059.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.48%)</title><rect x="151.9" y="1091.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.48%)</title><rect x="151.9" y="1075.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="151.9" y="1059.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="151.9" y="1043.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.32%)</title><rect x="153.8" y="1059.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="154.8" y="1043.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="155.7" y="1043.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.16%)</title><rect x="157.6" y="1187.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.16%)</title><rect x="157.6" y="1171.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.32%)</title><rect x="159.5" y="1187.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.32%)</title><rect x="159.5" y="1171.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.32%)</title><rect x="159.5" y="1155.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.18%)</title><rect x="163.3" y="1187.0" width="25.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.3" y="1198.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.18%)</title><rect x="163.3" y="1171.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.3" y="1182.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 0.97%)</title><rect x="175.7" y="1155.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.56%)</title><rect x="176.7" y="1139.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.56%)</title><rect x="176.7" y="1123.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.56%)</title><rect x="176.7" y="1107.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.7" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="181.4" y="1091.0" width="1.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="184.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="183.3" y="1139.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="185.2" y="1139.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.2" y="1150.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="187.1" y="1155.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="190.1" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="188.1" y="1155.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="191.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.32%)</title><rect x="189.0" y="1219.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.32%)</title><rect x="189.0" y="1203.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.32%)</title><rect x="189.0" y="1187.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.32%)</title><rect x="189.0" y="1171.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.0" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.24%)</title><rect x="190.0" y="1155.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 5.49%)</title><rect x="192.9" y="1235.0" width="64.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.9" y="1246.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 5.49%)</title><rect x="192.9" y="1219.0" width="64.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.9" y="1230.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (39 samples, 3.15%)</title><rect x="192.9" y="1203.0" width="37.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.9" y="1214.0">org..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.08%)</title><rect x="192.9" y="1187.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (38 samples, 3.07%)</title><rect x="193.8" y="1187.0" width="36.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.8" y="1198.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (38 samples, 3.07%)</title><rect x="193.8" y="1171.0" width="36.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.8" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.50%)</title><rect x="193.8" y="1155.0" width="29.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.8" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.50%)</title><rect x="193.8" y="1139.0" width="29.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.8" y="1150.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="193.8" y="1123.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="196.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.13%)</title><rect x="194.8" y="1123.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.48%)</title><rect x="202.4" y="1107.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.48%)</title><rect x="202.4" y="1091.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.48%)</title><rect x="202.4" y="1075.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.48%)</title><rect x="202.4" y="1059.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.48%)</title><rect x="202.4" y="1043.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.48%)</title><rect x="202.4" y="1027.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.40%)</title><rect x="203.3" y="1011.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.21%)</title><rect x="208.1" y="1123.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.21%)</title><rect x="208.1" y="1107.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.65%)</title><rect x="211.9" y="1091.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.65%)</title><rect x="211.9" y="1075.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.24%)</title><rect x="219.5" y="1091.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.5" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.16%)</title><rect x="219.5" y="1075.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.08%)</title><rect x="221.4" y="1075.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.4" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="221.4" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="224.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="221.4" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="224.4" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="221.4" y="1027.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="224.4" y="1038.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="221.4" y="1011.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="224.4" y="1022.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="221.4" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="224.4" y="1006.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="221.4" y="979.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="224.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="222.4" y="1123.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (5 samples, 0.40%)</title><rect x="223.3" y="1155.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.32%)</title><rect x="224.3" y="1139.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="224.3" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="224.3" y="1107.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="224.3" y="1091.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="224.3" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.3" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="224.3" y="1059.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="227.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="225.2" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="225.2" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.2" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="225.2" y="1091.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="228.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="226.2" y="1123.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="226.2" y="1107.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="226.2" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="226.2" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="226.2" y="1059.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="229.2" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="227.1" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="230.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="228.1" y="1155.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.trace (1 samples, 0.08%)</title><rect x="229.0" y="1155.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.05%)</title><rect x="230.0" y="1203.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.97%)</title><rect x="230.0" y="1187.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (11 samples, 0.89%)</title><rect x="230.0" y="1171.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.0" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.08%)</title><rect x="233.8" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="236.8" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="236.8" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1123.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="236.8" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1107.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="236.8" y="1118.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="236.8" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1075.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="236.8" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1059.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="236.8" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle, int, Thread*) (1 samples, 0.08%)</title><rect x="233.8" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="236.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="234.8" y="1155.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (3 samples, 0.24%)</title><rect x="234.8" y="1139.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.24%)</title><rect x="234.8" y="1123.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="234.8" y="1107.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="235.7" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="235.7" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="235.7" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="236.7" y="1107.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="236.7" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="236.7" y="1075.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.08%)</title><rect x="236.7" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.08%)</title><rect x="236.7" y="1043.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.08%)</title><rect x="236.7" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.16%)</title><rect x="237.6" y="1155.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.16%)</title><rect x="237.6" y="1139.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="237.6" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="237.6" y="1107.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="237.6" y="1091.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="238.6" y="1123.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="238.6" y="1107.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="238.6" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="238.6" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="238.6" y="1059.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="238.6" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/533063479.get (1 samples, 0.08%)</title><rect x="238.6" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="239.5" y="1155.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="240.5" y="1171.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="240.5" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="240.5" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="240.5" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.5" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="240.5" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="243.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="241.4" y="1187.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="241.4" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="241.4" y="1155.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="241.4" y="1139.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="241.4" y="1123.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="241.4" y="1107.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="241.4" y="1091.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="241.4" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (4 samples, 0.32%)</title><rect x="242.4" y="1203.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="242.4" y="1187.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.16%)</title><rect x="243.3" y="1187.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="243.3" y="1171.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="243.3" y="1155.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.16%)</title><rect x="243.3" y="1139.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="243.3" y="1123.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="245.2" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.08%)</title><rect x="245.2" y="1171.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="245.2" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="245.2" y="1139.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.08%)</title><rect x="245.2" y="1123.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.08%)</title><rect x="245.2" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.56%)</title><rect x="246.2" y="1203.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="246.2" y="1187.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="246.2" y="1171.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="246.2" y="1155.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="246.2" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.40%)</title><rect x="247.1" y="1187.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="247.1" y="1171.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.08%)</title><rect x="247.1" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.08%)</title><rect x="247.1" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="247.1" y="1123.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.32%)</title><rect x="248.1" y="1171.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.32%)</title><rect x="248.1" y="1155.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.08%)</title><rect x="248.1" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="248.1" y="1123.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="249.0" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="249.0" y="1123.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="249.0" y="1107.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="249.0" y="1091.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="249.0" y="1075.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="249.0" y="1059.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.0" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="249.0" y="1043.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="252.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.16%)</title><rect x="250.0" y="1139.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="250.0" y="1123.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="253.0" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="250.0" y="1107.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="253.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="251.9" y="1187.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="251.9" y="1171.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="251.9" y="1155.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="251.9" y="1139.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="251.9" y="1123.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="251.9" y="1107.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="251.9" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="251.9" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="251.9" y="1059.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.sizeOf (1 samples, 0.08%)</title><rect x="251.9" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="251.9" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.sizeOf (1 samples, 0.08%)</title><rect x="251.9" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.16%)</title><rect x="252.9" y="1203.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.16%)</title><rect x="252.9" y="1187.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="252.9" y="1171.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="252.9" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="252.9" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="252.9" y="1123.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="252.9" y="1107.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="252.9" y="1091.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="252.9" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="252.9" y="1059.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="252.9" y="1043.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="252.9" y="1027.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="252.9" y="1011.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="252.9" y="995.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="252.9" y="979.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/1015630932.accept (1 samples, 0.08%)</title><rect x="252.9" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.9" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="252.9" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.9" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="252.9" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.9" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="252.9" y="915.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.9" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="252.9" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="252.9" y="883.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="253.8" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="253.8" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="253.8" y="1139.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="253.8" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.8" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="253.8" y="1107.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.8" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="253.8" y="1091.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="254.8" y="1203.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="254.8" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="254.8" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="254.8" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.08%)</title><rect x="254.8" y="1139.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor$RecordingLevel.shouldRecord (1 samples, 0.08%)</title><rect x="254.8" y="1123.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.16%)</title><rect x="255.7" y="1203.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="255.7" y="1187.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="255.7" y="1171.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="255.7" y="1155.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="255.7" y="1139.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.7" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="255.7" y="1123.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="258.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="256.7" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="256.7" y="1123.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.08%)</title><rect x="256.7" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (673 samples, 54.32%)</title><rect x="257.6" y="1267.0" width="641.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.6" y="1278.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (673 samples, 54.32%)</title><rect x="257.6" y="1251.0" width="641.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.6" y="1262.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (673 samples, 54.32%)</title><rect x="257.6" y="1235.0" width="641.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="1246.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (455 samples, 36.72%)</title><rect x="263.3" y="1219.0" width="433.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.3" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (455 samples, 36.72%)</title><rect x="263.3" y="1203.0" width="433.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.3" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (455 samples, 36.72%)</title><rect x="263.3" y="1187.0" width="433.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.3" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (455 samples, 36.72%)</title><rect x="263.3" y="1171.0" width="433.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.3" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sche..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="270.0" y="1155.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (169 samples, 13.64%)</title><rect x="271.9" y="1155.0" width="161.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.9" y="1166.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (169 samples, 13.64%)</title><rect x="271.9" y="1139.0" width="161.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.9" y="1150.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (169 samples, 13.64%)</title><rect x="271.9" y="1123.0" width="161.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="1134.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 13.64%)</title><rect x="271.9" y="1107.0" width="161.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.9" y="1118.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (169 samples, 13.64%)</title><rect x="271.9" y="1091.0" width="161.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.9" y="1102.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (169 samples, 13.64%)</title><rect x="271.9" y="1075.0" width="161.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.9" y="1086.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 4.12%)</title><rect x="271.9" y="1059.0" width="48.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.9" y="1070.0">com/..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="286.2" y="1043.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="289.2" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.16%)</title><rect x="286.2" y="1027.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="289.2" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.65%)</title><rect x="288.1" y="1043.0" width="7.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="291.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="291.9" y="1027.0" width="3.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="294.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.32%)</title><rect x="295.7" y="1043.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.32%)</title><rect x="295.7" y="1027.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.32%)</title><rect x="295.7" y="1011.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.32%)</title><rect x="295.7" y="995.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.32%)</title><rect x="295.7" y="979.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="298.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.32%)</title><rect x="295.7" y="963.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.78%)</title><rect x="299.5" y="1043.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.78%)</title><rect x="299.5" y="1027.0" width="21.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.24%)</title><rect x="308.1" y="1011.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.1" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="308.1" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="311.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="308.1" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="311.1" y="990.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.08%)</title><rect x="309.0" y="995.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="312.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="310.0" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.73%)</title><rect x="311.0" y="1011.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.73%)</title><rect x="311.0" y="995.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.16%)</title><rect x="311.0" y="979.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.0" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="311.0" y="963.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="314.0" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="311.0" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="311.0" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="314.0" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="311.9" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.9" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="311.9" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="314.9" y="942.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="311.9" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="314.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (7 samples, 0.56%)</title><rect x="312.9" y="979.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="319.5" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="322.5" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="319.5" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="322.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="319.5" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="322.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="319.5" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="322.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="319.5" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="322.5" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="319.5" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="322.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="319.5" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="322.5" y="926.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="319.5" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="322.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="319.5" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="322.5" y="894.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="319.5" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="322.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (106 samples, 8.56%)</title><rect x="320.5" y="1059.0" width="100.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.5" y="1070.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.24%)</title><rect x="321.4" y="1043.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.16%)</title><rect x="324.3" y="1043.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.08%)</title><rect x="326.2" y="1043.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.32%)</title><rect x="327.1" y="1043.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.32%)</title><rect x="327.1" y="1027.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (2 samples, 0.16%)</title><rect x="329.0" y="1011.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.89%)</title><rect x="331.0" y="1043.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.89%)</title><rect x="331.0" y="1027.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.48%)</title><rect x="334.8" y="1011.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.40%)</title><rect x="335.7" y="995.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="336.7" y="979.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="339.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="336.7" y="963.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="339.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="336.7" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="339.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="336.7" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="339.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="336.7" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="339.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="336.7" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="339.7" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="336.7" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="339.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="336.7" y="867.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="339.7" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="336.7" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="339.7" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="336.7" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="339.7" y="846.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="336.7" y="819.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="339.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.24%)</title><rect x="337.6" y="979.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="340.5" y="1011.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.32%)</title><rect x="341.4" y="1043.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="344.4" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="342.4" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="345.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="342.4" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="345.4" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="342.4" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="345.4" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="342.4" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="345.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.16%)</title><rect x="343.3" y="1027.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (77 samples, 6.21%)</title><rect x="345.2" y="1043.0" width="73.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.2" y="1054.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 1.94%)</title><rect x="345.2" y="1027.0" width="22.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.2" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.24%)</title><rect x="352.9" y="1011.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.24%)</title><rect x="352.9" y="995.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.24%)</title><rect x="352.9" y="979.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (9 samples, 0.73%)</title><rect x="355.7" y="1011.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="358.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (9 samples, 0.73%)</title><rect x="355.7" y="995.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.32%)</title><rect x="364.3" y="1011.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="368.1" y="1027.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.20%)</title><rect x="369.0" y="1027.0" width="49.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.0" y="1038.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.20%)</title><rect x="369.0" y="1011.0" width="49.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.0" y="1022.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.20%)</title><rect x="369.0" y="995.0" width="49.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.0" y="1006.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.13%)</title><rect x="370.0" y="979.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.32%)</title><rect x="376.7" y="963.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.32%)</title><rect x="376.7" y="947.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.32%)</title><rect x="376.7" y="931.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="378.6" y="915.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.24%)</title><rect x="380.5" y="963.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="383.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.73%)</title><rect x="383.3" y="979.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.56%)</title><rect x="385.2" y="963.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.56%)</title><rect x="385.2" y="947.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.56%)</title><rect x="385.2" y="931.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.2" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.56%)</title><rect x="385.2" y="915.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.81%)</title><rect x="391.9" y="979.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.81%)</title><rect x="391.9" y="963.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.81%)</title><rect x="391.9" y="947.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.81%)</title><rect x="391.9" y="931.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.9" y="942.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.81%)</title><rect x="391.9" y="915.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.9" y="926.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.48%)</title><rect x="394.8" y="899.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="397.6" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.6" y="894.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor19.newInstance (2 samples, 0.16%)</title><rect x="398.6" y="883.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.6" y="894.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor19.newInstance (1 samples, 0.08%)</title><rect x="400.5" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.56%)</title><rect x="401.4" y="979.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.56%)</title><rect x="401.4" y="963.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="404.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.56%)</title><rect x="401.4" y="947.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="407.1" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (11 samples, 0.89%)</title><rect x="408.1" y="979.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="417.6" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.6" y="974.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="417.6" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="420.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="418.6" y="1043.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.16%)</title><rect x="419.5" y="1043.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 0.97%)</title><rect x="421.4" y="1059.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.16%)</title><rect x="422.4" y="1043.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.73%)</title><rect x="424.3" y="1043.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.73%)</title><rect x="424.3" y="1027.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.73%)</title><rect x="424.3" y="1011.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.73%)</title><rect x="424.3" y="995.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (258 samples, 20.82%)</title><rect x="432.9" y="1155.0" width="245.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.9" y="1166.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (48 samples, 3.87%)</title><rect x="432.9" y="1139.0" width="45.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.9" y="1150.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.16%)</title><rect x="432.9" y="1123.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.9" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 3.71%)</title><rect x="434.8" y="1123.0" width="43.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.8" y="1134.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.55%)</title><rect x="436.7" y="1107.0" width="41.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.7" y="1118.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.65%)</title><rect x="437.6" y="1091.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="440.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.65%)</title><rect x="437.6" y="1075.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.65%)</title><rect x="437.6" y="1059.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.65%)</title><rect x="437.6" y="1043.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="443.3" y="1027.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="446.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.16%)</title><rect x="443.3" y="1011.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 2.82%)</title><rect x="445.2" y="1091.0" width="33.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.2" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.45%)</title><rect x="461.4" y="1075.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="461.4" y="1059.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (16 samples, 1.29%)</title><rect x="463.3" y="1059.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="476.7" y="1043.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.7" y="1054.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="477.6" y="1043.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="480.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.48%)</title><rect x="478.6" y="1139.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.40%)</title><rect x="479.5" y="1123.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.40%)</title><rect x="479.5" y="1107.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (144 samples, 11.62%)</title><rect x="484.3" y="1139.0" width="137.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.3" y="1150.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (144 samples, 11.62%)</title><rect x="484.3" y="1123.0" width="137.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="487.3" y="1134.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="485.2" y="1107.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="488.2" y="1118.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="485.2" y="1091.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="488.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (37 samples, 2.99%)</title><rect x="489.0" y="1107.0" width="35.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.0" y="1118.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.91%)</title><rect x="489.0" y="1091.0" width="34.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.0" y="1102.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 2.42%)</title><rect x="491.9" y="1075.0" width="28.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.9" y="1086.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.45%)</title><rect x="499.5" y="1059.0" width="17.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.45%)</title><rect x="499.5" y="1043.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.45%)</title><rect x="499.5" y="1027.0" width="17.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.65%)</title><rect x="503.3" y="1011.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="506.3" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.40%)</title><rect x="503.3" y="995.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.3" y="1006.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.16%)</title><rect x="503.3" y="979.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.3" y="990.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.16%)</title><rect x="505.2" y="979.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="508.2" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="507.1" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.1" y="990.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="507.1" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.1" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="508.1" y="995.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="511.1" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="509.0" y="995.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="512.0" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="511.0" y="1011.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="514.0" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="511.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.0" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.40%)</title><rect x="511.9" y="1011.0" width="4.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="514.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="516.7" y="1059.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.7" y="1070.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="518.6" y="1059.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="521.6" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="519.5" y="1059.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="522.5" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="520.5" y="1075.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="523.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="523.3" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="523.3" y="1075.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="523.3" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="523.3" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="526.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="524.3" y="1107.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.48%)</title><rect x="525.2" y="1107.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.16%)</title><rect x="525.2" y="1091.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="525.2" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="525.2" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="528.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="525.2" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="528.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="525.2" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="528.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="526.2" y="1075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="529.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="526.2" y="1059.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.32%)</title><rect x="527.1" y="1091.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="530.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="527.1" y="1075.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="530.1" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (94 samples, 7.59%)</title><rect x="531.0" y="1107.0" width="89.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.0" y="1118.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 6.86%)</title><rect x="537.6" y="1091.0" width="81.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.6" y="1102.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.65%)</title><rect x="538.6" y="1075.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.65%)</title><rect x="538.6" y="1059.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="541.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.65%)</title><rect x="538.6" y="1043.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.65%)</title><rect x="538.6" y="1027.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.24%)</title><rect x="543.3" y="1011.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="544.3" y="995.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (76 samples, 6.13%)</title><rect x="546.2" y="1075.0" width="72.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.2" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (66 samples, 5.33%)</title><rect x="555.7" y="1059.0" width="62.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="558.7" y="1070.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (41 samples, 3.31%)</title><rect x="579.5" y="1043.0" width="39.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.5" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.24%)</title><rect x="599.5" y="1027.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.05%)</title><rect x="602.4" y="1027.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.4" y="1038.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.32%)</title><rect x="614.8" y="1027.0" width="3.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="617.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.16%)</title><rect x="618.6" y="1091.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.6" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="620.5" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="623.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (47 samples, 3.79%)</title><rect x="621.4" y="1139.0" width="44.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.4" y="1150.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 0.16%)</title><rect x="621.4" y="1123.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 3.63%)</title><rect x="623.3" y="1123.0" width="42.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.3" y="1134.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (21 samples, 1.69%)</title><rect x="625.2" y="1107.0" width="20.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (17 samples, 1.37%)</title><rect x="629.0" y="1091.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.21%)</title><rect x="631.0" y="1075.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.0" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="635.7" y="1059.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.7" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="635.7" y="1043.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.7" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="635.7" y="1027.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="635.7" y="1011.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.65%)</title><rect x="637.6" y="1059.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.6" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.56%)</title><rect x="638.6" y="1043.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.56%)</title><rect x="638.6" y="1027.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="641.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1838279651.complete (2 samples, 0.16%)</title><rect x="645.2" y="1107.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="648.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$52 (1 samples, 0.08%)</title><rect x="646.2" y="1091.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="649.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="646.2" y="1075.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="649.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="646.2" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="649.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="646.2" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="649.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.32%)</title><rect x="647.1" y="1107.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.32%)</title><rect x="647.1" y="1091.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.40%)</title><rect x="651.0" y="1107.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="654.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.40%)</title><rect x="651.0" y="1091.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1838279651.get$Lambda (5 samples, 0.40%)</title><rect x="651.0" y="1075.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1838279651.&lt;init&gt; (5 samples, 0.40%)</title><rect x="651.0" y="1059.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.40%)</title><rect x="655.7" y="1107.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.40%)</title><rect x="655.7" y="1091.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="658.7" y="1102.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.40%)</title><rect x="655.7" y="1075.0" width="4.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="658.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="660.5" y="1107.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.5" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="660.5" y="1091.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="663.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.40%)</title><rect x="661.4" y="1107.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.05%)</title><rect x="666.2" y="1139.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.2" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="668.1" y="1123.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="671.1" y="1134.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="668.1" y="1107.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="671.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.56%)</title><rect x="671.9" y="1123.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.56%)</title><rect x="671.9" y="1107.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1104793871.accept (6 samples, 0.48%)</title><rect x="671.9" y="1091.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 0.48%)</title><rect x="671.9" y="1075.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.9" y="1086.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.48%)</title><rect x="671.9" y="1059.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="674.9" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.48%)</title><rect x="671.9" y="1043.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.9" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="676.7" y="1027.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="679.7" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="676.7" y="1011.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="679.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/1456040576.accept (1 samples, 0.08%)</title><rect x="677.6" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.6" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="677.6" y="1075.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="680.6" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="677.6" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="680.6" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="677.6" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="680.6" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="677.6" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.6" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="677.6" y="1011.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="680.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.89%)</title><rect x="678.6" y="1155.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="681.4" y="1139.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.56%)</title><rect x="682.4" y="1139.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="685.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.48%)</title><rect x="683.3" y="1123.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/1456040576.accept (6 samples, 0.48%)</title><rect x="683.3" y="1107.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (6 samples, 0.48%)</title><rect x="683.3" y="1091.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/80425629.complete (6 samples, 0.48%)</title><rect x="683.3" y="1075.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="686.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (6 samples, 0.48%)</title><rect x="683.3" y="1059.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 0.48%)</title><rect x="683.3" y="1043.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.3" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 0.48%)</title><rect x="683.3" y="1027.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.3" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 0.48%)</title><rect x="683.3" y="1011.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.48%)</title><rect x="683.3" y="995.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.48%)</title><rect x="683.3" y="979.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.3" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.65%)</title><rect x="689.0" y="1155.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="692.0" y="1166.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.65%)</title><rect x="689.0" y="1139.0" width="7.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="692.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.32%)</title><rect x="696.7" y="1219.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="699.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.32%)</title><rect x="696.7" y="1203.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.32%)</title><rect x="696.7" y="1187.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.32%)</title><rect x="696.7" y="1171.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="699.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (208 samples, 16.79%)</title><rect x="700.5" y="1219.0" width="198.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.5" y="1230.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (206 samples, 16.63%)</title><rect x="701.4" y="1203.0" width="196.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="704.4" y="1214.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (3 samples, 0.24%)</title><rect x="704.3" y="1187.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (188 samples, 15.17%)</title><rect x="707.1" y="1187.0" width="179.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="710.1" y="1198.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.05%)</title><rect x="711.0" y="1171.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="723.3" y="1171.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="726.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="723.3" y="1155.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="726.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (10 samples, 0.81%)</title><rect x="724.3" y="1171.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="727.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (10 samples, 0.81%)</title><rect x="724.3" y="1155.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 12.91%)</title><rect x="733.8" y="1171.0" width="152.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="736.8" y="1182.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 12.91%)</title><rect x="733.8" y="1155.0" width="152.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.8" y="1166.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="738.6" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.6" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="739.5" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.5" y="1150.0"></text>
</g>
<g>
<title>Unsafe_Park (145 samples, 11.70%)</title><rect x="740.5" y="1139.0" width="138.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="743.5" y="1150.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="742.4" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.4" y="1134.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="743.3" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="746.3" y="1134.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="744.3" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.3" y="1134.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.86%)</title><rect x="745.2" y="1123.0" width="21.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="748.2" y="1134.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.48%)</title><rect x="753.8" y="1107.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="756.8" y="1118.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="755.7" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="758.7" y="1102.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="755.7" y="1075.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="758.7" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.24%)</title><rect x="756.7" y="1091.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="759.7" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="759.5" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="762.5" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.48%)</title><rect x="760.5" y="1107.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="763.5" y="1118.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="766.2" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="769.2" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.16%)</title><rect x="767.1" y="1123.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="770.1" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="769.0" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="772.0" y="1134.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.65%)</title><rect x="770.0" y="1123.0" width="7.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="773.0" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (44 samples, 3.55%)</title><rect x="777.6" y="1123.0" width="41.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="780.6" y="1134.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (36 samples, 2.91%)</title><rect x="819.5" y="1123.0" width="34.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="822.5" y="1134.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.32%)</title><rect x="853.8" y="1123.0" width="3.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="856.8" y="1134.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="857.6" y="1123.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="860.6" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.48%)</title><rect x="858.6" y="1123.0" width="5.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="861.6" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="864.3" y="1123.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="867.3" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="867.1" y="1123.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="870.1" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="870.0" y="1123.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="873.0" y="1134.0"></text>
</g>
<g>
<title>_init (2 samples, 0.16%)</title><rect x="871.9" y="1123.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="874.9" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="873.8" y="1123.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="876.8" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="874.8" y="1123.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.8" y="1134.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="876.7" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.7" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="877.6" y="1123.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="880.6" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (8 samples, 0.65%)</title><rect x="878.6" y="1139.0" width="7.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="881.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.89%)</title><rect x="886.2" y="1187.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="889.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.89%)</title><rect x="886.2" y="1171.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="889.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.81%)</title><rect x="886.2" y="1155.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="889.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.08%)</title><rect x="895.7" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="898.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.08%)</title><rect x="895.7" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="895.7" y="1123.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="898.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="896.7" y="1187.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="899.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="896.7" y="1171.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="899.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.08%)</title><rect x="897.6" y="1203.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="898.6" y="1267.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="901.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="898.6" y="1251.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="898.6" y="1235.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="901.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.08%)</title><rect x="898.6" y="1219.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="901.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.08%)</title><rect x="898.6" y="1203.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.08%)</title><rect x="898.6" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="901.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="898.6" y="1171.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="901.6" y="1182.0"></text>
</g>
<g>
<title>start_thread (305 samples, 24.62%)</title><rect x="899.5" y="1267.0" width="290.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="902.5" y="1278.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (305 samples, 24.62%)</title><rect x="899.5" y="1251.0" width="290.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="902.5" y="1262.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.53%)</title><rect x="899.5" y="1235.0" width="18.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="902.5" y="1246.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="899.5" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.5" y="1230.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.24%)</title><rect x="900.5" y="1219.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.5" y="1230.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="900.5" y="1203.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.5" y="1214.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="900.5" y="1187.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.5" y="1198.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="902.4" y="1187.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="905.4" y="1198.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.21%)</title><rect x="903.3" y="1219.0" width="14.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.3" y="1230.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="903.3" y="1203.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="906.3" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="903.3" y="1187.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="906.3" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="903.3" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="906.3" y="1182.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="903.3" y="1155.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.3" y="1166.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="904.3" y="1187.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="907.3" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.40%)</title><rect x="906.2" y="1203.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.2" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.40%)</title><rect x="906.2" y="1187.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.2" y="1198.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.40%)</title><rect x="906.2" y="1171.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.2" y="1182.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="910.0" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.0" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.56%)</title><rect x="911.0" y="1203.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="914.0" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.56%)</title><rect x="911.0" y="1187.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.0" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.48%)</title><rect x="911.0" y="1171.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.0" y="1182.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.48%)</title><rect x="911.0" y="1155.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="914.0" y="1166.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.48%)</title><rect x="911.0" y="1139.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.0" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.48%)</title><rect x="911.0" y="1123.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.0" y="1134.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.24%)</title><rect x="913.8" y="1107.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.8" y="1118.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.16%)</title><rect x="913.8" y="1091.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="916.8" y="1102.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="915.7" y="1091.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="918.7" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="916.7" y="1171.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.7" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="916.7" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.7" y="1166.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.08%)</title><rect x="916.7" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="919.7" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (284 samples, 22.92%)</title><rect x="917.6" y="1235.0" width="270.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.6" y="1246.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (284 samples, 22.92%)</title><rect x="917.6" y="1219.0" width="270.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.6" y="1230.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (283 samples, 22.84%)</title><rect x="917.6" y="1203.0" width="269.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.6" y="1214.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (283 samples, 22.84%)</title><rect x="917.6" y="1187.0" width="269.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.6" y="1198.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (282 samples, 22.76%)</title><rect x="917.6" y="1171.0" width="268.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.6" y="1182.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (282 samples, 22.76%)</title><rect x="917.6" y="1155.0" width="268.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.6" y="1166.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="917.6" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.6" y="1150.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="917.6" y="1123.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.6" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="917.6" y="1107.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.6" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="917.6" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="917.6" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="917.6" y="1059.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="917.6" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="917.6" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="917.6" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.6" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="917.6" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.6" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="917.6" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.6" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="917.6" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.6" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="917.6" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.6" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="917.6" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.6" y="942.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="917.6" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.6" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="917.6" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.6" y="910.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (65 samples, 5.25%)</title><rect x="918.6" y="1139.0" width="61.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.6" y="1150.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="918.6" y="1123.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.6" y="1134.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="918.6" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.6" y="1118.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="918.6" y="1091.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.6" y="1102.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="919.5" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="922.5" y="1118.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="919.5" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.5" y="1102.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="919.5" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.5" y="1086.0"></text>
</g>
<g>
<title>storeINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="919.5" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.5" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.32%)</title><rect x="920.5" y="1123.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.5" y="1134.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="920.5" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.5" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="920.5" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.5" y="1102.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.08%)</title><rect x="920.5" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.5" y="1086.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.08%)</title><rect x="920.5" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.5" y="1070.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.08%)</title><rect x="920.5" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.5" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="921.4" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="924.4" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="921.4" y="1091.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.4" y="1102.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.08%)</title><rect x="922.4" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.4" y="1118.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.08%)</title><rect x="923.3" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.3" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::end_scopes(int, bool) (1 samples, 0.08%)</title><rect x="924.3" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.3" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.89%)</title><rect x="925.2" y="1123.0" width="10.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="925.2" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.2" y="1118.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.08%)</title><rect x="925.2" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="928.2" y="1102.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.08%)</title><rect x="925.2" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 0.81%)</title><rect x="926.2" y="1107.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.2" y="1118.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.48%)</title><rect x="927.1" y="1091.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="930.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="932.9" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="935.9" y="1102.0"></text>
</g>
<g>
<title>addI_rReg_immNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="932.9" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.9" y="1086.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="933.8" y="1091.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.8" y="1102.0"></text>
</g>
<g>
<title>Node::size_of() const (1 samples, 0.08%)</title><rect x="934.8" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.24%)</title><rect x="935.7" y="1123.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.24%)</title><rect x="935.7" y="1107.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.7" y="1118.0"></text>
</g>
<g>
<title>PCTableNode::pinned() const (1 samples, 0.08%)</title><rect x="935.7" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.08%)</title><rect x="936.7" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="937.6" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.16%)</title><rect x="938.6" y="1123.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 3.39%)</title><rect x="940.5" y="1123.0" width="40.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.5" y="1134.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="940.5" y="1107.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="942.4" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.48%)</title><rect x="943.3" y="1107.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.3" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="944.3" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.32%)</title><rect x="945.2" y="1091.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.2" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="946.2" y="1075.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.2" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="948.1" y="1075.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="951.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.56%)</title><rect x="949.0" y="1107.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.65%)</title><rect x="955.7" y="1107.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.24%)</title><rect x="959.5" y="1091.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.5" y="1102.0"></text>
</g>
<g>
<title>checkCastPPNode::two_adr() const (1 samples, 0.08%)</title><rect x="962.4" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="963.3" y="1107.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="964.3" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.32%)</title><rect x="965.2" y="1107.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.2" y="1118.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.08%)</title><rect x="968.1" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="969.0" y="1107.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.48%)</title><rect x="970.0" y="1107.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.0" y="1118.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="971.9" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.24%)</title><rect x="972.9" y="1091.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="974.8" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="975.7" y="1107.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="976.7" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.7" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.24%)</title><rect x="977.6" y="1107.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.6" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="978.6" y="1091.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="979.5" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.5" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (204 samples, 16.46%)</title><rect x="980.5" y="1139.0" width="194.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.5" y="1150.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="980.5" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.5" y="1134.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="980.5" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.5" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="981.4" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="984.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="981.4" y="1107.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="981.4" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.4" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="981.4" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="984.4" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="981.4" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.4" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="981.4" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.4" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="981.4" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.4" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="981.4" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.4" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="981.4" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="984.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.65%)</title><rect x="982.4" y="1123.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.65%)</title><rect x="982.4" y="1107.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="982.4" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.08%)</title><rect x="982.4" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.4" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="982.4" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.4" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="982.4" y="1043.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.4" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="982.4" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.4" y="1038.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="982.4" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.4" y="1022.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="982.4" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.4" y="1006.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.08%)</title><rect x="982.4" y="979.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.4" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="982.4" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.4" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="982.4" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.4" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="982.4" y="931.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.4" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="982.4" y="915.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.4" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="982.4" y="899.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="982.4" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.4" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="982.4" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.4" y="878.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="982.4" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.4" y="862.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.08%)</title><rect x="982.4" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.4" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.08%)</title><rect x="982.4" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="983.3" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="983.3" y="1075.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.08%)</title><rect x="983.3" y="1059.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::record_for_optimizer(Node*) (1 samples, 0.08%)</title><rect x="984.3" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.40%)</title><rect x="985.2" y="1091.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.32%)</title><rect x="985.2" y="1075.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.2" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.24%)</title><rect x="986.2" y="1059.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (3 samples, 0.24%)</title><rect x="986.2" y="1043.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.16%)</title><rect x="986.2" y="1027.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.2" y="1038.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="987.1" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.1" y="1022.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.08%)</title><rect x="987.1" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.1" y="1006.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="988.1" y="1027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="991.1" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="989.0" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.0" y="1086.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="989.0" y="1059.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.0" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="989.0" y="1043.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="992.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.16%)</title><rect x="990.0" y="1123.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.16%)</title><rect x="990.0" y="1107.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (172 samples, 13.88%)</title><rect x="991.9" y="1123.0" width="163.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.9" y="1134.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1107.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.9" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.9" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1075.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.9" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.9" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.9" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.9" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.9" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.9" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.9" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.9" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="931.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="991.9" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.9" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="992.9" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.9" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="992.9" y="1091.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.08%)</title><rect x="992.9" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.9" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.8" y="1107.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="996.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="993.8" y="1091.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.8" y="1102.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="994.8" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="997.8" y="1118.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="995.7" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.40%)</title><rect x="996.7" y="1107.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.7" y="1118.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1000.5" y="1091.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1001.4" y="1107.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1002.4" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1003.3" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1006.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (151 samples, 12.19%)</title><rect x="1004.3" y="1107.0" width="143.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.3" y="1118.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (150 samples, 12.11%)</title><rect x="1005.2" y="1091.0" width="142.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.2" y="1102.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.73%)</title><rect x="1006.2" y="1075.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (140 samples, 11.30%)</title><rect x="1014.8" y="1075.0" width="133.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.8" y="1086.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1116.7" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.7" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1116.7" y="1043.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1119.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.24%)</title><rect x="1117.6" y="1059.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.16%)</title><rect x="1118.6" y="1043.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (27 samples, 2.18%)</title><rect x="1120.5" y="1059.0" width="25.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.5" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.16%)</title><rect x="1146.2" y="1059.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1147.1" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.32%)</title><rect x="1148.1" y="1107.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1151.9" y="1107.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1152.9" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1152.9" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1152.9" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.9" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1152.9" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1153.8" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1153.8" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.08%)</title><rect x="1153.8" y="1059.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.8" y="1070.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1154.8" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (19 samples, 1.53%)</title><rect x="1155.7" y="1123.0" width="18.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.7" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1155.7" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1156.7" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.7" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1156.7" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 1.37%)</title><rect x="1157.6" y="1107.0" width="16.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.6" y="1118.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.6" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.6" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.5" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1159.5" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1159.5" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1159.5" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.5" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1160.5" y="1091.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="1102.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.08%)</title><rect x="1160.5" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="1086.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1161.4" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1161.4" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1161.4" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="1054.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.4" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="1102.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.4" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1163.3" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="1102.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1163.3" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.08%)</title><rect x="1163.3" y="1059.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="1070.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.08%)</title><rect x="1163.3" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.40%)</title><rect x="1164.3" y="1091.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.3" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1167.1" y="1075.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1168.1" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="1086.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1169.0" y="1091.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.0" y="1102.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1169.0" y="1075.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1170.0" y="1091.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.0" y="1075.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1170.0" y="1059.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.0" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1170.0" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="1054.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1171.0" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1171.9" y="1091.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.16%)</title><rect x="1171.9" y="1075.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1171.9" y="1059.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1171.9" y="1043.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1171.9" y="1027.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1171.9" y="1011.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="979.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="851.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="846.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.9" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="830.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.9" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1172.9" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="990.0"></text>
</g>
<g>
<title>SubINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1173.8" y="1123.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.73%)</title><rect x="1174.8" y="1139.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.73%)</title><rect x="1174.8" y="1123.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.73%)</title><rect x="1174.8" y="1107.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.73%)</title><rect x="1174.8" y="1091.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.73%)</title><rect x="1174.8" y="1075.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.73%)</title><rect x="1174.8" y="1059.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="1070.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.16%)</title><rect x="1174.8" y="1043.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="1054.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.16%)</title><rect x="1174.8" y="1027.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.16%)</title><rect x="1174.8" y="1011.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.16%)</title><rect x="1174.8" y="995.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.16%)</title><rect x="1174.8" y="979.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.16%)</title><rect x="1174.8" y="963.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.16%)</title><rect x="1174.8" y="947.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1174.8" y="931.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.08%)</title><rect x="1174.8" y="915.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.08%)</title><rect x="1174.8" y="899.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.7" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.7" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1175.7" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.7" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.7" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>ciConstantPoolCache::insert(int, void*) (1 samples, 0.08%)</title><rect x="1175.7" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1176.7" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1054.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1176.7" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.08%)</title><rect x="1176.7" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.08%)</title><rect x="1176.7" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.48%)</title><rect x="1177.6" y="1043.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.48%)</title><rect x="1177.6" y="1027.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.48%)</title><rect x="1177.6" y="1011.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.48%)</title><rect x="1177.6" y="995.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1177.6" y="979.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1177.6" y="963.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.48%)</title><rect x="1177.6" y="947.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.48%)</title><rect x="1177.6" y="931.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.48%)</title><rect x="1177.6" y="915.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.48%)</title><rect x="1177.6" y="899.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1177.6" y="883.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1177.6" y="867.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.48%)</title><rect x="1177.6" y="851.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.48%)</title><rect x="1177.6" y="835.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.48%)</title><rect x="1177.6" y="819.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.48%)</title><rect x="1177.6" y="803.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1177.6" y="787.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1177.6" y="771.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1177.6" y="755.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1177.6" y="739.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1177.6" y="723.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1177.6" y="707.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1177.6" y="691.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1177.6" y="675.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.6" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.6" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.6" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.6" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.6" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="563.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.6" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.6" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.6" y="499.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.6" y="483.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.6" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.6" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.6" y="419.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.6" y="403.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.6" y="387.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.6" y="371.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.6" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.6" y="323.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.6" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.6" y="291.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.6" y="275.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.6" y="243.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.6" y="227.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.6" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.6" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.6" y="179.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.6" y="163.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.6" y="147.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.6" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.6" y="115.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.6" y="99.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1177.6" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1177.6" y="67.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="78.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.08%)</title><rect x="1177.6" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="62.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.08%)</title><rect x="1177.6" y="35.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1178.6" y="659.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1178.6" y="643.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1178.6" y="627.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1178.6" y="611.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1178.6" y="595.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1178.6" y="579.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1178.6" y="563.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.6" y="531.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="542.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.6" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="526.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1178.6" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="510.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.08%)</title><rect x="1178.6" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.5" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.5" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.5" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.5" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.5" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.5" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.5" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.5" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.5" y="419.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.5" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.5" y="387.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.5" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.5" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.5" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.5" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.5" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.5" y="291.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.5" y="275.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.5" y="259.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="270.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1179.5" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="254.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1179.5" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="238.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.08%)</title><rect x="1179.5" y="211.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1179.5" y="195.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="206.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1179.5" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.5" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.5" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.5" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.5" y="707.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.5" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.5" y="675.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.5" y="659.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.5" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.5" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.5" y="611.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.5" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.5" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.5" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.5" y="547.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.5" y="531.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.5" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.5" y="499.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.5" y="483.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.5" y="467.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.5" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.5" y="435.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.5" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1180.5" y="403.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.5" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.5" y="371.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="382.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.5" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.4" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="750.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.4" y="723.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.4" y="734.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.4" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="718.0"></text>
</g>
<g>
<title>Compile::too_many_recompiles(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1181.4" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="702.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.08%)</title><rect x="1181.4" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="686.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.08%)</title><rect x="1181.4" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1182.4" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.4" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.4" y="723.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1182.4" y="707.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1182.4" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.4" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.4" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="670.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1182.4" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="654.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.08%)</title><rect x="1182.4" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.4" y="638.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1183.3" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.3" y="1123.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1134.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.08%)</title><rect x="1184.3" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1184.3" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="1134.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1184.3" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1185.2" y="1139.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="1150.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1185.2" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1185.2" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="1182.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.2" y="1155.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.2" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.2" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="1134.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1186.2" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="1118.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1102.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1186.2" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.2" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.2" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.2" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1186.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="1006.0"></text>
</g>
<g>
<title>ciMethod::has_balanced_monitors() (1 samples, 0.08%)</title><rect x="1186.2" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="990.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.1" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.1" y="1187.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="1198.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1171.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="1182.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.08%)</title><rect x="1187.1" y="1155.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1187.1" y="1139.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="1235.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="1246.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1219.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="1230.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="1203.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1214.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="1187.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="1198.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="1171.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.16%)</title><rect x="1188.1" y="1155.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.08%)</title><rect x="1188.1" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="1150.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.08%)</title><rect x="1188.1" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="1134.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1188.1" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1150.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="1189.0" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1134.0"></text>
</g>
</g>
</svg>
