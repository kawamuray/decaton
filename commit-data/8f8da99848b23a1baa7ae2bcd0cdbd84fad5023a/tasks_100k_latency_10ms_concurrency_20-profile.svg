<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (279 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 6.45%)</title><rect x="10.0" y="1171.0" width="76.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.36%)</title><rect x="10.0" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.36%)</title><rect x="10.0" y="1139.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.36%)</title><rect x="10.0" y="1123.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.36%)</title><rect x="10.0" y="1107.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.36%)</title><rect x="10.0" y="1091.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="10.0" y="1075.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="10.0" y="1059.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.36%)</title><rect x="10.0" y="1043.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (17 samples, 6.09%)</title><rect x="14.2" y="1155.0" width="71.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="1166.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.72%)</title><rect x="14.2" y="1139.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.36%)</title><rect x="14.2" y="1123.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="14.2" y="1107.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="14.2" y="1091.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="14.2" y="1075.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="14.2" y="1059.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="14.2" y="1043.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.36%)</title><rect x="14.2" y="1027.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.36%)</title><rect x="14.2" y="1011.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.36%)</title><rect x="14.2" y="995.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/88669862.test (1 samples, 0.36%)</title><rect x="14.2" y="979.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$61 (1 samples, 0.36%)</title><rect x="14.2" y="963.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.shouldPartitionPaused (1 samples, 0.36%)</title><rect x="14.2" y="947.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.36%)</title><rect x="18.5" y="1123.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.36%)</title><rect x="18.5" y="1107.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.72%)</title><rect x="22.7" y="1139.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.72%)</title><rect x="22.7" y="1123.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.72%)</title><rect x="22.7" y="1107.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.72%)</title><rect x="22.7" y="1091.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.72%)</title><rect x="22.7" y="1075.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.72%)</title><rect x="22.7" y="1059.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.72%)</title><rect x="22.7" y="1043.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.36%)</title><rect x="22.7" y="1027.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.36%)</title><rect x="22.7" y="1011.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/1861730221.test (1 samples, 0.36%)</title><rect x="22.7" y="995.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.36%)</title><rect x="26.9" y="1027.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.08%)</title><rect x="31.1" y="1139.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/35877640.accept (3 samples, 1.08%)</title><rect x="31.1" y="1123.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (3 samples, 1.08%)</title><rect x="31.1" y="1107.0" width="12.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.72%)</title><rect x="31.1" y="1091.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.72%)</title><rect x="31.1" y="1075.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.72%)</title><rect x="31.1" y="1059.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.72%)</title><rect x="31.1" y="1043.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.72%)</title><rect x="31.1" y="1027.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.72%)</title><rect x="31.1" y="1011.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.72%)</title><rect x="31.1" y="995.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.72%)</title><rect x="31.1" y="979.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.72%)</title><rect x="31.1" y="963.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.36%)</title><rect x="39.6" y="1091.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.36%)</title><rect x="39.6" y="1075.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.6" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="39.6" y="1059.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="42.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.58%)</title><rect x="43.8" y="1139.0" width="42.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.8" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.58%)</title><rect x="43.8" y="1123.0" width="42.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.8" y="1134.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.87%)</title><rect x="43.8" y="1107.0" width="33.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.8" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="43.8" y="1091.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="43.8" y="1075.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/936588250.shouldBlock (1 samples, 0.36%)</title><rect x="43.8" y="1059.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.36%)</title><rect x="43.8" y="1043.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.36%)</title><rect x="43.8" y="1027.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.36%)</title><rect x="43.8" y="1011.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (1 samples, 0.36%)</title><rect x="43.8" y="995.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.36%)</title><rect x="43.8" y="979.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.8" y="990.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.36%)</title><rect x="43.8" y="963.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="46.8" y="974.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="43.8" y="947.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="46.8" y="958.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="43.8" y="931.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="46.8" y="942.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="43.8" y="915.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="46.8" y="926.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="43.8" y="899.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="46.8" y="910.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.36%)</title><rect x="43.8" y="883.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="46.8" y="894.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.36%)</title><rect x="43.8" y="867.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="46.8" y="878.0"></text>
</g>
<g>
<title>CompileBroker::create_compile_task(CompileQueue*, int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.36%)</title><rect x="43.8" y="851.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="46.8" y="862.0"></text>
</g>
<g>
<title>JNIHandles::make_global(Handle) (1 samples, 0.36%)</title><rect x="43.8" y="835.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="46.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.51%)</title><rect x="48.1" y="1091.0" width="29.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.1" y="1102.0">or..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.36%)</title><rect x="48.1" y="1075.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.casTail (1 samples, 0.36%)</title><rect x="48.1" y="1059.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.36%)</title><rect x="48.1" y="1043.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="51.1" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.36%)</title><rect x="48.1" y="1027.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="51.1" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="48.1" y="1011.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="51.1" y="1022.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="48.1" y="995.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="51.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.15%)</title><rect x="52.3" y="1075.0" width="25.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.3" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.08%)</title><rect x="52.3" y="1059.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.08%)</title><rect x="52.3" y="1043.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.08%)</title><rect x="52.3" y="1027.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.36%)</title><rect x="60.8" y="1011.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.36%)</title><rect x="65.0" y="1059.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.36%)</title><rect x="65.0" y="1043.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.36%)</title><rect x="65.0" y="1027.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="65.0" y="1011.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="65.0" y="995.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.72%)</title><rect x="69.2" y="1059.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.72%)</title><rect x="69.2" y="1043.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.36%)</title><rect x="69.2" y="1027.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="69.2" y="1011.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.2" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="69.2" y="995.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="72.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="73.4" y="1027.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="73.4" y="1011.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="73.4" y="995.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.36%)</title><rect x="73.4" y="979.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.36%)</title><rect x="77.7" y="1107.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.36%)</title><rect x="77.7" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.36%)</title><rect x="77.7" y="1075.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="77.7" y="1059.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="77.7" y="1043.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="77.7" y="1027.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="77.7" y="1011.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.36%)</title><rect x="77.7" y="995.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.36%)</title><rect x="77.7" y="979.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.36%)</title><rect x="77.7" y="963.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.36%)</title><rect x="77.7" y="947.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.7" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="77.7" y="931.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="80.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.36%)</title><rect x="81.9" y="1107.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="81.9" y="1091.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.36%)</title><rect x="81.9" y="1075.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.36%)</title><rect x="81.9" y="1059.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="81.9" y="1043.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="81.9" y="1027.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="81.9" y="1011.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="81.9" y="995.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.36%)</title><rect x="81.9" y="979.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.36%)</title><rect x="81.9" y="963.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.36%)</title><rect x="81.9" y="947.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.36%)</title><rect x="81.9" y="931.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (145 samples, 51.97%)</title><rect x="86.1" y="1171.0" width="613.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.1" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (145 samples, 51.97%)</title><rect x="86.1" y="1155.0" width="613.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.1" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (145 samples, 51.97%)</title><rect x="86.1" y="1139.0" width="613.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.1" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1826420464.run (129 samples, 46.24%)</title><rect x="107.3" y="1123.0" width="545.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.3" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1826420464..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (129 samples, 46.24%)</title><rect x="107.3" y="1107.0" width="545.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.3" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (129 samples, 46.24%)</title><rect x="107.3" y="1091.0" width="545.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.3" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (129 samples, 46.24%)</title><rect x="107.3" y="1075.0" width="545.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.3" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 9.32%)</title><rect x="111.5" y="1059.0" width="110.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.5" y="1070.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 9.32%)</title><rect x="111.5" y="1043.0" width="110.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.5" y="1054.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 9.32%)</title><rect x="111.5" y="1027.0" width="110.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.5" y="1038.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 9.32%)</title><rect x="111.5" y="1011.0" width="110.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.5" y="1022.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 9.32%)</title><rect x="111.5" y="995.0" width="110.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.5" y="1006.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 9.32%)</title><rect x="111.5" y="979.0" width="110.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.5" y="990.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.51%)</title><rect x="111.5" y="963.0" width="29.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.5" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.72%)</title><rect x="111.5" y="947.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.72%)</title><rect x="111.5" y="931.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.36%)</title><rect x="111.5" y="915.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.36%)</title><rect x="115.7" y="915.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.79%)</title><rect x="120.0" y="947.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.0" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.79%)</title><rect x="120.0" y="931.0" width="21.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.0" y="942.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="120.0" y="915.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="123.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="120.0" y="899.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="123.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="120.0" y="883.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="123.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="120.0" y="867.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="123.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.36%)</title><rect x="120.0" y="851.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="123.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.36%)</title><rect x="124.2" y="915.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="127.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.36%)</title><rect x="124.2" y="899.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.72%)</title><rect x="128.4" y="915.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.36%)</title><rect x="132.7" y="899.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="135.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.36%)</title><rect x="136.9" y="915.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 5.38%)</title><rect x="141.1" y="963.0" width="63.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.1" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.36%)</title><rect x="141.1" y="947.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="141.1" y="931.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.36%)</title><rect x="141.1" y="915.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.72%)</title><rect x="145.3" y="947.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.72%)</title><rect x="145.3" y="931.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.72%)</title><rect x="145.3" y="915.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.72%)</title><rect x="145.3" y="899.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="149.6" y="883.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 4.30%)</title><rect x="153.8" y="947.0" width="50.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.8" y="958.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.15%)</title><rect x="153.8" y="931.0" width="25.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.8" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="158.0" y="915.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="158.0" y="899.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="158.0" y="883.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.43%)</title><rect x="162.3" y="915.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.15%)</title><rect x="179.2" y="931.0" width="25.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.2" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.15%)</title><rect x="179.2" y="915.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.2" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.15%)</title><rect x="179.2" y="899.0" width="25.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.2" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="183.4" y="883.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="183.4" y="867.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="183.4" y="851.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="183.4" y="835.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.36%)</title><rect x="183.4" y="819.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.08%)</title><rect x="187.6" y="883.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.08%)</title><rect x="187.6" y="867.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.08%)</title><rect x="187.6" y="851.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.08%)</title><rect x="187.6" y="835.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.6" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.08%)</title><rect x="187.6" y="819.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.6" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.72%)</title><rect x="191.9" y="803.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.9" y="814.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor12.newInstance (2 samples, 0.72%)</title><rect x="191.9" y="787.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="200.3" y="883.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="200.3" y="867.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="200.3" y="851.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.43%)</title><rect x="204.6" y="963.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.43%)</title><rect x="204.6" y="947.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.43%)</title><rect x="204.6" y="931.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.43%)</title><rect x="204.6" y="915.0" width="16.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.72%)</title><rect x="213.0" y="899.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (98 samples, 35.13%)</title><rect x="221.5" y="1059.0" width="414.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (19 samples, 6.81%)</title><rect x="221.5" y="1043.0" width="80.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.5" y="1054.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 6.81%)</title><rect x="221.5" y="1027.0" width="80.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.5" y="1038.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 5.73%)</title><rect x="234.2" y="1011.0" width="67.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.2" y="1022.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.72%)</title><rect x="234.2" y="995.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.72%)</title><rect x="234.2" y="979.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.72%)</title><rect x="234.2" y="963.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.72%)</title><rect x="234.2" y="947.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 5.02%)</title><rect x="242.6" y="995.0" width="59.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.6" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.15%)</title><rect x="276.5" y="979.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.5" y="990.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.36%)</title><rect x="276.5" y="963.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.5" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.36%)</title><rect x="276.5" y="947.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.79%)</title><rect x="280.7" y="963.0" width="21.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.7" y="974.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 1.08%)</title><rect x="289.1" y="947.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 5.38%)</title><rect x="301.8" y="1043.0" width="63.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.8" y="1054.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 5.38%)</title><rect x="301.8" y="1027.0" width="63.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.8" y="1038.0">com/lin..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.72%)</title><rect x="301.8" y="1011.0" width="8.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="304.8" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="306.1" y="995.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="309.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.87%)</title><rect x="310.3" y="1011.0" width="33.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.3" y="1022.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.87%)</title><rect x="310.3" y="995.0" width="33.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.3" y="1006.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.79%)</title><rect x="314.5" y="979.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.5" y="990.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.72%)</title><rect x="318.7" y="963.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.7" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.72%)</title><rect x="318.7" y="947.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.7" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.72%)</title><rect x="318.7" y="931.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.72%)</title><rect x="318.7" y="915.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="321.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="318.7" y="899.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="321.7" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="323.0" y="899.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="326.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.36%)</title><rect x="323.0" y="883.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="326.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="327.2" y="963.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.2" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="331.4" y="963.0" width="4.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="334.4" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.72%)</title><rect x="335.7" y="979.0" width="8.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="338.7" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.79%)</title><rect x="344.1" y="1011.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.1" y="1022.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.79%)</title><rect x="344.1" y="995.0" width="21.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.1" y="1006.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.79%)</title><rect x="344.1" y="979.0" width="21.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.1" y="990.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.79%)</title><rect x="344.1" y="963.0" width="21.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.1" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.36%)</title><rect x="361.0" y="947.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.36%)</title><rect x="361.0" y="931.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 20.79%)</title><rect x="365.3" y="1043.0" width="245.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.3" y="1054.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 20.79%)</title><rect x="365.3" y="1027.0" width="245.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.3" y="1038.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/227827484.process (51 samples, 18.28%)</title><rect x="369.5" y="1011.0" width="215.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.5" y="1022.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (51 samples, 18.28%)</title><rect x="369.5" y="995.0" width="215.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.5" y="1006.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (51 samples, 18.28%)</title><rect x="369.5" y="979.0" width="215.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.5" y="990.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 17.56%)</title><rect x="378.0" y="963.0" width="207.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.0" y="974.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (46 samples, 16.49%)</title><rect x="390.6" y="947.0" width="194.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="393.6" y="958.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.36%)</title><rect x="420.3" y="931.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="423.3" y="942.0"></text>
</g>
<g>
<title>JVM_Sleep (35 samples, 12.54%)</title><rect x="424.5" y="931.0" width="148.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="427.5" y="942.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.36%)</title><rect x="437.2" y="915.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="440.2" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="441.4" y="915.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="444.4" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="445.6" y="915.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.6" y="926.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 10.39%)</title><rect x="449.9" y="915.0" width="122.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="452.9" y="926.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="487.9" y="899.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="490.9" y="910.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.36%)</title><rect x="487.9" y="883.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="490.9" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.72%)</title><rect x="492.2" y="899.0" width="8.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="495.2" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.94%)</title><rect x="500.6" y="899.0" width="46.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="503.6" y="910.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.36%)</title><rect x="547.1" y="899.0" width="4.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="550.1" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.72%)</title><rect x="551.4" y="899.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="554.4" y="910.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.36%)</title><rect x="559.8" y="899.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="562.8" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.72%)</title><rect x="564.1" y="899.0" width="8.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="567.1" y="910.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.36%)</title><rect x="572.5" y="931.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="575.5" y="942.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.72%)</title><rect x="576.7" y="931.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.7" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.36%)</title><rect x="585.2" y="1011.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.36%)</title><rect x="585.2" y="995.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1108453058.get$Lambda (1 samples, 0.36%)</title><rect x="585.2" y="979.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.2" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="585.2" y="963.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="585.2" y="947.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="585.2" y="931.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="585.2" y="915.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="588.2" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.36%)</title><rect x="585.2" y="899.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="588.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.36%)</title><rect x="585.2" y="883.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="588.2" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="589.4" y="1011.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="592.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="589.4" y="995.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.36%)</title><rect x="589.4" y="979.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.72%)</title><rect x="593.7" y="1011.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="597.9" y="995.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="600.9" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.36%)</title><rect x="597.9" y="979.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="600.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="597.9" y="963.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="600.9" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="597.9" y="947.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.9" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="597.9" y="931.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="600.9" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="597.9" y="915.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.9" y="926.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.36%)</title><rect x="597.9" y="899.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="600.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.72%)</title><rect x="602.1" y="1011.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.15%)</title><rect x="610.6" y="1043.0" width="25.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.6" y="1054.0">j..</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="631.7" y="1027.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="634.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.43%)</title><rect x="635.9" y="1059.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.72%)</title><rect x="644.4" y="1043.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.72%)</title><rect x="644.4" y="1027.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1913779603.accept (2 samples, 0.72%)</title><rect x="644.4" y="1011.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (2 samples, 0.72%)</title><rect x="644.4" y="995.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/753115185.complete (2 samples, 0.72%)</title><rect x="644.4" y="979.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.72%)</title><rect x="644.4" y="963.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.72%)</title><rect x="644.4" y="947.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.72%)</title><rect x="644.4" y="931.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.72%)</title><rect x="644.4" y="915.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.4" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.72%)</title><rect x="644.4" y="899.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.72%)</title><rect x="644.4" y="883.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.94%)</title><rect x="652.9" y="1123.0" width="46.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.9" y="1134.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.51%)</title><rect x="669.8" y="1107.0" width="29.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.8" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 1.08%)</title><rect x="669.8" y="1091.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.08%)</title><rect x="669.8" y="1075.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="672.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.08%)</title><rect x="669.8" y="1059.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.08%)</title><rect x="669.8" y="1043.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.08%)</title><rect x="669.8" y="1027.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.43%)</title><rect x="682.5" y="1091.0" width="16.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.43%)</title><rect x="682.5" y="1075.0" width="16.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="685.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.43%)</title><rect x="682.5" y="1059.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="685.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.43%)</title><rect x="682.5" y="1043.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.5" y="1054.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.36%)</title><rect x="699.4" y="1171.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="702.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.36%)</title><rect x="703.6" y="1171.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.36%)</title><rect x="703.6" y="1155.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="703.6" y="1139.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.36%)</title><rect x="703.6" y="1123.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.36%)</title><rect x="703.6" y="1107.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.36%)</title><rect x="703.6" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.36%)</title><rect x="703.6" y="1075.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="706.6" y="1086.0"></text>
</g>
<g>
<title>start_thread (114 samples, 40.86%)</title><rect x="707.8" y="1171.0" width="482.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="710.8" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (114 samples, 40.86%)</title><rect x="707.8" y="1155.0" width="482.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="710.8" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.51%)</title><rect x="707.8" y="1139.0" width="29.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="710.8" y="1150.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.51%)</title><rect x="707.8" y="1123.0" width="29.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.8" y="1134.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.43%)</title><rect x="707.8" y="1107.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="710.8" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.43%)</title><rect x="707.8" y="1091.0" width="17.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="710.8" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.72%)</title><rect x="712.1" y="1075.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="715.1" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="720.5" y="1075.0" width="4.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="723.5" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.08%)</title><rect x="724.8" y="1107.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.8" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.36%)</title><rect x="724.8" y="1091.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="727.8" y="1102.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="724.8" y="1075.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="724.8" y="1059.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.8" y="1070.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.36%)</title><rect x="724.8" y="1043.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="727.8" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.72%)</title><rect x="729.0" y="1091.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="732.0" y="1102.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.72%)</title><rect x="729.0" y="1075.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="732.0" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (107 samples, 38.35%)</title><rect x="737.5" y="1139.0" width="452.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.5" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (107 samples, 38.35%)</title><rect x="737.5" y="1123.0" width="452.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="740.5" y="1134.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (107 samples, 38.35%)</title><rect x="737.5" y="1107.0" width="452.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="740.5" y="1118.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (107 samples, 38.35%)</title><rect x="737.5" y="1091.0" width="452.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="740.5" y="1102.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (103 samples, 36.92%)</title><rect x="737.5" y="1075.0" width="435.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="740.5" y="1086.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (103 samples, 36.92%)</title><rect x="737.5" y="1059.0" width="435.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.5" y="1070.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (62 samples, 22.22%)</title><rect x="737.5" y="1043.0" width="262.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="740.5" y="1054.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.08%)</title><rect x="737.5" y="1027.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.5" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.36%)</title><rect x="737.5" y="1011.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="740.5" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="737.5" y="995.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.5" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="737.5" y="979.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.5" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.72%)</title><rect x="741.7" y="1011.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="744.7" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="745.9" y="995.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.79%)</title><rect x="750.1" y="1027.0" width="21.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.1" y="1038.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.79%)</title><rect x="750.1" y="1011.0" width="21.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.1" y="1022.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.08%)</title><rect x="750.1" y="995.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="753.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.36%)</title><rect x="762.8" y="995.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="765.8" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.36%)</title><rect x="767.1" y="995.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.36%)</title><rect x="767.1" y="979.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.1" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.36%)</title><rect x="767.1" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.1" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.36%)</title><rect x="767.1" y="947.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.1" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.36%)</title><rect x="767.1" y="931.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.1" y="942.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.36%)</title><rect x="767.1" y="915.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="770.1" y="926.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.36%)</title><rect x="771.3" y="1027.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="774.3" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.36%)</title><rect x="771.3" y="1011.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="774.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.79%)</title><rect x="775.5" y="1027.0" width="21.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="778.5" y="1038.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.79%)</title><rect x="775.5" y="1011.0" width="21.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.5" y="1022.0">P..</text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.36%)</title><rect x="775.5" y="995.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.08%)</title><rect x="779.7" y="995.0" width="12.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="782.7" y="1006.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.36%)</title><rect x="779.7" y="979.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="782.7" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.72%)</title><rect x="784.0" y="979.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="787.0" y="990.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (2 samples, 0.72%)</title><rect x="784.0" y="963.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.0" y="974.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.36%)</title><rect x="784.0" y="947.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.0" y="958.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.36%)</title><rect x="784.0" y="931.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="787.0" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="788.2" y="947.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.2" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="788.2" y="931.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="791.2" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.36%)</title><rect x="788.2" y="915.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="791.2" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.36%)</title><rect x="788.2" y="899.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.2" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.36%)</title><rect x="788.2" y="883.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.2" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="792.4" y="995.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="792.4" y="979.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 17.20%)</title><rect x="796.7" y="1027.0" width="203.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="799.7" y="1038.0">PhaseChaitin::Register_Allo..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="800.9" y="1011.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="803.9" y="1022.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.36%)</title><rect x="800.9" y="995.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="803.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.43%)</title><rect x="805.1" y="1011.0" width="16.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="808.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.72%)</title><rect x="805.1" y="995.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="805.1" y="979.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.1" y="990.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.36%)</title><rect x="813.6" y="995.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="816.6" y="1006.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.36%)</title><rect x="817.8" y="995.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.72%)</title><rect x="822.0" y="1011.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="825.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="822.0" y="995.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 3.23%)</title><rect x="830.5" y="1011.0" width="38.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.5" y="1022.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.36%)</title><rect x="864.3" y="995.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.3" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="864.3" y="979.0" width="4.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="867.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.58%)</title><rect x="868.6" y="1011.0" width="42.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.6" y="1022.0">Phas..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.36%)</title><rect x="885.5" y="995.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="888.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.43%)</title><rect x="889.7" y="995.0" width="16.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="892.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="902.4" y="979.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="905.4" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.36%)</title><rect x="906.6" y="995.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="909.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.72%)</title><rect x="910.9" y="1011.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.36%)</title><rect x="915.1" y="995.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="918.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.08%)</title><rect x="919.3" y="1011.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.3" y="1022.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.36%)</title><rect x="927.8" y="995.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="930.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.08%)</title><rect x="932.0" y="1011.0" width="12.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="935.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.36%)</title><rect x="940.5" y="995.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.23%)</title><rect x="944.7" y="1011.0" width="38.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.7" y="1022.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.36%)</title><rect x="944.7" y="995.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.7" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.87%)</title><rect x="948.9" y="995.0" width="33.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.9" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.87%)</title><rect x="948.9" y="979.0" width="33.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.9" y="990.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.72%)</title><rect x="948.9" y="963.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.9" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.79%)</title><rect x="957.4" y="963.0" width="21.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.4" y="974.0">P..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.36%)</title><rect x="978.5" y="963.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.5" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.72%)</title><rect x="982.8" y="1011.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="982.8" y="995.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.36%)</title><rect x="991.2" y="1011.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="991.2" y="995.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.2" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.36%)</title><rect x="995.4" y="1011.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.4" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 12.19%)</title><rect x="999.7" y="1043.0" width="143.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.7" y="1054.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.08%)</title><rect x="999.7" y="1027.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 1.08%)</title><rect x="999.7" y="1011.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.36%)</title><rect x="1003.9" y="995.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.36%)</title><rect x="1003.9" y="979.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.9" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.36%)</title><rect x="1003.9" y="963.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.9" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.36%)</title><rect x="1003.9" y="947.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.9" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.36%)</title><rect x="1003.9" y="931.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1006.9" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.36%)</title><rect x="1003.9" y="915.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.9" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1003.9" y="899.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1006.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::add_objload_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.36%)</title><rect x="1008.1" y="995.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.1" y="1006.0"></text>
</g>
<g>
<title>PointsToNode::PointsToNode(ConnectionGraph*, Node*, PointsToNode::EscapeState, PointsToNode::NodeType) (1 samples, 0.36%)</title><rect x="1008.1" y="979.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.1" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 1.08%)</title><rect x="1012.4" y="1027.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.4" y="1038.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="1016.6" y="1011.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.6" y="1022.0"></text>
</g>
<g>
<title>SafePointNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1020.8" y="1011.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.36%)</title><rect x="1025.1" y="1027.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.1" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.36%)</title><rect x="1025.1" y="1011.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1028.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 7.17%)</title><rect x="1029.3" y="1027.0" width="84.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.3" y="1038.0">PhaseIdeal..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.36%)</title><rect x="1029.3" y="1011.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 5.38%)</title><rect x="1033.5" y="1011.0" width="63.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.5" y="1022.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 5.38%)</title><rect x="1033.5" y="995.0" width="63.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.5" y="1006.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 5.38%)</title><rect x="1033.5" y="979.0" width="63.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.5" y="990.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.72%)</title><rect x="1088.5" y="963.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.72%)</title><rect x="1097.0" y="1011.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1105.4" y="1011.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.36%)</title><rect x="1105.4" y="995.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.4" y="1006.0"></text>
</g>
<g>
<title>LShiftLNode::Opcode() const (1 samples, 0.36%)</title><rect x="1105.4" y="979.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1109.6" y="1011.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1109.6" y="995.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.6" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1109.6" y="979.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.6" y="990.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.36%)</title><rect x="1109.6" y="963.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.43%)</title><rect x="1113.9" y="1027.0" width="16.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.43%)</title><rect x="1113.9" y="1011.0" width="16.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="1022.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.72%)</title><rect x="1113.9" y="995.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="1006.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.36%)</title><rect x="1118.1" y="979.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.1" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.72%)</title><rect x="1122.3" y="995.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.36%)</title><rect x="1122.3" y="979.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.3" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.36%)</title><rect x="1122.3" y="963.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.3" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.36%)</title><rect x="1126.6" y="979.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.36%)</title><rect x="1130.8" y="1027.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.36%)</title><rect x="1130.8" y="1011.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="1022.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.36%)</title><rect x="1130.8" y="995.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.8" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.72%)</title><rect x="1135.0" y="1027.0" width="8.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1138.0" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.15%)</title><rect x="1143.5" y="1043.0" width="25.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="1054.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.15%)</title><rect x="1143.5" y="1027.0" width="25.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.5" y="1038.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.15%)</title><rect x="1143.5" y="1011.0" width="25.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.5" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.15%)</title><rect x="1143.5" y="995.0" width="25.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.5" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.15%)</title><rect x="1143.5" y="979.0" width="25.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.5" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.15%)</title><rect x="1143.5" y="963.0" width="25.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="974.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1143.5" y="947.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.5" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1143.5" y="931.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.5" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1143.5" y="915.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1143.5" y="899.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1143.5" y="883.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1143.5" y="867.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1143.5" y="851.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1143.5" y="835.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.36%)</title><rect x="1143.5" y="819.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1143.5" y="803.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1143.5" y="787.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1143.5" y="771.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1143.5" y="755.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="766.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.36%)</title><rect x="1143.5" y="739.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.79%)</title><rect x="1147.7" y="947.0" width="21.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.7" y="958.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.79%)</title><rect x="1147.7" y="931.0" width="21.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.79%)</title><rect x="1147.7" y="915.0" width="21.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.7" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.79%)</title><rect x="1147.7" y="899.0" width="21.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.79%)</title><rect x="1147.7" y="883.0" width="21.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.79%)</title><rect x="1147.7" y="867.0" width="21.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.7" y="878.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1147.7" y="851.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1147.7" y="835.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1147.7" y="819.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1147.7" y="803.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.08%)</title><rect x="1147.7" y="787.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.08%)</title><rect x="1147.7" y="771.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1147.7" y="755.0" width="12.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1147.7" y="739.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1147.7" y="723.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1147.7" y="707.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.08%)</title><rect x="1147.7" y="691.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.08%)</title><rect x="1147.7" y="675.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1147.7" y="659.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1147.7" y="643.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1147.7" y="627.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1147.7" y="611.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.36%)</title><rect x="1147.7" y="595.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.7" y="606.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.36%)</title><rect x="1147.7" y="579.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="590.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.36%)</title><rect x="1147.7" y="563.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.7" y="574.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.36%)</title><rect x="1147.7" y="547.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.36%)</title><rect x="1147.7" y="531.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="542.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.36%)</title><rect x="1147.7" y="515.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1151.9" y="595.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1151.9" y="579.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.36%)</title><rect x="1151.9" y="563.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.36%)</title><rect x="1151.9" y="547.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.36%)</title><rect x="1151.9" y="531.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1151.9" y="515.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1151.9" y="499.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.36%)</title><rect x="1151.9" y="483.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.36%)</title><rect x="1151.9" y="467.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.36%)</title><rect x="1151.9" y="451.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 0.36%)</title><rect x="1151.9" y="435.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.2" y="563.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.2" y="547.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="531.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="515.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="499.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.36%)</title><rect x="1156.2" y="483.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.36%)</title><rect x="1156.2" y="467.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.36%)</title><rect x="1156.2" y="451.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.2" y="462.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.36%)</title><rect x="1156.2" y="435.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="446.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1156.2" y="419.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="851.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="835.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="819.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="803.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="787.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="771.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="755.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="739.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="723.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="707.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="691.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="675.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="659.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="643.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="627.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="611.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="595.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="579.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="563.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="547.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="531.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="515.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="499.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="483.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="467.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="451.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="435.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="419.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="403.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="387.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="371.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="355.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="339.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="323.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="307.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="291.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="275.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="259.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="243.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="227.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="211.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="195.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.4" y="179.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.4" y="163.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.4" y="147.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.4" y="131.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.4" y="115.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.4" y="99.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="83.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.36%)</title><rect x="1160.4" y="67.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.36%)</title><rect x="1160.4" y="51.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="35.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1164.6" y="851.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.6" y="835.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.6" y="819.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1164.6" y="803.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.36%)</title><rect x="1164.6" y="787.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.36%)</title><rect x="1168.9" y="1043.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1168.9" y="1027.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.08%)</title><rect x="1173.1" y="1075.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.08%)</title><rect x="1173.1" y="1059.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.08%)</title><rect x="1173.1" y="1043.0" width="12.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.08%)</title><rect x="1173.1" y="1027.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.36%)</title><rect x="1173.1" y="1011.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.1" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.36%)</title><rect x="1173.1" y="995.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.1" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.36%)</title><rect x="1173.1" y="979.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.36%)</title><rect x="1173.1" y="963.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.36%)</title><rect x="1173.1" y="947.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.36%)</title><rect x="1173.1" y="931.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.36%)</title><rect x="1173.1" y="915.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.1" y="926.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.36%)</title><rect x="1173.1" y="899.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="910.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.36%)</title><rect x="1173.1" y="883.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="894.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.36%)</title><rect x="1177.3" y="1011.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.36%)</title><rect x="1177.3" y="995.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.36%)</title><rect x="1177.3" y="979.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="990.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.36%)</title><rect x="1177.3" y="963.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.36%)</title><rect x="1177.3" y="947.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="958.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.36%)</title><rect x="1177.3" y="931.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="1177.3" y="915.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="1177.3" y="899.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.36%)</title><rect x="1181.5" y="1011.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.36%)</title><rect x="1181.5" y="995.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="1006.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.36%)</title><rect x="1181.5" y="979.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="990.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.36%)</title><rect x="1181.5" y="963.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="974.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.36%)</title><rect x="1185.8" y="1075.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1086.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.36%)</title><rect x="1185.8" y="1059.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="1070.0"></text>
</g>
</g>
</svg>
