<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (204 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.49%)</title><rect x="10.0" y="1299.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.49%)</title><rect x="15.8" y="1299.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.8" y="1310.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.49%)</title><rect x="15.8" y="1283.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 15.20%)</title><rect x="21.6" y="1299.0" width="179.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.6" y="1310.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 15.20%)</title><rect x="21.6" y="1283.0" width="179.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.6" y="1294.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.49%)</title><rect x="21.6" y="1267.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.49%)</title><rect x="21.6" y="1251.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="21.6" y="1235.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="21.6" y="1219.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="21.6" y="1203.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="21.6" y="1187.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="21.6" y="1171.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.49%)</title><rect x="21.6" y="1155.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="21.6" y="1139.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="21.6" y="1123.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.6" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.49%)</title><rect x="21.6" y="1107.0" width="5.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="24.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (26 samples, 12.75%)</title><rect x="27.4" y="1267.0" width="150.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.4" y="1278.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1706888974.accept (26 samples, 12.75%)</title><rect x="27.4" y="1251.0" width="150.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="1262.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (24 samples, 11.76%)</title><rect x="38.9" y="1235.0" width="138.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.9" y="1246.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (21 samples, 10.29%)</title><rect x="38.9" y="1219.0" width="121.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.9" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (21 samples, 10.29%)</title><rect x="38.9" y="1203.0" width="121.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.9" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (21 samples, 10.29%)</title><rect x="38.9" y="1187.0" width="121.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.9" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (21 samples, 10.29%)</title><rect x="38.9" y="1171.0" width="121.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.9" y="1182.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (21 samples, 10.29%)</title><rect x="38.9" y="1155.0" width="121.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.9" y="1166.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (21 samples, 10.29%)</title><rect x="38.9" y="1139.0" width="121.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.9" y="1150.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 6.86%)</title><rect x="38.9" y="1123.0" width="81.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.9" y="1134.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.98%)</title><rect x="38.9" y="1107.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.98%)</title><rect x="38.9" y="1091.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.98%)</title><rect x="38.9" y="1075.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.98%)</title><rect x="38.9" y="1059.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 5.88%)</title><rect x="50.5" y="1107.0" width="69.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.5" y="1118.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 5.88%)</title><rect x="50.5" y="1091.0" width="69.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.5" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 5.88%)</title><rect x="50.5" y="1075.0" width="69.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.5" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 5.88%)</title><rect x="50.5" y="1059.0" width="69.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.5" y="1070.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 5.39%)</title><rect x="56.3" y="1043.0" width="63.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.3" y="1054.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 4.90%)</title><rect x="56.3" y="1027.0" width="57.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="59.3" y="1038.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.49%)</title><rect x="56.3" y="1011.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="59.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.45%)</title><rect x="62.1" y="1011.0" width="28.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="65.1" y="1022.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 1.96%)</title><rect x="91.0" y="1011.0" width="23.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="94.0" y="1022.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.49%)</title><rect x="114.1" y="1027.0" width="5.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="117.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.43%)</title><rect x="119.9" y="1123.0" width="40.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.9" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.43%)</title><rect x="119.9" y="1107.0" width="40.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.9" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.43%)</title><rect x="119.9" y="1091.0" width="40.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.9" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.43%)</title><rect x="119.9" y="1075.0" width="40.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.9" y="1086.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.49%)</title><rect x="160.4" y="1219.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="163.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.49%)</title><rect x="160.4" y="1203.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.49%)</title><rect x="160.4" y="1187.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.98%)</title><rect x="166.2" y="1219.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.98%)</title><rect x="166.2" y="1203.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.98%)</title><rect x="166.2" y="1187.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.49%)</title><rect x="172.0" y="1171.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.49%)</title><rect x="172.0" y="1155.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 1.96%)</title><rect x="177.7" y="1267.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.7" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 1.96%)</title><rect x="177.7" y="1251.0" width="23.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.7" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.49%)</title><rect x="177.7" y="1235.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.49%)</title><rect x="177.7" y="1219.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.49%)</title><rect x="177.7" y="1203.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.49%)</title><rect x="177.7" y="1187.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.49%)</title><rect x="177.7" y="1171.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.49%)</title><rect x="177.7" y="1155.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.49%)</title><rect x="183.5" y="1235.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.49%)</title><rect x="183.5" y="1219.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.49%)</title><rect x="183.5" y="1203.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.49%)</title><rect x="183.5" y="1187.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.5" y="1198.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.49%)</title><rect x="183.5" y="1171.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="186.5" y="1182.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.49%)</title><rect x="183.5" y="1155.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="186.5" y="1166.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.49%)</title><rect x="183.5" y="1139.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="186.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.49%)</title><rect x="189.3" y="1235.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.49%)</title><rect x="189.3" y="1219.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.49%)</title><rect x="189.3" y="1203.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.49%)</title><rect x="189.3" y="1187.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.49%)</title><rect x="189.3" y="1171.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.49%)</title><rect x="189.3" y="1155.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.49%)</title><rect x="189.3" y="1139.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.49%)</title><rect x="189.3" y="1123.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.49%)</title><rect x="189.3" y="1107.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.49%)</title><rect x="189.3" y="1091.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.49%)</title><rect x="189.3" y="1075.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.49%)</title><rect x="189.3" y="1059.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.49%)</title><rect x="189.3" y="1043.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.49%)</title><rect x="189.3" y="1027.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.49%)</title><rect x="195.1" y="1235.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.49%)</title><rect x="195.1" y="1219.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.49%)</title><rect x="195.1" y="1203.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.49%)</title><rect x="195.1" y="1187.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="195.1" y="1171.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="195.1" y="1155.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="195.1" y="1139.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="195.1" y="1123.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="195.1" y="1107.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.49%)</title><rect x="195.1" y="1091.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.49%)</title><rect x="195.1" y="1075.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.49%)</title><rect x="195.1" y="1059.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="195.1" y="1043.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="198.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/727866731.test (1 samples, 0.49%)</title><rect x="195.1" y="1027.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.49%)</title><rect x="195.1" y="1011.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1056769878.test (1 samples, 0.49%)</title><rect x="195.1" y="995.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.49%)</title><rect x="195.1" y="979.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.49%)</title><rect x="195.1" y="963.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.49%)</title><rect x="195.1" y="947.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.49%)</title><rect x="195.1" y="931.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 30.39%)</title><rect x="200.9" y="1299.0" width="358.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.9" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 30.39%)</title><rect x="200.9" y="1283.0" width="358.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.9" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 30.39%)</title><rect x="200.9" y="1267.0" width="358.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.9" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/490617142.run (34 samples, 16.67%)</title><rect x="218.2" y="1251.0" width="196.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.2" y="1262.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (34 samples, 16.67%)</title><rect x="218.2" y="1235.0" width="196.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.2" y="1246.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (34 samples, 16.67%)</title><rect x="218.2" y="1219.0" width="196.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.2" y="1230.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (34 samples, 16.67%)</title><rect x="218.2" y="1203.0" width="196.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.2" y="1214.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (9 samples, 4.41%)</title><rect x="218.2" y="1187.0" width="52.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.2" y="1198.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (9 samples, 4.41%)</title><rect x="218.2" y="1171.0" width="52.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.2" y="1182.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (9 samples, 4.41%)</title><rect x="218.2" y="1155.0" width="52.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.2" y="1166.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 4.41%)</title><rect x="218.2" y="1139.0" width="52.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (9 samples, 4.41%)</title><rect x="218.2" y="1123.0" width="52.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="1134.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (9 samples, 4.41%)</title><rect x="218.2" y="1107.0" width="52.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.2" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.47%)</title><rect x="218.2" y="1091.0" width="17.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.49%)</title><rect x="224.0" y="1075.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.49%)</title><rect x="224.0" y="1059.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.49%)</title><rect x="229.8" y="1075.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.49%)</title><rect x="229.8" y="1059.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.49%)</title><rect x="229.8" y="1043.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.49%)</title><rect x="229.8" y="1027.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 2.94%)</title><rect x="235.6" y="1091.0" width="34.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.6" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.49%)</title><rect x="235.6" y="1075.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.49%)</title><rect x="235.6" y="1059.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.49%)</title><rect x="235.6" y="1043.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.49%)</title><rect x="235.6" y="1027.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.6" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="235.6" y="1011.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="238.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.49%)</title><rect x="235.6" y="995.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="238.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="235.6" y="979.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="238.6" y="990.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.49%)</title><rect x="235.6" y="963.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="238.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.45%)</title><rect x="241.4" y="1075.0" width="28.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.4" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.49%)</title><rect x="241.4" y="1059.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.49%)</title><rect x="247.2" y="1059.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.47%)</title><rect x="252.9" y="1059.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.47%)</title><rect x="252.9" y="1043.0" width="17.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.47%)</title><rect x="252.9" y="1027.0" width="17.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.98%)</title><rect x="252.9" y="1011.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.98%)</title><rect x="252.9" y="995.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.98%)</title><rect x="252.9" y="979.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.98%)</title><rect x="252.9" y="963.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.98%)</title><rect x="252.9" y="947.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.49%)</title><rect x="252.9" y="931.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.49%)</title><rect x="252.9" y="915.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.49%)</title><rect x="258.7" y="931.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.49%)</title><rect x="264.5" y="1011.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.49%)</title><rect x="264.5" y="995.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.49%)</title><rect x="264.5" y="979.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.49%)</title><rect x="264.5" y="963.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.5" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.49%)</title><rect x="264.5" y="947.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 11.27%)</title><rect x="270.3" y="1187.0" width="133.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.3" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.45%)</title><rect x="270.3" y="1171.0" width="28.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.3" y="1182.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.45%)</title><rect x="270.3" y="1155.0" width="28.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.3" y="1166.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.45%)</title><rect x="270.3" y="1139.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.3" y="1150.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.49%)</title><rect x="270.3" y="1123.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.49%)</title><rect x="270.3" y="1107.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.49%)</title><rect x="270.3" y="1091.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.49%)</title><rect x="270.3" y="1075.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.49%)</title><rect x="270.3" y="1059.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.96%)</title><rect x="276.1" y="1123.0" width="23.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.1" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.98%)</title><rect x="287.6" y="1107.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.98%)</title><rect x="287.6" y="1091.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.49%)</title><rect x="293.4" y="1075.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="299.2" y="1171.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="299.2" y="1155.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.49%)</title><rect x="299.2" y="1139.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 6.37%)</title><rect x="305.0" y="1171.0" width="75.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.0" y="1182.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 5.88%)</title><rect x="305.0" y="1155.0" width="69.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.0" y="1166.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.96%)</title><rect x="316.6" y="1139.0" width="23.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.6" y="1150.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.49%)</title><rect x="322.4" y="1123.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.49%)</title><rect x="322.4" y="1107.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.49%)</title><rect x="322.4" y="1091.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.49%)</title><rect x="322.4" y="1075.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.4" y="1086.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.49%)</title><rect x="328.1" y="1123.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="331.1" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.49%)</title><rect x="333.9" y="1123.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="336.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.recordOffset (1 samples, 0.49%)</title><rect x="339.7" y="1139.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.7" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.45%)</title><rect x="345.5" y="1139.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.5" y="1150.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.96%)</title><rect x="351.3" y="1123.0" width="23.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.3" y="1134.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.49%)</title><rect x="351.3" y="1107.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.49%)</title><rect x="351.3" y="1091.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.49%)</title><rect x="351.3" y="1075.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.49%)</title><rect x="351.3" y="1059.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.47%)</title><rect x="357.1" y="1107.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.47%)</title><rect x="357.1" y="1091.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.47%)</title><rect x="357.1" y="1075.0" width="17.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.49%)</title><rect x="362.8" y="1059.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.8" y="1070.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.49%)</title><rect x="368.6" y="1059.0" width="5.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="371.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="374.4" y="1155.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.98%)</title><rect x="380.2" y="1171.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.98%)</title><rect x="380.2" y="1155.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="383.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1499302915.process (2 samples, 0.98%)</title><rect x="380.2" y="1139.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 0.98%)</title><rect x="380.2" y="1123.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="383.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.98%)</title><rect x="380.2" y="1107.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.98%)</title><rect x="380.2" y="1091.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.98%)</title><rect x="380.2" y="1075.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="383.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.49%)</title><rect x="380.2" y="1059.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.49%)</title><rect x="380.2" y="1043.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.2" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.49%)</title><rect x="386.0" y="1059.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="389.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="386.0" y="1043.0" width="5.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="389.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.98%)</title><rect x="391.8" y="1171.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.98%)</title><rect x="391.8" y="1155.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.49%)</title><rect x="391.8" y="1139.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/103613300.accept (1 samples, 0.49%)</title><rect x="391.8" y="1123.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.49%)</title><rect x="391.8" y="1107.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.49%)</title><rect x="391.8" y="1091.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.8" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.49%)</title><rect x="391.8" y="1075.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.8" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.49%)</title><rect x="391.8" y="1059.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.8" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.49%)</title><rect x="391.8" y="1043.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="394.8" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.49%)</title><rect x="397.5" y="1139.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.5" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.98%)</title><rect x="403.3" y="1187.0" width="11.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="406.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 1.47%)</title><rect x="414.9" y="1251.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 1.47%)</title><rect x="414.9" y="1235.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.9" y="1246.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.49%)</title><rect x="414.9" y="1219.0" width="5.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="417.9" y="1230.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.49%)</title><rect x="414.9" y="1203.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="417.9" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.49%)</title><rect x="420.7" y="1219.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="423.7" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.49%)</title><rect x="426.5" y="1219.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="429.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.49%)</title><rect x="432.3" y="1251.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.49%)</title><rect x="432.3" y="1235.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.49%)</title><rect x="432.3" y="1219.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.98%)</title><rect x="438.0" y="1251.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="443.8" y="1235.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.49%)</title><rect x="443.8" y="1219.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 9.31%)</title><rect x="449.6" y="1251.0" width="109.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.6" y="1262.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (19 samples, 9.31%)</title><rect x="449.6" y="1235.0" width="109.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.6" y="1246.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (19 samples, 9.31%)</title><rect x="449.6" y="1219.0" width="109.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.6" y="1230.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 1.47%)</title><rect x="467.0" y="1203.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.98%)</title><rect x="472.7" y="1187.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.49%)</title><rect x="484.3" y="1203.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.49%)</title><rect x="484.3" y="1187.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 5.88%)</title><rect x="490.1" y="1203.0" width="69.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.1" y="1214.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 5.88%)</title><rect x="490.1" y="1187.0" width="69.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.1" y="1198.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 5.88%)</title><rect x="490.1" y="1171.0" width="69.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="493.1" y="1182.0">Unsafe_..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.49%)</title><rect x="490.1" y="1155.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.1" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.98%)</title><rect x="495.9" y="1155.0" width="11.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="498.9" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.49%)</title><rect x="501.7" y="1139.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="504.7" y="1150.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.49%)</title><rect x="501.7" y="1123.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="504.7" y="1134.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.98%)</title><rect x="507.5" y="1155.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.5" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.49%)</title><rect x="519.0" y="1155.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="522.0" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.47%)</title><rect x="524.8" y="1155.0" width="17.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="527.8" y="1166.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.49%)</title><rect x="542.2" y="1155.0" width="5.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="545.2" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.49%)</title><rect x="547.9" y="1155.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="550.9" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.49%)</title><rect x="553.7" y="1155.0" width="5.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="556.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="559.5" y="1299.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="562.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (1 samples, 0.49%)</title><rect x="559.5" y="1283.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="562.5" y="1294.0"></text>
</g>
<g>
<title>start_thread (108 samples, 52.94%)</title><rect x="565.3" y="1299.0" width="624.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="568.3" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (108 samples, 52.94%)</title><rect x="565.3" y="1283.0" width="624.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="568.3" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 8.33%)</title><rect x="565.3" y="1267.0" width="98.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="568.3" y="1278.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 2.94%)</title><rect x="565.3" y="1251.0" width="34.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="568.3" y="1262.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.94%)</title><rect x="565.3" y="1235.0" width="34.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="568.3" y="1246.0">G1..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.98%)</title><rect x="565.3" y="1219.0" width="11.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="568.3" y="1230.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.96%)</title><rect x="576.9" y="1219.0" width="23.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="579.9" y="1230.0">S..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 5.39%)</title><rect x="600.0" y="1251.0" width="63.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="1262.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 3.92%)</title><rect x="600.0" y="1235.0" width="46.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="1246.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.47%)</title><rect x="611.6" y="1219.0" width="17.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="614.6" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.49%)</title><rect x="623.1" y="1203.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.1" y="1214.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.47%)</title><rect x="628.9" y="1219.0" width="17.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="631.9" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.98%)</title><rect x="646.3" y="1235.0" width="11.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="649.3" y="1246.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.49%)</title><rect x="646.3" y="1219.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="649.3" y="1230.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.49%)</title><rect x="652.1" y="1219.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.1" y="1230.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.49%)</title><rect x="652.1" y="1203.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.1" y="1214.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.49%)</title><rect x="652.1" y="1187.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.1" y="1198.0"></text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.49%)</title><rect x="652.1" y="1171.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.1" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.49%)</title><rect x="657.8" y="1235.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.8" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.49%)</title><rect x="657.8" y="1219.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.8" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.49%)</title><rect x="657.8" y="1203.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.8" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.49%)</title><rect x="657.8" y="1187.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="660.8" y="1198.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.49%)</title><rect x="657.8" y="1171.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.8" y="1182.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.49%)</title><rect x="657.8" y="1155.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="660.8" y="1166.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.49%)</title><rect x="657.8" y="1139.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.8" y="1150.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 44.61%)</title><rect x="663.6" y="1267.0" width="526.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.6" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 44.61%)</title><rect x="663.6" y="1251.0" width="526.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="666.6" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 44.61%)</title><rect x="663.6" y="1235.0" width="526.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="666.6" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (90 samples, 44.12%)</title><rect x="663.6" y="1219.0" width="520.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.6" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (90 samples, 44.12%)</title><rect x="663.6" y="1203.0" width="520.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.6" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 18.63%)</title><rect x="663.6" y="1187.0" width="219.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="666.6" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.98%)</title><rect x="663.6" y="1171.0" width="11.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="666.6" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.98%)</title><rect x="663.6" y="1155.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="666.6" y="1166.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.49%)</title><rect x="669.4" y="1139.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="672.4" y="1150.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.49%)</title><rect x="669.4" y="1123.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="672.4" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.98%)</title><rect x="675.2" y="1171.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="678.2" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.49%)</title><rect x="675.2" y="1155.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="678.2" y="1166.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.49%)</title><rect x="675.2" y="1139.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="678.2" y="1150.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.49%)</title><rect x="681.0" y="1155.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="684.0" y="1166.0"></text>
</g>
<g>
<title>Assembler::nop(int) (1 samples, 0.49%)</title><rect x="681.0" y="1139.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.0" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.98%)</title><rect x="686.8" y="1171.0" width="11.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="689.8" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.98%)</title><rect x="686.8" y="1155.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="689.8" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.49%)</title><rect x="686.8" y="1139.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.49%)</title><rect x="692.5" y="1139.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="695.5" y="1150.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.49%)</title><rect x="692.5" y="1123.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="695.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 2.94%)</title><rect x="698.3" y="1171.0" width="34.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.3" y="1182.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 2.94%)</title><rect x="698.3" y="1155.0" width="34.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="701.3" y="1166.0">Ph..</text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.49%)</title><rect x="698.3" y="1139.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.98%)</title><rect x="704.1" y="1139.0" width="11.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="707.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.98%)</title><rect x="715.7" y="1139.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="718.7" y="1150.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.49%)</title><rect x="715.7" y="1123.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="718.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.49%)</title><rect x="721.5" y="1123.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.49%)</title><rect x="727.3" y="1139.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="730.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.49%)</title><rect x="733.0" y="1171.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 12.25%)</title><rect x="738.8" y="1171.0" width="144.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="741.8" y="1182.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.49%)</title><rect x="744.6" y="1155.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="747.6" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.49%)</title><rect x="744.6" y="1139.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="747.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.49%)</title><rect x="750.4" y="1155.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="753.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="750.4" y="1139.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="753.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.45%)</title><rect x="756.2" y="1155.0" width="28.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.2" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.49%)</title><rect x="779.3" y="1139.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="782.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.49%)</title><rect x="779.3" y="1123.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.47%)</title><rect x="785.1" y="1155.0" width="17.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="788.1" y="1166.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.49%)</title><rect x="790.9" y="1139.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.49%)</title><rect x="796.7" y="1139.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.49%)</title><rect x="802.5" y="1155.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.49%)</title><rect x="802.5" y="1139.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="805.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 2.45%)</title><rect x="808.2" y="1155.0" width="29.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="811.2" y="1166.0">Ph..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.49%)</title><rect x="825.6" y="1139.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="828.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.49%)</title><rect x="831.4" y="1139.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.98%)</title><rect x="837.2" y="1155.0" width="11.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="840.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.98%)</title><rect x="837.2" y="1139.0" width="11.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="840.2" y="1150.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.49%)</title><rect x="842.9" y="1123.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="845.9" y="1134.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.47%)</title><rect x="848.7" y="1155.0" width="17.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.7" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.47%)</title><rect x="848.7" y="1139.0" width="17.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="851.7" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.47%)</title><rect x="848.7" y="1123.0" width="17.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="851.7" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.47%)</title><rect x="848.7" y="1107.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="851.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.49%)</title><rect x="866.1" y="1155.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="866.1" y="1139.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="869.1" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.98%)</title><rect x="871.9" y="1155.0" width="11.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="874.9" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.49%)</title><rect x="877.6" y="1139.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="877.6" y="1123.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.6" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (42 samples, 20.59%)</title><rect x="883.4" y="1187.0" width="243.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="886.4" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 1.96%)</title><rect x="883.4" y="1171.0" width="23.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.4" y="1182.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 1.96%)</title><rect x="883.4" y="1155.0" width="23.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="886.4" y="1166.0">C..</text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="883.4" y="1139.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="883.4" y="1123.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.49%)</title><rect x="883.4" y="1107.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="886.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.47%)</title><rect x="889.2" y="1139.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.47%)</title><rect x="889.2" y="1123.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.47%)</title><rect x="889.2" y="1107.0" width="17.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.47%)</title><rect x="889.2" y="1091.0" width="17.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.47%)</title><rect x="889.2" y="1075.0" width="17.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="892.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.47%)</title><rect x="889.2" y="1059.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="1043.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="1027.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="892.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="1011.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="995.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="979.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="963.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="947.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="931.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="892.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="915.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="899.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="883.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="892.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.49%)</title><rect x="889.2" y="867.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="892.2" y="878.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.49%)</title><rect x="889.2" y="851.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.98%)</title><rect x="895.0" y="1043.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.49%)</title><rect x="895.0" y="1027.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="1038.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.49%)</title><rect x="895.0" y="1011.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="1027.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="1011.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="995.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="979.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="963.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="903.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="947.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="931.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="903.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="915.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="903.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="899.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="883.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="903.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="867.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="851.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="903.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="835.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="819.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="803.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="903.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="787.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="771.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="755.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="739.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="903.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="723.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="707.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="691.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="675.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="659.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="643.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="627.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="611.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="595.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="579.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="903.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="563.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="547.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="531.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="515.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="499.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="483.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="467.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="903.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="451.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="903.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="435.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="419.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="403.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="387.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="371.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="355.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="339.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="323.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="307.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="291.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="275.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="259.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="243.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="903.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="227.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="211.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="195.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="903.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="179.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="163.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="147.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="131.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="115.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="903.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="99.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="83.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="67.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.49%)</title><rect x="900.8" y="51.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.8" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.49%)</title><rect x="900.8" y="35.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.8" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.49%)</title><rect x="906.6" y="1171.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="909.6" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.49%)</title><rect x="906.6" y="1155.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.6" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.49%)</title><rect x="906.6" y="1139.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.6" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.49%)</title><rect x="906.6" y="1123.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="909.6" y="1134.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.49%)</title><rect x="906.6" y="1107.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.49%)</title><rect x="912.4" y="1171.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.49%)</title><rect x="912.4" y="1155.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 11.76%)</title><rect x="918.1" y="1171.0" width="138.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.1" y="1182.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.49%)</title><rect x="918.1" y="1155.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.49%)</title><rect x="918.1" y="1139.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.49%)</title><rect x="918.1" y="1123.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.1" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1155.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.9" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1139.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.9" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1123.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.9" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1107.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.9" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1091.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.9" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1075.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.9" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1059.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.9" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1043.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.9" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1027.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.9" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="1011.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.9" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="995.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.9" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="979.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.9" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="963.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="947.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.9" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="931.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="915.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="899.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="883.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.9" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="867.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.9" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="851.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="923.9" y="835.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.49%)</title><rect x="923.9" y="819.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.9" y="830.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.49%)</title><rect x="929.7" y="1155.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="932.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.98%)</title><rect x="935.5" y="1155.0" width="11.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.5" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.98%)</title><rect x="935.5" y="1139.0" width="11.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 5.39%)</title><rect x="947.1" y="1155.0" width="63.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.1" y="1166.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 4.41%)</title><rect x="958.6" y="1139.0" width="52.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.6" y="1150.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.49%)</title><rect x="970.2" y="1123.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 2.94%)</title><rect x="976.0" y="1123.0" width="34.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.0" y="1134.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.98%)</title><rect x="976.0" y="1107.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.49%)</title><rect x="981.8" y="1091.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 1.96%)</title><rect x="987.5" y="1107.0" width="23.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.5" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.49%)</title><rect x="1010.7" y="1155.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.49%)</title><rect x="1016.5" y="1155.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.49%)</title><rect x="1016.5" y="1139.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.98%)</title><rect x="1022.3" y="1155.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.98%)</title><rect x="1022.3" y="1139.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.96%)</title><rect x="1033.8" y="1155.0" width="23.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.8" y="1166.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.96%)</title><rect x="1033.8" y="1139.0" width="23.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.8" y="1150.0">P..</text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1033.8" y="1123.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.8" y="1134.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.49%)</title><rect x="1033.8" y="1107.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.8" y="1118.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.49%)</title><rect x="1033.8" y="1091.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.8" y="1102.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1039.6" y="1123.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.49%)</title><rect x="1039.6" y="1107.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.6" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.49%)</title><rect x="1039.6" y="1091.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.6" y="1102.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.49%)</title><rect x="1039.6" y="1075.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.6" y="1086.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1045.4" y="1123.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.4" y="1134.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.49%)</title><rect x="1045.4" y="1107.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.4" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1051.2" y="1123.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.2" y="1134.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.49%)</title><rect x="1051.2" y="1107.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.49%)</title><rect x="1057.0" y="1171.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.49%)</title><rect x="1057.0" y="1155.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 4.41%)</title><rect x="1062.7" y="1171.0" width="52.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.7" y="1182.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 3.92%)</title><rect x="1062.7" y="1155.0" width="46.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.7" y="1166.0">Phas..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1062.7" y="1139.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.7" y="1150.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.49%)</title><rect x="1062.7" y="1123.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.7" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1062.7" y="1107.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.7" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1062.7" y="1091.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.7" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.98%)</title><rect x="1068.5" y="1139.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.5" y="1150.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.49%)</title><rect x="1074.3" y="1123.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.98%)</title><rect x="1080.1" y="1139.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.98%)</title><rect x="1080.1" y="1123.0" width="11.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.1" y="1134.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.98%)</title><rect x="1080.1" y="1107.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.1" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.98%)</title><rect x="1091.7" y="1139.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.7" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.49%)</title><rect x="1091.7" y="1123.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.7" y="1134.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.49%)</title><rect x="1097.5" y="1123.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.5" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1103.2" y="1139.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.2" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.49%)</title><rect x="1103.2" y="1123.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.2" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.2" y="1107.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.2" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.2" y="1091.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.2" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1103.2" y="1075.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.2" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1103.2" y="1059.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.2" y="1070.0"></text>
</g>
<g>
<title>SafePointNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1109.0" y="1155.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.49%)</title><rect x="1114.8" y="1171.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.49%)</title><rect x="1114.8" y="1155.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.49%)</title><rect x="1114.8" y="1139.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="1150.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.49%)</title><rect x="1114.8" y="1123.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.8" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.49%)</title><rect x="1114.8" y="1107.0" width="5.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1117.8" y="1118.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.49%)</title><rect x="1120.6" y="1171.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.6" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.49%)</title><rect x="1120.6" y="1155.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.6" y="1166.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.49%)</title><rect x="1120.6" y="1139.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.6" y="1150.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.49%)</title><rect x="1120.6" y="1123.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="1134.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.49%)</title><rect x="1126.4" y="1187.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.4" y="1198.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.49%)</title><rect x="1126.4" y="1171.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.4" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1126.4" y="1155.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.4" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1126.4" y="1139.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1126.4" y="1123.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1126.4" y="1107.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1126.4" y="1091.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1126.4" y="1075.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1126.4" y="1059.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1126.4" y="1043.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1126.4" y="1027.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1126.4" y="1011.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1126.4" y="995.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1126.4" y="979.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1126.4" y="963.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1126.4" y="947.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1126.4" y="931.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1126.4" y="915.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1126.4" y="899.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1126.4" y="883.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1126.4" y="867.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1126.4" y="851.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1126.4" y="835.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1126.4" y="819.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1126.4" y="803.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1126.4" y="787.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.49%)</title><rect x="1126.4" y="771.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.4" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.49%)</title><rect x="1126.4" y="755.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="766.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.49%)</title><rect x="1126.4" y="739.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.4" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1126.4" y="723.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.4" y="734.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1126.4" y="707.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.4" y="718.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.49%)</title><rect x="1126.4" y="691.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.49%)</title><rect x="1126.4" y="675.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.4" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.49%)</title><rect x="1126.4" y="659.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.4" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.49%)</title><rect x="1126.4" y="643.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1129.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 4.41%)</title><rect x="1132.2" y="1187.0" width="52.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.2" y="1198.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 4.41%)</title><rect x="1132.2" y="1171.0" width="52.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.2" y="1182.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 4.41%)</title><rect x="1132.2" y="1155.0" width="52.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.2" y="1166.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 4.41%)</title><rect x="1132.2" y="1139.0" width="52.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="1150.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 4.41%)</title><rect x="1132.2" y="1123.0" width="52.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.2" y="1134.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 4.41%)</title><rect x="1132.2" y="1107.0" width="52.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.2" y="1118.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1132.2" y="1091.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.2" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.49%)</title><rect x="1132.2" y="1075.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.2" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.49%)</title><rect x="1132.2" y="1059.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.2" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.49%)</title><rect x="1132.2" y="1043.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.49%)</title><rect x="1132.2" y="1027.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.2" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1132.2" y="1011.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.2" y="1022.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.49%)</title><rect x="1132.2" y="995.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.92%)</title><rect x="1137.9" y="1091.0" width="46.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="1102.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.92%)</title><rect x="1137.9" y="1075.0" width="46.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.9" y="1086.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.92%)</title><rect x="1137.9" y="1059.0" width="46.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="1070.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.92%)</title><rect x="1137.9" y="1043.0" width="46.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.9" y="1054.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.92%)</title><rect x="1137.9" y="1027.0" width="46.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.9" y="1038.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.43%)</title><rect x="1137.9" y="1011.0" width="40.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="1022.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1137.9" y="995.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="1006.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.49%)</title><rect x="1137.9" y="979.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.9" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.49%)</title><rect x="1137.9" y="963.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.49%)</title><rect x="1137.9" y="947.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.9" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.49%)</title><rect x="1137.9" y="931.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1137.9" y="915.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1137.9" y="899.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.49%)</title><rect x="1137.9" y="883.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.49%)</title><rect x="1137.9" y="867.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.49%)</title><rect x="1137.9" y="851.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.96%)</title><rect x="1143.7" y="995.0" width="23.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="1006.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.96%)</title><rect x="1143.7" y="979.0" width="23.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.96%)</title><rect x="1143.7" y="963.0" width="23.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.7" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.96%)</title><rect x="1143.7" y="947.0" width="23.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.7" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.96%)</title><rect x="1143.7" y="931.0" width="23.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.7" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.96%)</title><rect x="1143.7" y="915.0" width="23.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="926.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.96%)</title><rect x="1143.7" y="899.0" width="23.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="910.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.96%)</title><rect x="1143.7" y="883.0" width="23.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.7" y="894.0">P..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.49%)</title><rect x="1143.7" y="867.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.49%)</title><rect x="1143.7" y="851.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.7" y="862.0"></text>
</g>
<g>
<title>SafePointNode::size_of() const (1 samples, 0.49%)</title><rect x="1143.7" y="835.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.47%)</title><rect x="1149.5" y="867.0" width="17.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.47%)</title><rect x="1149.5" y="851.0" width="17.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.47%)</title><rect x="1149.5" y="835.0" width="17.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.47%)</title><rect x="1149.5" y="819.0" width="17.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.47%)</title><rect x="1149.5" y="803.0" width="17.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.47%)</title><rect x="1149.5" y="787.0" width="17.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.47%)</title><rect x="1149.5" y="771.0" width="17.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.47%)</title><rect x="1149.5" y="755.0" width="17.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.47%)</title><rect x="1149.5" y="739.0" width="17.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1149.5" y="723.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.5" y="707.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1149.5" y="691.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1149.5" y="675.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1149.5" y="659.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1149.5" y="643.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1149.5" y="627.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="638.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.5" y="611.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="622.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.49%)</title><rect x="1149.5" y="595.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="606.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.49%)</title><rect x="1149.5" y="579.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.5" y="590.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_arraycopy(TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.49%)</title><rect x="1149.5" y="563.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="574.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_clear_array(TypePtr const*, Node*, BasicType, Node*, Node*, Node*) (1 samples, 0.49%)</title><rect x="1149.5" y="547.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="558.0"></text>
</g>
<g>
<title>ClearArrayNode::clear_memory(Node*, Node*, Node*, Node*, Node*, PhaseGVN*) (1 samples, 0.49%)</title><rect x="1149.5" y="531.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1149.5" y="515.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.49%)</title><rect x="1149.5" y="499.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="510.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.49%)</title><rect x="1149.5" y="483.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="494.0"></text>
</g>
<g>
<title>TypeAryPtr::eq(Type const*) const (1 samples, 0.49%)</title><rect x="1149.5" y="467.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1155.3" y="723.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.49%)</title><rect x="1155.3" y="707.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.49%)</title><rect x="1155.3" y="691.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.3" y="702.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.49%)</title><rect x="1155.3" y="675.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.3" y="686.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.49%)</title><rect x="1155.3" y="659.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.3" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1161.1" y="723.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.1" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.49%)</title><rect x="1161.1" y="707.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.98%)</title><rect x="1166.9" y="995.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="979.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1166.9" y="963.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1166.9" y="947.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1166.9" y="931.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1166.9" y="915.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1166.9" y="899.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="883.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1166.9" y="867.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1166.9" y="851.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1166.9" y="835.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1166.9" y="819.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1166.9" y="803.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1166.9" y="787.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1166.9" y="771.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1166.9" y="755.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1166.9" y="739.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1166.9" y="723.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1166.9" y="707.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.49%)</title><rect x="1166.9" y="691.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="702.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.49%)</title><rect x="1166.9" y="675.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="686.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.49%)</title><rect x="1166.9" y="659.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1166.9" y="643.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="654.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.49%)</title><rect x="1166.9" y="627.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1172.6" y="979.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1172.6" y="963.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1172.6" y="947.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1172.6" y="931.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1172.6" y="915.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1172.6" y="899.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1172.6" y="883.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1172.6" y="867.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1172.6" y="851.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1172.6" y="835.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1172.6" y="819.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1172.6" y="803.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1172.6" y="787.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1172.6" y="771.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.49%)</title><rect x="1172.6" y="755.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.49%)</title><rect x="1172.6" y="739.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.49%)</title><rect x="1172.6" y="723.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.49%)</title><rect x="1172.6" y="707.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1172.6" y="691.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1172.6" y="675.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.49%)</title><rect x="1172.6" y="659.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.49%)</title><rect x="1172.6" y="643.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.49%)</title><rect x="1172.6" y="627.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1172.6" y="611.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1172.6" y="595.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="606.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.49%)</title><rect x="1172.6" y="579.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="590.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.49%)</title><rect x="1172.6" y="563.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.49%)</title><rect x="1172.6" y="547.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="558.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.49%)</title><rect x="1172.6" y="531.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="542.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.49%)</title><rect x="1172.6" y="515.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="526.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.49%)</title><rect x="1172.6" y="499.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="510.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.49%)</title><rect x="1172.6" y="483.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="494.0"></text>
</g>
<g>
<title>AbstractInterpreter::can_be_compiled(methodHandle) (1 samples, 0.49%)</title><rect x="1172.6" y="467.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="478.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.49%)</title><rect x="1172.6" y="451.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1178.4" y="1011.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="1022.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.49%)</title><rect x="1178.4" y="995.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.49%)</title><rect x="1184.2" y="1219.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.49%)</title><rect x="1184.2" y="1203.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.49%)</title><rect x="1184.2" y="1187.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.49%)</title><rect x="1184.2" y="1171.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1182.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.49%)</title><rect x="1184.2" y="1155.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.49%)</title><rect x="1184.2" y="1139.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::check_icache() (1 samples, 0.49%)</title><rect x="1184.2" y="1123.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="1134.0"></text>
</g>
</g>
</svg>
