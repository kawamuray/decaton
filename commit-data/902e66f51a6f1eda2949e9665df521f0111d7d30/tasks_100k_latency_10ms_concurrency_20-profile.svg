<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (248 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 8.47%)</title><rect x="10.0" y="1315.0" width="99.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 8.47%)</title><rect x="10.0" y="1299.0" width="99.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.81%)</title><rect x="10.0" y="1283.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.81%)</title><rect x="10.0" y="1267.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="14.8" y="1251.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="14.8" y="1235.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="14.8" y="1219.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.81%)</title><rect x="19.5" y="1283.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.40%)</title><rect x="19.5" y="1267.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="19.5" y="1251.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="19.5" y="1235.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="19.5" y="1219.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="19.5" y="1203.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="19.5" y="1187.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.40%)</title><rect x="19.5" y="1171.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.40%)</title><rect x="24.3" y="1267.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 3.23%)</title><rect x="29.0" y="1283.0" width="38.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.0" y="1294.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1936967556.accept (8 samples, 3.23%)</title><rect x="29.0" y="1267.0" width="38.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="1278.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (8 samples, 3.23%)</title><rect x="29.0" y="1251.0" width="38.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.0" y="1262.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (7 samples, 2.82%)</title><rect x="29.0" y="1235.0" width="33.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.0" y="1246.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (7 samples, 2.82%)</title><rect x="29.0" y="1219.0" width="33.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.0" y="1230.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (7 samples, 2.82%)</title><rect x="29.0" y="1203.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="1214.0">co..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (7 samples, 2.82%)</title><rect x="29.0" y="1187.0" width="33.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.0" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 2.82%)</title><rect x="29.0" y="1171.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (7 samples, 2.82%)</title><rect x="29.0" y="1155.0" width="33.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.0" y="1166.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.40%)</title><rect x="62.3" y="1235.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.40%)</title><rect x="62.3" y="1219.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.63%)</title><rect x="67.1" y="1283.0" width="42.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.1" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.63%)</title><rect x="67.1" y="1267.0" width="42.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.1" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.82%)</title><rect x="67.1" y="1251.0" width="33.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.1" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.81%)</title><rect x="67.1" y="1235.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.81%)</title><rect x="67.1" y="1219.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.81%)</title><rect x="67.1" y="1203.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.81%)</title><rect x="67.1" y="1187.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="67.1" y="1171.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="67.1" y="1155.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.40%)</title><rect x="71.9" y="1171.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.40%)</title><rect x="71.9" y="1155.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.02%)</title><rect x="76.6" y="1235.0" width="23.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.6" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.61%)</title><rect x="76.6" y="1219.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.61%)</title><rect x="76.6" y="1203.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.61%)</title><rect x="76.6" y="1187.0" width="19.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.40%)</title><rect x="76.6" y="1171.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.40%)</title><rect x="76.6" y="1155.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.40%)</title><rect x="76.6" y="1139.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.40%)</title><rect x="76.6" y="1123.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.21%)</title><rect x="81.4" y="1171.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.21%)</title><rect x="81.4" y="1155.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.81%)</title><rect x="81.4" y="1139.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.81%)</title><rect x="81.4" y="1123.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.4" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="86.1" y="1107.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="89.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.40%)</title><rect x="90.9" y="1139.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.40%)</title><rect x="90.9" y="1123.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.40%)</title><rect x="95.6" y="1219.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.40%)</title><rect x="95.6" y="1203.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.40%)</title><rect x="95.6" y="1187.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.6" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.40%)</title><rect x="95.6" y="1171.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="95.6" y="1155.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.40%)</title><rect x="100.4" y="1251.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.40%)</title><rect x="100.4" y="1235.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.40%)</title><rect x="100.4" y="1219.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.40%)</title><rect x="100.4" y="1203.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/298323655.accept (1 samples, 0.40%)</title><rect x="100.4" y="1187.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.40%)</title><rect x="100.4" y="1171.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.40%)</title><rect x="100.4" y="1155.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.40%)</title><rect x="100.4" y="1139.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.40%)</title><rect x="100.4" y="1123.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="105.2" y="1251.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.40%)</title><rect x="105.2" y="1235.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.40%)</title><rect x="105.2" y="1219.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.40%)</title><rect x="105.2" y="1203.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="108.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.40%)</title><rect x="105.2" y="1187.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.&lt;init&gt; (1 samples, 0.40%)</title><rect x="105.2" y="1171.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (141 samples, 56.85%)</title><rect x="109.9" y="1315.0" width="670.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.9" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (141 samples, 56.85%)</title><rect x="109.9" y="1299.0" width="670.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.9" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (141 samples, 56.85%)</title><rect x="109.9" y="1283.0" width="670.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.9" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/2079934152.run (131 samples, 52.82%)</title><rect x="119.4" y="1267.0" width="623.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.4" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/2079934152.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (131 samples, 52.82%)</title><rect x="119.4" y="1251.0" width="623.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.4" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 52.82%)</title><rect x="119.4" y="1235.0" width="623.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.4" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (128 samples, 51.61%)</title><rect x="119.4" y="1219.0" width="609.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.4" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (24 samples, 9.68%)</title><rect x="124.2" y="1203.0" width="114.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.2" y="1214.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (24 samples, 9.68%)</title><rect x="124.2" y="1187.0" width="114.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.2" y="1198.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (24 samples, 9.68%)</title><rect x="124.2" y="1171.0" width="114.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.2" y="1182.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (21 samples, 8.47%)</title><rect x="138.5" y="1155.0" width="99.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.5" y="1166.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (21 samples, 8.47%)</title><rect x="138.5" y="1139.0" width="99.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.5" y="1150.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (21 samples, 8.47%)</title><rect x="138.5" y="1123.0" width="99.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.5" y="1134.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.61%)</title><rect x="138.5" y="1107.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="141.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.61%)</title><rect x="138.5" y="1091.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.5" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="138.5" y="1075.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="141.5" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="138.5" y="1059.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="141.5" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="138.5" y="1043.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="141.5" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="138.5" y="1027.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="141.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.21%)</title><rect x="143.2" y="1075.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.81%)</title><rect x="143.2" y="1059.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.81%)</title><rect x="143.2" y="1043.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.40%)</title><rect x="152.7" y="1059.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.40%)</title><rect x="152.7" y="1043.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.40%)</title><rect x="152.7" y="1027.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="152.7" y="1011.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="152.7" y="995.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 6.05%)</title><rect x="157.5" y="1107.0" width="71.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="1118.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.40%)</title><rect x="157.5" y="1091.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="157.5" y="1075.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.81%)</title><rect x="162.3" y="1091.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.81%)</title><rect x="162.3" y="1075.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.81%)</title><rect x="162.3" y="1059.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.81%)</title><rect x="162.3" y="1043.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="167.0" y="1027.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="170.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 4.84%)</title><rect x="171.8" y="1091.0" width="57.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.8" y="1102.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.42%)</title><rect x="171.8" y="1075.0" width="28.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.8" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.81%)</title><rect x="186.0" y="1059.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.81%)</title><rect x="186.0" y="1043.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.81%)</title><rect x="186.0" y="1027.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.40%)</title><rect x="195.6" y="1059.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.42%)</title><rect x="200.3" y="1075.0" width="28.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.3" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.42%)</title><rect x="200.3" y="1059.0" width="28.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.3" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.42%)</title><rect x="200.3" y="1043.0" width="28.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.3" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.81%)</title><rect x="205.1" y="1027.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="209.8" y="1011.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="209.8" y="995.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="209.8" y="979.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="209.8" y="963.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.40%)</title><rect x="209.8" y="947.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.40%)</title><rect x="214.6" y="1027.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.81%)</title><rect x="219.4" y="1027.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.81%)</title><rect x="219.4" y="1011.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.81%)</title><rect x="219.4" y="995.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.81%)</title><rect x="228.9" y="1107.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.81%)</title><rect x="228.9" y="1091.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.81%)</title><rect x="228.9" y="1075.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.81%)</title><rect x="228.9" y="1059.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.81%)</title><rect x="228.9" y="1043.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (95 samples, 38.31%)</title><rect x="238.4" y="1203.0" width="452.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.4" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 5.65%)</title><rect x="238.4" y="1187.0" width="66.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.4" y="1198.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 5.65%)</title><rect x="238.4" y="1171.0" width="66.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.4" y="1182.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 3.63%)</title><rect x="262.2" y="1155.0" width="42.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.2" y="1166.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 2.82%)</title><rect x="271.7" y="1139.0" width="33.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.7" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (7 samples, 2.82%)</title><rect x="271.7" y="1123.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.7" y="1134.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (17 samples, 6.85%)</title><rect x="305.0" y="1187.0" width="80.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.0" y="1198.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (17 samples, 6.85%)</title><rect x="305.0" y="1171.0" width="80.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="1182.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.82%)</title><rect x="309.8" y="1155.0" width="33.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.8" y="1166.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.42%)</title><rect x="314.5" y="1139.0" width="28.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.5" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.02%)</title><rect x="319.3" y="1123.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="322.3" y="1134.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.81%)</title><rect x="328.8" y="1107.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.81%)</title><rect x="328.8" y="1091.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.81%)</title><rect x="328.8" y="1075.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="331.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="328.8" y="1059.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="331.8" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="328.8" y="1043.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="328.8" y="1027.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.8" y="1038.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.40%)</title><rect x="328.8" y="1011.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.8" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="333.5" y="1059.0" width="4.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="336.5" y="1070.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.40%)</title><rect x="338.3" y="1107.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="341.3" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 3.63%)</title><rect x="343.1" y="1155.0" width="42.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.1" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.23%)</title><rect x="347.8" y="1139.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.8" y="1150.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="347.8" y="1123.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="347.8" y="1107.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="347.8" y="1091.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.82%)</title><rect x="352.6" y="1123.0" width="33.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.6" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.02%)</title><rect x="362.1" y="1107.0" width="23.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.1" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.61%)</title><rect x="366.9" y="1091.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.40%)</title><rect x="371.6" y="1075.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="374.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.81%)</title><rect x="376.4" y="1075.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (55 samples, 22.18%)</title><rect x="385.9" y="1187.0" width="261.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.9" y="1198.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (55 samples, 22.18%)</title><rect x="385.9" y="1171.0" width="261.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.9" y="1182.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1495522827.process (48 samples, 19.35%)</title><rect x="385.9" y="1155.0" width="228.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.9" y="1166.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (47 samples, 18.95%)</title><rect x="385.9" y="1139.0" width="223.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.9" y="1150.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (47 samples, 18.95%)</title><rect x="385.9" y="1123.0" width="223.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.9" y="1134.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="385.9" y="1107.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.9" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="385.9" y="1091.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.9" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="385.9" y="1075.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.9" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="385.9" y="1059.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (45 samples, 18.15%)</title><rect x="390.6" y="1107.0" width="214.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.6" y="1118.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 18.15%)</title><rect x="390.6" y="1091.0" width="214.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.6" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (44 samples, 17.74%)</title><rect x="395.4" y="1075.0" width="209.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="398.4" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.21%)</title><rect x="404.9" y="1059.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="407.9" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="419.2" y="1059.0" width="4.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="422.2" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.81%)</title><rect x="424.0" y="1059.0" width="9.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="427.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="428.7" y="1043.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="431.7" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.40%)</title><rect x="433.5" y="1059.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.5" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.40%)</title><rect x="438.2" y="1059.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="441.2" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 13.71%)</title><rect x="443.0" y="1059.0" width="161.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="446.0" y="1070.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.81%)</title><rect x="452.5" y="1043.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="455.5" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.40%)</title><rect x="457.3" y="1027.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="460.3" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.81%)</title><rect x="462.0" y="1043.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="465.0" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.40%)</title><rect x="471.5" y="1043.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="474.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 6.45%)</title><rect x="476.3" y="1043.0" width="76.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="479.3" y="1054.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 2.02%)</title><rect x="552.4" y="1043.0" width="23.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="555.4" y="1054.0">_..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.21%)</title><rect x="576.2" y="1043.0" width="14.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.2" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="590.5" y="1043.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="593.5" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.81%)</title><rect x="595.2" y="1043.0" width="9.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="598.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="604.8" y="1107.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="604.8" y="1091.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="604.8" y="1075.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="604.8" y="1059.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="607.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.40%)</title><rect x="609.5" y="1139.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="612.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 1.21%)</title><rect x="614.3" y="1155.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 1.21%)</title><rect x="614.3" y="1139.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/375974537.get$Lambda (3 samples, 1.21%)</title><rect x="614.3" y="1123.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/375974537.&lt;init&gt; (2 samples, 0.81%)</title><rect x="619.0" y="1107.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="622.0" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="628.5" y="1155.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="631.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="628.5" y="1139.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="631.5" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="628.5" y="1123.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="631.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="633.3" y="1155.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.81%)</title><rect x="638.1" y="1155.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.63%)</title><rect x="647.6" y="1187.0" width="42.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="650.6" y="1198.0">java..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.21%)</title><rect x="676.1" y="1171.0" width="14.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="679.1" y="1182.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.21%)</title><rect x="676.1" y="1155.0" width="14.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="679.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.02%)</title><rect x="690.4" y="1203.0" width="23.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.4" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.61%)</title><rect x="695.2" y="1187.0" width="19.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="698.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.61%)</title><rect x="695.2" y="1171.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$302/1923699126.accept (4 samples, 1.61%)</title><rect x="695.2" y="1155.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (4 samples, 1.61%)</title><rect x="695.2" y="1139.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1035006805.complete (4 samples, 1.61%)</title><rect x="695.2" y="1123.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (4 samples, 1.61%)</title><rect x="695.2" y="1107.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="698.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.61%)</title><rect x="695.2" y="1091.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.2" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.61%)</title><rect x="695.2" y="1075.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.61%)</title><rect x="695.2" y="1059.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.2" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.61%)</title><rect x="695.2" y="1043.0" width="19.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="698.2" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.61%)</title><rect x="695.2" y="1027.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.2" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.21%)</title><rect x="714.2" y="1203.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="717.2" y="1214.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.21%)</title><rect x="714.2" y="1187.0" width="14.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="717.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.21%)</title><rect x="728.5" y="1219.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.5" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="738.0" y="1203.0" width="4.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="741.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="738.0" y="1187.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="741.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.81%)</title><rect x="742.7" y="1267.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.81%)</title><rect x="742.7" y="1251.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.81%)</title><rect x="742.7" y="1235.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.81%)</title><rect x="742.7" y="1219.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.42%)</title><rect x="752.3" y="1267.0" width="28.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="755.3" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.42%)</title><rect x="752.3" y="1251.0" width="28.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="755.3" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.02%)</title><rect x="757.0" y="1235.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.0" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.02%)</title><rect x="757.0" y="1219.0" width="23.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.0" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.02%)</title><rect x="757.0" y="1203.0" width="23.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.0" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.02%)</title><rect x="757.0" y="1187.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.0" y="1198.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.81%)</title><rect x="780.8" y="1315.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="783.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.40%)</title><rect x="780.8" y="1299.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="783.8" y="1310.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.40%)</title><rect x="780.8" y="1283.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="783.8" y="1294.0"></text>
</g>
<g>
<title>ObjectMonitor::DeferredInitialize() (1 samples, 0.40%)</title><rect x="780.8" y="1267.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.40%)</title><rect x="785.6" y="1299.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="785.6" y="1283.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.40%)</title><rect x="785.6" y="1267.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.40%)</title><rect x="785.6" y="1251.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="785.6" y="1235.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.40%)</title><rect x="785.6" y="1219.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.40%)</title><rect x="785.6" y="1203.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.40%)</title><rect x="785.6" y="1187.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.6" y="1198.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.40%)</title><rect x="785.6" y="1171.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.6" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.40%)</title><rect x="785.6" y="1155.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="788.6" y="1166.0"></text>
</g>
<g>
<title>_init (1 samples, 0.40%)</title><rect x="785.6" y="1139.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="788.6" y="1150.0"></text>
</g>
<g>
<title>start_thread (84 samples, 33.87%)</title><rect x="790.3" y="1315.0" width="399.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="793.3" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (84 samples, 33.87%)</title><rect x="790.3" y="1299.0" width="399.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="793.3" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.23%)</title><rect x="790.3" y="1283.0" width="38.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="793.3" y="1294.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.23%)</title><rect x="790.3" y="1267.0" width="38.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="793.3" y="1278.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.42%)</title><rect x="790.3" y="1251.0" width="28.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="793.3" y="1262.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.42%)</title><rect x="790.3" y="1235.0" width="28.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="793.3" y="1246.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.21%)</title><rect x="804.6" y="1219.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.6" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.81%)</title><rect x="809.4" y="1203.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="812.4" y="1214.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.40%)</title><rect x="814.1" y="1187.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.1" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.81%)</title><rect x="818.9" y="1251.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="821.9" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.81%)</title><rect x="818.9" y="1235.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.9" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.81%)</title><rect x="818.9" y="1219.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="821.9" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.81%)</title><rect x="818.9" y="1203.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="821.9" y="1214.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.81%)</title><rect x="818.9" y="1187.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.9" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.81%)</title><rect x="818.9" y="1171.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="821.9" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.81%)</title><rect x="818.9" y="1155.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="821.9" y="1166.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.81%)</title><rect x="818.9" y="1139.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.9" y="1150.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.81%)</title><rect x="818.9" y="1123.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="821.9" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (76 samples, 30.65%)</title><rect x="828.4" y="1283.0" width="361.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="831.4" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 30.65%)</title><rect x="828.4" y="1267.0" width="361.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="831.4" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 30.65%)</title><rect x="828.4" y="1251.0" width="361.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="831.4" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 30.65%)</title><rect x="828.4" y="1235.0" width="361.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="831.4" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (74 samples, 29.84%)</title><rect x="828.4" y="1219.0" width="352.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="831.4" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (74 samples, 29.84%)</title><rect x="828.4" y="1203.0" width="352.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="831.4" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 19.76%)</title><rect x="828.4" y="1187.0" width="233.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.4" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.61%)</title><rect x="828.4" y="1171.0" width="19.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="831.4" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="833.1" y="1155.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.1" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.40%)</title><rect x="833.1" y="1139.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.1" y="1150.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.40%)</title><rect x="837.9" y="1155.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.9" y="1166.0"></text>
</g>
<g>
<title>compN_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.40%)</title><rect x="842.7" y="1155.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="845.7" y="1166.0"></text>
</g>
<g>
<title>MacroAssembler::cmp_narrow_oop(RegisterImpl*, _jobject*) (1 samples, 0.40%)</title><rect x="842.7" y="1139.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="845.7" y="1150.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_find_index(_jobject*) (1 samples, 0.40%)</title><rect x="842.7" y="1123.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="845.7" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.02%)</title><rect x="847.4" y="1171.0" width="23.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.4" y="1182.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="847.4" y="1155.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.40%)</title><rect x="847.4" y="1139.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.4" y="1150.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.40%)</title><rect x="847.4" y="1123.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.4" y="1134.0"></text>
</g>
<g>
<title>MachNode::MachNode() (1 samples, 0.40%)</title><rect x="847.4" y="1107.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="850.4" y="1118.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.40%)</title><rect x="847.4" y="1091.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="850.4" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.61%)</title><rect x="852.2" y="1155.0" width="19.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.2" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.40%)</title><rect x="856.9" y="1139.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.81%)</title><rect x="861.7" y="1139.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="864.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.81%)</title><rect x="871.2" y="1171.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.40%)</title><rect x="871.2" y="1155.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.2" y="1166.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.40%)</title><rect x="871.2" y="1139.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="874.2" y="1150.0"></text>
</g>
<g>
<title>Block::is_block() (1 samples, 0.40%)</title><rect x="871.2" y="1123.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.2" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.40%)</title><rect x="876.0" y="1155.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="876.0" y="1139.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="879.0" y="1150.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.40%)</title><rect x="876.0" y="1123.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="879.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.40%)</title><rect x="880.7" y="1171.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="883.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 14.92%)</title><rect x="885.5" y="1171.0" width="176.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="888.5" y="1182.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.40%)</title><rect x="890.2" y="1155.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.40%)</title><rect x="895.0" y="1155.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="895.0" y="1139.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.81%)</title><rect x="899.8" y="1155.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="902.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="904.5" y="1139.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.02%)</title><rect x="909.3" y="1155.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="912.3" y="1166.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.40%)</title><rect x="923.5" y="1139.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.40%)</title><rect x="928.3" y="1139.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.63%)</title><rect x="933.1" y="1155.0" width="42.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="936.1" y="1166.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.40%)</title><rect x="937.8" y="1139.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.8" y="1150.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.81%)</title><rect x="942.6" y="1139.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.61%)</title><rect x="952.1" y="1139.0" width="19.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.81%)</title><rect x="961.6" y="1123.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.40%)</title><rect x="971.1" y="1139.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.61%)</title><rect x="975.9" y="1155.0" width="19.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.40%)</title><rect x="994.9" y="1155.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.21%)</title><rect x="999.7" y="1155.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1002.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.81%)</title><rect x="1004.4" y="1139.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1007.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1009.2" y="1123.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.2" y="1134.0"></text>
</g>
<g>
<title>rRegPOper::in_RegMask(int) const (1 samples, 0.40%)</title><rect x="1009.2" y="1107.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.40%)</title><rect x="1014.0" y="1155.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.40%)</title><rect x="1018.7" y="1155.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.7" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.40%)</title><rect x="1018.7" y="1139.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.40%)</title><rect x="1018.7" y="1123.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1021.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.21%)</title><rect x="1023.5" y="1155.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.5" y="1166.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="1028.2" y="1139.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="1033.0" y="1139.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.0" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.02%)</title><rect x="1037.7" y="1155.0" width="23.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.7" y="1166.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="1047.3" y="1139.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.3" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.81%)</title><rect x="1052.0" y="1139.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.0" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 6.85%)</title><rect x="1061.5" y="1187.0" width="80.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.5" y="1198.0">Compile::..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 2.82%)</title><rect x="1061.5" y="1171.0" width="33.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.5" y="1182.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.40%)</title><rect x="1061.5" y="1155.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.81%)</title><rect x="1066.3" y="1155.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.81%)</title><rect x="1075.8" y="1155.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.40%)</title><rect x="1080.6" y="1139.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.40%)</title><rect x="1080.6" y="1123.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.40%)</title><rect x="1080.6" y="1107.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.40%)</title><rect x="1085.3" y="1155.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1090.1" y="1155.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.40%)</title><rect x="1090.1" y="1139.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.40%)</title><rect x="1090.1" y="1123.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1090.1" y="1107.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.40%)</title><rect x="1090.1" y="1091.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.23%)</title><rect x="1094.8" y="1171.0" width="38.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.8" y="1182.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 3.23%)</title><rect x="1094.8" y="1155.0" width="38.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.8" y="1166.0">Pha..</text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.40%)</title><rect x="1094.8" y="1139.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.8" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1099.6" y="1139.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.6" y="1150.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1099.6" y="1123.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.6" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1099.6" y="1107.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.6" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1099.6" y="1091.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1104.4" y="1139.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1104.4" y="1123.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.4" y="1134.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.40%)</title><rect x="1104.4" y="1107.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.4" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1109.1" y="1139.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1113.9" y="1139.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="1150.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.40%)</title><rect x="1113.9" y="1123.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.9" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 1.21%)</title><rect x="1118.6" y="1139.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 1.21%)</title><rect x="1118.6" y="1123.0" width="14.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.21%)</title><rect x="1118.6" y="1107.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.21%)</title><rect x="1118.6" y="1091.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.21%)</title><rect x="1118.6" y="1075.0" width="14.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="1059.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="1043.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="1027.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="1011.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="995.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="979.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="963.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.81%)</title><rect x="1118.6" y="947.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="931.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="915.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="899.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="883.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="867.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="851.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="835.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="819.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="803.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.6" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1118.6" y="787.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.6" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1118.6" y="771.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.6" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1123.4" y="931.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.4" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1123.4" y="915.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.4" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1128.1" y="1059.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.1" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="1043.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.1" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.81%)</title><rect x="1132.9" y="1171.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.9" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 0.81%)</title><rect x="1132.9" y="1155.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.9" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.40%)</title><rect x="1137.7" y="1139.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.7" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.40%)</title><rect x="1137.7" y="1123.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.7" y="1134.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.40%)</title><rect x="1137.7" y="1107.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1137.7" y="1091.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1137.7" y="1075.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="1086.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.40%)</title><rect x="1137.7" y="1059.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.42%)</title><rect x="1142.4" y="1187.0" width="28.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.4" y="1198.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.42%)</title><rect x="1142.4" y="1171.0" width="28.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.4" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.42%)</title><rect x="1142.4" y="1155.0" width="28.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.4" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.42%)</title><rect x="1142.4" y="1139.0" width="28.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.4" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.42%)</title><rect x="1142.4" y="1123.0" width="28.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.4" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.42%)</title><rect x="1142.4" y="1107.0" width="28.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="1118.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.42%)</title><rect x="1142.4" y="1091.0" width="28.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.4" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.42%)</title><rect x="1142.4" y="1075.0" width="28.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.4" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.02%)</title><rect x="1142.4" y="1059.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.02%)</title><rect x="1142.4" y="1043.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="1054.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.02%)</title><rect x="1142.4" y="1027.0" width="23.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="1038.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.02%)</title><rect x="1142.4" y="1011.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="1022.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.02%)</title><rect x="1142.4" y="995.0" width="23.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.4" y="1006.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.02%)</title><rect x="1142.4" y="979.0" width="23.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.4" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.02%)</title><rect x="1142.4" y="963.0" width="23.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.4" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.02%)</title><rect x="1142.4" y="947.0" width="23.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.4" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.02%)</title><rect x="1142.4" y="931.0" width="23.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.02%)</title><rect x="1142.4" y="915.0" width="23.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.4" y="926.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.02%)</title><rect x="1142.4" y="899.0" width="23.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="910.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.02%)</title><rect x="1142.4" y="883.0" width="23.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.4" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.02%)</title><rect x="1142.4" y="867.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.02%)</title><rect x="1142.4" y="851.0" width="23.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.4" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.02%)</title><rect x="1142.4" y="835.0" width="23.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.61%)</title><rect x="1142.4" y="819.0" width="19.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.4" y="830.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="803.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.40%)</title><rect x="1142.4" y="787.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1142.4" y="771.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1142.4" y="755.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.4" y="766.0"></text>
</g>
<g>
<title>ProjNode::cmp(Node const&amp;) const (1 samples, 0.40%)</title><rect x="1142.4" y="739.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.21%)</title><rect x="1147.2" y="803.0" width="14.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.21%)</title><rect x="1147.2" y="787.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1147.2" y="771.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1147.2" y="755.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1147.2" y="739.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1147.2" y="723.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1147.2" y="707.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1147.2" y="691.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1147.2" y="675.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1147.2" y="659.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1147.2" y="643.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.2" y="627.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.2" y="611.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.2" y="595.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.2" y="579.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.2" y="563.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.2" y="547.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.2" y="531.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.2" y="515.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.2" y="499.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.2" y="483.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.2" y="467.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.2" y="451.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.2" y="435.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.2" y="419.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.2" y="403.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.2" y="387.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.2" y="371.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.2" y="355.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.2" y="339.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.2" y="323.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.2" y="307.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.2" y="291.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.2" y="275.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.2" y="259.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.2" y="243.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.2" y="227.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.2" y="211.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.2" y="195.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.2" y="179.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.2" y="163.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="147.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="131.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.40%)</title><rect x="1147.2" y="115.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="99.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.2" y="110.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.40%)</title><rect x="1147.2" y="83.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.2" y="94.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="67.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="78.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.40%)</title><rect x="1147.2" y="51.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.40%)</title><rect x="1147.2" y="35.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.2" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.40%)</title><rect x="1151.9" y="627.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.40%)</title><rect x="1151.9" y="611.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1151.9" y="595.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1151.9" y="579.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.40%)</title><rect x="1156.7" y="771.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.7" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1156.7" y="755.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.7" y="766.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.40%)</title><rect x="1161.5" y="819.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1161.5" y="803.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1161.5" y="787.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="798.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.40%)</title><rect x="1161.5" y="771.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.40%)</title><rect x="1166.2" y="1059.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="1070.0"></text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.40%)</title><rect x="1166.2" y="1043.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="1054.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.81%)</title><rect x="1171.0" y="1187.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="1198.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1171.0" y="1171.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1182.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1175.7" y="1171.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.81%)</title><rect x="1180.5" y="1219.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.81%)</title><rect x="1180.5" y="1203.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.81%)</title><rect x="1180.5" y="1187.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.40%)</title><rect x="1180.5" y="1171.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.40%)</title><rect x="1180.5" y="1155.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1180.5" y="1139.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1180.5" y="1123.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1180.5" y="1107.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1180.5" y="1091.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1180.5" y="1075.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1180.5" y="1059.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>ciInstanceKlass::exact_klass() (1 samples, 0.40%)</title><rect x="1180.5" y="1043.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.40%)</title><rect x="1185.2" y="1171.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.40%)</title><rect x="1185.2" y="1155.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="1166.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.40%)</title><rect x="1185.2" y="1139.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1150.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.40%)</title><rect x="1185.2" y="1123.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.40%)</title><rect x="1185.2" y="1107.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
</g>
</svg>
