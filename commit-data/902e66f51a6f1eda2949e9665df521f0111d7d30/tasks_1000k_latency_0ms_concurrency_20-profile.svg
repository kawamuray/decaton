<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (1,050 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (254 samples, 24.19%)</title><rect x="10.0" y="1187.0" width="285.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (254 samples, 24.19%)</title><rect x="10.0" y="1171.0" width="285.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.38%)</title><rect x="10.0" y="1155.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.38%)</title><rect x="10.0" y="1139.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/849305336.accept (4 samples, 0.38%)</title><rect x="10.0" y="1123.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.38%)</title><rect x="10.0" y="1107.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.38%)</title><rect x="10.0" y="1091.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.38%)</title><rect x="10.0" y="1075.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.38%)</title><rect x="14.5" y="1155.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.38%)</title><rect x="14.5" y="1139.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="14.5" y="1123.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.10%)</title><rect x="14.5" y="1107.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="14.5" y="1091.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.29%)</title><rect x="15.6" y="1123.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.29%)</title><rect x="15.6" y="1107.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="16.7" y="1091.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="16.7" y="1075.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="16.7" y="1059.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="16.7" y="1043.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="16.7" y="1027.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="16.7" y="1011.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$250/1792270675.test (1 samples, 0.10%)</title><rect x="16.7" y="995.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="17.9" y="1043.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="19.0" y="1155.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="19.0" y="1139.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="19.0" y="1123.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="19.0" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="19.0" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="19.0" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="19.0" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.0" y="1043.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="19.0" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="19.0" y="1011.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="19.0" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$179/2030191727.get (1 samples, 0.10%)</title><rect x="19.0" y="979.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="20.1" y="1155.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="20.1" y="1139.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="23.1" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.10%)</title><rect x="21.2" y="1155.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (189 samples, 18.00%)</title><rect x="22.4" y="1155.0" width="212.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="1166.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/621467933.accept (179 samples, 17.05%)</title><rect x="23.5" y="1139.0" width="201.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="1150.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (179 samples, 17.05%)</title><rect x="23.5" y="1123.0" width="201.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.5" y="1134.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (150 samples, 14.29%)</title><rect x="24.6" y="1107.0" width="168.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.6" y="1118.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (150 samples, 14.29%)</title><rect x="24.6" y="1091.0" width="168.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.6" y="1102.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (150 samples, 14.29%)</title><rect x="24.6" y="1075.0" width="168.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.6" y="1086.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (150 samples, 14.29%)</title><rect x="24.6" y="1059.0" width="168.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.6" y="1070.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (150 samples, 14.29%)</title><rect x="24.6" y="1043.0" width="168.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.6" y="1054.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (150 samples, 14.29%)</title><rect x="24.6" y="1027.0" width="168.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.6" y="1038.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 9.90%)</title><rect x="69.6" y="1011.0" width="116.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.6" y="1022.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 1.24%)</title><rect x="69.6" y="995.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 1.24%)</title><rect x="69.6" y="979.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.24%)</title><rect x="69.6" y="963.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.95%)</title><rect x="84.2" y="995.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.95%)</title><rect x="84.2" y="979.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.29%)</title><rect x="87.5" y="963.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.5" y="974.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.29%)</title><rect x="87.5" y="947.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="90.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.38%)</title><rect x="90.9" y="963.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 7.71%)</title><rect x="95.4" y="995.0" width="91.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.4" y="1006.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 7.71%)</title><rect x="95.4" y="979.0" width="91.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.4" y="990.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 7.43%)</title><rect x="95.4" y="963.0" width="87.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.4" y="974.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 7.43%)</title><rect x="95.4" y="947.0" width="87.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.4" y="958.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 7.43%)</title><rect x="95.4" y="931.0" width="87.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.4" y="942.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 6.95%)</title><rect x="95.4" y="915.0" width="82.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="98.4" y="926.0">Unsafe_Un..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="97.7" y="899.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="100.7" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="98.8" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="101.8" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (51 samples, 4.86%)</title><rect x="99.9" y="899.0" width="57.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="102.9" y="910.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.38%)</title><rect x="157.2" y="899.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="160.2" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.33%)</title><rect x="161.7" y="899.0" width="15.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="164.7" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.38%)</title><rect x="177.4" y="915.0" width="4.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="180.4" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="181.9" y="915.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="184.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.29%)</title><rect x="183.1" y="963.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="186.4" y="1011.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.10%)</title><rect x="186.4" y="995.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.10%)</title><rect x="186.4" y="979.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.38%)</title><rect x="187.6" y="1011.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.38%)</title><rect x="187.6" y="995.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.29%)</title><rect x="187.6" y="979.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="190.9" y="979.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="190.9" y="963.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.9" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="192.1" y="1011.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="195.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.48%)</title><rect x="193.2" y="1107.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.48%)</title><rect x="193.2" y="1091.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.38%)</title><rect x="198.8" y="1107.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.38%)</title><rect x="198.8" y="1091.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.38%)</title><rect x="198.8" y="1075.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (17 samples, 1.62%)</title><rect x="203.3" y="1107.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="204.4" y="1091.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 1.43%)</title><rect x="205.5" y="1091.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.29%)</title><rect x="219.0" y="1075.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="219.0" y="1059.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.10%)</title><rect x="219.0" y="1043.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="219.0" y="1027.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="219.0" y="1011.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="222.0" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="219.0" y="995.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="222.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="220.2" y="1059.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.2" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="222.4" y="1107.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.4" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="224.6" y="1139.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="227.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.38%)</title><rect x="225.8" y="1139.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.38%)</title><rect x="225.8" y="1123.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.38%)</title><rect x="225.8" y="1107.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.38%)</title><rect x="225.8" y="1091.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.8" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.29%)</title><rect x="226.9" y="1075.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (4 samples, 0.38%)</title><rect x="230.3" y="1139.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.38%)</title><rect x="230.3" y="1123.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 5.14%)</title><rect x="234.8" y="1155.0" width="60.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.8" y="1166.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 5.14%)</title><rect x="234.8" y="1139.0" width="60.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.8" y="1150.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.52%)</title><rect x="234.8" y="1123.0" width="41.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.8" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.52%)</title><rect x="234.8" y="1107.0" width="41.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.8" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 3.52%)</title><rect x="234.8" y="1091.0" width="41.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.8" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 3.14%)</title><rect x="234.8" y="1075.0" width="37.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.8" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 3.14%)</title><rect x="234.8" y="1059.0" width="37.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.8" y="1070.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.81%)</title><rect x="234.8" y="1043.0" width="21.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.8" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (10 samples, 0.95%)</title><rect x="235.9" y="1027.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.67%)</title><rect x="247.1" y="1027.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.67%)</title><rect x="247.1" y="1011.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.67%)</title><rect x="247.1" y="995.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.67%)</title><rect x="247.1" y="979.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.67%)</title><rect x="247.1" y="963.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.67%)</title><rect x="247.1" y="947.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.67%)</title><rect x="247.1" y="931.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="255.0" y="1027.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.10%)</title><rect x="255.0" y="1011.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.10%)</title><rect x="255.0" y="995.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="255.0" y="979.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseOffset (1 samples, 0.10%)</title><rect x="255.0" y="963.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.33%)</title><rect x="256.1" y="1043.0" width="15.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.33%)</title><rect x="256.1" y="1027.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (14 samples, 1.33%)</title><rect x="256.1" y="1011.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.1" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (14 samples, 1.33%)</title><rect x="256.1" y="995.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.1" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (8 samples, 0.76%)</title><rect x="261.7" y="979.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.7" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="269.6" y="963.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="272.6" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.10%)</title><rect x="270.7" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.7" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="270.7" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="273.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.29%)</title><rect x="271.8" y="1075.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.29%)</title><rect x="271.8" y="1059.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (3 samples, 0.29%)</title><rect x="271.8" y="1043.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.29%)</title><rect x="271.8" y="1027.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.8" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="273.0" y="1011.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="276.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="274.1" y="1011.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="275.2" y="1075.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="275.2" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="275.2" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="275.2" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.2" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="275.2" y="1011.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="278.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.57%)</title><rect x="276.3" y="1123.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.48%)</title><rect x="276.3" y="1107.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.19%)</title><rect x="276.3" y="1091.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="276.3" y="1075.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1790047016.accept (2 samples, 0.19%)</title><rect x="276.3" y="1059.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.19%)</title><rect x="276.3" y="1043.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.19%)</title><rect x="276.3" y="1027.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="276.3" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="276.3" y="995.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="276.3" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="277.5" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="277.5" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="277.5" y="979.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.29%)</title><rect x="278.6" y="1091.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.19%)</title><rect x="278.6" y="1075.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="278.6" y="1059.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="279.7" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="279.7" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="279.7" y="1011.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="279.7" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="279.7" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="279.7" y="963.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.7" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="279.7" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="279.7" y="931.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/644782114.apply (1 samples, 0.10%)</title><rect x="279.7" y="915.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="280.8" y="1075.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="280.8" y="1059.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="280.8" y="1043.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="280.8" y="1027.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="282.0" y="1107.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="282.0" y="1091.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="282.0" y="1075.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.10%)</title><rect x="282.0" y="1059.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.10%)</title><rect x="282.0" y="1043.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.10%)</title><rect x="282.0" y="1027.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="282.0" y="1011.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="282.0" y="995.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.10%)</title><rect x="283.1" y="1123.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.57%)</title><rect x="284.2" y="1123.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.57%)</title><rect x="284.2" y="1107.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.57%)</title><rect x="284.2" y="1091.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.48%)</title><rect x="284.2" y="1075.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.19%)</title><rect x="284.2" y="1059.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.19%)</title><rect x="284.2" y="1043.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.2" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.19%)</title><rect x="284.2" y="1027.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="287.2" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.19%)</title><rect x="284.2" y="1011.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.29%)</title><rect x="286.5" y="1059.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.29%)</title><rect x="286.5" y="1043.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.29%)</title><rect x="286.5" y="1027.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.29%)</title><rect x="286.5" y="1011.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.29%)</title><rect x="286.5" y="995.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.29%)</title><rect x="286.5" y="979.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.5" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="286.5" y="963.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="289.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="289.8" y="1075.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="289.8" y="1059.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.8" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="289.8" y="1043.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="289.8" y="1027.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="289.8" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.10%)</title><rect x="289.8" y="995.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.8" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.10%)</title><rect x="289.8" y="979.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.8" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="289.8" y="963.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="292.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.29%)</title><rect x="291.0" y="1123.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.29%)</title><rect x="291.0" y="1107.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="291.0" y="1091.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1535804526.accept (2 samples, 0.19%)</title><rect x="291.0" y="1075.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.19%)</title><rect x="291.0" y="1059.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="291.0" y="1043.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="291.0" y="1027.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.10%)</title><rect x="291.0" y="1011.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="291.0" y="995.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="291.0" y="979.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="292.1" y="1043.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.10%)</title><rect x="293.2" y="1091.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.10%)</title><rect x="293.2" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="293.2" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="293.2" y="1043.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.2" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="293.2" y="1027.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="293.2" y="1011.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="293.2" y="995.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.2" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="294.3" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="297.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="294.3" y="1107.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="297.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (669 samples, 63.71%)</title><rect x="295.4" y="1187.0" width="751.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.4" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (669 samples, 63.71%)</title><rect x="295.4" y="1171.0" width="751.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.4" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (669 samples, 63.71%)</title><rect x="295.4" y="1155.0" width="751.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.4" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1699461199.run (427 samples, 40.67%)</title><rect x="296.6" y="1139.0" width="479.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.6" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (427 samples, 40.67%)</title><rect x="296.6" y="1123.0" width="479.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.6" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (426 samples, 40.57%)</title><rect x="297.7" y="1107.0" width="478.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.7" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (424 samples, 40.38%)</title><rect x="297.7" y="1091.0" width="476.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.7" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (1 samples, 0.10%)</title><rect x="302.2" y="1075.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.10%)</title><rect x="303.3" y="1075.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.10%)</title><rect x="303.3" y="1059.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$195/281619069.get (1 samples, 0.10%)</title><rect x="303.3" y="1043.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="306.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.10%)</title><rect x="303.3" y="1027.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="303.3" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="306.3" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="303.3" y="995.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="306.3" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="303.3" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="306.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="303.3" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="306.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (136 samples, 12.95%)</title><rect x="304.4" y="1075.0" width="152.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.4" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="310.1" y="1059.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="313.1" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="310.1" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="313.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="311.2" y="1059.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="314.2" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.67%)</title><rect x="312.3" y="1059.0" width="7.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="315.3" y="1070.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="315.7" y="1043.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="318.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (122 samples, 11.62%)</title><rect x="320.2" y="1059.0" width="137.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.2" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (122 samples, 11.62%)</title><rect x="320.2" y="1043.0" width="137.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.2" y="1054.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 11.62%)</title><rect x="320.2" y="1027.0" width="137.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.2" y="1038.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 11.62%)</title><rect x="320.2" y="1011.0" width="137.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.2" y="1022.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (122 samples, 11.62%)</title><rect x="320.2" y="995.0" width="137.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.2" y="1006.0">com/fasterxml/jac..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="320.2" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="323.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="320.2" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="323.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (29 samples, 2.76%)</title><rect x="321.3" y="979.0" width="32.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.3" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.57%)</title><rect x="321.3" y="963.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.57%)</title><rect x="321.3" y="947.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.57%)</title><rect x="321.3" y="931.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.57%)</title><rect x="321.3" y="915.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.57%)</title><rect x="321.3" y="899.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="326.9" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 2.19%)</title><rect x="328.0" y="963.0" width="25.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.0" y="974.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="328.0" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="328.0" y="931.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="331.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 2.10%)</title><rect x="329.2" y="947.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.2" y="958.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="329.2" y="931.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="332.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="329.2" y="915.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="332.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.29%)</title><rect x="330.3" y="931.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.29%)</title><rect x="330.3" y="915.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="331.4" y="899.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.10%)</title><rect x="332.5" y="899.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (18 samples, 1.71%)</title><rect x="333.7" y="931.0" width="20.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="333.7" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="336.7" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="333.7" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="336.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="333.7" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="336.7" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.10%)</title><rect x="333.7" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="336.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (17 samples, 1.62%)</title><rect x="334.8" y="915.0" width="19.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (10 samples, 0.95%)</title><rect x="334.8" y="899.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.57%)</title><rect x="346.0" y="899.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (2 samples, 0.19%)</title><rect x="348.3" y="883.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.19%)</title><rect x="350.5" y="883.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="352.8" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 8.38%)</title><rect x="353.9" y="979.0" width="98.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.9" y="990.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.57%)</title><rect x="353.9" y="963.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.57%)</title><rect x="353.9" y="947.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.57%)</title><rect x="353.9" y="931.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (6 samples, 0.57%)</title><rect x="353.9" y="915.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (6 samples, 0.57%)</title><rect x="353.9" y="899.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 0.38%)</title><rect x="356.1" y="883.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.48%)</title><rect x="360.6" y="963.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.48%)</title><rect x="360.6" y="947.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="365.1" y="931.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.86%)</title><rect x="366.2" y="963.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.76%)</title><rect x="367.4" y="947.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.48%)</title><rect x="369.6" y="931.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.38%)</title><rect x="370.7" y="915.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="373.0" y="899.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="375.2" y="931.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.29%)</title><rect x="376.4" y="963.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.29%)</title><rect x="376.4" y="947.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.4" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="376.4" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="379.4" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="376.4" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="379.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="376.4" y="899.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="379.4" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="376.4" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="379.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="377.5" y="931.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="377.5" y="915.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="377.5" y="899.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="378.6" y="883.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 6.19%)</title><rect x="379.7" y="963.0" width="73.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.7" y="974.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.62%)</title><rect x="379.7" y="947.0" width="19.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.38%)</title><rect x="386.5" y="931.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.38%)</title><rect x="386.5" y="915.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.38%)</title><rect x="386.5" y="899.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.38%)</title><rect x="391.0" y="931.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.38%)</title><rect x="391.0" y="915.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.29%)</title><rect x="395.5" y="931.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 4.57%)</title><rect x="398.8" y="947.0" width="54.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.8" y="958.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 4.57%)</title><rect x="398.8" y="931.0" width="54.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.8" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 4.57%)</title><rect x="398.8" y="915.0" width="54.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.8" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 2.00%)</title><rect x="401.1" y="899.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.1" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.48%)</title><rect x="413.4" y="883.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.48%)</title><rect x="413.4" y="867.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="416.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.48%)</title><rect x="413.4" y="851.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="416.8" y="835.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="419.1" y="883.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="419.1" y="867.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.29%)</title><rect x="421.3" y="883.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.38%)</title><rect x="424.7" y="899.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.38%)</title><rect x="424.7" y="883.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="424.7" y="867.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="424.7" y="851.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.38%)</title><rect x="424.7" y="835.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.67%)</title><rect x="429.2" y="899.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.67%)</title><rect x="429.2" y="883.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.67%)</title><rect x="429.2" y="867.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.67%)</title><rect x="429.2" y="851.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="432.2" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.67%)</title><rect x="429.2" y="835.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.2" y="846.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.67%)</title><rect x="429.2" y="819.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.2" y="830.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (7 samples, 0.67%)</title><rect x="429.2" y="803.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.38%)</title><rect x="437.0" y="899.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.38%)</title><rect x="437.0" y="883.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.38%)</title><rect x="437.0" y="867.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="440.4" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (10 samples, 0.95%)</title><rect x="441.5" y="899.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="451.7" y="883.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="451.7" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="454.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="451.7" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="451.7" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="454.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="451.7" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="454.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.38%)</title><rect x="452.8" y="979.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.38%)</title><rect x="452.8" y="963.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.38%)</title><rect x="452.8" y="947.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.38%)</title><rect x="452.8" y="931.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.38%)</title><rect x="452.8" y="915.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="456.2" y="899.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (253 samples, 24.10%)</title><rect x="457.3" y="1075.0" width="284.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.3" y="1086.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (47 samples, 4.48%)</title><rect x="457.3" y="1059.0" width="52.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.3" y="1070.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="457.3" y="1043.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.3" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 4.38%)</title><rect x="458.4" y="1043.0" width="51.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.4" y="1054.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (45 samples, 4.29%)</title><rect x="459.5" y="1027.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.5" y="1038.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.95%)</title><rect x="459.5" y="1011.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="462.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.10%)</title><rect x="460.6" y="995.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="463.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="461.8" y="995.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="462.9" y="979.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="462.9" y="963.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.57%)</title><rect x="464.0" y="995.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.57%)</title><rect x="464.0" y="979.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.57%)</title><rect x="464.0" y="963.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.0" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.10%)</title><rect x="470.8" y="1011.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.14%)</title><rect x="471.9" y="1011.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="474.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="482.0" y="995.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.29%)</title><rect x="482.0" y="979.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 2.00%)</title><rect x="485.4" y="1011.0" width="23.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.4" y="1022.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 1.05%)</title><rect x="496.6" y="995.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 1.05%)</title><rect x="496.6" y="979.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="499.6" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.48%)</title><rect x="503.4" y="963.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="509.0" y="1011.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.76%)</title><rect x="510.1" y="1059.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.76%)</title><rect x="510.1" y="1043.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="513.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.76%)</title><rect x="510.1" y="1027.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="513.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (138 samples, 13.14%)</title><rect x="519.1" y="1059.0" width="155.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="522.1" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="521.3" y="1043.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="524.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="521.3" y="1027.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="524.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (133 samples, 12.67%)</title><rect x="522.5" y="1043.0" width="149.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="525.5" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (43 samples, 4.10%)</title><rect x="528.1" y="1027.0" width="48.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.1" y="1038.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (17 samples, 1.62%)</title><rect x="540.4" y="1011.0" width="19.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.43%)</title><rect x="542.7" y="995.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="545.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.76%)</title><rect x="549.4" y="979.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.4" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.76%)</title><rect x="549.4" y="963.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.4" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.76%)</title><rect x="549.4" y="947.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="549.4" y="931.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="550.6" y="931.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="553.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.57%)</title><rect x="551.7" y="931.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="554.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="551.7" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="554.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="551.7" y="899.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="554.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.29%)</title><rect x="552.8" y="915.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="555.8" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="552.8" y="899.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="555.8" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="552.8" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="555.8" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="553.9" y="899.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="556.9" y="910.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="553.9" y="883.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.9" y="894.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="553.9" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="556.9" y="878.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="555.0" y="867.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="558.0" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.19%)</title><rect x="556.2" y="915.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="559.2" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="556.2" y="899.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="559.2" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="556.2" y="883.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="559.2" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="556.2" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="559.2" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="556.2" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="559.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="556.2" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="559.2" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="556.2" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="559.2" y="830.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="557.3" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="560.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.10%)</title><rect x="558.4" y="979.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.4" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (15 samples, 1.43%)</title><rect x="559.5" y="1011.0" width="16.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="562.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.57%)</title><rect x="576.4" y="1027.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="576.4" y="1011.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="576.4" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.4" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="576.4" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="576.4" y="963.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.4" y="974.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="576.4" y="947.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.48%)</title><rect x="577.5" y="1011.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="580.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.48%)</title><rect x="577.5" y="995.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="580.5" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 7.52%)</title><rect x="583.1" y="1027.0" width="88.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="586.1" y="1038.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 7.14%)</title><rect x="587.6" y="1011.0" width="84.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.6" y="1022.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.48%)</title><rect x="587.6" y="995.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.48%)</title><rect x="587.6" y="979.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="590.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.48%)</title><rect x="587.6" y="963.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.48%)</title><rect x="587.6" y="947.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="590.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.19%)</title><rect x="591.0" y="931.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="592.1" y="915.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="595.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (70 samples, 6.67%)</title><rect x="593.3" y="995.0" width="78.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.3" y="1006.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (62 samples, 5.90%)</title><rect x="602.2" y="979.0" width="69.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.2" y="990.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 3.43%)</title><rect x="631.5" y="963.0" width="40.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.5" y="974.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.38%)</title><rect x="657.3" y="947.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.67%)</title><rect x="661.8" y="947.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.8" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="668.6" y="931.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="671.6" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="668.6" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="668.6" y="899.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="671.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="668.6" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="671.6" y="894.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="668.6" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="671.6" y="878.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.19%)</title><rect x="669.7" y="947.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="672.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="671.9" y="1043.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.9" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="673.0" y="1043.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="676.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 4.00%)</title><rect x="674.2" y="1059.0" width="47.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="677.2" y="1070.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="674.2" y="1043.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (41 samples, 3.90%)</title><rect x="675.3" y="1043.0" width="46.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.3" y="1054.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1699342677.process (22 samples, 2.10%)</title><rect x="676.4" y="1027.0" width="24.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.4" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (22 samples, 2.10%)</title><rect x="676.4" y="1011.0" width="24.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.4" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.81%)</title><rect x="676.4" y="995.0" width="21.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.4" y="1006.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.48%)</title><rect x="678.7" y="979.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.7" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.48%)</title><rect x="678.7" y="963.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.7" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.48%)</title><rect x="678.7" y="947.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.7" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 0.48%)</title><rect x="678.7" y="931.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (4 samples, 0.38%)</title><rect x="679.8" y="915.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="682.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.29%)</title><rect x="684.3" y="979.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="684.3" y="963.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="687.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.19%)</title><rect x="685.4" y="963.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="688.4" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="685.4" y="947.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="688.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="687.7" y="979.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.67%)</title><rect x="689.9" y="979.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="695.5" y="963.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="698.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="695.5" y="947.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.29%)</title><rect x="697.8" y="995.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="698.9" y="979.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="700.0" y="963.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="700.0" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="703.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="701.1" y="1027.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.38%)</title><rect x="701.1" y="1011.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.38%)</title><rect x="705.6" y="1027.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="708.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.38%)</title><rect x="705.6" y="1011.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/640192648.get$Lambda (4 samples, 0.38%)</title><rect x="705.6" y="995.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/640192648.&lt;init&gt; (4 samples, 0.38%)</title><rect x="705.6" y="979.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.57%)</title><rect x="710.1" y="1027.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="712.4" y="1011.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.4" y="1022.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.29%)</title><rect x="712.4" y="995.0" width="3.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="715.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="715.8" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="718.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="716.9" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="719.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="716.9" y="1011.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.29%)</title><rect x="718.0" y="1027.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="719.1" y="1011.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="722.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.71%)</title><rect x="721.4" y="1059.0" width="20.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.71%)</title><rect x="721.4" y="1043.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="724.4" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="727.0" y="1027.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="730.0" y="1038.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="727.0" y="1011.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="730.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.76%)</title><rect x="731.5" y="1027.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1876160423.accept (8 samples, 0.76%)</title><rect x="731.5" y="1011.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.76%)</title><rect x="731.5" y="995.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="734.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.76%)</title><rect x="731.5" y="979.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="734.5" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.76%)</title><rect x="731.5" y="963.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.5" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.76%)</title><rect x="731.5" y="947.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.5" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="733.7" y="931.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="736.7" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="734.9" y="931.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="737.9" y="942.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="734.9" y="915.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="737.9" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="739.4" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.4" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="740.5" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.71%)</title><rect x="741.6" y="1075.0" width="20.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.71%)</title><rect x="741.6" y="1059.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.71%)</title><rect x="741.6" y="1043.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1876160423.accept (18 samples, 1.71%)</title><rect x="741.6" y="1027.0" width="20.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (18 samples, 1.71%)</title><rect x="741.6" y="1011.0" width="20.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (18 samples, 1.71%)</title><rect x="741.6" y="995.0" width="20.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.6" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (18 samples, 1.71%)</title><rect x="741.6" y="979.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.6" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (18 samples, 1.71%)</title><rect x="741.6" y="963.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 1.05%)</title><rect x="761.8" y="1075.0" width="12.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.8" y="1086.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.95%)</title><rect x="763.0" y="1059.0" width="11.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="766.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.19%)</title><rect x="774.2" y="1091.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.2" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="774.2" y="1075.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="777.2" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="775.3" y="1059.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="778.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.10%)</title><rect x="776.4" y="1139.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.19%)</title><rect x="777.6" y="1139.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="777.6" y="1123.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="777.6" y="1107.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="780.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.19%)</title><rect x="777.6" y="1091.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (238 samples, 22.67%)</title><rect x="779.8" y="1139.0" width="267.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.8" y="1150.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (238 samples, 22.67%)</title><rect x="779.8" y="1123.0" width="267.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="782.8" y="1134.0">java/util/concurrent/LinkedBlockingQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (209 samples, 19.90%)</title><rect x="797.8" y="1107.0" width="234.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.8" y="1118.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (23 samples, 2.19%)</title><rect x="807.9" y="1091.0" width="25.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.9" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (8 samples, 0.76%)</title><rect x="833.8" y="1091.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (8 samples, 0.76%)</title><rect x="833.8" y="1075.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (169 samples, 16.10%)</title><rect x="842.7" y="1091.0" width="190.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="845.7" y="1102.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (159 samples, 15.14%)</title><rect x="854.0" y="1075.0" width="178.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="857.0" y="1086.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.38%)</title><rect x="861.8" y="1059.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.8" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.10%)</title><rect x="866.3" y="1059.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.3" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (144 samples, 13.71%)</title><rect x="867.5" y="1059.0" width="161.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="870.5" y="1070.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="870.8" y="1043.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="873.8" y="1054.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="873.1" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.1" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 2.00%)</title><rect x="874.2" y="1043.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.2" y="1054.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.67%)</title><rect x="882.1" y="1027.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.1" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="883.2" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="886.2" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="884.3" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.3" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="884.3" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="887.3" y="1006.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.29%)</title><rect x="885.4" y="1011.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="888.4" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="888.8" y="1011.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="891.8" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.48%)</title><rect x="889.9" y="1027.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.9" y="1038.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="895.6" y="1027.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.6" y="1038.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="897.8" y="1043.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.8" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="900.1" y="1043.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.1" y="1054.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.76%)</title><rect x="902.3" y="1043.0" width="9.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="905.3" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.76%)</title><rect x="911.3" y="1043.0" width="32.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="914.3" y="1054.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (53 samples, 5.05%)</title><rect x="943.9" y="1043.0" width="59.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="946.9" y="1054.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.57%)</title><rect x="1003.4" y="1043.0" width="6.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1006.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1010.2" y="1043.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1013.2" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.19%)</title><rect x="1011.3" y="1043.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1014.3" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1013.6" y="1043.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1016.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="1016.9" y="1043.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1019.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1019.2" y="1043.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1022.2" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.48%)</title><rect x="1020.3" y="1043.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.3" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="1025.9" y="1043.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1028.9" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1028.2" y="1043.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1031.2" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1029.3" y="1059.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1032.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.57%)</title><rect x="1032.7" y="1107.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.67%)</title><rect x="1039.4" y="1107.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1042.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.67%)</title><rect x="1039.4" y="1091.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1042.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.67%)</title><rect x="1039.4" y="1075.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1042.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.67%)</title><rect x="1039.4" y="1059.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1042.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1047.3" y="1187.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1050.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1047.3" y="1171.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1050.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1047.3" y="1155.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1050.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="1047.3" y="1139.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1050.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="1047.3" y="1123.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1050.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="1047.3" y="1107.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1050.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="1047.3" y="1091.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1050.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.10%)</title><rect x="1047.3" y="1075.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1050.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.10%)</title><rect x="1047.3" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1050.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="1047.3" y="1043.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1050.3" y="1054.0"></text>
</g>
<g>
<title>start_thread (126 samples, 12.00%)</title><rect x="1048.4" y="1187.0" width="141.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1051.4" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (126 samples, 12.00%)</title><rect x="1048.4" y="1171.0" width="141.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1051.4" y="1182.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.81%)</title><rect x="1048.4" y="1155.0" width="21.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.4" y="1166.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.67%)</title><rect x="1048.4" y="1139.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.4" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.67%)</title><rect x="1048.4" y="1123.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.4" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1048.4" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.4" y="1118.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.57%)</title><rect x="1049.5" y="1107.0" width="6.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1052.5" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 1.05%)</title><rect x="1056.3" y="1139.0" width="12.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.3" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.29%)</title><rect x="1056.3" y="1123.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.3" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1056.3" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.3" y="1118.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.19%)</title><rect x="1057.4" y="1107.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1060.4" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.29%)</title><rect x="1059.6" y="1123.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.6" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.19%)</title><rect x="1059.6" y="1107.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.6" y="1118.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1059.6" y="1091.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.6" y="1102.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1060.8" y="1075.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.8" y="1086.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.10%)</title><rect x="1060.8" y="1059.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.8" y="1070.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.10%)</title><rect x="1060.8" y="1043.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.8" y="1054.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.10%)</title><rect x="1060.8" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.8" y="1038.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.10%)</title><rect x="1060.8" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.8" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1061.9" y="1107.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.9" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1061.9" y="1091.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.9" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.48%)</title><rect x="1063.0" y="1123.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.0" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.48%)</title><rect x="1063.0" y="1107.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.0" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.48%)</title><rect x="1063.0" y="1091.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.0" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.48%)</title><rect x="1063.0" y="1075.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.0" y="1086.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.48%)</title><rect x="1063.0" y="1059.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.0" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.48%)</title><rect x="1063.0" y="1043.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.0" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.29%)</title><rect x="1065.3" y="1027.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.3" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1067.5" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1068.6" y="1139.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.6" y="1150.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1068.6" y="1123.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.6" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.10%)</title><rect x="1068.6" y="1107.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1071.6" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (105 samples, 10.00%)</title><rect x="1069.8" y="1155.0" width="118.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.8" y="1166.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 10.00%)</title><rect x="1069.8" y="1139.0" width="118.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.8" y="1150.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 10.00%)</title><rect x="1069.8" y="1123.0" width="118.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.8" y="1134.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (105 samples, 10.00%)</title><rect x="1069.8" y="1107.0" width="118.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.8" y="1118.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (103 samples, 9.81%)</title><rect x="1069.8" y="1091.0" width="115.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.8" y="1102.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (103 samples, 9.81%)</title><rect x="1069.8" y="1075.0" width="115.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.8" y="1086.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 5.14%)</title><rect x="1069.8" y="1059.0" width="60.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.8" y="1070.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1069.8" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.8" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1069.8" y="1027.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.8" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1070.9" y="1043.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.9" y="1054.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="1070.9" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.9" y="1038.0"></text>
</g>
<g>
<title>MacroAssembler::MacroAssembler(CodeBuffer*) (1 samples, 0.10%)</title><rect x="1072.0" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.0" y="1038.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.10%)</title><rect x="1073.1" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.48%)</title><rect x="1074.2" y="1043.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.2" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1074.2" y="1027.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.2" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.38%)</title><rect x="1075.4" y="1027.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.19%)</title><rect x="1076.5" y="1011.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.5" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1076.5" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.5" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1076.5" y="979.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.5" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1076.5" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.5" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1077.6" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.10%)</title><rect x="1077.6" y="979.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.6" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.10%)</title><rect x="1077.6" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.6" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.10%)</title><rect x="1077.6" y="947.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1077.6" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.6" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.10%)</title><rect x="1077.6" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.6" y="926.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.10%)</title><rect x="1077.6" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.6" y="910.0"></text>
</g>
<g>
<title>Node::get_long() const (1 samples, 0.10%)</title><rect x="1077.6" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.6" y="894.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1078.7" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.29%)</title><rect x="1079.9" y="1043.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1082.9" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.10%)</title><rect x="1079.9" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.10%)</title><rect x="1079.9" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.9" y="1022.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.10%)</title><rect x="1079.9" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1081.0" y="1027.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1081.0" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1082.1" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 4.00%)</title><rect x="1083.2" y="1043.0" width="47.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.2" y="1054.0">Phas..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.10%)</title><rect x="1084.4" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.4" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.19%)</title><rect x="1085.5" y="1027.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.38%)</title><rect x="1087.7" y="1027.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.7" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1088.9" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.19%)</title><rect x="1090.0" y="1011.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1091.1" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.29%)</title><rect x="1092.2" y="1027.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.95%)</title><rect x="1095.6" y="1027.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.6" y="1038.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.10%)</title><rect x="1099.0" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1100.1" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.38%)</title><rect x="1101.2" y="1011.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1104.6" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.6" y="1006.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.10%)</title><rect x="1105.7" y="1011.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1106.8" y="1027.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.48%)</title><rect x="1108.0" y="1027.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.0" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.10%)</title><rect x="1111.3" y="1011.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.3" y="1022.0"></text>
</g>
<g>
<title>compU_rRegNode::use_cisc_RegMask() (1 samples, 0.10%)</title><rect x="1112.5" y="1011.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1113.6" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.29%)</title><rect x="1114.7" y="1027.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.19%)</title><rect x="1115.8" y="1011.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1118.1" y="1027.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.1" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1118.1" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.1" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.10%)</title><rect x="1118.1" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.1" y="1006.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1118.1" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.1" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.29%)</title><rect x="1119.2" y="1027.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.2" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.29%)</title><rect x="1119.2" y="1011.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1122.6" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.6" y="1038.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1122.6" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1123.7" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.7" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1123.7" y="1011.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1126.7" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.48%)</title><rect x="1124.8" y="1027.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.8" y="1038.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1125.9" y="1011.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.9" y="1022.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.10%)</title><rect x="1125.9" y="995.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.9" y="1006.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.10%)</title><rect x="1125.9" y="979.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.9" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.19%)</title><rect x="1127.1" y="1011.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.1" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1129.3" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.3" y="1022.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.10%)</title><rect x="1129.3" y="995.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.3" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (39 samples, 3.71%)</title><rect x="1130.4" y="1059.0" width="43.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.4" y="1070.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1130.4" y="1043.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.4" y="1054.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1130.4" y="1027.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.4" y="1038.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1131.6" y="1043.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.6" y="1054.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1131.6" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.6" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1131.6" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.6" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1131.6" y="995.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.6" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1132.7" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.19%)</title><rect x="1133.8" y="1043.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.19%)</title><rect x="1133.8" y="1027.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1134.9" y="1011.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1134.9" y="995.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.10%)</title><rect x="1136.1" y="1043.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.1" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1136.1" y="1027.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1139.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (27 samples, 2.57%)</title><rect x="1137.2" y="1043.0" width="30.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.2" y="1054.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.38%)</title><rect x="1137.2" y="1027.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.2" y="1038.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1140.6" y="1011.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (20 samples, 1.90%)</title><rect x="1141.7" y="1027.0" width="22.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.7" y="1038.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 1.71%)</title><rect x="1143.9" y="1011.0" width="20.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 1.71%)</title><rect x="1143.9" y="995.0" width="20.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.29%)</title><rect x="1160.8" y="979.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1164.2" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1164.2" y="1011.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1165.3" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1165.3" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="1022.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1166.4" y="1027.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::operator=(PhaseIterGVN const&amp;) (1 samples, 0.10%)</title><rect x="1167.5" y="1043.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.48%)</title><rect x="1168.6" y="1043.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.48%)</title><rect x="1168.6" y="1027.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.6" y="1038.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1168.6" y="1011.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.6" y="1022.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.10%)</title><rect x="1169.8" y="1011.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1170.9" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="1022.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1170.9" y="995.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="1006.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.10%)</title><rect x="1170.9" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.19%)</title><rect x="1172.0" y="1011.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.19%)</title><rect x="1172.0" y="995.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.19%)</title><rect x="1172.0" y="979.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.0" y="990.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.0" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1173.1" y="963.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.86%)</title><rect x="1174.3" y="1059.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.86%)</title><rect x="1174.3" y="1043.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.86%)</title><rect x="1174.3" y="1027.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.86%)</title><rect x="1174.3" y="1011.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.86%)</title><rect x="1174.3" y="995.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.76%)</title><rect x="1174.3" y="979.0" width="9.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.3" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1174.3" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.3" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1174.3" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1174.3" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.3" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1174.3" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.10%)</title><rect x="1174.3" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.3" y="910.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.10%)</title><rect x="1174.3" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.10%)</title><rect x="1174.3" y="867.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.48%)</title><rect x="1175.4" y="963.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.48%)</title><rect x="1175.4" y="947.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.48%)</title><rect x="1175.4" y="931.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.48%)</title><rect x="1175.4" y="915.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.48%)</title><rect x="1175.4" y="899.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.48%)</title><rect x="1175.4" y="883.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1175.4" y="867.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1175.4" y="851.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1175.4" y="835.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1175.4" y="819.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1175.4" y="803.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1175.4" y="787.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1175.4" y="771.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1175.4" y="755.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1175.4" y="739.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1175.4" y="723.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1175.4" y="707.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1175.4" y="691.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1175.4" y="675.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1175.4" y="659.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1175.4" y="643.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1175.4" y="627.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1175.4" y="611.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1175.4" y="595.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1175.4" y="579.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1175.4" y="563.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1175.4" y="547.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1175.4" y="531.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1175.4" y="515.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1175.4" y="499.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1175.4" y="483.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1175.4" y="467.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1175.4" y="451.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1175.4" y="435.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1175.4" y="419.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1175.4" y="403.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1175.4" y="387.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1175.4" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1175.4" y="355.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1175.4" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.10%)</title><rect x="1175.4" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="334.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.10%)</title><rect x="1175.4" y="307.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="318.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.10%)</title><rect x="1175.4" y="291.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.5" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1176.5" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.5" y="355.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.5" y="339.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.5" y="323.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1176.5" y="307.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.5" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1176.5" y="275.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.5" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.5" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.5" y="227.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1176.5" y="211.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1176.5" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1176.5" y="179.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.10%)</title><rect x="1176.5" y="163.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="174.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.10%)</title><rect x="1176.5" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1176.5" y="131.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="142.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1176.5" y="115.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1176.5" y="99.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="110.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1176.5" y="83.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.5" y="94.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1176.5" y="67.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="78.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1176.5" y="51.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="62.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1176.5" y="35.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1177.6" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1177.6" y="579.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.10%)</title><rect x="1177.6" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1177.6" y="547.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1177.6" y="531.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1177.6" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="499.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="483.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="467.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="435.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1177.6" y="371.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1177.6" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1178.8" y="867.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1178.8" y="851.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1178.8" y="835.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1178.8" y="819.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1178.8" y="803.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1178.8" y="787.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1178.8" y="771.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1178.8" y="755.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1178.8" y="739.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1178.8" y="723.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1178.8" y="707.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1178.8" y="691.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1178.8" y="675.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1178.8" y="659.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1178.8" y="643.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1178.8" y="627.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1178.8" y="611.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1178.8" y="595.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>CmpPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1178.8" y="579.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.9" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.9" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.9" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.9" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.9" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.9" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.9" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.9" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.9" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.9" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.9" y="419.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.9" y="403.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.9" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.9" y="371.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.9" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.9" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.9" y="323.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.9" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.10%)</title><rect x="1179.9" y="291.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.10%)</title><rect x="1179.9" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.10%)</title><rect x="1179.9" y="259.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1179.9" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1179.9" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1179.9" y="211.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="222.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.10%)</title><rect x="1179.9" y="195.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="206.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1179.9" y="179.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="190.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1179.9" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="174.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1179.9" y="147.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="158.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1179.9" y="131.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1181.0" y="963.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1181.0" y="947.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1181.0" y="931.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1181.0" y="915.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1181.0" y="899.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1181.0" y="883.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1181.0" y="867.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.0" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.0" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.0" y="819.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.0" y="803.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.0" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.0" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.0" y="723.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1181.0" y="707.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.0" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.0" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="686.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.0" y="659.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.10%)</title><rect x="1181.0" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="851.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="819.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="803.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="787.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="771.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="755.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="739.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="723.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="691.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.10%)</title><rect x="1182.1" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.10%)</title><rect x="1182.1" y="643.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>ciSignature::type_at(int) const (1 samples, 0.10%)</title><rect x="1182.1" y="627.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1183.3" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1183.3" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1183.3" y="947.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1183.3" y="931.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1183.3" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1183.3" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.10%)</title><rect x="1183.3" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1184.4" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1184.4" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1185.5" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1185.5" y="1075.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1185.5" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1185.5" y="1043.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.10%)</title><rect x="1185.5" y="1027.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.5" y="1038.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.10%)</title><rect x="1185.5" y="1011.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="1022.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.10%)</title><rect x="1185.5" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="1006.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.10%)</title><rect x="1185.5" y="979.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="990.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.10%)</title><rect x="1186.6" y="1091.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.10%)</title><rect x="1186.6" y="1075.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="1086.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1186.6" y="1059.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="1070.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1186.6" y="1043.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="1054.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="1155.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="1139.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="1150.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.9" y="1123.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="1134.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.9" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="1118.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.9" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.9" y="1075.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.9" y="1059.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.10%)</title><rect x="1188.9" y="1043.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.10%)</title><rect x="1188.9" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.9" y="1038.0"></text>
</g>
</g>
</svg>
