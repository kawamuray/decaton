<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1734" onload="init(evt)" viewBox="0 0 1200 1734" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1717"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1717"> </text>
<g id="frames">
<g>
<title>all (264 samples, 100.00%)</title><rect x="10.0" y="1683.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1694.0">all</text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.38%)</title><rect x="10.0" y="1667.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.38%)</title><rect x="10.0" y="1651.0" width="4.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 11.36%)</title><rect x="14.5" y="1667.0" width="134.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.5" y="1678.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 11.36%)</title><rect x="14.5" y="1651.0" width="134.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.5" y="1662.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.38%)</title><rect x="14.5" y="1635.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.5" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.38%)</title><rect x="14.5" y="1619.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.38%)</title><rect x="14.5" y="1603.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.5" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.38%)</title><rect x="14.5" y="1587.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.5" y="1598.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (18 samples, 6.82%)</title><rect x="18.9" y="1635.0" width="80.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.9" y="1646.0">java/lang..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2005833307.accept (15 samples, 5.68%)</title><rect x="18.9" y="1619.0" width="67.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.9" y="1630.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (15 samples, 5.68%)</title><rect x="18.9" y="1603.0" width="67.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="1614.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 4.92%)</title><rect x="18.9" y="1587.0" width="58.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="1598.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 4.92%)</title><rect x="18.9" y="1571.0" width="58.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.9" y="1582.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 4.92%)</title><rect x="18.9" y="1555.0" width="58.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.9" y="1566.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 4.92%)</title><rect x="18.9" y="1539.0" width="58.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.9" y="1550.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 4.92%)</title><rect x="18.9" y="1523.0" width="58.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.9" y="1534.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 4.92%)</title><rect x="18.9" y="1507.0" width="58.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.9" y="1518.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 3.41%)</title><rect x="18.9" y="1491.0" width="40.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="1502.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.14%)</title><rect x="18.9" y="1475.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.14%)</title><rect x="18.9" y="1459.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.76%)</title><rect x="23.4" y="1443.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.4" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.76%)</title><rect x="23.4" y="1427.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.27%)</title><rect x="32.3" y="1475.0" width="26.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.3" y="1486.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.27%)</title><rect x="32.3" y="1459.0" width="26.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.3" y="1470.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.89%)</title><rect x="32.3" y="1443.0" width="22.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.3" y="1454.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.89%)</title><rect x="32.3" y="1427.0" width="22.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.3" y="1438.0">j..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 1.89%)</title><rect x="32.3" y="1411.0" width="22.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.3" y="1422.0">s..</text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.14%)</title><rect x="32.3" y="1395.0" width="13.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="35.3" y="1406.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.14%)</title><rect x="32.3" y="1379.0" width="13.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="35.3" y="1390.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.38%)</title><rect x="45.8" y="1395.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="48.8" y="1406.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.38%)</title><rect x="50.2" y="1395.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="53.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.38%)</title><rect x="54.7" y="1443.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="57.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.38%)</title><rect x="59.2" y="1491.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.2" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.38%)</title><rect x="59.2" y="1475.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.2" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.38%)</title><rect x="59.2" y="1459.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.14%)</title><rect x="63.6" y="1491.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.6" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.14%)</title><rect x="63.6" y="1475.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.6" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.38%)</title><rect x="63.6" y="1459.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.6" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.38%)</title><rect x="63.6" y="1443.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="66.6" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.76%)</title><rect x="68.1" y="1459.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.1" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.76%)</title><rect x="77.0" y="1587.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.0" y="1598.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.76%)</title><rect x="77.0" y="1571.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.0" y="1582.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.38%)</title><rect x="86.0" y="1619.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="89.0" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.76%)</title><rect x="90.5" y="1619.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.76%)</title><rect x="90.5" y="1603.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.5" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.76%)</title><rect x="90.5" y="1587.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.76%)</title><rect x="90.5" y="1571.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.5" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 0.76%)</title><rect x="90.5" y="1555.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.5" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.76%)</title><rect x="90.5" y="1539.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.5" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.17%)</title><rect x="99.4" y="1635.0" width="49.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.4" y="1646.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.17%)</title><rect x="99.4" y="1619.0" width="49.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.4" y="1630.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.89%)</title><rect x="99.4" y="1603.0" width="22.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.4" y="1614.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.89%)</title><rect x="99.4" y="1587.0" width="22.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.4" y="1598.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.89%)</title><rect x="99.4" y="1571.0" width="22.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.4" y="1582.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.52%)</title><rect x="99.4" y="1555.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.4" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.52%)</title><rect x="99.4" y="1539.0" width="17.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.4" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.14%)</title><rect x="99.4" y="1523.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.4" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.38%)</title><rect x="99.4" y="1507.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.4" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.38%)</title><rect x="99.4" y="1491.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.4" y="1502.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.38%)</title><rect x="99.4" y="1475.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.38%)</title><rect x="103.9" y="1507.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.9" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.38%)</title><rect x="103.9" y="1491.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.9" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.38%)</title><rect x="103.9" y="1475.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.38%)</title><rect x="103.9" y="1459.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.38%)</title><rect x="103.9" y="1443.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.38%)</title><rect x="103.9" y="1427.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.38%)</title><rect x="103.9" y="1411.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.38%)</title><rect x="108.3" y="1507.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.3" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.38%)</title><rect x="108.3" y="1491.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.3" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.38%)</title><rect x="108.3" y="1475.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.3" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.38%)</title><rect x="108.3" y="1459.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.3" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.38%)</title><rect x="108.3" y="1443.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.3" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.38%)</title><rect x="112.8" y="1523.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.8" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.38%)</title><rect x="112.8" y="1507.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.8" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.38%)</title><rect x="112.8" y="1491.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="115.8" y="1502.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.38%)</title><rect x="112.8" y="1475.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.38%)</title><rect x="117.3" y="1555.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.3" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2300 (1 samples, 0.38%)</title><rect x="117.3" y="1539.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.3" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.38%)</title><rect x="117.3" y="1523.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.3" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.38%)</title><rect x="117.3" y="1507.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.76%)</title><rect x="121.7" y="1603.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.7" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.76%)</title><rect x="121.7" y="1587.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.7" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.76%)</title><rect x="121.7" y="1571.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.7" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.38%)</title><rect x="126.2" y="1555.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="129.2" y="1566.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.38%)</title><rect x="126.2" y="1539.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="129.2" y="1550.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.38%)</title><rect x="126.2" y="1523.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.2" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.38%)</title><rect x="130.7" y="1603.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.7" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.76%)</title><rect x="135.2" y="1603.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="138.2" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.38%)</title><rect x="135.2" y="1587.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.2" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.38%)</title><rect x="135.2" y="1571.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.2" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.38%)</title><rect x="139.6" y="1587.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.6" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.38%)</title><rect x="139.6" y="1571.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.6" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.38%)</title><rect x="144.1" y="1603.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="147.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.38%)</title><rect x="144.1" y="1587.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.38%)</title><rect x="144.1" y="1571.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.1" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.38%)</title><rect x="144.1" y="1555.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.1" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.38%)</title><rect x="144.1" y="1539.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.1" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.38%)</title><rect x="144.1" y="1523.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.38%)</title><rect x="144.1" y="1507.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/Thread.run (85 samples, 32.20%)</title><rect x="148.6" y="1667.0" width="379.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.6" y="1678.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (85 samples, 32.20%)</title><rect x="148.6" y="1651.0" width="379.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.6" y="1662.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (85 samples, 32.20%)</title><rect x="148.6" y="1635.0" width="379.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.6" y="1646.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/677135746.run (45 samples, 17.05%)</title><rect x="162.0" y="1619.0" width="201.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.0" y="1630.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (36 samples, 13.64%)</title><rect x="202.2" y="1603.0" width="160.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.2" y="1614.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (36 samples, 13.64%)</title><rect x="202.2" y="1587.0" width="160.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.2" y="1598.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (34 samples, 12.88%)</title><rect x="202.2" y="1571.0" width="152.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.2" y="1582.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (2 samples, 0.76%)</title><rect x="206.7" y="1555.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.7" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (2 samples, 0.76%)</title><rect x="206.7" y="1539.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.7" y="1550.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="206.7" y="1523.0" width="4.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="209.7" y="1534.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.38%)</title><rect x="211.1" y="1523.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.1" y="1534.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1252652539.linkToTargetMethod (1 samples, 0.38%)</title><rect x="211.1" y="1507.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/433082420.invokeStatic_JL_L (1 samples, 0.38%)</title><rect x="211.1" y="1491.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.1" y="1502.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.38%)</title><rect x="211.1" y="1475.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="214.1" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="211.1" y="1459.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="214.1" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 4.92%)</title><rect x="215.6" y="1555.0" width="58.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.6" y="1566.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 3.79%)</title><rect x="224.5" y="1539.0" width="44.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.5" y="1550.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 3.79%)</title><rect x="224.5" y="1523.0" width="44.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.5" y="1534.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 3.79%)</title><rect x="224.5" y="1507.0" width="44.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.5" y="1518.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 3.79%)</title><rect x="224.5" y="1491.0" width="44.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.5" y="1502.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 3.79%)</title><rect x="224.5" y="1475.0" width="44.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="1486.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.38%)</title><rect x="224.5" y="1459.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.38%)</title><rect x="224.5" y="1443.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.5" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.38%)</title><rect x="224.5" y="1427.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.38%)</title><rect x="224.5" y="1411.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.5" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.38%)</title><rect x="224.5" y="1395.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.5" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.38%)</title><rect x="224.5" y="1379.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.5" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 3.41%)</title><rect x="229.0" y="1459.0" width="40.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.0" y="1470.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.76%)</title><rect x="229.0" y="1443.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.76%)</title><rect x="229.0" y="1427.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.0" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.38%)</title><rect x="233.5" y="1411.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.5" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.38%)</title><rect x="233.5" y="1395.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.5" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.38%)</title><rect x="238.0" y="1443.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.0" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.38%)</title><rect x="238.0" y="1427.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.0" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.27%)</title><rect x="242.4" y="1443.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.4" y="1454.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.76%)</title><rect x="242.4" y="1427.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.4" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.38%)</title><rect x="242.4" y="1411.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.4" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.38%)</title><rect x="242.4" y="1395.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.4" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.38%)</title><rect x="242.4" y="1379.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.4" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.38%)</title><rect x="242.4" y="1363.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.4" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.38%)</title><rect x="242.4" y="1347.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.4" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.38%)</title><rect x="246.9" y="1411.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.9" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.38%)</title><rect x="246.9" y="1395.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.9" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.38%)</title><rect x="246.9" y="1379.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.52%)</title><rect x="251.4" y="1427.0" width="17.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.4" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.52%)</title><rect x="251.4" y="1411.0" width="17.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.4" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.52%)</title><rect x="251.4" y="1395.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.4" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.14%)</title><rect x="255.8" y="1379.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.purgeRawRequestBytes (1 samples, 0.38%)</title><rect x="269.2" y="1539.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.2" y="1550.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="269.2" y="1523.0" width="4.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="272.2" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (18 samples, 6.82%)</title><rect x="273.7" y="1555.0" width="80.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.7" y="1566.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.14%)</title><rect x="273.7" y="1539.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.7" y="1550.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.14%)</title><rect x="273.7" y="1523.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.7" y="1534.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.14%)</title><rect x="273.7" y="1507.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.7" y="1518.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.76%)</title><rect x="273.7" y="1491.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.7" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.76%)</title><rect x="273.7" y="1475.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.7" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.76%)</title><rect x="273.7" y="1459.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.7" y="1470.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.38%)</title><rect x="278.2" y="1443.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.2" y="1454.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.38%)</title><rect x="278.2" y="1427.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.2" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="282.7" y="1491.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.7" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.38%)</title><rect x="282.7" y="1475.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.7" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="282.7" y="1459.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.7" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 3.79%)</title><rect x="287.1" y="1539.0" width="44.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.1" y="1550.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 3.79%)</title><rect x="287.1" y="1523.0" width="44.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.1" y="1534.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.76%)</title><rect x="287.1" y="1507.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.38%)</title><rect x="287.1" y="1491.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.1" y="1502.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.38%)</title><rect x="287.1" y="1475.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.1" y="1486.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.38%)</title><rect x="291.6" y="1491.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.6" y="1502.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.38%)</title><rect x="291.6" y="1475.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.6" y="1486.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="291.6" y="1459.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="294.6" y="1470.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.76%)</title><rect x="296.1" y="1507.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.38%)</title><rect x="296.1" y="1491.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.1" y="1502.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.38%)</title><rect x="300.5" y="1491.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.5" y="1502.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.38%)</title><rect x="300.5" y="1475.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.5" y="1486.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.38%)</title><rect x="300.5" y="1459.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.5" y="1470.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.27%)</title><rect x="305.0" y="1507.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="1518.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.27%)</title><rect x="305.0" y="1491.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="1502.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="305.0" y="1475.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.0" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.38%)</title><rect x="305.0" y="1459.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="1470.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="305.0" y="1443.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.0" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.89%)</title><rect x="309.5" y="1475.0" width="22.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.5" y="1486.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.14%)</title><rect x="318.4" y="1459.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="321.4" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.76%)</title><rect x="322.9" y="1443.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.9" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 1.89%)</title><rect x="331.8" y="1539.0" width="22.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.8" y="1550.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 1.89%)</title><rect x="331.8" y="1523.0" width="22.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.8" y="1534.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1396536393.process (1 samples, 0.38%)</title><rect x="336.3" y="1507.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.3" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.38%)</title><rect x="336.3" y="1491.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.3" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.38%)</title><rect x="336.3" y="1475.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.3" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/1392287766.complete (2 samples, 0.76%)</title><rect x="340.8" y="1507.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.8" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$0 (2 samples, 0.76%)</title><rect x="340.8" y="1491.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.76%)</title><rect x="340.8" y="1475.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="343.8" y="1486.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.38%)</title><rect x="349.7" y="1507.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="352.7" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="354.2" y="1571.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.2" y="1582.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="354.2" y="1555.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="357.2" y="1566.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="354.2" y="1539.0" width="4.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="357.2" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.38%)</title><rect x="358.6" y="1571.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.6" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.38%)</title><rect x="358.6" y="1555.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.6" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.38%)</title><rect x="358.6" y="1539.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.6" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$271/411042886.accept (1 samples, 0.38%)</title><rect x="358.6" y="1523.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.6" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$1 (1 samples, 0.38%)</title><rect x="358.6" y="1507.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.6" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/107748408.complete (1 samples, 0.38%)</title><rect x="358.6" y="1491.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.6" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.38%)</title><rect x="358.6" y="1475.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.6" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.38%)</title><rect x="358.6" y="1459.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.6" y="1470.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.38%)</title><rect x="358.6" y="1443.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.6" y="1454.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.38%)</title><rect x="358.6" y="1427.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.6" y="1438.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.38%)</title><rect x="358.6" y="1411.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.6" y="1422.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.38%)</title><rect x="358.6" y="1395.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.76%)</title><rect x="363.1" y="1619.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.1" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.76%)</title><rect x="363.1" y="1603.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.1" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (22 samples, 8.33%)</title><rect x="372.0" y="1619.0" width="98.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.0" y="1630.0">java/util/co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/677135746.run (20 samples, 7.58%)</title><rect x="372.0" y="1603.0" width="89.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.0" y="1614.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.76%)</title><rect x="461.4" y="1603.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.4" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.76%)</title><rect x="461.4" y="1587.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.4" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.76%)</title><rect x="461.4" y="1571.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.4" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 4.92%)</title><rect x="470.4" y="1619.0" width="58.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.4" y="1630.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 4.92%)</title><rect x="470.4" y="1603.0" width="58.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.4" y="1614.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 4.17%)</title><rect x="470.4" y="1587.0" width="49.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.4" y="1598.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.76%)</title><rect x="470.4" y="1571.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="473.4" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.76%)</title><rect x="470.4" y="1555.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.4" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.76%)</title><rect x="470.4" y="1539.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.4" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.76%)</title><rect x="470.4" y="1523.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="473.4" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 3.41%)</title><rect x="479.3" y="1571.0" width="40.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.3" y="1582.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 3.41%)</title><rect x="479.3" y="1555.0" width="40.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.3" y="1566.0">sun..</text>
</g>
<g>
<title>Unsafe_Park (9 samples, 3.41%)</title><rect x="479.3" y="1539.0" width="40.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="482.3" y="1550.0">Uns..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.38%)</title><rect x="483.8" y="1523.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.8" y="1534.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.38%)</title><rect x="488.3" y="1523.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="491.3" y="1534.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.38%)</title><rect x="492.7" y="1523.0" width="4.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="495.7" y="1534.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 1.52%)</title><rect x="497.2" y="1523.0" width="17.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="500.2" y="1534.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.38%)</title><rect x="515.1" y="1523.0" width="4.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="518.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.76%)</title><rect x="519.5" y="1587.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.5" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.76%)</title><rect x="519.5" y="1571.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="522.5" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.76%)</title><rect x="519.5" y="1555.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.5" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.76%)</title><rect x="519.5" y="1539.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.5" y="1550.0"></text>
</g>
<g>
<title>start_thread (148 samples, 56.06%)</title><rect x="528.5" y="1667.0" width="661.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="531.5" y="1678.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (148 samples, 56.06%)</title><rect x="528.5" y="1651.0" width="661.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="531.5" y="1662.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.41%)</title><rect x="528.5" y="1635.0" width="40.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="531.5" y="1646.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.38%)</title><rect x="528.5" y="1619.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="531.5" y="1630.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.38%)</title><rect x="528.5" y="1603.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="531.5" y="1614.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.38%)</title><rect x="528.5" y="1587.0" width="4.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="531.5" y="1598.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 3.03%)</title><rect x="533.0" y="1619.0" width="35.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="536.0" y="1630.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.27%)</title><rect x="533.0" y="1603.0" width="26.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="536.0" y="1614.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.89%)</title><rect x="533.0" y="1587.0" width="22.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="536.0" y="1598.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.52%)</title><rect x="537.4" y="1571.0" width="17.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="540.4" y="1582.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.38%)</title><rect x="541.9" y="1555.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="544.9" y="1566.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.38%)</title><rect x="546.4" y="1555.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="549.4" y="1566.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.38%)</title><rect x="546.4" y="1539.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="549.4" y="1550.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.38%)</title><rect x="550.8" y="1555.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="553.8" y="1566.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.38%)</title><rect x="555.3" y="1587.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="558.3" y="1598.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.76%)</title><rect x="559.8" y="1603.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="562.8" y="1614.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.76%)</title><rect x="559.8" y="1587.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="562.8" y="1598.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.76%)</title><rect x="559.8" y="1571.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="562.8" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.76%)</title><rect x="559.8" y="1555.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="562.8" y="1566.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.76%)</title><rect x="559.8" y="1539.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="562.8" y="1550.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 0.76%)</title><rect x="559.8" y="1523.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="562.8" y="1534.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.76%)</title><rect x="559.8" y="1507.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="562.8" y="1518.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.38%)</title><rect x="564.2" y="1491.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.2" y="1502.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (139 samples, 52.65%)</title><rect x="568.7" y="1635.0" width="621.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="571.7" y="1646.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (138 samples, 52.27%)</title><rect x="568.7" y="1619.0" width="616.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.7" y="1630.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (138 samples, 52.27%)</title><rect x="568.7" y="1603.0" width="616.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="571.7" y="1614.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.38%)</title><rect x="568.7" y="1587.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.7" y="1598.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.38%)</title><rect x="568.7" y="1571.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.7" y="1582.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (136 samples, 51.52%)</title><rect x="573.2" y="1587.0" width="607.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="576.2" y="1598.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (136 samples, 51.52%)</title><rect x="573.2" y="1571.0" width="607.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="576.2" y="1582.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (79 samples, 29.92%)</title><rect x="573.2" y="1555.0" width="353.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="576.2" y="1566.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 1.52%)</title><rect x="573.2" y="1539.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="576.2" y="1550.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.76%)</title><rect x="573.2" y="1523.0" width="8.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="576.2" y="1534.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.76%)</title><rect x="582.1" y="1523.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="585.1" y="1534.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.76%)</title><rect x="582.1" y="1507.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="585.1" y="1518.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.38%)</title><rect x="586.6" y="1491.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.6" y="1502.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.38%)</title><rect x="586.6" y="1475.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="589.6" y="1486.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.38%)</title><rect x="591.1" y="1539.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="594.1" y="1550.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.38%)</title><rect x="591.1" y="1523.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="594.1" y="1534.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.38%)</title><rect x="595.5" y="1539.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.5" y="1550.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.65%)</title><rect x="600.0" y="1539.0" width="31.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="1550.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.76%)</title><rect x="600.0" y="1523.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="1534.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.89%)</title><rect x="608.9" y="1523.0" width="22.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.9" y="1534.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.38%)</title><rect x="608.9" y="1507.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="611.9" y="1518.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 1.52%)</title><rect x="613.4" y="1507.0" width="17.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="616.4" y="1518.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.76%)</title><rect x="617.9" y="1491.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.9" y="1502.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.38%)</title><rect x="622.3" y="1475.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="625.3" y="1486.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.38%)</title><rect x="626.8" y="1491.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="629.8" y="1502.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.38%)</title><rect x="626.8" y="1475.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="629.8" y="1486.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.89%)</title><rect x="631.3" y="1539.0" width="22.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="634.3" y="1550.0">P..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.38%)</title><rect x="631.3" y="1523.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="634.3" y="1534.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.38%)</title><rect x="635.8" y="1523.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="638.8" y="1534.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.38%)</title><rect x="635.8" y="1507.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="638.8" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.14%)</title><rect x="640.2" y="1523.0" width="13.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="643.2" y="1534.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="640.2" y="1507.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="643.2" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="644.7" y="1507.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="647.7" y="1518.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.38%)</title><rect x="644.7" y="1491.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="647.7" y="1502.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="649.2" y="1507.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="652.2" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.38%)</title><rect x="649.2" y="1491.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="652.2" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (61 samples, 23.11%)</title><rect x="653.6" y="1539.0" width="272.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="656.6" y="1550.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="653.6" y="1523.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="656.6" y="1534.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.38%)</title><rect x="658.1" y="1523.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="661.1" y="1534.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.38%)</title><rect x="662.6" y="1523.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="665.6" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.14%)</title><rect x="667.0" y="1523.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="670.0" y="1534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="667.0" y="1507.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="670.0" y="1518.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.76%)</title><rect x="671.5" y="1507.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="674.5" y="1518.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.38%)</title><rect x="671.5" y="1491.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="674.5" y="1502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="676.0" y="1491.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="679.0" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 1.89%)</title><rect x="680.5" y="1523.0" width="22.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.5" y="1534.0">P..</text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.38%)</title><rect x="698.3" y="1507.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="701.3" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.27%)</title><rect x="702.8" y="1523.0" width="26.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="705.8" y="1534.0">P..</text>
</g>
<g>
<title>loadConLNode::rule() const (1 samples, 0.38%)</title><rect x="725.2" y="1507.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.2" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (15 samples, 5.68%)</title><rect x="729.6" y="1523.0" width="67.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="732.6" y="1534.0">PhaseCh..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.38%)</title><rect x="756.4" y="1507.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="759.4" y="1518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="760.9" y="1507.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="763.9" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.89%)</title><rect x="769.8" y="1507.0" width="22.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="772.8" y="1518.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="783.3" y="1491.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.3" y="1502.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.38%)</title><rect x="792.2" y="1507.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="795.2" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.38%)</title><rect x="796.7" y="1523.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.38%)</title><rect x="796.7" y="1507.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="1518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="796.7" y="1491.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="799.7" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.14%)</title><rect x="801.1" y="1523.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.1" y="1534.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.38%)</title><rect x="810.1" y="1507.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="813.1" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.38%)</title><rect x="814.5" y="1523.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.5" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.52%)</title><rect x="819.0" y="1523.0" width="17.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="822.0" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.14%)</title><rect x="819.0" y="1507.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.0" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="828.0" y="1491.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.0" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.38%)</title><rect x="832.4" y="1507.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="835.4" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.38%)</title><rect x="832.4" y="1491.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="835.4" y="1502.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.14%)</title><rect x="836.9" y="1523.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.9" y="1534.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.14%)</title><rect x="836.9" y="1507.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="839.9" y="1518.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.14%)</title><rect x="836.9" y="1491.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.9" y="1502.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.38%)</title><rect x="836.9" y="1475.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.9" y="1486.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.76%)</title><rect x="841.4" y="1475.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.4" y="1486.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::PhaseConservativeCoalesce(PhaseChaitin&amp;) (1 samples, 0.38%)</title><rect x="850.3" y="1523.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="853.3" y="1534.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.38%)</title><rect x="850.3" y="1507.0" width="4.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="853.3" y="1518.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.76%)</title><rect x="854.8" y="1523.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.8" y="1534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="854.8" y="1507.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.8" y="1518.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.76%)</title><rect x="863.7" y="1523.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.7" y="1534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="868.2" y="1507.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="871.2" y="1518.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.38%)</title><rect x="872.7" y="1523.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.7" y="1534.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.38%)</title><rect x="872.7" y="1507.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.7" y="1518.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 4.17%)</title><rect x="877.1" y="1523.0" width="49.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.1" y="1534.0">Phase..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 2.27%)</title><rect x="899.5" y="1507.0" width="26.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="902.5" y="1518.0">P..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.38%)</title><rect x="912.9" y="1491.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.9" y="1502.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 0.76%)</title><rect x="917.3" y="1491.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.3" y="1502.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 17.42%)</title><rect x="926.3" y="1555.0" width="205.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="929.3" y="1566.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.38%)</title><rect x="926.3" y="1539.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="929.3" y="1550.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.38%)</title><rect x="926.3" y="1523.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.3" y="1534.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.38%)</title><rect x="930.8" y="1539.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="933.8" y="1550.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.38%)</title><rect x="930.8" y="1523.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.8" y="1534.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.38%)</title><rect x="930.8" y="1507.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.8" y="1518.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="930.8" y="1491.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.76%)</title><rect x="935.2" y="1539.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.76%)</title><rect x="935.2" y="1523.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.38%)</title><rect x="935.2" y="1507.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.2" y="1518.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.38%)</title><rect x="935.2" y="1491.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.2" y="1502.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.38%)</title><rect x="935.2" y="1475.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.2" y="1486.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.38%)</title><rect x="935.2" y="1459.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.2" y="1470.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.38%)</title><rect x="935.2" y="1443.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1507.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1491.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1475.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1459.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1443.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1427.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1411.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1395.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1379.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1363.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1347.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1331.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1315.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1299.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1283.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1267.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="942.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1251.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1235.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1219.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1203.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1187.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1171.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1155.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1139.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1123.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1107.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1091.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1075.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1059.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1043.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="942.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1027.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="1011.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="995.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="979.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="963.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="947.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="931.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="915.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="899.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="883.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="867.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="851.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="835.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="819.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="803.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="787.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="771.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="755.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="739.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="723.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="707.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="691.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="675.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="659.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="643.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="627.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="611.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="595.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="579.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="563.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="547.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="531.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="515.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="499.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="483.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="467.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="451.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="435.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="419.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="403.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="387.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="371.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="355.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="339.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="323.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="942.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="307.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="291.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="275.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="259.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="243.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="227.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="211.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="195.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="179.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="163.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="147.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="131.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="115.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="99.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="83.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="67.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="939.7" y="51.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.7" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.38%)</title><rect x="939.7" y="35.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.7" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.38%)</title><rect x="944.2" y="1539.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.2" y="1550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (36 samples, 13.64%)</title><rect x="948.6" y="1539.0" width="160.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.6" y="1550.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.76%)</title><rect x="948.6" y="1523.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="951.6" y="1534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.76%)</title><rect x="957.6" y="1523.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.6" y="1534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 10.61%)</title><rect x="966.5" y="1523.0" width="125.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="969.5" y="1534.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (25 samples, 9.47%)</title><rect x="979.9" y="1507.0" width="111.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.9" y="1518.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (24 samples, 9.09%)</title><rect x="984.4" y="1491.0" width="107.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.4" y="1502.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 1.14%)</title><rect x="997.8" y="1475.0" width="13.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.8" y="1486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 1.14%)</title><rect x="997.8" y="1459.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.8" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.38%)</title><rect x="1011.2" y="1475.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.2" y="1486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.38%)</title><rect x="1011.2" y="1459.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.2" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (17 samples, 6.44%)</title><rect x="1015.7" y="1475.0" width="76.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.7" y="1486.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.76%)</title><rect x="1091.7" y="1523.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.7" y="1534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1100.6" y="1523.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.6" y="1534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.38%)</title><rect x="1100.6" y="1507.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.6" y="1518.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.38%)</title><rect x="1105.1" y="1523.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.1" y="1534.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.38%)</title><rect x="1105.1" y="1507.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.1" y="1518.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1105.1" y="1491.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.1" y="1502.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.52%)</title><rect x="1109.5" y="1539.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.5" y="1550.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.52%)</title><rect x="1109.5" y="1523.0" width="17.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.5" y="1534.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.38%)</title><rect x="1109.5" y="1507.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.5" y="1518.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.38%)</title><rect x="1109.5" y="1491.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.5" y="1502.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.38%)</title><rect x="1114.0" y="1507.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.0" y="1518.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.38%)</title><rect x="1114.0" y="1491.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="1502.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1118.5" y="1507.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.5" y="1518.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.38%)</title><rect x="1118.5" y="1491.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.5" y="1502.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1123.0" y="1507.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="1518.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.38%)</title><rect x="1123.0" y="1491.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.0" y="1502.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1475.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.0" y="1486.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1459.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="1470.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1443.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.0" y="1454.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1427.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.0" y="1438.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1411.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.0" y="1422.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1395.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="1406.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1379.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1363.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.0" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1347.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.0" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1331.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.0" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1315.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.0" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1299.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.0" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1283.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1267.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.0" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1251.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.0" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1235.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.0" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1219.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1203.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1187.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1171.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.0" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.38%)</title><rect x="1123.0" y="1155.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.0" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1123.0" y="1139.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.38%)</title><rect x="1127.4" y="1539.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.4" y="1550.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.38%)</title><rect x="1127.4" y="1523.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="1534.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.38%)</title><rect x="1127.4" y="1507.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.4" y="1518.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.38%)</title><rect x="1127.4" y="1491.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.4" y="1502.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.38%)</title><rect x="1127.4" y="1475.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.4" y="1486.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.76%)</title><rect x="1131.9" y="1555.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.9" y="1566.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.76%)</title><rect x="1131.9" y="1539.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.9" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1131.9" y="1523.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.9" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.76%)</title><rect x="1131.9" y="1507.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.9" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.76%)</title><rect x="1131.9" y="1491.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.76%)</title><rect x="1131.9" y="1475.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.76%)</title><rect x="1131.9" y="1459.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1131.9" y="1443.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.9" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1131.9" y="1427.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.9" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.76%)</title><rect x="1131.9" y="1411.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.9" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.76%)</title><rect x="1131.9" y="1395.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.76%)</title><rect x="1131.9" y="1379.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.76%)</title><rect x="1131.9" y="1363.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1131.9" y="1347.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.9" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1131.9" y="1331.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.9" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.76%)</title><rect x="1131.9" y="1315.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.76%)</title><rect x="1131.9" y="1299.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1136.4" y="1283.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1136.4" y="1267.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1136.4" y="1251.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1136.4" y="1235.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.4" y="1246.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.38%)</title><rect x="1136.4" y="1219.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.4" y="1230.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1136.4" y="1203.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="1214.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1136.4" y="1187.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.4" y="1198.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1136.4" y="1171.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.65%)</title><rect x="1140.8" y="1555.0" width="31.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="1566.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.65%)</title><rect x="1140.8" y="1539.0" width="31.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.8" y="1550.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.65%)</title><rect x="1140.8" y="1523.0" width="31.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.8" y="1534.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.65%)</title><rect x="1140.8" y="1507.0" width="31.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.8" y="1518.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.65%)</title><rect x="1140.8" y="1491.0" width="31.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.8" y="1502.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.27%)</title><rect x="1140.8" y="1475.0" width="26.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="1486.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.89%)</title><rect x="1140.8" y="1459.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="1470.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.89%)</title><rect x="1140.8" y="1443.0" width="22.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="1454.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.89%)</title><rect x="1140.8" y="1427.0" width="22.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.8" y="1438.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.89%)</title><rect x="1140.8" y="1411.0" width="22.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.8" y="1422.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.89%)</title><rect x="1140.8" y="1395.0" width="22.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.8" y="1406.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1140.8" y="1379.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1140.8" y="1363.0" width="17.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.8" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1140.8" y="1347.0" width="17.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1140.8" y="1331.0" width="17.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1140.8" y="1315.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.52%)</title><rect x="1140.8" y="1299.0" width="17.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1140.8" y="1283.0" width="17.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.8" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1140.8" y="1267.0" width="17.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1140.8" y="1251.0" width="17.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1140.8" y="1235.0" width="17.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1140.8" y="1219.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.52%)</title><rect x="1140.8" y="1203.0" width="17.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1140.8" y="1187.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.8" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1140.8" y="1171.0" width="17.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.8" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1140.8" y="1155.0" width="17.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1140.8" y="1139.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1140.8" y="1123.0" width="17.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.8" y="1134.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.38%)</title><rect x="1140.8" y="1107.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1145.3" y="1107.0" width="13.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.14%)</title><rect x="1145.3" y="1091.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1145.3" y="1075.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.14%)</title><rect x="1145.3" y="1059.0" width="13.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.14%)</title><rect x="1145.3" y="1043.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.14%)</title><rect x="1145.3" y="1027.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1145.3" y="1011.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.14%)</title><rect x="1145.3" y="995.0" width="13.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1145.3" y="979.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.14%)</title><rect x="1145.3" y="963.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.14%)</title><rect x="1145.3" y="947.0" width="13.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.14%)</title><rect x="1145.3" y="931.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1145.3" y="915.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1145.3" y="899.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.3" y="883.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1145.3" y="867.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1145.3" y="851.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1145.3" y="835.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1145.3" y="819.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1145.3" y="803.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.3" y="787.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1145.3" y="771.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1145.3" y="755.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1145.3" y="739.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1145.3" y="723.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1145.3" y="707.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.3" y="691.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1145.3" y="675.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1145.3" y="659.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1145.3" y="643.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1145.3" y="627.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1145.3" y="611.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.3" y="595.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1145.3" y="579.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1145.3" y="563.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1145.3" y="547.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1145.3" y="531.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1145.3" y="515.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1149.8" y="883.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1149.8" y="867.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1149.8" y="851.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1149.8" y="835.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1149.8" y="819.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1149.8" y="803.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1149.8" y="787.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1149.8" y="771.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1149.8" y="755.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1149.8" y="739.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1149.8" y="723.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1149.8" y="707.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1149.8" y="691.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1149.8" y="675.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1149.8" y="659.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1149.8" y="643.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1149.8" y="627.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1149.8" y="611.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1149.8" y="595.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1149.8" y="579.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1149.8" y="563.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1149.8" y="547.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1149.8" y="531.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.8" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1149.8" y="515.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1149.8" y="499.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1149.8" y="483.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1149.8" y="467.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1149.8" y="451.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.38%)</title><rect x="1149.8" y="435.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="446.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1149.8" y="419.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="1149.8" y="403.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="1149.8" y="387.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.38%)</title><rect x="1149.8" y="371.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="382.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1149.8" y="355.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1154.2" y="899.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.38%)</title><rect x="1154.2" y="883.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.2" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.2" y="867.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.2" y="851.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="862.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1154.2" y="835.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1154.2" y="819.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1154.2" y="803.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.38%)</title><rect x="1154.2" y="787.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.38%)</title><rect x="1154.2" y="771.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.38%)</title><rect x="1158.7" y="1379.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.7" y="1390.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.38%)</title><rect x="1158.7" y="1363.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.7" y="1374.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.38%)</title><rect x="1158.7" y="1347.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="1358.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1158.7" y="1331.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.7" y="1342.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1158.7" y="1315.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="1326.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="1459.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="1443.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="1427.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="1411.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="1395.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="1379.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="1363.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="1347.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="1331.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="1315.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="1299.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="1283.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="1267.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="1251.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="1235.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="1219.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="1203.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="1187.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="1171.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="1155.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="1139.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="1123.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="1107.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="1091.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="1075.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="1059.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="1043.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="1027.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="1011.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="995.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="979.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="963.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="947.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="931.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="915.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="899.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="883.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="867.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="851.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="835.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="819.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="803.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="787.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="771.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="755.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="739.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="723.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="707.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="691.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="675.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="659.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="643.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="627.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1163.2" y="611.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1163.2" y="595.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1163.2" y="579.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1163.2" y="563.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1163.2" y="547.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1163.2" y="531.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.38%)</title><rect x="1163.2" y="515.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="526.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.38%)</title><rect x="1163.2" y="499.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="510.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.38%)</title><rect x="1163.2" y="483.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1163.2" y="467.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="478.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1163.2" y="451.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="462.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.38%)</title><rect x="1163.2" y="435.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.38%)</title><rect x="1167.7" y="1475.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="1486.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.38%)</title><rect x="1167.7" y="1459.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="1470.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1167.7" y="1443.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="1454.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1167.7" y="1427.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="1438.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.38%)</title><rect x="1167.7" y="1411.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.7" y="1422.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.38%)</title><rect x="1167.7" y="1395.0" width="4.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1170.7" y="1406.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.38%)</title><rect x="1172.1" y="1555.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="1566.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1172.1" y="1539.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.1" y="1550.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.38%)</title><rect x="1176.6" y="1555.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="1566.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1176.6" y="1539.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="1550.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.38%)</title><rect x="1176.6" y="1523.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="1534.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.38%)</title><rect x="1181.1" y="1587.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="1598.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.38%)</title><rect x="1181.1" y="1571.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="1582.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.38%)</title><rect x="1181.1" y="1555.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1566.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.38%)</title><rect x="1181.1" y="1539.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="1550.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.38%)</title><rect x="1181.1" y="1523.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="1534.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.38%)</title><rect x="1181.1" y="1507.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="1518.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.38%)</title><rect x="1181.1" y="1491.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="1502.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.38%)</title><rect x="1181.1" y="1475.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.1" y="1486.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.38%)</title><rect x="1181.1" y="1459.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="1470.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.38%)</title><rect x="1181.1" y="1443.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="1454.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.38%)</title><rect x="1185.5" y="1619.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="1630.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.38%)</title><rect x="1185.5" y="1603.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.5" y="1614.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1587.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.5" y="1598.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1571.0" width="4.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1188.5" y="1582.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.38%)</title><rect x="1185.5" y="1555.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="1566.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.38%)</title><rect x="1185.5" y="1539.0" width="4.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1188.5" y="1550.0"></text>
</g>
</g>
</svg>
