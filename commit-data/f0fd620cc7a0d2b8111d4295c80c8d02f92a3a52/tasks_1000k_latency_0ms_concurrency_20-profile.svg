<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (1,016 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.10%)</title><rect x="10.0" y="1123.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (253 samples, 24.90%)</title><rect x="11.2" y="1123.0" width="293.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1134.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.10%)</title><rect x="11.2" y="1107.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.10%)</title><rect x="11.2" y="1091.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.10%)</title><rect x="11.2" y="1075.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.10%)</title><rect x="11.2" y="1059.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="11.2" y="1043.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="11.2" y="1027.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="11.2" y="1011.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="11.2" y="995.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="11.2" y="979.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="11.2" y="963.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="11.2" y="947.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="11.2" y="931.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="11.2" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="11.2" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.10%)</title><rect x="11.2" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.10%)</title><rect x="11.2" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.validate (1 samples, 0.10%)</title><rect x="11.2" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (251 samples, 24.70%)</title><rect x="12.3" y="1107.0" width="291.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.3" y="1118.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (8 samples, 0.79%)</title><rect x="12.3" y="1091.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.69%)</title><rect x="13.5" y="1075.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/912349628.accept (7 samples, 0.69%)</title><rect x="13.5" y="1059.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (7 samples, 0.69%)</title><rect x="13.5" y="1043.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.69%)</title><rect x="13.5" y="1027.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.5" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.49%)</title><rect x="15.8" y="1011.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="20.5" y="995.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.39%)</title><rect x="21.6" y="1091.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.39%)</title><rect x="21.6" y="1075.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="22.8" y="1059.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="22.8" y="1043.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="22.8" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="23.9" y="1027.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="23.9" y="1011.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="23.9" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="23.9" y="979.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="23.9" y="963.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="23.9" y="947.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1393501989.test (1 samples, 0.10%)</title><rect x="23.9" y="931.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="25.1" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.10%)</title><rect x="25.1" y="979.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="25.1" y="963.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="25.1" y="947.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.1" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="25.1" y="931.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="26.3" y="1091.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="26.3" y="1075.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (182 samples, 17.91%)</title><rect x="27.4" y="1091.0" width="211.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.4" y="1102.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1786808100.accept (174 samples, 17.13%)</title><rect x="27.4" y="1075.0" width="202.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1086.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (172 samples, 16.93%)</title><rect x="29.7" y="1059.0" width="199.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.7" y="1070.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (127 samples, 12.50%)</title><rect x="29.7" y="1043.0" width="147.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.7" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (127 samples, 12.50%)</title><rect x="29.7" y="1027.0" width="147.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.7" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (127 samples, 12.50%)</title><rect x="29.7" y="1011.0" width="147.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.7" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (127 samples, 12.50%)</title><rect x="29.7" y="995.0" width="147.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.7" y="1006.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (127 samples, 12.50%)</title><rect x="29.7" y="979.0" width="147.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.7" y="990.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (127 samples, 12.50%)</title><rect x="29.7" y="963.0" width="147.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.7" y="974.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (91 samples, 8.96%)</title><rect x="68.1" y="947.0" width="105.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.1" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (10 samples, 0.98%)</title><rect x="68.1" y="931.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="71.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (10 samples, 0.98%)</title><rect x="68.1" y="915.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.98%)</title><rect x="68.1" y="899.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.79%)</title><rect x="79.7" y="931.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.79%)</title><rect x="79.7" y="915.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.39%)</title><rect x="82.0" y="899.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.0" y="910.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.39%)</title><rect x="82.0" y="883.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="85.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.20%)</title><rect x="86.7" y="899.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 7.19%)</title><rect x="89.0" y="931.0" width="84.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.0" y="942.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 7.19%)</title><rect x="89.0" y="915.0" width="84.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.0" y="926.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 7.19%)</title><rect x="89.0" y="899.0" width="84.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.0" y="910.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (73 samples, 7.19%)</title><rect x="89.0" y="883.0" width="84.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.0" y="894.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 6.89%)</title><rect x="92.5" y="867.0" width="81.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.5" y="878.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="92.5" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="95.5" y="862.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 6.40%)</title><rect x="93.6" y="851.0" width="75.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="96.6" y="862.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="98.3" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="101.3" y="846.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.30%)</title><rect x="99.4" y="835.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.4" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.94%)</title><rect x="102.9" y="835.0" width="46.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="105.9" y="846.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.30%)</title><rect x="149.4" y="835.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="152.4" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.38%)</title><rect x="152.9" y="835.0" width="16.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="155.9" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.20%)</title><rect x="169.1" y="851.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="172.1" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="171.4" y="851.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="174.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.20%)</title><rect x="173.8" y="947.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="173.8" y="931.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="173.8" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="173.8" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="174.9" y="915.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="174.9" y="899.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.9" y="910.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="176.1" y="947.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="179.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.39%)</title><rect x="177.2" y="1043.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.39%)</title><rect x="177.2" y="1027.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.39%)</title><rect x="177.2" y="1011.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (41 samples, 4.04%)</title><rect x="181.9" y="1043.0" width="47.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.9" y="1054.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 4.04%)</title><rect x="181.9" y="1027.0" width="47.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.9" y="1038.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.97%)</title><rect x="202.8" y="1011.0" width="23.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.8" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.38%)</title><rect x="202.8" y="995.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.38%)</title><rect x="202.8" y="979.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.8" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.38%)</title><rect x="202.8" y="963.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.8" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="215.6" y="947.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="218.6" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.30%)</title><rect x="219.1" y="995.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="222.5" y="995.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.5" y="1006.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="226.0" y="1011.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="229.0" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="227.2" y="1011.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="230.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.59%)</title><rect x="229.5" y="1075.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.59%)</title><rect x="229.5" y="1059.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.59%)</title><rect x="229.5" y="1043.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.59%)</title><rect x="229.5" y="1027.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.20%)</title><rect x="236.5" y="1075.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.20%)</title><rect x="236.5" y="1059.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.51%)</title><rect x="238.8" y="1091.0" width="65.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.8" y="1102.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.51%)</title><rect x="238.8" y="1075.0" width="65.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.8" y="1086.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.64%)</title><rect x="238.8" y="1059.0" width="43.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.8" y="1070.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.20%)</title><rect x="238.8" y="1043.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.8" y="1054.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.10%)</title><rect x="238.8" y="1027.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="241.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="240.0" y="1027.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.0" y="1038.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="240.0" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="243.0" y="1022.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.10%)</title><rect x="240.0" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="243.0" y="1006.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.10%)</title><rect x="240.0" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="243.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.44%)</title><rect x="241.1" y="1043.0" width="40.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.1" y="1054.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="241.1" y="1027.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 3.35%)</title><rect x="242.3" y="1027.0" width="39.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.3" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 3.05%)</title><rect x="242.3" y="1011.0" width="36.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.3" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 3.05%)</title><rect x="242.3" y="995.0" width="36.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.3" y="1006.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="244.6" y="979.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.6" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="244.6" y="963.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.10%)</title><rect x="244.6" y="947.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.6" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="244.6" y="931.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.6" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="244.6" y="915.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.67%)</title><rect x="245.8" y="979.0" width="19.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.49%)</title><rect x="257.4" y="963.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.49%)</title><rect x="257.4" y="947.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.49%)</title><rect x="257.4" y="931.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.49%)</title><rect x="257.4" y="915.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.49%)</title><rect x="257.4" y="899.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.49%)</title><rect x="257.4" y="883.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.49%)</title><rect x="257.4" y="867.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.10%)</title><rect x="263.2" y="963.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.10%)</title><rect x="263.2" y="947.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.10%)</title><rect x="263.2" y="931.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="264.4" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="264.4" y="947.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="264.4" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 1.08%)</title><rect x="265.5" y="979.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.10%)</title><rect x="265.5" y="963.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.98%)</title><rect x="266.7" y="963.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.59%)</title><rect x="266.7" y="947.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.7" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.59%)</title><rect x="266.7" y="931.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.7" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="272.5" y="915.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="275.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.39%)</title><rect x="273.6" y="947.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.6" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.39%)</title><rect x="273.6" y="931.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.20%)</title><rect x="278.3" y="1011.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.20%)</title><rect x="278.3" y="995.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="278.3" y="979.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="278.3" y="963.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="278.3" y="947.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="279.4" y="931.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="279.4" y="915.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.10%)</title><rect x="279.4" y="899.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="280.6" y="1011.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.10%)</title><rect x="280.6" y="995.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.69%)</title><rect x="281.8" y="1059.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.69%)</title><rect x="281.8" y="1043.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.59%)</title><rect x="281.8" y="1027.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.20%)</title><rect x="281.8" y="1011.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1517430535.accept (1 samples, 0.10%)</title><rect x="282.9" y="995.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="282.9" y="979.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="282.9" y="963.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="284.1" y="1011.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="285.3" y="1011.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="285.3" y="995.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="285.3" y="979.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="285.3" y="963.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="285.3" y="947.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="285.3" y="931.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="285.3" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.3" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="285.3" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.10%)</title><rect x="285.3" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="286.4" y="1011.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="286.4" y="995.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.4" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="286.4" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.10%)</title><rect x="286.4" y="963.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.4" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.10%)</title><rect x="286.4" y="947.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.4" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.10%)</title><rect x="286.4" y="931.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="287.6" y="1011.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="287.6" y="995.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="287.6" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="287.6" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.10%)</title><rect x="288.7" y="1027.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.20%)</title><rect x="289.9" y="1059.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.20%)</title><rect x="289.9" y="1043.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="289.9" y="1027.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="289.9" y="1011.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="289.9" y="995.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.49%)</title><rect x="292.2" y="1059.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.39%)</title><rect x="292.2" y="1043.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.39%)</title><rect x="292.2" y="1027.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="292.2" y="1011.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="292.2" y="995.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="293.4" y="979.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="293.4" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.20%)</title><rect x="294.5" y="1011.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.20%)</title><rect x="294.5" y="995.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="294.5" y="979.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="294.5" y="963.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="297.5" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="295.7" y="963.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="298.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="296.9" y="1043.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.10%)</title><rect x="296.9" y="1027.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.10%)</title><rect x="296.9" y="1011.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.isUpdateDue (1 samples, 0.10%)</title><rect x="296.9" y="995.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.49%)</title><rect x="298.0" y="1059.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="298.0" y="1043.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="298.0" y="1027.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.10%)</title><rect x="298.0" y="1011.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.10%)</title><rect x="298.0" y="995.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.39%)</title><rect x="299.2" y="1043.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.20%)</title><rect x="300.4" y="1027.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.20%)</title><rect x="300.4" y="1011.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="300.4" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="300.4" y="979.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="300.4" y="963.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="300.4" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="300.4" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.10%)</title><rect x="300.4" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="300.4" y="899.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="300.4" y="883.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="301.5" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="301.5" y="979.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="301.5" y="963.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="301.5" y="947.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.5" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.10%)</title><rect x="301.5" y="931.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="302.7" y="1027.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="302.7" y="1011.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.7" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="302.7" y="995.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="302.7" y="979.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="302.7" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="302.7" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="302.7" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.7" y="942.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.10%)</title><rect x="303.8" y="1107.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.8" y="1118.0"></text>
</g>
<g>
<title>JVM_CurrentTimeMillis (1 samples, 0.10%)</title><rect x="303.8" y="1091.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="306.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (680 samples, 66.93%)</title><rect x="305.0" y="1123.0" width="789.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (680 samples, 66.93%)</title><rect x="305.0" y="1107.0" width="789.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="1118.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (679 samples, 66.83%)</title><rect x="306.2" y="1091.0" width="788.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.2" y="1102.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/285797256.run (459 samples, 45.18%)</title><rect x="307.3" y="1075.0" width="533.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.3" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/285797256..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (459 samples, 45.18%)</title><rect x="307.3" y="1059.0" width="533.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (459 samples, 45.18%)</title><rect x="307.3" y="1043.0" width="533.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.3" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="308.5" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (430 samples, 42.32%)</title><rect x="309.6" y="1027.0" width="499.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.6" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.metadata (2 samples, 0.20%)</title><rect x="310.8" y="1011.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (2 samples, 0.20%)</title><rect x="310.8" y="995.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (13 samples, 1.28%)</title><rect x="313.1" y="1011.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (13 samples, 1.28%)</title><rect x="313.1" y="995.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1776812083.get (8 samples, 0.79%)</title><rect x="315.5" y="979.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.69%)</title><rect x="316.6" y="963.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.69%)</title><rect x="316.6" y="947.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="319.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="316.6" y="931.0" width="8.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="319.6" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.20%)</title><rect x="324.7" y="979.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.7" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/23876961.linkToTargetMethod (2 samples, 0.20%)</title><rect x="324.7" y="963.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2028924427.invokeStatic_JL_L (2 samples, 0.20%)</title><rect x="324.7" y="947.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer$$Lambda$261/404474857.get$Lambda (2 samples, 0.20%)</title><rect x="324.7" y="931.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer$$Lambda$261/404474857.&lt;init&gt; (2 samples, 0.20%)</title><rect x="324.7" y="915.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.10%)</title><rect x="327.1" y="979.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (155 samples, 15.26%)</title><rect x="328.2" y="1011.0" width="180.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.2" y="1022.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (155 samples, 15.26%)</title><rect x="328.2" y="995.0" width="180.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.2" y="1006.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (155 samples, 15.26%)</title><rect x="328.2" y="979.0" width="180.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.2" y="990.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 15.26%)</title><rect x="328.2" y="963.0" width="180.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.2" y="974.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 15.26%)</title><rect x="328.2" y="947.0" width="180.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.2" y="958.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (155 samples, 15.26%)</title><rect x="328.2" y="931.0" width="180.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.2" y="942.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 4.43%)</title><rect x="328.2" y="915.0" width="52.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.2" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (28 samples, 2.76%)</title><rect x="328.2" y="899.0" width="32.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.2" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (28 samples, 2.76%)</title><rect x="328.2" y="883.0" width="32.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.2" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (28 samples, 2.76%)</title><rect x="328.2" y="867.0" width="32.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.2" y="878.0">co..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (28 samples, 2.76%)</title><rect x="328.2" y="851.0" width="32.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.2" y="862.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.20%)</title><rect x="358.4" y="835.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.20%)</title><rect x="358.4" y="819.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.67%)</title><rect x="360.7" y="899.0" width="19.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (17 samples, 1.67%)</title><rect x="360.7" y="883.0" width="19.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.39%)</title><rect x="360.7" y="867.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.39%)</title><rect x="360.7" y="851.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 1.08%)</title><rect x="365.4" y="867.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="365.4" y="851.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="368.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="365.4" y="835.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="368.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 0.98%)</title><rect x="366.6" y="851.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (4 samples, 0.39%)</title><rect x="370.0" y="835.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="374.7" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.10%)</title><rect x="375.8" y="835.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="378.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="377.0" y="835.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.20%)</title><rect x="378.2" y="867.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.20%)</title><rect x="378.2" y="851.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (95 samples, 9.35%)</title><rect x="380.5" y="915.0" width="110.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.5" y="926.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (8 samples, 0.79%)</title><rect x="380.5" y="899.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="383.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (8 samples, 0.79%)</title><rect x="380.5" y="883.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (8 samples, 0.79%)</title><rect x="380.5" y="867.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (8 samples, 0.79%)</title><rect x="380.5" y="851.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (2 samples, 0.20%)</title><rect x="382.8" y="835.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 0.39%)</title><rect x="385.1" y="835.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.10%)</title><rect x="389.8" y="899.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="392.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="389.8" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="392.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.79%)</title><rect x="390.9" y="899.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.59%)</title><rect x="393.3" y="883.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.30%)</title><rect x="394.4" y="867.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.30%)</title><rect x="394.4" y="851.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="394.4" y="835.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.20%)</title><rect x="397.9" y="867.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="400.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.49%)</title><rect x="400.2" y="899.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.49%)</title><rect x="400.2" y="883.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.49%)</title><rect x="400.2" y="867.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.49%)</title><rect x="400.2" y="851.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="402.6" y="835.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 7.19%)</title><rect x="406.0" y="899.0" width="84.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.0" y="910.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.57%)</title><rect x="407.2" y="883.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.20%)</title><rect x="407.2" y="867.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.20%)</title><rect x="407.2" y="851.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.20%)</title><rect x="407.2" y="835.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.28%)</title><rect x="409.5" y="867.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="424.6" y="867.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="424.6" y="851.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 5.51%)</title><rect x="425.8" y="883.0" width="65.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.8" y="894.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (56 samples, 5.51%)</title><rect x="425.8" y="867.0" width="65.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.8" y="878.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (55 samples, 5.41%)</title><rect x="426.9" y="851.0" width="63.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.9" y="862.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.38%)</title><rect x="432.8" y="835.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.79%)</title><rect x="438.6" y="819.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.79%)</title><rect x="438.6" y="803.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.79%)</title><rect x="438.6" y="787.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.39%)</title><rect x="443.2" y="771.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="447.9" y="819.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.79%)</title><rect x="449.0" y="835.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.49%)</title><rect x="452.5" y="819.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.49%)</title><rect x="452.5" y="803.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.49%)</title><rect x="452.5" y="787.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.49%)</title><rect x="452.5" y="771.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.20%)</title><rect x="458.3" y="835.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.69%)</title><rect x="460.6" y="835.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.69%)</title><rect x="460.6" y="819.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.69%)</title><rect x="460.6" y="803.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.69%)</title><rect x="460.6" y="787.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.6" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.69%)</title><rect x="460.6" y="771.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.6" y="782.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.69%)</title><rect x="460.6" y="755.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.6" y="766.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (1 samples, 0.10%)</title><rect x="467.6" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.79%)</title><rect x="468.8" y="835.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.79%)</title><rect x="468.8" y="819.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="471.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.79%)</title><rect x="468.8" y="803.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="475.7" y="787.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.7" y="798.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (1 samples, 0.10%)</title><rect x="476.9" y="787.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (11 samples, 1.08%)</title><rect x="478.1" y="835.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.48%)</title><rect x="490.8" y="915.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.48%)</title><rect x="490.8" y="899.0" width="17.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.48%)</title><rect x="490.8" y="883.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (15 samples, 1.48%)</title><rect x="490.8" y="867.0" width="17.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 1.48%)</title><rect x="490.8" y="851.0" width="17.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.30%)</title><rect x="503.6" y="835.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.10%)</title><rect x="507.1" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="510.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (259 samples, 25.49%)</title><rect x="508.2" y="1011.0" width="300.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.2" y="1022.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="514.1" y="995.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="515.2" y="979.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="515.2" y="963.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="518.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="515.2" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="518.2" y="958.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="515.2" y="931.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="518.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (50 samples, 4.92%)</title><rect x="516.4" y="995.0" width="58.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.4" y="1006.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.92%)</title><rect x="516.4" y="979.0" width="58.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.4" y="990.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 4.72%)</title><rect x="518.7" y="963.0" width="55.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.7" y="974.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.18%)</title><rect x="519.9" y="947.0" width="13.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.18%)</title><rect x="519.9" y="931.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="522.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.18%)</title><rect x="519.9" y="915.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.18%)</title><rect x="519.9" y="899.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.39%)</title><rect x="529.2" y="883.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="532.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.20%)</title><rect x="531.5" y="867.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 3.44%)</title><rect x="533.8" y="947.0" width="40.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="536.8" y="958.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (28 samples, 2.76%)</title><rect x="541.9" y="931.0" width="32.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="544.9" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.49%)</title><rect x="568.6" y="915.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="574.4" y="995.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="577.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="574.4" y="979.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="577.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="574.4" y="963.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="577.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (137 samples, 13.48%)</title><rect x="577.9" y="995.0" width="159.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.9" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="580.3" y="979.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="583.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="580.3" y="963.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="583.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (130 samples, 12.80%)</title><rect x="583.7" y="979.0" width="151.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.7" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (40 samples, 3.94%)</title><rect x="591.9" y="963.0" width="46.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="594.9" y="974.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (38 samples, 3.74%)</title><rect x="591.9" y="947.0" width="44.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.9" y="958.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 3.74%)</title><rect x="591.9" y="931.0" width="44.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.9" y="942.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.97%)</title><rect x="591.9" y="915.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.9" y="926.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.97%)</title><rect x="591.9" y="899.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.9" y="910.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.97%)</title><rect x="591.9" y="883.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.9" y="894.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.69%)</title><rect x="602.3" y="867.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="605.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="603.5" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="606.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="604.6" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.6" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="604.6" y="835.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="607.6" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="604.6" y="819.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="607.6" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.39%)</title><rect x="605.8" y="851.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="608.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.30%)</title><rect x="607.0" y="835.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="610.0" y="846.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="607.0" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="610.0" y="830.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="608.1" y="819.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="611.1" y="830.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="609.3" y="819.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="612.3" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="610.5" y="867.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="613.5" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="611.6" y="867.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="614.6" y="878.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="613.9" y="867.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="616.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (18 samples, 1.77%)</title><rect x="615.1" y="915.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.1" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.59%)</title><rect x="629.0" y="899.0" width="7.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="632.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.20%)</title><rect x="636.0" y="947.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.0" y="958.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.20%)</title><rect x="636.0" y="931.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.20%)</title><rect x="636.0" y="915.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="637.2" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="640.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="637.2" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="637.2" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="640.2" y="878.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="637.2" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="640.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (15 samples, 1.48%)</title><rect x="638.3" y="963.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (7 samples, 0.69%)</title><rect x="638.3" y="947.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.69%)</title><rect x="638.3" y="931.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.79%)</title><rect x="646.5" y="947.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.79%)</title><rect x="646.5" y="931.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.5" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="655.7" y="963.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="658.7" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="658.1" y="963.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="661.1" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (65 samples, 6.40%)</title><rect x="659.2" y="963.0" width="75.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.2" y="974.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (64 samples, 6.30%)</title><rect x="660.4" y="947.0" width="74.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.4" y="958.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.59%)</title><rect x="660.4" y="931.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.59%)</title><rect x="660.4" y="915.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.59%)</title><rect x="660.4" y="899.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.59%)</title><rect x="660.4" y="883.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.20%)</title><rect x="665.0" y="867.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="668.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="665.0" y="851.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (58 samples, 5.71%)</title><rect x="667.4" y="931.0" width="67.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.4" y="942.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (54 samples, 5.31%)</title><rect x="672.0" y="915.0" width="62.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="675.0" y="926.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 3.15%)</title><rect x="697.6" y="899.0" width="37.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="700.6" y="910.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.39%)</title><rect x="713.8" y="883.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.98%)</title><rect x="718.5" y="883.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="728.9" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="731.9" y="878.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.39%)</title><rect x="730.1" y="883.0" width="4.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="733.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.20%)</title><rect x="734.7" y="979.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="737.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 4.13%)</title><rect x="737.0" y="995.0" width="48.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.0" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (42 samples, 4.13%)</title><rect x="737.0" y="979.0" width="48.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.0" y="990.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="740.5" y="963.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="743.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="740.5" y="947.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="743.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/157864370.process (21 samples, 2.07%)</title><rect x="741.7" y="963.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.7" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.97%)</title><rect x="741.7" y="947.0" width="23.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="744.7" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.67%)</title><rect x="744.0" y="931.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.0" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.30%)</title><rect x="753.3" y="915.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="756.3" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.30%)</title><rect x="753.3" y="899.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="756.3" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.30%)</title><rect x="753.3" y="883.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.3" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.30%)</title><rect x="753.3" y="867.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.20%)</title><rect x="754.5" y="851.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="755.6" y="835.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.49%)</title><rect x="756.8" y="915.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.8" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.49%)</title><rect x="756.8" y="899.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="759.8" y="910.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.49%)</title><rect x="756.8" y="883.0" width="5.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="759.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="762.6" y="915.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="765.6" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="762.6" y="899.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="765.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="762.6" y="883.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="763.8" y="931.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="766.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="763.8" y="915.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="763.8" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="763.8" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="766.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="764.9" y="947.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="767.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.39%)</title><rect x="766.1" y="963.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.39%)</title><rect x="766.1" y="947.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="769.1" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.10%)</title><rect x="770.7" y="963.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.10%)</title><rect x="770.7" y="947.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/14485079.get$Lambda (1 samples, 0.10%)</title><rect x="770.7" y="931.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="773.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/14485079.&lt;init&gt; (1 samples, 0.10%)</title><rect x="770.7" y="915.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="773.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="771.9" y="963.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="771.9" y="947.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="774.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.49%)</title><rect x="773.1" y="963.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.49%)</title><rect x="773.1" y="947.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.1" y="958.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.39%)</title><rect x="773.1" y="931.0" width="4.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="776.1" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="777.7" y="931.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="780.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.30%)</title><rect x="778.9" y="963.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="781.2" y="947.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="784.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.30%)</title><rect x="782.3" y="963.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="784.7" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.7" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="784.7" y="931.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.10%)</title><rect x="784.7" y="915.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="787.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="785.8" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="788.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.87%)</title><rect x="787.0" y="995.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.0" y="1006.0">j..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="798.6" y="979.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="801.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="798.6" y="963.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="801.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.49%)</title><rect x="802.1" y="979.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.49%)</title><rect x="802.1" y="963.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1890998226.accept (5 samples, 0.49%)</title><rect x="802.1" y="947.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (5 samples, 0.49%)</title><rect x="802.1" y="931.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.1" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.49%)</title><rect x="802.1" y="915.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.1" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.49%)</title><rect x="802.1" y="899.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="805.1" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="803.2" y="883.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="806.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="803.2" y="867.0" width="4.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="806.2" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.10%)</title><rect x="807.9" y="979.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 0.39%)</title><rect x="809.1" y="1027.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (3 samples, 0.30%)</title><rect x="809.1" y="1011.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.1" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="809.1" y="995.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="812.1" y="1006.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="809.1" y="979.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="812.1" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="812.5" y="1011.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (11 samples, 1.08%)</title><rect x="813.7" y="1027.0" width="12.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.7" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="813.7" y="1011.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="816.7" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.98%)</title><rect x="814.9" y="1011.0" width="11.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="817.9" y="1022.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.59%)</title><rect x="819.5" y="995.0" width="7.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="822.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.10%)</title><rect x="826.5" y="1027.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.10%)</title><rect x="826.5" y="1011.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="829.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$274/1964899550.get$Lambda (1 samples, 0.10%)</title><rect x="826.5" y="995.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.08%)</title><rect x="827.6" y="1027.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.08%)</title><rect x="827.6" y="1011.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.98%)</title><rect x="828.8" y="995.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$274/1964899550.accept (10 samples, 0.98%)</title><rect x="828.8" y="979.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (10 samples, 0.98%)</title><rect x="828.8" y="963.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="831.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1240909360.complete (10 samples, 0.98%)</title><rect x="828.8" y="947.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (10 samples, 0.98%)</title><rect x="828.8" y="931.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.98%)</title><rect x="828.8" y="915.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.8" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.98%)</title><rect x="828.8" y="899.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.8" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.98%)</title><rect x="828.8" y="883.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="831.8" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 0.98%)</title><rect x="828.8" y="867.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="831.8" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 0.98%)</title><rect x="828.8" y="851.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.59%)</title><rect x="840.4" y="1075.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.59%)</title><rect x="840.4" y="1059.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="843.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.59%)</title><rect x="840.4" y="1043.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.59%)</title><rect x="840.4" y="1027.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/285797256.run (1 samples, 0.10%)</title><rect x="846.2" y="1011.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (213 samples, 20.96%)</title><rect x="847.4" y="1075.0" width="247.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.4" y="1086.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (211 samples, 20.77%)</title><rect x="849.7" y="1059.0" width="245.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.7" y="1070.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (171 samples, 16.83%)</title><rect x="875.3" y="1043.0" width="198.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="878.3" y="1054.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.98%)</title><rect x="883.4" y="1027.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="886.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.98%)</title><rect x="883.4" y="1011.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="886.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.98%)</title><rect x="883.4" y="995.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="886.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.98%)</title><rect x="883.4" y="979.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="886.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 15.16%)</title><rect x="895.0" y="1027.0" width="178.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.0" y="1038.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (153 samples, 15.06%)</title><rect x="896.2" y="1011.0" width="177.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="899.2" y="1022.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.20%)</title><rect x="898.5" y="995.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="901.5" y="1006.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="900.8" y="995.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.8" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="902.0" y="995.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.0" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 13.68%)</title><rect x="904.3" y="995.0" width="161.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="907.3" y="1006.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="912.4" y="979.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="915.4" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.26%)</title><rect x="914.7" y="979.0" width="26.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="917.7" y="990.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 1.08%)</title><rect x="925.2" y="963.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.2" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="927.5" y="947.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.5" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.30%)</title><rect x="928.7" y="947.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.7" y="958.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.30%)</title><rect x="928.7" y="931.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.7" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.20%)</title><rect x="932.2" y="947.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="935.2" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.30%)</title><rect x="934.5" y="947.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="937.5" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.20%)</title><rect x="938.0" y="963.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.0" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="940.3" y="963.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.3" y="974.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="941.5" y="979.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.5" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.20%)</title><rect x="943.8" y="979.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.8" y="990.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.10%)</title><rect x="946.1" y="979.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="949.1" y="990.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 1.08%)</title><rect x="947.3" y="979.0" width="12.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="950.3" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 3.35%)</title><rect x="960.0" y="979.0" width="39.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="963.0" y="990.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 4.43%)</title><rect x="999.5" y="979.0" width="52.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1002.5" y="990.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.20%)</title><rect x="1051.8" y="979.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1054.8" y="990.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1054.1" y="979.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1057.1" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.20%)</title><rect x="1055.3" y="979.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1058.3" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1057.6" y="979.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1060.6" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="1058.8" y="979.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1061.8" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1061.1" y="979.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1064.1" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="1062.2" y="979.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.2" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1064.6" y="979.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1067.6" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.49%)</title><rect x="1065.7" y="995.0" width="5.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1068.7" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="1071.5" y="995.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.10%)</title><rect x="1073.9" y="1043.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.10%)</title><rect x="1073.9" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.10%)</title><rect x="1073.9" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.9" y="1022.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.10%)</title><rect x="1073.9" y="995.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1076.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.67%)</title><rect x="1075.0" y="1043.0" width="19.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1078.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.67%)</title><rect x="1075.0" y="1027.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1078.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.67%)</title><rect x="1075.0" y="1011.0" width="19.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1078.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.67%)</title><rect x="1075.0" y="995.0" width="19.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1094.8" y="1123.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1097.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1094.8" y="1107.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1097.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1094.8" y="1091.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1097.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1094.8" y="1075.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1097.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1094.8" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1094.8" y="1043.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1097.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1094.8" y="1027.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1094.8" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1097.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1094.8" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1097.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="1094.8" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1097.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.10%)</title><rect x="1094.8" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.10%)</title><rect x="1094.8" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1097.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="1094.8" y="931.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1097.8" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.10%)</title><rect x="1094.8" y="915.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1097.8" y="926.0"></text>
</g>
<g>
<title>start_thread (81 samples, 7.97%)</title><rect x="1095.9" y="1123.0" width="94.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1098.9" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 7.97%)</title><rect x="1095.9" y="1107.0" width="94.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1098.9" y="1118.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.87%)</title><rect x="1095.9" y="1091.0" width="22.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.9" y="1102.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.30%)</title><rect x="1095.9" y="1075.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.9" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.30%)</title><rect x="1095.9" y="1059.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.9" y="1070.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1095.9" y="1043.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1098.9" y="1054.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.10%)</title><rect x="1098.2" y="1043.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1101.2" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.57%)</title><rect x="1099.4" y="1075.0" width="18.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.4" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.49%)</title><rect x="1099.4" y="1059.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.4" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1099.4" y="1043.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.4" y="1054.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.39%)</title><rect x="1100.6" y="1043.0" width="4.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1103.6" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.39%)</title><rect x="1105.2" y="1059.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.2" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1105.2" y="1043.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.2" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1105.2" y="1027.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.2" y="1038.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1105.2" y="1011.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.2" y="1022.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1105.2" y="995.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.2" y="1006.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1106.4" y="1027.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.4" y="1038.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1106.4" y="1011.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.4" y="1022.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.10%)</title><rect x="1106.4" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.4" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.10%)</title><rect x="1106.4" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.4" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1107.5" y="1043.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.5" y="1054.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.20%)</title><rect x="1107.5" y="1027.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.5" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.69%)</title><rect x="1109.9" y="1059.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.9" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.69%)</title><rect x="1109.9" y="1043.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.69%)</title><rect x="1109.9" y="1027.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.9" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.69%)</title><rect x="1109.9" y="1011.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.9" y="1022.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.69%)</title><rect x="1109.9" y="995.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.9" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.69%)</title><rect x="1109.9" y="979.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.9" y="990.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::block_start(void const*) (1 samples, 0.10%)</title><rect x="1112.2" y="963.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.2" y="974.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.39%)</title><rect x="1113.3" y="963.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.3" y="974.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.30%)</title><rect x="1113.3" y="947.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.3" y="958.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1115.7" y="931.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.7" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1116.8" y="947.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.8" y="958.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.10%)</title><rect x="1116.8" y="931.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.8" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (58 samples, 5.71%)</title><rect x="1118.0" y="1091.0" width="67.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.0" y="1102.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 5.71%)</title><rect x="1118.0" y="1075.0" width="67.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.0" y="1086.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 5.71%)</title><rect x="1118.0" y="1059.0" width="67.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.0" y="1070.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (58 samples, 5.71%)</title><rect x="1118.0" y="1043.0" width="67.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.0" y="1054.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (58 samples, 5.71%)</title><rect x="1118.0" y="1027.0" width="67.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.0" y="1038.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (58 samples, 5.71%)</title><rect x="1118.0" y="1011.0" width="67.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.0" y="1022.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 2.85%)</title><rect x="1118.0" y="995.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.0" y="1006.0">Co..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1118.0" y="979.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.0" y="990.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1119.2" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.2" y="990.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1119.2" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.2" y="974.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.10%)</title><rect x="1119.2" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.2" y="958.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.10%)</title><rect x="1119.2" y="931.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.2" y="942.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.10%)</title><rect x="1119.2" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.2" y="926.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="1119.2" y="899.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.2" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.39%)</title><rect x="1120.3" y="979.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.3" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.39%)</title><rect x="1120.3" y="963.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.3" y="974.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1120.3" y="947.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.3" y="958.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.30%)</title><rect x="1121.5" y="947.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1121.5" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1121.5" y="915.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.5" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1121.5" y="899.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.5" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1121.5" y="883.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.5" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.20%)</title><rect x="1122.6" y="931.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.6" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Chain_Rule(State*, int, Node*&amp;, MachNode*) (1 samples, 0.10%)</title><rect x="1122.6" y="915.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.6" y="926.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.10%)</title><rect x="1122.6" y="899.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.6" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.10%)</title><rect x="1123.8" y="915.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1125.0" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.0" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1125.0" y="963.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.0" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1125.0" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 2.17%)</title><rect x="1126.1" y="979.0" width="25.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.1" y="990.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1126.1" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.1" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1126.1" y="947.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1127.3" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1127.3" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.3" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1127.3" y="931.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.59%)</title><rect x="1128.4" y="963.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.4" y="974.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1134.3" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.30%)</title><rect x="1135.4" y="963.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.10%)</title><rect x="1138.9" y="963.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1140.1" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.10%)</title><rect x="1140.1" y="947.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.39%)</title><rect x="1141.2" y="963.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.2" y="974.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1143.5" y="947.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="958.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.10%)</title><rect x="1143.5" y="931.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.5" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1144.7" y="947.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.7" y="958.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1145.9" y="963.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.9" y="974.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1145.9" y="947.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.9" y="958.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.10%)</title><rect x="1145.9" y="931.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.20%)</title><rect x="1147.0" y="963.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1148.2" y="947.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.2" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="1149.4" y="963.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.4" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.20%)</title><rect x="1149.4" y="947.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.4" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (23 samples, 2.26%)</title><rect x="1151.7" y="995.0" width="26.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.7" y="1006.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1151.7" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.7" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1151.7" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.7" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.20%)</title><rect x="1152.8" y="979.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.8" y="990.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1154.0" y="963.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="974.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.10%)</title><rect x="1154.0" y="947.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.0" y="958.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1154.0" y="931.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.0" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1154.0" y="915.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.0" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1154.0" y="899.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1154.0" y="883.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1154.0" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.0" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1154.0" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (14 samples, 1.38%)</title><rect x="1155.2" y="979.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 1.28%)</title><rect x="1155.2" y="963.0" width="15.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 1.08%)</title><rect x="1157.5" y="947.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.69%)</title><rect x="1162.1" y="931.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1169.1" y="915.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1170.3" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1170.3" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1170.3" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1170.3" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1170.3" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.30%)</title><rect x="1171.4" y="979.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.30%)</title><rect x="1171.4" y="963.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.4" y="974.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1171.4" y="947.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="958.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1172.6" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1172.6" y="931.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.6" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1172.6" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1173.7" y="947.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="958.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1173.7" y="931.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.7" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.10%)</title><rect x="1173.7" y="915.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1173.7" y="899.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1173.7" y="883.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1174.9" y="979.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.10%)</title><rect x="1174.9" y="963.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1174.9" y="947.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1174.9" y="931.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1176.1" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1176.1" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1176.1" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="958.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1176.1" y="931.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="942.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1176.1" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1176.1" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="910.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1176.1" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1176.1" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1176.1" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1176.1" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1176.1" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1177.2" y="979.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1180.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.59%)</title><rect x="1178.4" y="995.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.59%)</title><rect x="1178.4" y="979.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.59%)</title><rect x="1178.4" y="963.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.59%)</title><rect x="1178.4" y="947.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.59%)</title><rect x="1178.4" y="931.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.59%)</title><rect x="1178.4" y="915.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.4" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_time_funcs(unsigned char*, char const*) (1 samples, 0.10%)</title><rect x="1178.4" y="883.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1178.4" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1178.4" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.10%)</title><rect x="1178.4" y="835.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.49%)</title><rect x="1179.5" y="899.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.49%)</title><rect x="1179.5" y="883.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.49%)</title><rect x="1179.5" y="867.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.49%)</title><rect x="1179.5" y="851.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.49%)</title><rect x="1179.5" y="835.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.49%)</title><rect x="1179.5" y="819.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1179.5" y="803.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1179.5" y="787.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1179.5" y="771.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1179.5" y="755.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1179.5" y="739.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1179.5" y="723.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="707.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="718.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_time_funcs(unsigned char*, char const*) (1 samples, 0.10%)</title><rect x="1179.5" y="691.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1179.5" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.7" y="707.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.7" y="691.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1180.7" y="675.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1180.7" y="659.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1180.7" y="643.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1180.7" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1180.7" y="611.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1180.7" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1180.7" y="579.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.9" y="627.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1181.9" y="611.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1181.9" y="595.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1181.9" y="579.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1181.9" y="563.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1181.9" y="547.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.9" y="531.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.9" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.9" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.9" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.9" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.9" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.9" y="435.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.9" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.9" y="403.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.9" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.9" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.9" y="355.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.9" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.9" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.9" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.9" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.9" y="259.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.9" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.9" y="227.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.9" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1181.9" y="179.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.9" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.9" y="163.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.9" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.9" y="147.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1181.9" y="131.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1181.9" y="99.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1181.9" y="83.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1181.9" y="67.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.10%)</title><rect x="1181.9" y="51.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="35.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.10%)</title><rect x="1183.0" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.10%)</title><rect x="1183.0" y="515.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="499.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1183.0" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="451.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.10%)</title><rect x="1183.0" y="435.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1183.0" y="419.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="803.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="787.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="771.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="755.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="739.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="659.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="627.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="579.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="563.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="531.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="499.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="419.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="403.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="387.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="355.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="323.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="307.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1184.2" y="291.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1184.2" y="275.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1184.2" y="259.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1184.2" y="243.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1184.2" y="227.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1184.2" y="211.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1184.2" y="195.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="179.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1184.2" y="163.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.2" y="147.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.2" y="131.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1184.2" y="115.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1184.2" y="99.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="110.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.2" y="83.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="94.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.10%)</title><rect x="1184.2" y="67.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="78.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.39%)</title><rect x="1185.4" y="1091.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.4" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.39%)</title><rect x="1185.4" y="1075.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="1086.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.20%)</title><rect x="1185.4" y="1059.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="1070.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.20%)</title><rect x="1187.7" y="1059.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.20%)</title><rect x="1187.7" y="1043.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="1054.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.20%)</title><rect x="1187.7" y="1027.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1187.7" y="1011.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="995.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::clear(bool) (1 samples, 0.10%)</title><rect x="1187.7" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="990.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::zero_bottom_entry_raw() (1 samples, 0.10%)</title><rect x="1187.7" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="974.0"></text>
</g>
<g>
<title>GC_locker::check_active_before_gc() (1 samples, 0.10%)</title><rect x="1188.8" y="1011.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="1022.0"></text>
</g>
</g>
</svg>
