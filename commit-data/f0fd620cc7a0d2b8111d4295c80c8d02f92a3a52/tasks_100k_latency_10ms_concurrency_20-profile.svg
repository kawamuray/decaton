<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (222 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 9.91%)</title><rect x="10.0" y="515.0" width="116.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="526.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.90%)</title><rect x="10.0" y="499.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.90%)</title><rect x="10.0" y="483.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.90%)</title><rect x="10.0" y="467.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.90%)</title><rect x="10.0" y="451.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.90%)</title><rect x="10.0" y="435.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.90%)</title><rect x="10.0" y="419.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.90%)</title><rect x="10.0" y="403.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.90%)</title><rect x="10.0" y="387.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.90%)</title><rect x="10.0" y="371.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.90%)</title><rect x="10.0" y="355.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.45%)</title><rect x="10.0" y="339.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.45%)</title><rect x="10.0" y="323.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.45%)</title><rect x="10.0" y="307.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.45%)</title><rect x="10.0" y="291.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.45%)</title><rect x="10.0" y="275.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestTopic.toStruct (1 samples, 0.45%)</title><rect x="10.0" y="259.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.45%)</title><rect x="15.3" y="339.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 9.01%)</title><rect x="20.6" y="499.0" width="106.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.6" y="510.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.45%)</title><rect x="20.6" y="483.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.45%)</title><rect x="20.6" y="467.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.90%)</title><rect x="25.9" y="483.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (2 samples, 0.90%)</title><rect x="25.9" y="467.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.45%)</title><rect x="31.3" y="451.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.45%)</title><rect x="36.6" y="483.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.45%)</title><rect x="36.6" y="467.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.45%)</title><rect x="36.6" y="451.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.6" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.45%)</title><rect x="36.6" y="435.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.6" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1990451863.invoke_MT (1 samples, 0.45%)</title><rect x="36.6" y="419.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$BMH/2052673081.reinvoke (1 samples, 0.45%)</title><rect x="36.6" y="403.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.6" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L6_L (1 samples, 0.45%)</title><rect x="36.6" y="387.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.6" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.45%)</title><rect x="36.6" y="371.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.6" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.45%)</title><rect x="36.6" y="355.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.6" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.45%)</title><rect x="36.6" y="339.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/org/objectweb/asm/ClassWriter.visitField (1 samples, 0.45%)</title><rect x="36.6" y="323.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.70%)</title><rect x="41.9" y="483.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.9" y="494.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1944144090.accept (6 samples, 2.70%)</title><rect x="41.9" y="467.0" width="31.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.9" y="478.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (6 samples, 2.70%)</title><rect x="41.9" y="451.0" width="31.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.9" y="462.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 2.25%)</title><rect x="41.9" y="435.0" width="26.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.9" y="446.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 2.25%)</title><rect x="41.9" y="419.0" width="26.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.9" y="430.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 2.25%)</title><rect x="41.9" y="403.0" width="26.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.9" y="414.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 2.25%)</title><rect x="41.9" y="387.0" width="26.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.9" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 2.25%)</title><rect x="41.9" y="371.0" width="26.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.9" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 2.25%)</title><rect x="41.9" y="355.0" width="26.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.9" y="366.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.45%)</title><rect x="68.5" y="435.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.5" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.45%)</title><rect x="68.5" y="419.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.5" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.45%)</title><rect x="68.5" y="403.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.5" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="68.5" y="387.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.5" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.45%)</title><rect x="68.5" y="371.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.5" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="68.5" y="355.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.50%)</title><rect x="73.8" y="483.0" width="53.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.8" y="494.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.50%)</title><rect x="73.8" y="467.0" width="53.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="76.8" y="478.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.05%)</title><rect x="73.8" y="451.0" width="47.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.8" y="462.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.80%)</title><rect x="73.8" y="435.0" width="21.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="446.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.80%)</title><rect x="73.8" y="419.0" width="21.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.8" y="430.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.45%)</title><rect x="73.8" y="403.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.45%)</title><rect x="73.8" y="387.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.45%)</title><rect x="73.8" y="371.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.45%)</title><rect x="73.8" y="355.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.45%)</title><rect x="73.8" y="339.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.45%)</title><rect x="73.8" y="323.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.8" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.45%)</title><rect x="73.8" y="307.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.8" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.45%)</title><rect x="73.8" y="291.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.8" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.45%)</title><rect x="73.8" y="275.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.8" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.45%)</title><rect x="73.8" y="259.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.8" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/383948727.shouldBlock (3 samples, 1.35%)</title><rect x="79.1" y="403.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (3 samples, 1.35%)</title><rect x="79.1" y="387.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (3 samples, 1.35%)</title><rect x="79.1" y="371.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.1" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.45%)</title><rect x="79.1" y="355.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.1" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.45%)</title><rect x="79.1" y="339.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$245/844459093.get$Lambda (1 samples, 0.45%)</title><rect x="79.1" y="323.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.1" y="334.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.45%)</title><rect x="84.4" y="355.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.45%)</title><rect x="84.4" y="339.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.45%)</title><rect x="84.4" y="323.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.4" y="334.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.45%)</title><rect x="84.4" y="307.0" width="5.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="87.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.45%)</title><rect x="89.7" y="355.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.45%)</title><rect x="89.7" y="339.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.45%)</title><rect x="89.7" y="323.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.45%)</title><rect x="89.7" y="307.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.45%)</title><rect x="89.7" y="291.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.45%)</title><rect x="89.7" y="275.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.45%)</title><rect x="89.7" y="259.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.45%)</title><rect x="89.7" y="243.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.45%)</title><rect x="89.7" y="227.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.7" y="238.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.45%)</title><rect x="89.7" y="211.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.7" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$245/844459093.test (1 samples, 0.45%)</title><rect x="89.7" y="195.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.7" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.45%)</title><rect x="89.7" y="179.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.7" y="190.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.45%)</title><rect x="89.7" y="163.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.7" y="174.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.80%)</title><rect x="95.0" y="435.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.0" y="446.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.80%)</title><rect x="95.0" y="419.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.0" y="430.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.35%)</title><rect x="95.0" y="403.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.35%)</title><rect x="95.0" y="387.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.90%)</title><rect x="95.0" y="371.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.45%)</title><rect x="100.4" y="355.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.45%)</title><rect x="100.4" y="339.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.45%)</title><rect x="100.4" y="323.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.45%)</title><rect x="100.4" y="307.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.4" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.45%)</title><rect x="100.4" y="291.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.4" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.45%)</title><rect x="105.7" y="371.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.7" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.45%)</title><rect x="105.7" y="355.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.45%)</title><rect x="105.7" y="339.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.7" y="350.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.45%)</title><rect x="105.7" y="323.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.7" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.45%)</title><rect x="105.7" y="307.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="108.7" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.45%)</title><rect x="111.0" y="403.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.45%)</title><rect x="111.0" y="387.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.45%)</title><rect x="111.0" y="371.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.0" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.45%)</title><rect x="111.0" y="355.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.45%)</title><rect x="111.0" y="339.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="114.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.45%)</title><rect x="116.3" y="435.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.45%)</title><rect x="116.3" y="419.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.45%)</title><rect x="116.3" y="403.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/2005350002.accept (1 samples, 0.45%)</title><rect x="116.3" y="387.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.45%)</title><rect x="116.3" y="371.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.45%)</title><rect x="116.3" y="355.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.45%)</title><rect x="121.6" y="451.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.45%)</title><rect x="121.6" y="435.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.45%)</title><rect x="121.6" y="419.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.45%)</title><rect x="121.6" y="403.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.45%)</title><rect x="121.6" y="387.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.45%)</title><rect x="121.6" y="371.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.45%)</title><rect x="121.6" y="355.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.45%)</title><rect x="121.6" y="339.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="124.6" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.45%)</title><rect x="121.6" y="323.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.45%)</title><rect x="121.6" y="307.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.45%)</title><rect x="121.6" y="291.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.45%)</title><rect x="121.6" y="275.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.6" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.45%)</title><rect x="121.6" y="259.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.45%)</title><rect x="121.6" y="243.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.6" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.run (137 samples, 61.71%)</title><rect x="126.9" y="515.0" width="728.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.9" y="526.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (137 samples, 61.71%)</title><rect x="126.9" y="499.0" width="728.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.9" y="510.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (137 samples, 61.71%)</title><rect x="126.9" y="483.0" width="728.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.9" y="494.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/377535479.run (130 samples, 58.56%)</title><rect x="142.9" y="467.0" width="691.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.9" y="478.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/377535479.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (130 samples, 58.56%)</title><rect x="142.9" y="451.0" width="691.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.9" y="462.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (130 samples, 58.56%)</title><rect x="142.9" y="435.0" width="691.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.9" y="446.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (121 samples, 54.50%)</title><rect x="142.9" y="419.0" width="643.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.9" y="430.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (19 samples, 8.56%)</title><rect x="148.2" y="403.0" width="101.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.2" y="414.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (19 samples, 8.56%)</title><rect x="148.2" y="387.0" width="101.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.2" y="398.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (19 samples, 8.56%)</title><rect x="148.2" y="371.0" width="101.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.2" y="382.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 7.21%)</title><rect x="164.1" y="355.0" width="85.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.1" y="366.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 7.21%)</title><rect x="164.1" y="339.0" width="85.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.1" y="350.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 7.21%)</title><rect x="164.1" y="323.0" width="85.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.1" y="334.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.35%)</title><rect x="164.1" y="307.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.35%)</title><rect x="164.1" y="291.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.35%)</title><rect x="164.1" y="275.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.45%)</title><rect x="164.1" y="259.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.45%)</title><rect x="164.1" y="243.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.1" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.90%)</title><rect x="169.5" y="259.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.5" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.90%)</title><rect x="169.5" y="243.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.5" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.90%)</title><rect x="169.5" y="227.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.90%)</title><rect x="169.5" y="211.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (2 samples, 0.90%)</title><rect x="169.5" y="195.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 4.95%)</title><rect x="180.1" y="307.0" width="58.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.1" y="318.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.90%)</title><rect x="180.1" y="291.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.90%)</title><rect x="180.1" y="275.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.90%)</title><rect x="180.1" y="259.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.90%)</title><rect x="180.1" y="243.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.1" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.90%)</title><rect x="180.1" y="227.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.90%)</title><rect x="180.1" y="211.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.90%)</title><rect x="180.1" y="195.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.90%)</title><rect x="180.1" y="179.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.1" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.45%)</title><rect x="190.7" y="291.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.45%)</title><rect x="190.7" y="275.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.90%)</title><rect x="196.0" y="291.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.90%)</title><rect x="196.0" y="275.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.90%)</title><rect x="196.0" y="259.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.90%)</title><rect x="196.0" y="243.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.45%)</title><rect x="201.4" y="227.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.45%)</title><rect x="206.7" y="291.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.45%)</title><rect x="206.7" y="275.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.25%)</title><rect x="212.0" y="291.0" width="26.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.0" y="302.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.35%)</title><rect x="212.0" y="275.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.90%)</title><rect x="227.9" y="275.0" width="10.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.90%)</title><rect x="227.9" y="259.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.90%)</title><rect x="227.9" y="243.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.45%)</title><rect x="233.2" y="227.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.45%)</title><rect x="233.2" y="211.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.90%)</title><rect x="238.6" y="307.0" width="10.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.90%)</title><rect x="238.6" y="291.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.90%)</title><rect x="238.6" y="275.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.90%)</title><rect x="238.6" y="259.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.90%)</title><rect x="238.6" y="243.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.6" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (100 samples, 45.05%)</title><rect x="249.2" y="403.0" width="531.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.2" y="414.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 7.21%)</title><rect x="249.2" y="387.0" width="85.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.2" y="398.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 6.31%)</title><rect x="259.8" y="371.0" width="74.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.8" y="382.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 6.31%)</title><rect x="259.8" y="355.0" width="74.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.8" y="366.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.90%)</title><rect x="265.1" y="339.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.1" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.90%)</title><rect x="265.1" y="323.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.1" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.90%)</title><rect x="265.1" y="307.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.1" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.90%)</title><rect x="265.1" y="291.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.1" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.90%)</title><rect x="265.1" y="275.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.45%)</title><rect x="275.8" y="339.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.45%)</title><rect x="275.8" y="323.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="281.1" y="339.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.1" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.45%)</title><rect x="281.1" y="323.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.1" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.45%)</title><rect x="281.1" y="307.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.1" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 4.05%)</title><rect x="286.4" y="339.0" width="47.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.4" y="350.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.70%)</title><rect x="302.3" y="323.0" width="31.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.3" y="334.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.70%)</title><rect x="302.3" y="307.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.3" y="318.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.45%)</title><rect x="334.2" y="387.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.2" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.45%)</title><rect x="334.2" y="371.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.2" y="382.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.45%)</title><rect x="334.2" y="355.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (32 samples, 14.41%)</title><rect x="339.5" y="387.0" width="170.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.5" y="398.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.90%)</title><rect x="344.9" y="371.0" width="10.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="347.9" y="382.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.90%)</title><rect x="344.9" y="355.0" width="10.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="347.9" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (29 samples, 13.06%)</title><rect x="355.5" y="371.0" width="154.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.5" y="382.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 4.50%)</title><rect x="355.5" y="355.0" width="53.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.5" y="366.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 3.60%)</title><rect x="366.1" y="339.0" width="42.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.1" y="350.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 3.60%)</title><rect x="366.1" y="323.0" width="42.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.1" y="334.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.25%)</title><rect x="371.4" y="307.0" width="26.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.4" y="318.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 2.25%)</title><rect x="371.4" y="291.0" width="26.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.4" y="302.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 2.25%)</title><rect x="371.4" y="275.0" width="26.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.4" y="286.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.35%)</title><rect x="382.1" y="259.0" width="15.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="385.1" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.45%)</title><rect x="382.1" y="243.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="385.1" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.45%)</title><rect x="382.1" y="227.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="385.1" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.45%)</title><rect x="387.4" y="243.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.4" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.45%)</title><rect x="387.4" y="227.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.4" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.45%)</title><rect x="392.7" y="243.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="395.7" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.45%)</title><rect x="392.7" y="227.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="395.7" y="238.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.45%)</title><rect x="398.0" y="307.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.0" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.45%)</title><rect x="403.3" y="307.0" width="5.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="406.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.45%)</title><rect x="408.6" y="355.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.6" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.45%)</title><rect x="408.6" y="339.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.45%)</title><rect x="408.6" y="323.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.45%)</title><rect x="414.0" y="355.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.0" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.45%)</title><rect x="414.0" y="339.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.0" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="414.0" y="323.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.0" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.45%)</title><rect x="414.0" y="307.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.0" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="414.0" y="291.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.0" y="302.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (17 samples, 7.66%)</title><rect x="419.3" y="355.0" width="90.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.3" y="366.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (17 samples, 7.66%)</title><rect x="419.3" y="339.0" width="90.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.3" y="350.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.45%)</title><rect x="419.3" y="323.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.45%)</title><rect x="419.3" y="307.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.3" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.45%)</title><rect x="419.3" y="291.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.3" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="424.6" y="323.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="427.6" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.45%)</title><rect x="424.6" y="307.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.6" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.45%)</title><rect x="424.6" y="291.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.45%)</title><rect x="424.6" y="275.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.6" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (15 samples, 6.76%)</title><rect x="429.9" y="323.0" width="79.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.9" y="334.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 4.95%)</title><rect x="451.2" y="307.0" width="58.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.2" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.90%)</title><rect x="456.5" y="291.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.90%)</title><rect x="456.5" y="275.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 3.60%)</title><rect x="467.1" y="291.0" width="42.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.1" y="302.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.90%)</title><rect x="477.7" y="275.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.35%)</title><rect x="488.4" y="275.0" width="15.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="491.4" y="286.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.45%)</title><rect x="504.3" y="275.0" width="5.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="507.3" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 22.52%)</title><rect x="509.6" y="387.0" width="265.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.6" y="398.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (50 samples, 22.52%)</title><rect x="509.6" y="371.0" width="265.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.6" y="382.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1501517362.process (44 samples, 19.82%)</title><rect x="515.0" y="355.0" width="233.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.0" y="366.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (43 samples, 19.37%)</title><rect x="520.3" y="339.0" width="228.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.3" y="350.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (43 samples, 19.37%)</title><rect x="520.3" y="323.0" width="228.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.3" y="334.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.45%)</title><rect x="520.3" y="307.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="523.3" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.45%)</title><rect x="520.3" y="291.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.3" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.45%)</title><rect x="520.3" y="275.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="523.3" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.45%)</title><rect x="520.3" y="259.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.3" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (42 samples, 18.92%)</title><rect x="525.6" y="307.0" width="223.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.6" y="318.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (42 samples, 18.92%)</title><rect x="525.6" y="291.0" width="223.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.6" y="302.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 16.67%)</title><rect x="541.5" y="275.0" width="196.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="544.5" y="286.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.90%)</title><rect x="557.5" y="259.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="560.5" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.45%)</title><rect x="568.1" y="259.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.1" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.45%)</title><rect x="573.4" y="259.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="576.4" y="270.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 13.51%)</title><rect x="578.7" y="259.0" width="159.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="581.7" y="270.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.45%)</title><rect x="605.3" y="243.0" width="5.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="608.3" y="254.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.45%)</title><rect x="605.3" y="227.0" width="5.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="608.3" y="238.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.35%)</title><rect x="610.6" y="243.0" width="16.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="613.6" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.90%)</title><rect x="626.6" y="243.0" width="10.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="629.6" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 7.21%)</title><rect x="637.2" y="243.0" width="85.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="640.2" y="254.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.45%)</title><rect x="722.3" y="243.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="725.3" y="254.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.45%)</title><rect x="727.6" y="243.0" width="5.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="730.6" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.45%)</title><rect x="732.9" y="243.0" width="5.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="735.9" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.45%)</title><rect x="738.2" y="275.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="741.2" y="286.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.45%)</title><rect x="743.5" y="275.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="746.5" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.45%)</title><rect x="748.8" y="355.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.8" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/791407423.complete (1 samples, 0.45%)</title><rect x="754.1" y="355.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.1" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$34 (1 samples, 0.45%)</title><rect x="754.1" y="339.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.45%)</title><rect x="754.1" y="323.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.45%)</title><rect x="754.1" y="307.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.1" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.90%)</title><rect x="759.5" y="355.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="762.5" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.90%)</title><rect x="759.5" y="339.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="762.5" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/791407423.get$Lambda (2 samples, 0.90%)</title><rect x="759.5" y="323.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.5" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/791407423.&lt;init&gt; (1 samples, 0.45%)</title><rect x="764.8" y="307.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="767.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.45%)</title><rect x="770.1" y="355.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.45%)</title><rect x="775.4" y="387.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.45%)</title><rect x="775.4" y="371.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.45%)</title><rect x="775.4" y="355.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/312166925.accept (1 samples, 0.45%)</title><rect x="775.4" y="339.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="778.4" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (1 samples, 0.45%)</title><rect x="775.4" y="323.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.4" y="334.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.45%)</title><rect x="775.4" y="307.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="778.4" y="318.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.45%)</title><rect x="775.4" y="291.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.4" y="302.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.45%)</title><rect x="775.4" y="275.0" width="5.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="778.4" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.45%)</title><rect x="780.7" y="403.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="783.7" y="414.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.45%)</title><rect x="780.7" y="387.0" width="5.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="783.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.35%)</title><rect x="786.0" y="419.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.70%)</title><rect x="802.0" y="419.0" width="31.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.0" y="430.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.90%)</title><rect x="812.6" y="403.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="815.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.90%)</title><rect x="823.2" y="403.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.90%)</title><rect x="823.2" y="387.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.2" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$270/1112581598.accept (2 samples, 0.90%)</title><rect x="823.2" y="371.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.2" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (2 samples, 0.90%)</title><rect x="823.2" y="355.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1283762235.complete (2 samples, 0.90%)</title><rect x="823.2" y="339.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.2" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (2 samples, 0.90%)</title><rect x="823.2" y="323.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.2" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.90%)</title><rect x="823.2" y="307.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.90%)</title><rect x="823.2" y="291.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.90%)</title><rect x="823.2" y="275.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="826.2" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.90%)</title><rect x="823.2" y="259.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.2" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.90%)</title><rect x="823.2" y="243.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.80%)</title><rect x="833.9" y="467.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.9" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.35%)</title><rect x="839.2" y="451.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="842.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.45%)</title><rect x="849.8" y="435.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.45%)</title><rect x="849.8" y="419.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.45%)</title><rect x="849.8" y="403.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.45%)</title><rect x="849.8" y="387.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.90%)</title><rect x="855.1" y="515.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.45%)</title><rect x="855.1" y="499.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.1" y="510.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.45%)</title><rect x="855.1" y="483.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="858.1" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.45%)</title><rect x="855.1" y="467.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.1" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.45%)</title><rect x="855.1" y="451.0" width="5.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="858.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.45%)</title><rect x="860.5" y="499.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.45%)</title><rect x="860.5" y="483.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.45%)</title><rect x="860.5" y="467.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="863.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.45%)</title><rect x="860.5" y="451.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.45%)</title><rect x="860.5" y="435.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="863.5" y="446.0"></text>
</g>
<g>
<title>start_thread (61 samples, 27.48%)</title><rect x="865.8" y="515.0" width="324.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="868.8" y="526.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (61 samples, 27.48%)</title><rect x="865.8" y="499.0" width="324.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="868.8" y="510.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.50%)</title><rect x="865.8" y="483.0" width="53.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.8" y="494.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.50%)</title><rect x="865.8" y="467.0" width="53.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.8" y="478.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 3.60%)</title><rect x="865.8" y="451.0" width="42.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.8" y="462.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 3.60%)</title><rect x="865.8" y="435.0" width="42.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="868.8" y="446.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.35%)</title><rect x="887.0" y="419.0" width="16.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.0" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.90%)</title><rect x="892.3" y="403.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.3" y="414.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.45%)</title><rect x="897.7" y="387.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="900.7" y="398.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.45%)</title><rect x="903.0" y="419.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.0" y="430.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.90%)</title><rect x="908.3" y="451.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.3" y="462.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.90%)</title><rect x="908.3" y="435.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.3" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.90%)</title><rect x="908.3" y="419.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.3" y="430.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.90%)</title><rect x="908.3" y="403.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.3" y="414.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.90%)</title><rect x="908.3" y="387.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.3" y="398.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.90%)</title><rect x="908.3" y="371.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.3" y="382.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.90%)</title><rect x="908.3" y="355.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.3" y="366.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.45%)</title><rect x="908.3" y="339.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.3" y="350.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.45%)</title><rect x="913.6" y="339.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.6" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (50 samples, 22.52%)</title><rect x="918.9" y="483.0" width="265.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.9" y="494.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (50 samples, 22.52%)</title><rect x="918.9" y="467.0" width="265.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.9" y="478.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (50 samples, 22.52%)</title><rect x="918.9" y="451.0" width="265.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.9" y="462.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (50 samples, 22.52%)</title><rect x="918.9" y="435.0" width="265.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.9" y="446.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (47 samples, 21.17%)</title><rect x="918.9" y="419.0" width="249.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.9" y="430.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (47 samples, 21.17%)</title><rect x="918.9" y="403.0" width="249.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.9" y="414.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Arena::Arena(MemoryType) (1 samples, 0.45%)</title><rect x="918.9" y="387.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.9" y="398.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.45%)</title><rect x="918.9" y="371.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="921.9" y="382.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.45%)</title><rect x="918.9" y="355.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.9" y="366.0"></text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.45%)</title><rect x="924.2" y="387.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.2" y="398.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.45%)</title><rect x="924.2" y="371.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.2" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.45%)</title><rect x="924.2" y="355.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.2" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.45%)</title><rect x="924.2" y="339.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.2" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.45%)</title><rect x="924.2" y="323.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="927.2" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="924.2" y="307.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.2" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.45%)</title><rect x="924.2" y="291.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="927.2" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.45%)</title><rect x="924.2" y="275.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="927.2" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.45%)</title><rect x="924.2" y="259.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.2" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.45%)</title><rect x="924.2" y="243.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.2" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="924.2" y="227.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="927.2" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="924.2" y="211.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="927.2" y="222.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.45%)</title><rect x="924.2" y="195.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.2" y="206.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.45%)</title><rect x="924.2" y="179.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.2" y="190.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.45%)</title><rect x="924.2" y="163.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.2" y="174.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.45%)</title><rect x="924.2" y="147.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.2" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.45%)</title><rect x="924.2" y="131.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="927.2" y="142.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.45%)</title><rect x="924.2" y="115.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.2" y="126.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.45%)</title><rect x="924.2" y="99.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="927.2" y="110.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 11.71%)</title><rect x="929.5" y="387.0" width="138.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.5" y="398.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.45%)</title><rect x="929.5" y="371.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.5" y="382.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.45%)</title><rect x="929.5" y="355.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.5" y="366.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.45%)</title><rect x="934.9" y="371.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="937.9" y="382.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.45%)</title><rect x="934.9" y="355.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.9" y="366.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.45%)</title><rect x="934.9" y="339.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.9" y="350.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.35%)</title><rect x="940.2" y="371.0" width="15.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.2" y="382.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.45%)</title><rect x="940.2" y="355.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.2" y="366.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.45%)</title><rect x="945.5" y="355.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.5" y="366.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.45%)</title><rect x="950.8" y="355.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="953.8" y="366.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.45%)</title><rect x="950.8" y="339.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.8" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 9.46%)</title><rect x="956.1" y="371.0" width="111.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.1" y="382.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.90%)</title><rect x="956.1" y="355.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="959.1" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.45%)</title><rect x="966.8" y="355.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="969.8" y="366.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="966.8" y="339.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.8" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.45%)</title><rect x="972.1" y="355.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.1" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 4.05%)</title><rect x="977.4" y="355.0" width="47.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.4" y="366.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="993.3" y="339.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="350.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.45%)</title><rect x="998.6" y="339.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.6" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.35%)</title><rect x="1004.0" y="339.0" width="15.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.0" y="350.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="1014.6" y="323.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.6" y="334.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.45%)</title><rect x="1019.9" y="339.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.9" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.35%)</title><rect x="1025.2" y="355.0" width="16.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.2" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.45%)</title><rect x="1041.2" y="355.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.2" y="366.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.45%)</title><rect x="1046.5" y="355.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.5" y="366.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.45%)</title><rect x="1046.5" y="339.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.5" y="350.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.45%)</title><rect x="1046.5" y="323.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.5" y="334.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.45%)</title><rect x="1051.8" y="355.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.8" y="366.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="1051.8" y="339.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.8" y="350.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.90%)</title><rect x="1057.1" y="355.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.1" y="366.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.45%)</title><rect x="1062.4" y="339.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.4" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 5.86%)</title><rect x="1067.7" y="387.0" width="69.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.7" y="398.0">Compile..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.45%)</title><rect x="1067.7" y="371.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.45%)</title><rect x="1067.7" y="355.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.45%)</title><rect x="1067.7" y="339.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.45%)</title><rect x="1067.7" y="323.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.7" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 4.50%)</title><rect x="1073.1" y="371.0" width="53.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.1" y="382.0">Phase..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.45%)</title><rect x="1073.1" y="355.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.1" y="366.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.45%)</title><rect x="1073.1" y="339.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.1" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::lazy_replace(Node*, Node*) (1 samples, 0.45%)</title><rect x="1073.1" y="323.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.1" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.90%)</title><rect x="1078.4" y="355.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.4" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.35%)</title><rect x="1089.0" y="355.0" width="16.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.0" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.90%)</title><rect x="1105.0" y="355.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.0" y="366.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.45%)</title><rect x="1110.3" y="339.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.3" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.90%)</title><rect x="1115.6" y="355.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.6" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.45%)</title><rect x="1120.9" y="339.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.9" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.90%)</title><rect x="1126.2" y="371.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.90%)</title><rect x="1126.2" y="355.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="366.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.90%)</title><rect x="1126.2" y="339.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="350.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.90%)</title><rect x="1126.2" y="323.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="307.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="291.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.2" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="275.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.2" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="259.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="243.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="227.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="211.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="195.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="179.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="163.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.2" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="147.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.2" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="131.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.2" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="115.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.2" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="99.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.90%)</title><rect x="1126.2" y="83.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.2" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.45%)</title><rect x="1126.2" y="67.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.2" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.45%)</title><rect x="1126.2" y="51.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.2" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.45%)</title><rect x="1126.2" y="35.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="46.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.45%)</title><rect x="1131.5" y="67.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.5" y="78.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.45%)</title><rect x="1131.5" y="51.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.5" y="62.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.80%)</title><rect x="1136.8" y="387.0" width="21.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.8" y="398.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.80%)</title><rect x="1136.8" y="371.0" width="21.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.8" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.80%)</title><rect x="1136.8" y="355.0" width="21.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.8" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.80%)</title><rect x="1136.8" y="339.0" width="21.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.8" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.80%)</title><rect x="1136.8" y="323.0" width="21.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.8" y="334.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.35%)</title><rect x="1136.8" y="307.0" width="16.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1136.8" y="291.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1136.8" y="275.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1136.8" y="259.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1136.8" y="243.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1136.8" y="227.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1136.8" y="211.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1136.8" y="195.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1136.8" y="179.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1136.8" y="163.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1136.8" y="147.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1136.8" y="131.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1136.8" y="115.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.8" y="126.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.45%)</title><rect x="1136.8" y="99.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.8" y="110.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.45%)</title><rect x="1136.8" y="83.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.8" y="94.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.45%)</title><rect x="1136.8" y="67.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.8" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.90%)</title><rect x="1142.2" y="291.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="302.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1142.2" y="275.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.2" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.45%)</title><rect x="1142.2" y="259.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="270.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.45%)</title><rect x="1142.2" y="243.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.2" y="254.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.45%)</title><rect x="1142.2" y="227.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1147.5" y="275.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.5" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1147.5" y="259.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1147.5" y="243.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1147.5" y="227.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1147.5" y="211.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1147.5" y="195.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.5" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1147.5" y="179.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.5" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1147.5" y="163.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1147.5" y="147.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1147.5" y="131.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1147.5" y="115.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.45%)</title><rect x="1152.8" y="307.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.8" y="318.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.45%)</title><rect x="1152.8" y="291.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.8" y="302.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.45%)</title><rect x="1152.8" y="275.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.8" y="286.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.45%)</title><rect x="1152.8" y="259.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.8" y="270.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.45%)</title><rect x="1152.8" y="243.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.8" y="254.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.90%)</title><rect x="1158.1" y="387.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="398.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.45%)</title><rect x="1158.1" y="371.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="382.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.45%)</title><rect x="1163.4" y="371.0" width="5.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1166.4" y="382.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.35%)</title><rect x="1168.7" y="419.0" width="16.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.7" y="430.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.35%)</title><rect x="1168.7" y="403.0" width="16.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.7" y="414.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.90%)</title><rect x="1168.7" y="387.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="398.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.90%)</title><rect x="1168.7" y="371.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="382.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.45%)</title><rect x="1168.7" y="355.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="366.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.45%)</title><rect x="1168.7" y="339.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="350.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.45%)</title><rect x="1174.1" y="355.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.45%)</title><rect x="1174.1" y="339.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.45%)</title><rect x="1174.1" y="323.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.45%)</title><rect x="1174.1" y="307.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="318.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.45%)</title><rect x="1174.1" y="291.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="302.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.45%)</title><rect x="1174.1" y="275.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="286.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.45%)</title><rect x="1174.1" y="259.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="270.0"></text>
</g>
<g>
<title>TraceTime::~TraceTime() (1 samples, 0.45%)</title><rect x="1179.4" y="387.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.45%)</title><rect x="1184.7" y="483.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.7" y="494.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.45%)</title><rect x="1184.7" y="467.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.45%)</title><rect x="1184.7" y="451.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.45%)</title><rect x="1184.7" y="435.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.45%)</title><rect x="1184.7" y="419.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.45%)</title><rect x="1184.7" y="403.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.45%)</title><rect x="1184.7" y="387.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.45%)</title><rect x="1184.7" y="371.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.45%)</title><rect x="1184.7" y="355.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.45%)</title><rect x="1184.7" y="339.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.7" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.45%)</title><rect x="1184.7" y="323.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="334.0"></text>
</g>
</g>
</svg>
