<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (126 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 19.84%)</title><rect x="10.0" y="947.0" width="234.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 19.84%)</title><rect x="10.0" y="931.0" width="234.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.79%)</title><rect x="10.0" y="915.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.79%)</title><rect x="10.0" y="899.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1694236050.accept (1 samples, 0.79%)</title><rect x="10.0" y="883.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.79%)</title><rect x="10.0" y="867.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.79%)</title><rect x="10.0" y="851.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.79%)</title><rect x="10.0" y="835.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 13.49%)</title><rect x="19.4" y="915.0" width="159.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.4" y="926.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1244756002.accept (17 samples, 13.49%)</title><rect x="19.4" y="899.0" width="159.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.4" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 13.49%)</title><rect x="19.4" y="883.0" width="159.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 10.32%)</title><rect x="19.4" y="867.0" width="121.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.4" y="878.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 10.32%)</title><rect x="19.4" y="851.0" width="121.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="862.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 10.32%)</title><rect x="19.4" y="835.0" width="121.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.4" y="846.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 10.32%)</title><rect x="19.4" y="819.0" width="121.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.4" y="830.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 10.32%)</title><rect x="19.4" y="803.0" width="121.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.4" y="814.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 10.32%)</title><rect x="19.4" y="787.0" width="121.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.4" y="798.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 9.52%)</title><rect x="28.7" y="771.0" width="112.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="782.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.59%)</title><rect x="28.7" y="755.0" width="18.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.59%)</title><rect x="28.7" y="739.0" width="18.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.59%)</title><rect x="28.7" y="723.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 7.94%)</title><rect x="47.5" y="755.0" width="93.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.5" y="766.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 7.94%)</title><rect x="47.5" y="739.0" width="93.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.5" y="750.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 7.94%)</title><rect x="47.5" y="723.0" width="93.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.5" y="734.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 7.94%)</title><rect x="47.5" y="707.0" width="93.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.5" y="718.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (9 samples, 7.14%)</title><rect x="56.8" y="691.0" width="84.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="59.8" y="702.0">sun/misc/U..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.79%)</title><rect x="56.8" y="675.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="59.8" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 5.56%)</title><rect x="66.2" y="675.0" width="65.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="69.2" y="686.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 3.97%)</title><rect x="66.2" y="659.0" width="46.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="69.2" y="670.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.79%)</title><rect x="113.0" y="659.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="116.0" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.79%)</title><rect x="122.4" y="659.0" width="9.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="125.4" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.79%)</title><rect x="131.7" y="675.0" width="9.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="134.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.79%)</title><rect x="141.1" y="867.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.79%)</title><rect x="141.1" y="851.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.79%)</title><rect x="141.1" y="835.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.38%)</title><rect x="150.5" y="867.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.5" y="878.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.38%)</title><rect x="150.5" y="851.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.5" y="862.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 2.38%)</title><rect x="150.5" y="835.0" width="28.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.5" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.59%)</title><rect x="150.5" y="819.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.5" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.59%)</title><rect x="150.5" y="803.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.79%)</title><rect x="159.8" y="787.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="162.8" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.79%)</title><rect x="159.8" y="771.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="162.8" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.79%)</title><rect x="169.2" y="819.0" width="9.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="172.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 5.56%)</title><rect x="178.6" y="915.0" width="65.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.6" y="926.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 5.56%)</title><rect x="178.6" y="899.0" width="65.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="910.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.97%)</title><rect x="178.6" y="883.0" width="46.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.6" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.79%)</title><rect x="178.6" y="867.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.79%)</title><rect x="178.6" y="851.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.79%)</title><rect x="178.6" y="835.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.79%)</title><rect x="178.6" y="819.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.79%)</title><rect x="178.6" y="803.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.79%)</title><rect x="178.6" y="787.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="798.0"></text>
</g>
<g>
<title>java/util/function/Predicate.negate (1 samples, 0.79%)</title><rect x="178.6" y="771.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 3.17%)</title><rect x="187.9" y="867.0" width="37.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.9" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 3.17%)</title><rect x="187.9" y="851.0" width="37.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.9" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 2.38%)</title><rect x="187.9" y="835.0" width="28.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.9" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 2.38%)</title><rect x="187.9" y="819.0" width="28.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.9" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.59%)</title><rect x="187.9" y="803.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.79%)</title><rect x="187.9" y="787.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.79%)</title><rect x="187.9" y="771.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.79%)</title><rect x="187.9" y="755.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.79%)</title><rect x="187.9" y="739.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.79%)</title><rect x="187.9" y="723.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.79%)</title><rect x="187.9" y="707.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.79%)</title><rect x="197.3" y="787.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.79%)</title><rect x="197.3" y="771.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.79%)</title><rect x="197.3" y="755.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.79%)</title><rect x="197.3" y="739.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.79%)</title><rect x="197.3" y="723.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.79%)</title><rect x="197.3" y="707.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.79%)</title><rect x="197.3" y="691.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.79%)</title><rect x="206.7" y="803.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.79%)</title><rect x="206.7" y="787.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.79%)</title><rect x="206.7" y="771.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.7" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.79%)</title><rect x="206.7" y="755.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.79%)</title><rect x="216.0" y="835.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.79%)</title><rect x="216.0" y="819.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.79%)</title><rect x="216.0" y="803.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.79%)</title><rect x="216.0" y="787.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.79%)</title><rect x="216.0" y="771.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.59%)</title><rect x="225.4" y="883.0" width="18.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.59%)</title><rect x="225.4" y="867.0" width="18.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.79%)</title><rect x="225.4" y="851.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.79%)</title><rect x="225.4" y="835.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.79%)</title><rect x="225.4" y="819.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.79%)</title><rect x="225.4" y="803.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.79%)</title><rect x="225.4" y="787.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.79%)</title><rect x="225.4" y="771.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.79%)</title><rect x="225.4" y="755.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.79%)</title><rect x="225.4" y="739.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.79%)</title><rect x="225.4" y="723.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.79%)</title><rect x="225.4" y="707.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.79%)</title><rect x="225.4" y="691.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.79%)</title><rect x="225.4" y="675.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.4" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.79%)</title><rect x="225.4" y="659.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.4" y="670.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.79%)</title><rect x="225.4" y="643.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="228.4" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.79%)</title><rect x="225.4" y="627.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="228.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleConnections (1 samples, 0.79%)</title><rect x="234.8" y="851.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.8" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.79%)</title><rect x="234.8" y="835.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (50 samples, 39.68%)</title><rect x="244.1" y="947.0" width="468.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.1" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (50 samples, 39.68%)</title><rect x="244.1" y="931.0" width="468.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.1" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (50 samples, 39.68%)</title><rect x="244.1" y="915.0" width="468.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.1" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/546202908.run (25 samples, 19.84%)</title><rect x="291.0" y="899.0" width="234.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.0" y="910.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (25 samples, 19.84%)</title><rect x="291.0" y="883.0" width="234.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.0" y="894.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (25 samples, 19.84%)</title><rect x="291.0" y="867.0" width="234.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.0" y="878.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (23 samples, 18.25%)</title><rect x="291.0" y="851.0" width="215.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="862.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 6.35%)</title><rect x="291.0" y="835.0" width="74.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.0" y="846.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 6.35%)</title><rect x="291.0" y="819.0" width="74.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.0" y="830.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 6.35%)</title><rect x="291.0" y="803.0" width="74.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.0" y="814.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 6.35%)</title><rect x="291.0" y="787.0" width="74.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.0" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 4.76%)</title><rect x="300.3" y="771.0" width="56.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.3" y="782.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 4.76%)</title><rect x="300.3" y="755.0" width="56.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.3" y="766.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.59%)</title><rect x="300.3" y="739.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.59%)</title><rect x="300.3" y="723.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.59%)</title><rect x="300.3" y="707.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.79%)</title><rect x="300.3" y="691.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.79%)</title><rect x="300.3" y="675.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.79%)</title><rect x="309.7" y="691.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.79%)</title><rect x="309.7" y="675.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 3.17%)</title><rect x="319.0" y="739.0" width="37.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.0" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.79%)</title><rect x="319.0" y="723.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.79%)</title><rect x="319.0" y="707.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 2.38%)</title><rect x="328.4" y="723.0" width="28.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.4" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 2.38%)</title><rect x="328.4" y="707.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.4" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 2.38%)</title><rect x="328.4" y="691.0" width="28.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.4" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 2.38%)</title><rect x="328.4" y="675.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.4" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.59%)</title><rect x="328.4" y="659.0" width="18.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.59%)</title><rect x="328.4" y="643.0" width="18.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.59%)</title><rect x="328.4" y="627.0" width="18.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.59%)</title><rect x="328.4" y="611.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 1.59%)</title><rect x="328.4" y="595.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.79%)</title><rect x="337.8" y="579.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.79%)</title><rect x="347.1" y="659.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.79%)</title><rect x="347.1" y="643.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.79%)</title><rect x="347.1" y="627.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.79%)</title><rect x="347.1" y="611.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.1" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.79%)</title><rect x="347.1" y="595.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="350.1" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.79%)</title><rect x="347.1" y="579.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.1" y="590.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.79%)</title><rect x="347.1" y="563.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.1" y="574.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.79%)</title><rect x="356.5" y="771.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="359.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (15 samples, 11.90%)</title><rect x="365.9" y="835.0" width="140.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.9" y="846.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 3.17%)</title><rect x="365.9" y="819.0" width="37.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.9" y="830.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 3.17%)</title><rect x="365.9" y="803.0" width="37.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.9" y="814.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 2.38%)</title><rect x="375.2" y="787.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.2" y="798.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.79%)</title><rect x="384.6" y="771.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.79%)</title><rect x="384.6" y="755.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.79%)</title><rect x="384.6" y="739.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.79%)</title><rect x="384.6" y="723.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.79%)</title><rect x="384.6" y="707.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.79%)</title><rect x="384.6" y="691.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.79%)</title><rect x="394.0" y="771.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (7 samples, 5.56%)</title><rect x="403.3" y="819.0" width="65.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="830.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (7 samples, 5.56%)</title><rect x="403.3" y="803.0" width="65.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.59%)</title><rect x="403.3" y="787.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.59%)</title><rect x="403.3" y="771.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.79%)</title><rect x="412.7" y="755.0" width="9.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="415.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.79%)</title><rect x="422.1" y="787.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.79%)</title><rect x="422.1" y="771.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.79%)</title><rect x="422.1" y="755.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.1" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 3.17%)</title><rect x="431.4" y="787.0" width="37.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.4" y="798.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 3.17%)</title><rect x="431.4" y="771.0" width="37.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.4" y="782.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 3.17%)</title><rect x="431.4" y="755.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="434.4" y="766.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.59%)</title><rect x="450.2" y="739.0" width="18.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.79%)</title><rect x="459.5" y="723.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.79%)</title><rect x="459.5" y="707.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.59%)</title><rect x="468.9" y="819.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 1.59%)</title><rect x="468.9" y="803.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1823890470.process (1 samples, 0.79%)</title><rect x="468.9" y="787.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.79%)</title><rect x="468.9" y="771.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.79%)</title><rect x="468.9" y="755.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.79%)</title><rect x="468.9" y="739.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.79%)</title><rect x="468.9" y="723.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="471.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.79%)</title><rect x="478.3" y="787.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.79%)</title><rect x="478.3" y="771.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.3" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.79%)</title><rect x="478.3" y="755.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.59%)</title><rect x="487.6" y="819.0" width="18.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.79%)</title><rect x="497.0" y="803.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.79%)</title><rect x="497.0" y="787.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1328976500.accept (1 samples, 0.79%)</title><rect x="497.0" y="771.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (1 samples, 0.79%)</title><rect x="497.0" y="755.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.0" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.79%)</title><rect x="497.0" y="739.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.0" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.79%)</title><rect x="497.0" y="723.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.0" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.79%)</title><rect x="497.0" y="707.0" width="9.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="500.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.79%)</title><rect x="497.0" y="691.0" width="9.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="500.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.59%)</title><rect x="506.3" y="851.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.79%)</title><rect x="515.7" y="835.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="518.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.79%)</title><rect x="515.7" y="819.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$270/1921798430.accept (1 samples, 0.79%)</title><rect x="515.7" y="803.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$1 (1 samples, 0.79%)</title><rect x="515.7" y="787.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="518.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1398560043.complete (1 samples, 0.79%)</title><rect x="515.7" y="771.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.79%)</title><rect x="515.7" y="755.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.79%)</title><rect x="515.7" y="739.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.79%)</title><rect x="515.7" y="723.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.79%)</title><rect x="515.7" y="707.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.79%)</title><rect x="515.7" y="691.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.7" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.79%)</title><rect x="515.7" y="675.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.59%)</title><rect x="525.1" y="899.0" width="18.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="528.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.59%)</title><rect x="525.1" y="883.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="528.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.59%)</title><rect x="525.1" y="867.0" width="18.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="528.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 1.59%)</title><rect x="525.1" y="851.0" width="18.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="528.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 14.29%)</title><rect x="543.8" y="899.0" width="168.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.8" y="910.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 14.29%)</title><rect x="543.8" y="883.0" width="168.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.8" y="894.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 12.70%)</title><rect x="562.5" y="867.0" width="149.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="565.5" y="878.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (16 samples, 12.70%)</title><rect x="562.5" y="851.0" width="149.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.5" y="862.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (16 samples, 12.70%)</title><rect x="562.5" y="835.0" width="149.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.5" y="846.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (13 samples, 10.32%)</title><rect x="581.3" y="819.0" width="121.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="584.3" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.79%)</title><rect x="590.6" y="803.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="593.6" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.79%)</title><rect x="600.0" y="803.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.0" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.79%)</title><rect x="609.4" y="803.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="612.4" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.59%)</title><rect x="618.7" y="803.0" width="18.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="621.7" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 3.97%)</title><rect x="637.5" y="803.0" width="46.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="640.5" y="814.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.79%)</title><rect x="684.3" y="803.0" width="9.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="687.3" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.79%)</title><rect x="693.7" y="803.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="696.7" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.79%)</title><rect x="703.0" y="819.0" width="9.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="706.0" y="830.0"></text>
</g>
<g>
<title>start_thread (51 samples, 40.48%)</title><rect x="712.4" y="947.0" width="477.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="715.4" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (51 samples, 40.48%)</title><rect x="712.4" y="931.0" width="477.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="715.4" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 5.56%)</title><rect x="712.4" y="915.0" width="65.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="715.4" y="926.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.79%)</title><rect x="712.4" y="899.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="715.4" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.79%)</title><rect x="712.4" y="883.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.4" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.79%)</title><rect x="712.4" y="867.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="715.4" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (6 samples, 4.76%)</title><rect x="721.7" y="899.0" width="56.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="724.7" y="910.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 3.97%)</title><rect x="721.7" y="883.0" width="46.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="724.7" y="894.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.79%)</title><rect x="721.7" y="867.0" width="9.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.7" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.59%)</title><rect x="731.1" y="867.0" width="18.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="734.1" y="878.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.79%)</title><rect x="740.5" y="851.0" width="9.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="743.5" y="862.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.59%)</title><rect x="749.8" y="867.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="752.8" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.79%)</title><rect x="768.6" y="883.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.6" y="894.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.79%)</title><rect x="768.6" y="867.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.6" y="878.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.79%)</title><rect x="768.6" y="851.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.6" y="862.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.79%)</title><rect x="768.6" y="835.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="771.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (44 samples, 34.92%)</title><rect x="777.9" y="915.0" width="412.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="780.9" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (44 samples, 34.92%)</title><rect x="777.9" y="899.0" width="412.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="780.9" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (43 samples, 34.13%)</title><rect x="777.9" y="883.0" width="402.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="780.9" y="894.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (40 samples, 31.75%)</title><rect x="777.9" y="867.0" width="374.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="780.9" y="878.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (40 samples, 31.75%)</title><rect x="777.9" y="851.0" width="374.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="780.9" y="862.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.79%)</title><rect x="777.9" y="835.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="780.9" y="846.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.79%)</title><rect x="777.9" y="819.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="780.9" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.79%)</title><rect x="777.9" y="803.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="780.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.79%)</title><rect x="777.9" y="787.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.79%)</title><rect x="777.9" y="771.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="777.9" y="755.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="777.9" y="739.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="777.9" y="723.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="780.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.79%)</title><rect x="777.9" y="707.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="780.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="777.9" y="691.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="780.9" y="702.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 16.67%)</title><rect x="787.3" y="835.0" width="196.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="790.3" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 2.38%)</title><rect x="787.3" y="819.0" width="28.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.3" y="830.0">Co..</text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 2.38%)</title><rect x="787.3" y="803.0" width="28.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="790.3" y="814.0">Co..</text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.79%)</title><rect x="787.3" y="787.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.3" y="798.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.79%)</title><rect x="787.3" y="771.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.3" y="782.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.79%)</title><rect x="787.3" y="755.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.3" y="766.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.79%)</title><rect x="787.3" y="739.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.3" y="750.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.79%)</title><rect x="787.3" y="723.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.3" y="734.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 1.59%)</title><rect x="796.7" y="787.0" width="18.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="798.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 1.59%)</title><rect x="796.7" y="771.0" width="18.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="782.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.79%)</title><rect x="806.0" y="755.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.0" y="766.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.79%)</title><rect x="806.0" y="739.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.0" y="750.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) [clone .constprop.172] (1 samples, 0.79%)</title><rect x="806.0" y="723.0" width="9.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.0" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.79%)</title><rect x="815.4" y="819.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.4" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.79%)</title><rect x="815.4" y="803.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.4" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.79%)</title><rect x="815.4" y="787.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="818.4" y="798.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.79%)</title><rect x="815.4" y="771.0" width="9.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="818.4" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.59%)</title><rect x="824.8" y="819.0" width="18.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.8" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.59%)</title><rect x="824.8" y="803.0" width="18.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.8" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.59%)</title><rect x="824.8" y="787.0" width="18.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="827.8" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.79%)</title><rect x="834.1" y="771.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="837.1" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.79%)</title><rect x="834.1" y="755.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.1" y="766.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.79%)</title><rect x="834.1" y="739.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.79%)</title><rect x="843.5" y="819.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="846.5" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.79%)</title><rect x="843.5" y="803.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="846.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.79%)</title><rect x="843.5" y="787.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="846.5" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.79%)</title><rect x="843.5" y="771.0" width="9.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="846.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 11.11%)</title><rect x="852.9" y="819.0" width="131.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.9" y="830.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.79%)</title><rect x="852.9" y="803.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.9" y="814.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.79%)</title><rect x="862.2" y="803.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="865.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.59%)</title><rect x="871.6" y="803.0" width="18.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="874.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 3.17%)</title><rect x="890.3" y="803.0" width="37.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.3" y="814.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.79%)</title><rect x="899.7" y="787.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.7" y="798.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.79%)</title><rect x="909.0" y="787.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="912.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.79%)</title><rect x="918.4" y="787.0" width="9.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.4" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.79%)</title><rect x="918.4" y="771.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.79%)</title><rect x="927.8" y="803.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.79%)</title><rect x="937.1" y="803.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.1" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.79%)</title><rect x="937.1" y="787.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.1" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.79%)</title><rect x="937.1" y="771.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="940.1" y="782.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.79%)</title><rect x="937.1" y="755.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.79%)</title><rect x="946.5" y="803.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="949.5" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.59%)</title><rect x="955.9" y="803.0" width="18.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="958.9" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 1.59%)</title><rect x="955.9" y="787.0" width="18.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.9" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.79%)</title><rect x="974.6" y="803.0" width="9.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="977.6" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 7.14%)</title><rect x="984.0" y="835.0" width="84.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.0" y="846.0">Compile::O..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.79%)</title><rect x="984.0" y="819.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.79%)</title><rect x="984.0" y="803.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.79%)</title><rect x="984.0" y="787.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.0" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.79%)</title><rect x="984.0" y="771.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.0" y="782.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.79%)</title><rect x="984.0" y="755.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.0" y="766.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.79%)</title><rect x="984.0" y="739.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.0" y="750.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.79%)</title><rect x="984.0" y="723.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.0" y="734.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.79%)</title><rect x="984.0" y="707.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.0" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.79%)</title><rect x="984.0" y="691.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.0" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="984.0" y="675.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.0" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="984.0" y="659.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.0" y="670.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.79%)</title><rect x="984.0" y="643.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.0" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.79%)</title><rect x="984.0" y="627.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.0" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.79%)</title><rect x="984.0" y="611.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.0" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.79%)</title><rect x="984.0" y="595.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.0" y="606.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.79%)</title><rect x="984.0" y="579.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.0" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.79%)</title><rect x="984.0" y="563.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.0" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.79%)</title><rect x="993.3" y="819.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 4.76%)</title><rect x="1002.7" y="819.0" width="56.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.7" y="830.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.79%)</title><rect x="1002.7" y="803.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 3.17%)</title><rect x="1012.1" y="803.0" width="37.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.1" y="814.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.59%)</title><rect x="1021.4" y="787.0" width="18.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.4" y="798.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.79%)</title><rect x="1021.4" y="771.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="782.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.79%)</title><rect x="1030.8" y="771.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.8" y="782.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.79%)</title><rect x="1030.8" y="755.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.8" y="766.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.79%)</title><rect x="1030.8" y="739.0" width="9.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1033.8" y="750.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.79%)</title><rect x="1040.2" y="787.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1043.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.79%)</title><rect x="1049.5" y="803.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.79%)</title><rect x="1058.9" y="819.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.79%)</title><rect x="1058.9" y="803.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="814.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseTransform*) (1 samples, 0.79%)</title><rect x="1058.9" y="787.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.79%)</title><rect x="1058.9" y="771.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 7.14%)</title><rect x="1068.3" y="835.0" width="84.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.3" y="846.0">ParseGener..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 7.14%)</title><rect x="1068.3" y="819.0" width="84.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.3" y="830.0">Parse::Par..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.79%)</title><rect x="1068.3" y="803.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.79%)</title><rect x="1068.3" y="787.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.3" y="798.0"></text>
</g>
<g>
<title>SafePointNode::Opcode() const (1 samples, 0.79%)</title><rect x="1068.3" y="771.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 6.35%)</title><rect x="1077.6" y="803.0" width="74.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="814.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 6.35%)</title><rect x="1077.6" y="787.0" width="74.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="798.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 6.35%)</title><rect x="1077.6" y="771.0" width="74.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.6" y="782.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 6.35%)</title><rect x="1077.6" y="755.0" width="74.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.6" y="766.0">Parse::d..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.59%)</title><rect x="1077.6" y="739.0" width="18.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.6" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.59%)</title><rect x="1077.6" y="723.0" width="18.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.6" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.59%)</title><rect x="1077.6" y="707.0" width="18.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.6" y="718.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.79%)</title><rect x="1077.6" y="691.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.6" y="702.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.79%)</title><rect x="1077.6" y="675.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.79%)</title><rect x="1077.6" y="659.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.6" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.79%)</title><rect x="1087.0" y="691.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.0" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.79%)</title><rect x="1087.0" y="675.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.0" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.79%)</title><rect x="1087.0" y="659.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.0" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="1087.0" y="643.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.0" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.79%)</title><rect x="1087.0" y="627.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.0" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.79%)</title><rect x="1087.0" y="611.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.0" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.79%)</title><rect x="1087.0" y="595.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.0" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.79%)</title><rect x="1087.0" y="579.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.0" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="1087.0" y="563.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.0" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="1087.0" y="547.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.0" y="558.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.79%)</title><rect x="1087.0" y="531.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.0" y="542.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.79%)</title><rect x="1087.0" y="515.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.0" y="526.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.79%)</title><rect x="1087.0" y="499.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.0" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.79%)</title><rect x="1087.0" y="483.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.0" y="494.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.79%)</title><rect x="1087.0" y="467.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.0" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.79%)</title><rect x="1087.0" y="451.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.79%)</title><rect x="1087.0" y="435.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.0" y="446.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.79%)</title><rect x="1087.0" y="419.0" width="9.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1090.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.17%)</title><rect x="1096.3" y="739.0" width="37.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.3" y="750.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.17%)</title><rect x="1096.3" y="723.0" width="37.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.3" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.17%)</title><rect x="1096.3" y="707.0" width="37.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.3" y="718.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.38%)</title><rect x="1096.3" y="691.0" width="28.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.3" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.38%)</title><rect x="1096.3" y="675.0" width="28.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.3" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.38%)</title><rect x="1096.3" y="659.0" width="28.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.3" y="670.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1096.3" y="643.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1096.3" y="627.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1096.3" y="611.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1096.3" y="595.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1096.3" y="579.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1096.3" y="563.0" width="9.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1096.3" y="547.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1096.3" y="531.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1096.3" y="515.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1096.3" y="499.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1096.3" y="483.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1096.3" y="467.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1096.3" y="451.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1096.3" y="435.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1096.3" y="419.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1096.3" y="403.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1096.3" y="387.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1096.3" y="371.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1096.3" y="355.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1096.3" y="339.0" width="9.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1096.3" y="323.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1096.3" y="307.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1096.3" y="291.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1096.3" y="275.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1096.3" y="259.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1096.3" y="243.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1096.3" y="227.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1096.3" y="211.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1096.3" y="195.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1096.3" y="179.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1096.3" y="163.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1096.3" y="147.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1096.3" y="131.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1096.3" y="115.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1096.3" y="99.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.3" y="110.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.79%)</title><rect x="1096.3" y="83.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.3" y="94.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.79%)</title><rect x="1096.3" y="67.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.3" y="78.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.79%)</title><rect x="1096.3" y="51.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.3" y="62.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.79%)</title><rect x="1096.3" y="35.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.59%)</title><rect x="1105.7" y="643.0" width="18.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.59%)</title><rect x="1105.7" y="627.0" width="18.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.59%)</title><rect x="1105.7" y="611.0" width="18.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.59%)</title><rect x="1105.7" y="595.0" width="18.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.59%)</title><rect x="1105.7" y="579.0" width="18.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.59%)</title><rect x="1105.7" y="563.0" width="18.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.59%)</title><rect x="1105.7" y="547.0" width="18.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.59%)</title><rect x="1105.7" y="531.0" width="18.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.59%)</title><rect x="1105.7" y="515.0" width="18.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.59%)</title><rect x="1105.7" y="499.0" width="18.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.59%)</title><rect x="1105.7" y="483.0" width="18.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.59%)</title><rect x="1105.7" y="467.0" width="18.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.59%)</title><rect x="1105.7" y="451.0" width="18.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.7" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.59%)</title><rect x="1105.7" y="435.0" width="18.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.59%)</title><rect x="1105.7" y="419.0" width="18.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.7" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.59%)</title><rect x="1105.7" y="403.0" width="18.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.59%)</title><rect x="1105.7" y="387.0" width="18.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.59%)</title><rect x="1105.7" y="371.0" width="18.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.59%)</title><rect x="1105.7" y="355.0" width="18.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.59%)</title><rect x="1105.7" y="339.0" width="18.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 1.59%)</title><rect x="1105.7" y="323.0" width="18.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.79%)</title><rect x="1105.7" y="307.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.7" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.79%)</title><rect x="1105.7" y="291.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.79%)</title><rect x="1105.7" y="275.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.79%)</title><rect x="1105.7" y="259.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="270.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.79%)</title><rect x="1105.7" y="243.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.79%)</title><rect x="1115.1" y="307.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.1" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.79%)</title><rect x="1115.1" y="291.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="1115.1" y="275.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.1" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="1115.1" y="259.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.1" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.79%)</title><rect x="1115.1" y="243.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.1" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.79%)</title><rect x="1115.1" y="227.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.1" y="238.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.79%)</title><rect x="1115.1" y="211.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.1" y="222.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.79%)</title><rect x="1115.1" y="195.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.1" y="206.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.79%)</title><rect x="1124.4" y="691.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.4" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.79%)</title><rect x="1124.4" y="675.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.4" y="686.0"></text>
</g>
<g>
<title>AddINode::Opcode() const (1 samples, 0.79%)</title><rect x="1124.4" y="659.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.4" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.59%)</title><rect x="1133.8" y="739.0" width="18.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.8" y="750.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.79%)</title><rect x="1133.8" y="723.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_exactness(bool) const (1 samples, 0.79%)</title><rect x="1133.8" y="707.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.8" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.79%)</title><rect x="1133.8" y="691.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.8" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.79%)</title><rect x="1133.8" y="675.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1143.2" y="723.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1143.2" y="707.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1143.2" y="691.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1143.2" y="675.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1143.2" y="659.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1143.2" y="643.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.2" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1143.2" y="627.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.2" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1143.2" y="611.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1143.2" y="595.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1143.2" y="579.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.79%)</title><rect x="1143.2" y="563.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.79%)</title><rect x="1143.2" y="547.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.79%)</title><rect x="1143.2" y="531.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.79%)</title><rect x="1143.2" y="515.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.79%)</title><rect x="1143.2" y="499.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.79%)</title><rect x="1143.2" y="483.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.2" y="494.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.79%)</title><rect x="1143.2" y="467.0" width="9.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1146.2" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.38%)</title><rect x="1152.5" y="867.0" width="28.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="878.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.38%)</title><rect x="1152.5" y="851.0" width="28.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="862.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.38%)</title><rect x="1152.5" y="835.0" width="28.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.5" y="846.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.59%)</title><rect x="1152.5" y="819.0" width="18.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.79%)</title><rect x="1152.5" y="803.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="814.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.79%)</title><rect x="1152.5" y="787.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.79%)</title><rect x="1152.5" y="771.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.79%)</title><rect x="1152.5" y="755.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.79%)</title><rect x="1152.5" y="739.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.79%)</title><rect x="1152.5" y="723.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.79%)</title><rect x="1152.5" y="707.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.79%)</title><rect x="1152.5" y="691.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.79%)</title><rect x="1152.5" y="675.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.79%)</title><rect x="1152.5" y="659.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.79%)</title><rect x="1152.5" y="643.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.79%)</title><rect x="1152.5" y="627.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.79%)</title><rect x="1152.5" y="611.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.79%)</title><rect x="1152.5" y="595.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.5" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.79%)</title><rect x="1152.5" y="579.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.79%)</title><rect x="1152.5" y="563.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.5" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.79%)</title><rect x="1152.5" y="547.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.79%)</title><rect x="1152.5" y="531.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.5" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.79%)</title><rect x="1152.5" y="515.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.5" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.79%)</title><rect x="1152.5" y="499.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.79%)</title><rect x="1152.5" y="483.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="494.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.79%)</title><rect x="1161.9" y="803.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="814.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.79%)</title><rect x="1161.9" y="787.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.9" y="798.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.79%)</title><rect x="1161.9" y="771.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.9" y="782.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.79%)</title><rect x="1161.9" y="755.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.9" y="766.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, int, int, bool, bool) (1 samples, 0.79%)</title><rect x="1161.9" y="739.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="750.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.79%)</title><rect x="1161.9" y="723.0" width="9.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1164.9" y="734.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.79%)</title><rect x="1171.3" y="819.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (1 samples, 0.79%)</title><rect x="1171.3" y="803.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>DebugInfoWriteStream::DebugInfoWriteStream(DebugInformationRecorder*, int) (1 samples, 0.79%)</title><rect x="1171.3" y="787.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>CompressedWriteStream::CompressedWriteStream(int) (1 samples, 0.79%)</title><rect x="1171.3" y="771.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.79%)</title><rect x="1180.6" y="883.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.79%)</title><rect x="1180.6" y="867.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.79%)</title><rect x="1180.6" y="851.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.79%)</title><rect x="1180.6" y="835.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.79%)</title><rect x="1180.6" y="819.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
</g>
</svg>
