<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1413"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1413"> </text>
<g id="frames">
<g>
<title>all (294 samples, 100.00%)</title><rect x="10.0" y="1379.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1390.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.14%)</title><rect x="10.0" y="1363.0" width="84.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.68%)</title><rect x="10.0" y="1347.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.68%)</title><rect x="10.0" y="1331.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.68%)</title><rect x="10.0" y="1315.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.68%)</title><rect x="10.0" y="1299.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.68%)</title><rect x="10.0" y="1283.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.68%)</title><rect x="10.0" y="1267.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.68%)</title><rect x="10.0" y="1251.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="10.0" y="1235.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="10.0" y="1219.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.34%)</title><rect x="10.0" y="1203.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.correlate (1 samples, 0.34%)</title><rect x="10.0" y="1187.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="10.0" y="1171.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.34%)</title><rect x="14.0" y="1235.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.34%)</title><rect x="14.0" y="1219.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="14.0" y="1203.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="14.0" y="1187.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="14.0" y="1171.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.34%)</title><rect x="14.0" y="1155.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.34%)</title><rect x="14.0" y="1139.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.34%)</title><rect x="14.0" y="1123.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.34%)</title><rect x="14.0" y="1107.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$11.validate (1 samples, 0.34%)</title><rect x="14.0" y="1091.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$11.validate (1 samples, 0.34%)</title><rect x="14.0" y="1075.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 6.46%)</title><rect x="18.0" y="1347.0" width="76.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.0" y="1358.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.68%)</title><rect x="18.0" y="1331.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="18.0" y="1315.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="18.0" y="1299.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="18.0" y="1283.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="18.0" y="1267.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="18.0" y="1251.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="18.0" y="1235.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.34%)</title><rect x="18.0" y="1219.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.34%)</title><rect x="18.0" y="1203.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.0" y="1214.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="18.0" y="1187.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="21.0" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.34%)</title><rect x="22.0" y="1315.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.70%)</title><rect x="26.1" y="1331.0" width="20.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.1" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (5 samples, 1.70%)</title><rect x="26.1" y="1315.0" width="20.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (5 samples, 1.70%)</title><rect x="26.1" y="1299.0" width="20.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.36%)</title><rect x="26.1" y="1283.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.36%)</title><rect x="26.1" y="1267.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.36%)</title><rect x="26.1" y="1251.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.36%)</title><rect x="26.1" y="1235.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.36%)</title><rect x="26.1" y="1219.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.36%)</title><rect x="26.1" y="1203.0" width="16.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.34%)</title><rect x="26.1" y="1187.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="26.1" y="1171.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.34%)</title><rect x="26.1" y="1155.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="26.1" y="1139.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.02%)</title><rect x="30.1" y="1187.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.02%)</title><rect x="30.1" y="1171.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.02%)</title><rect x="30.1" y="1155.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (3 samples, 1.02%)</title><rect x="30.1" y="1139.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.1" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="38.1" y="1123.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="41.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.34%)</title><rect x="42.1" y="1283.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="42.1" y="1267.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.08%)</title><rect x="46.1" y="1331.0" width="48.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.1" y="1342.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.08%)</title><rect x="46.1" y="1315.0" width="48.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.1" y="1326.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.38%)</title><rect x="50.1" y="1299.0" width="28.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.1" y="1310.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.68%)</title><rect x="50.1" y="1283.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.68%)</title><rect x="50.1" y="1267.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="50.1" y="1251.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.34%)</title><rect x="54.1" y="1251.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.34%)</title><rect x="54.1" y="1235.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.34%)</title><rect x="54.1" y="1219.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="57.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.34%)</title><rect x="54.1" y="1203.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.34%)</title><rect x="54.1" y="1187.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.34%)</title><rect x="54.1" y="1171.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.34%)</title><rect x="54.1" y="1155.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.34%)</title><rect x="54.1" y="1139.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.70%)</title><rect x="58.2" y="1283.0" width="20.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1300 (1 samples, 0.34%)</title><rect x="58.2" y="1267.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.36%)</title><rect x="62.2" y="1267.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.36%)</title><rect x="62.2" y="1251.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.36%)</title><rect x="62.2" y="1235.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.68%)</title><rect x="62.2" y="1219.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.34%)</title><rect x="62.2" y="1203.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.34%)</title><rect x="62.2" y="1187.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.34%)</title><rect x="62.2" y="1171.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.34%)</title><rect x="62.2" y="1155.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.34%)</title><rect x="62.2" y="1139.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.34%)</title><rect x="62.2" y="1123.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.34%)</title><rect x="62.2" y="1107.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="66.2" y="1203.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="66.2" y="1187.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.34%)</title><rect x="66.2" y="1171.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.34%)</title><rect x="66.2" y="1155.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.34%)</title><rect x="66.2" y="1139.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.34%)</title><rect x="66.2" y="1123.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.68%)</title><rect x="70.2" y="1219.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="70.2" y="1203.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="74.2" y="1203.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.34%)</title><rect x="74.2" y="1187.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.2" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.34%)</title><rect x="74.2" y="1171.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.34%)</title><rect x="78.2" y="1299.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.34%)</title><rect x="78.2" y="1283.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.34%)</title><rect x="78.2" y="1267.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.34%)</title><rect x="78.2" y="1251.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="78.2" y="1235.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="78.2" y="1219.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="78.2" y="1203.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="78.2" y="1187.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="78.2" y="1171.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.34%)</title><rect x="78.2" y="1155.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.34%)</title><rect x="78.2" y="1139.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.34%)</title><rect x="82.2" y="1299.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.34%)</title><rect x="82.2" y="1283.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.34%)</title><rect x="82.2" y="1267.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="82.2" y="1251.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="82.2" y="1235.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="82.2" y="1219.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.34%)</title><rect x="82.2" y="1203.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.34%)</title><rect x="82.2" y="1187.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.68%)</title><rect x="86.3" y="1299.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="90.3" y="1283.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.34%)</title><rect x="90.3" y="1267.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="90.3" y="1251.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="90.3" y="1235.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.34%)</title><rect x="90.3" y="1219.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (166 samples, 56.46%)</title><rect x="94.3" y="1363.0" width="666.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="1374.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (166 samples, 56.46%)</title><rect x="94.3" y="1347.0" width="666.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="1358.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (166 samples, 56.46%)</title><rect x="94.3" y="1331.0" width="666.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.3" y="1342.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (159 samples, 54.08%)</title><rect x="94.3" y="1315.0" width="638.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.3" y="1326.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (159 samples, 54.08%)</title><rect x="94.3" y="1299.0" width="638.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.3" y="1310.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (159 samples, 54.08%)</title><rect x="94.3" y="1283.0" width="638.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.3" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (145 samples, 49.32%)</title><rect x="94.3" y="1267.0" width="582.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.3" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (1 samples, 0.34%)</title><rect x="110.3" y="1251.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (21 samples, 7.14%)</title><rect x="114.4" y="1251.0" width="84.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.4" y="1262.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (21 samples, 7.14%)</title><rect x="114.4" y="1235.0" width="84.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.4" y="1246.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (21 samples, 7.14%)</title><rect x="114.4" y="1219.0" width="84.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.4" y="1230.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 6.80%)</title><rect x="114.4" y="1203.0" width="80.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.4" y="1214.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 6.80%)</title><rect x="114.4" y="1187.0" width="80.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.4" y="1198.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 6.80%)</title><rect x="114.4" y="1171.0" width="80.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.4" y="1182.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.06%)</title><rect x="114.4" y="1155.0" width="36.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.4" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.68%)</title><rect x="114.4" y="1139.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.68%)</title><rect x="114.4" y="1123.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.68%)</title><rect x="114.4" y="1107.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.68%)</title><rect x="114.4" y="1091.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.68%)</title><rect x="114.4" y="1075.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.38%)</title><rect x="122.4" y="1139.0" width="28.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.4" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.38%)</title><rect x="122.4" y="1123.0" width="28.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.4" y="1134.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.02%)</title><rect x="122.4" y="1107.0" width="12.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="125.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 1.02%)</title><rect x="122.4" y="1091.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.34%)</title><rect x="130.4" y="1075.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.36%)</title><rect x="134.4" y="1107.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.36%)</title><rect x="134.4" y="1091.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.68%)</title><rect x="134.4" y="1075.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.68%)</title><rect x="142.4" y="1075.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 3.40%)</title><rect x="150.5" y="1155.0" width="40.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.5" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.68%)</title><rect x="150.5" y="1139.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.68%)</title><rect x="150.5" y="1123.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.5" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="150.5" y="1107.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="153.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="154.5" y="1107.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="154.5" y="1091.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="154.5" y="1075.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 2.72%)</title><rect x="158.5" y="1139.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.5" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="158.5" y="1123.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.68%)</title><rect x="158.5" y="1107.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.04%)</title><rect x="166.5" y="1123.0" width="24.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.5" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.04%)</title><rect x="166.5" y="1107.0" width="24.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.5" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.04%)</title><rect x="166.5" y="1091.0" width="24.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.5" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="166.5" y="1075.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.34%)</title><rect x="166.5" y="1059.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.34%)</title><rect x="166.5" y="1043.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.34%)</title><rect x="166.5" y="1027.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.34%)</title><rect x="166.5" y="1011.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.34%)</title><rect x="166.5" y="995.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.34%)</title><rect x="166.5" y="979.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.34%)</title><rect x="170.5" y="1059.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.02%)</title><rect x="174.6" y="1075.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.68%)</title><rect x="178.6" y="1059.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.68%)</title><rect x="178.6" y="1043.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="181.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.68%)</title><rect x="178.6" y="1027.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.68%)</title><rect x="178.6" y="1011.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.34%)</title><rect x="186.6" y="1075.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="186.6" y="1059.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="186.6" y="1043.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.34%)</title><rect x="190.6" y="1155.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.34%)</title><rect x="190.6" y="1139.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.34%)</title><rect x="190.6" y="1123.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.34%)</title><rect x="190.6" y="1107.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="193.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="190.6" y="1091.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.34%)</title><rect x="194.6" y="1203.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.6" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="194.6" y="1187.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="197.6" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="194.6" y="1171.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="197.6" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="194.6" y="1155.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="197.6" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="194.6" y="1139.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="197.6" y="1150.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.34%)</title><rect x="194.6" y="1123.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="197.6" y="1134.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.34%)</title><rect x="194.6" y="1107.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="197.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (118 samples, 40.14%)</title><rect x="198.6" y="1251.0" width="473.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.6" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 5.44%)</title><rect x="198.6" y="1235.0" width="64.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.6" y="1246.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 5.10%)</title><rect x="202.7" y="1219.0" width="60.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.7" y="1230.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 4.42%)</title><rect x="210.7" y="1203.0" width="52.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.7" y="1214.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.68%)</title><rect x="210.7" y="1187.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.68%)</title><rect x="210.7" y="1171.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.68%)</title><rect x="210.7" y="1155.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.68%)</title><rect x="210.7" y="1139.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 3.74%)</title><rect x="218.7" y="1187.0" width="44.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.7" y="1198.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.70%)</title><rect x="242.8" y="1171.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.70%)</title><rect x="242.8" y="1155.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (29 samples, 9.86%)</title><rect x="262.9" y="1235.0" width="116.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="1246.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="266.9" y="1219.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="269.9" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="266.9" y="1203.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="269.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (26 samples, 8.84%)</title><rect x="270.9" y="1219.0" width="104.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.9" y="1230.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 4.08%)</title><rect x="274.9" y="1203.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.9" y="1214.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 4.08%)</title><rect x="274.9" y="1187.0" width="48.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.9" y="1198.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 3.74%)</title><rect x="278.9" y="1171.0" width="44.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.9" y="1182.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 2.72%)</title><rect x="282.9" y="1155.0" width="32.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.9" y="1166.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 2.72%)</title><rect x="282.9" y="1139.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.9" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 2.72%)</title><rect x="282.9" y="1123.0" width="32.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.9" y="1134.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.36%)</title><rect x="291.0" y="1107.0" width="16.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="294.0" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 1.02%)</title><rect x="291.0" y="1091.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="294.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.68%)</title><rect x="295.0" y="1075.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.34%)</title><rect x="299.0" y="1059.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="302.0" y="1070.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.34%)</title><rect x="303.0" y="1091.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="306.0" y="1102.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.34%)</title><rect x="307.0" y="1107.0" width="4.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="310.0" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="311.0" y="1107.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="314.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="315.0" y="1155.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.0" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="319.0" y="1155.0" width="4.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="322.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.34%)</title><rect x="323.1" y="1203.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.34%)</title><rect x="323.1" y="1187.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="323.1" y="1171.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.1" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 4.08%)</title><rect x="327.1" y="1203.0" width="48.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.1" y="1214.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 4.08%)</title><rect x="327.1" y="1187.0" width="48.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="1198.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.08%)</title><rect x="327.1" y="1171.0" width="48.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.1" y="1182.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 3.40%)</title><rect x="335.1" y="1155.0" width="40.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.1" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.02%)</title><rect x="363.2" y="1139.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.68%)</title><rect x="367.2" y="1123.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="375.2" y="1219.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (70 samples, 23.81%)</title><rect x="379.3" y="1235.0" width="280.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="382.3" y="1246.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (70 samples, 23.81%)</title><rect x="379.3" y="1219.0" width="280.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.3" y="1230.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (62 samples, 21.09%)</title><rect x="387.3" y="1203.0" width="248.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.3" y="1214.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (59 samples, 20.07%)</title><rect x="399.3" y="1187.0" width="236.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="402.3" y="1198.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 19.05%)</title><rect x="399.3" y="1171.0" width="224.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.3" y="1182.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 19.05%)</title><rect x="399.3" y="1155.0" width="224.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="402.3" y="1166.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="399.3" y="1139.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="402.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (55 samples, 18.71%)</title><rect x="403.3" y="1139.0" width="220.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="1150.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 15.31%)</title><rect x="431.4" y="1123.0" width="180.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="434.4" y="1134.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.02%)</title><rect x="435.4" y="1107.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="438.4" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="447.5" y="1107.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="450.5" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.02%)</title><rect x="451.5" y="1107.0" width="12.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="454.5" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="459.5" y="1091.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="462.5" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="463.5" y="1107.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="466.5" y="1118.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 12.24%)</title><rect x="467.6" y="1107.0" width="144.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="470.6" y="1118.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="491.6" y="1091.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="494.6" y="1102.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="491.6" y="1075.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="494.6" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.34%)</title><rect x="495.6" y="1091.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="498.6" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.70%)</title><rect x="499.7" y="1091.0" width="20.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="502.7" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.68%)</title><rect x="519.7" y="1091.0" width="8.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="522.7" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 4.76%)</title><rect x="527.8" y="1091.0" width="56.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="530.8" y="1102.0">__pthr..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.68%)</title><rect x="583.9" y="1091.0" width="8.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="586.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.34%)</title><rect x="592.0" y="1091.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="595.0" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.34%)</title><rect x="596.0" y="1091.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="599.0" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.34%)</title><rect x="600.0" y="1091.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="603.0" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.34%)</title><rect x="604.0" y="1091.0" width="4.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="607.0" y="1102.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.34%)</title><rect x="608.0" y="1091.0" width="4.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="611.0" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.34%)</title><rect x="612.0" y="1123.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="615.0" y="1134.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="616.1" y="1123.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="619.1" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="620.1" y="1123.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="623.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 1.02%)</title><rect x="624.1" y="1171.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="632.1" y="1155.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="632.1" y="1139.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="632.1" y="1123.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.68%)</title><rect x="636.1" y="1203.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.68%)</title><rect x="636.1" y="1187.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.1" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="636.1" y="1171.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="639.1" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.34%)</title><rect x="640.1" y="1171.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.68%)</title><rect x="644.1" y="1203.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.68%)</title><rect x="652.2" y="1203.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.02%)</title><rect x="660.2" y="1235.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="663.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="668.2" y="1219.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.34%)</title><rect x="668.2" y="1203.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="671.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/958767054.accept (1 samples, 0.34%)</title><rect x="668.2" y="1187.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="671.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (1 samples, 0.34%)</title><rect x="668.2" y="1171.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.2" y="1182.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.34%)</title><rect x="668.2" y="1155.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.2" y="1166.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.34%)</title><rect x="668.2" y="1139.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="671.2" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="672.2" y="1251.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="675.2" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="672.2" y="1235.0" width="4.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="675.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 2.04%)</title><rect x="676.3" y="1267.0" width="24.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.3" y="1278.0">c..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="692.3" y="1251.0" width="8.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="695.3" y="1262.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="692.3" y="1235.0" width="8.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="695.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.72%)</title><rect x="700.3" y="1267.0" width="32.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.3" y="1278.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="716.4" y="1251.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="719.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.02%)</title><rect x="720.4" y="1251.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="723.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.02%)</title><rect x="720.4" y="1235.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/1857421401.accept (3 samples, 1.02%)</title><rect x="720.4" y="1219.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (3 samples, 1.02%)</title><rect x="720.4" y="1203.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (3 samples, 1.02%)</title><rect x="720.4" y="1187.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (3 samples, 1.02%)</title><rect x="720.4" y="1171.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 1.02%)</title><rect x="720.4" y="1155.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.4" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.02%)</title><rect x="720.4" y="1139.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.4" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.02%)</title><rect x="720.4" y="1123.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.4" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.02%)</title><rect x="720.4" y="1107.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.4" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 1.02%)</title><rect x="720.4" y="1091.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.38%)</title><rect x="732.4" y="1315.0" width="28.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="735.4" y="1326.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.70%)</title><rect x="740.5" y="1299.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="743.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.02%)</title><rect x="748.5" y="1283.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.02%)</title><rect x="748.5" y="1267.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.02%)</title><rect x="748.5" y="1251.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.02%)</title><rect x="748.5" y="1235.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="751.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.34%)</title><rect x="760.5" y="1363.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.5" y="1374.0"></text>
</g>
<g>
<title>start_thread (106 samples, 36.05%)</title><rect x="764.6" y="1363.0" width="425.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="767.6" y="1374.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 36.05%)</title><rect x="764.6" y="1347.0" width="425.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="767.6" y="1358.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.38%)</title><rect x="764.6" y="1331.0" width="28.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.6" y="1342.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.04%)</title><rect x="764.6" y="1315.0" width="24.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.6" y="1326.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.04%)</title><rect x="764.6" y="1299.0" width="24.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.6" y="1310.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.70%)</title><rect x="764.6" y="1283.0" width="20.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="767.6" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.36%)</title><rect x="764.6" y="1267.0" width="16.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.6" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.34%)</title><rect x="776.6" y="1251.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.6" y="1262.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.34%)</title><rect x="776.6" y="1235.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.6" y="1246.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.34%)</title><rect x="780.6" y="1267.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="783.6" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="784.6" y="1283.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="787.6" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="784.6" y="1267.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="787.6" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.34%)</title><rect x="788.6" y="1315.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="791.6" y="1326.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.34%)</title><rect x="788.6" y="1299.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="791.6" y="1310.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.34%)</title><rect x="788.6" y="1283.0" width="4.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="791.6" y="1294.0"></text>
</g>
<g>
<title>JavaThread::run() (99 samples, 33.67%)</title><rect x="792.7" y="1331.0" width="397.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="795.7" y="1342.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (99 samples, 33.67%)</title><rect x="792.7" y="1315.0" width="397.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="795.7" y="1326.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (99 samples, 33.67%)</title><rect x="792.7" y="1299.0" width="397.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="795.7" y="1310.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (99 samples, 33.67%)</title><rect x="792.7" y="1283.0" width="397.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="795.7" y="1294.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (96 samples, 32.65%)</title><rect x="796.7" y="1267.0" width="385.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.7" y="1278.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (96 samples, 32.65%)</title><rect x="796.7" y="1251.0" width="385.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.7" y="1262.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 20.41%)</title><rect x="796.7" y="1235.0" width="240.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.7" y="1246.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.68%)</title><rect x="796.7" y="1219.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="1230.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.34%)</title><rect x="796.7" y="1203.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="799.7" y="1214.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.34%)</title><rect x="800.7" y="1203.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="803.7" y="1214.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.34%)</title><rect x="800.7" y="1187.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="803.7" y="1198.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.68%)</title><rect x="804.7" y="1219.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.7" y="1230.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.34%)</title><rect x="804.7" y="1203.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="807.7" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.34%)</title><rect x="804.7" y="1187.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="807.7" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.34%)</title><rect x="804.7" y="1171.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.7" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.34%)</title><rect x="808.7" y="1203.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="811.7" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.34%)</title><rect x="808.7" y="1187.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.7" y="1198.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.34%)</title><rect x="812.7" y="1219.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.7" y="1230.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.70%)</title><rect x="816.7" y="1219.0" width="20.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.7" y="1230.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.70%)</title><rect x="816.7" y="1203.0" width="20.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="819.7" y="1214.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.68%)</title><rect x="820.7" y="1187.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.7" y="1198.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.34%)</title><rect x="828.8" y="1187.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="831.8" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.34%)</title><rect x="832.8" y="1187.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="835.8" y="1198.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.34%)</title><rect x="832.8" y="1171.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="835.8" y="1182.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.34%)</title><rect x="832.8" y="1155.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="835.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.34%)</title><rect x="832.8" y="1139.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.8" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.34%)</title><rect x="832.8" y="1123.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="835.8" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.34%)</title><rect x="832.8" y="1107.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.8" y="1118.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.34%)</title><rect x="832.8" y="1091.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.68%)</title><rect x="836.8" y="1219.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.8" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.68%)</title><rect x="836.8" y="1203.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="839.8" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.34%)</title><rect x="836.8" y="1187.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.34%)</title><rect x="840.8" y="1187.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="843.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 16.33%)</title><rect x="844.8" y="1219.0" width="192.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="847.8" y="1230.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.34%)</title><rect x="844.8" y="1203.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.8" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.02%)</title><rect x="848.8" y="1203.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="851.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.68%)</title><rect x="852.9" y="1187.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.9" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="856.9" y="1171.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.02%)</title><rect x="860.9" y="1203.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="863.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.02%)</title><rect x="860.9" y="1187.0" width="12.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="863.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.04%)</title><rect x="872.9" y="1203.0" width="24.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.9" y="1214.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="889.0" y="1187.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="892.0" y="1198.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.34%)</title><rect x="889.0" y="1171.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.0" y="1182.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.34%)</title><rect x="893.0" y="1187.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="896.0" y="1198.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.34%)</title><rect x="893.0" y="1171.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="896.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.72%)</title><rect x="897.0" y="1203.0" width="32.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.0" y="1214.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="913.1" y="1187.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.68%)</title><rect x="917.1" y="1187.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.1" y="1198.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.34%)</title><rect x="925.1" y="1187.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.68%)</title><rect x="929.1" y="1203.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="932.1" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.68%)</title><rect x="929.1" y="1187.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.1" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="933.1" y="1171.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="936.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 1.70%)</title><rect x="937.1" y="1203.0" width="20.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.1" y="1214.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.34%)</title><rect x="949.2" y="1187.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.2" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.34%)</title><rect x="953.2" y="1187.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.70%)</title><rect x="957.2" y="1203.0" width="20.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.2" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.36%)</title><rect x="961.2" y="1187.0" width="16.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.72%)</title><rect x="977.3" y="1203.0" width="32.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.3" y="1214.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.72%)</title><rect x="977.3" y="1187.0" width="32.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.3" y="1198.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.38%)</title><rect x="981.3" y="1171.0" width="28.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.3" y="1182.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.02%)</title><rect x="981.3" y="1155.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.3" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.36%)</title><rect x="993.3" y="1155.0" width="16.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.02%)</title><rect x="1009.4" y="1203.0" width="12.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.4" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1017.4" y="1187.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1020.4" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.36%)</title><rect x="1021.4" y="1203.0" width="16.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.4" y="1214.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="1029.5" y="1187.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.5" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.34%)</title><rect x="1033.5" y="1187.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.5" y="1198.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 10.54%)</title><rect x="1037.5" y="1235.0" width="124.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.5" y="1246.0">Compile::Optimi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1037.5" y="1219.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1037.5" y="1203.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1040.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1037.5" y="1187.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.34%)</title><rect x="1037.5" y="1171.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.34%)</title><rect x="1041.5" y="1219.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1044.5" y="1230.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.34%)</title><rect x="1041.5" y="1203.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1044.5" y="1214.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.34%)</title><rect x="1041.5" y="1187.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 8.50%)</title><rect x="1045.5" y="1219.0" width="100.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.5" y="1230.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.34%)</title><rect x="1045.5" y="1203.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1049.5" y="1203.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1049.5" y="1187.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 6.46%)</title><rect x="1053.5" y="1203.0" width="76.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.5" y="1214.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 6.12%)</title><rect x="1057.6" y="1187.0" width="72.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.6" y="1198.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.34%)</title><rect x="1061.6" y="1171.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 5.44%)</title><rect x="1065.6" y="1171.0" width="64.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.6" y="1182.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.68%)</title><rect x="1113.7" y="1155.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.34%)</title><rect x="1117.8" y="1139.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.68%)</title><rect x="1121.8" y="1155.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.34%)</title><rect x="1129.8" y="1203.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.68%)</title><rect x="1133.8" y="1203.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="1214.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.34%)</title><rect x="1133.8" y="1187.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.34%)</title><rect x="1137.8" y="1187.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.34%)</title><rect x="1137.8" y="1171.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.8" y="1182.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1137.8" y="1155.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.8" y="1166.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1137.8" y="1139.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.8" y="1150.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.34%)</title><rect x="1137.8" y="1123.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.8" y="1134.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.34%)</title><rect x="1137.8" y="1107.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.8" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.34%)</title><rect x="1137.8" y="1091.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.8" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.34%)</title><rect x="1137.8" y="1075.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.8" y="1086.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.34%)</title><rect x="1137.8" y="1059.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1141.8" y="1203.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1141.8" y="1187.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.8" y="1198.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1141.8" y="1171.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.8" y="1182.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.34%)</title><rect x="1141.8" y="1155.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.36%)</title><rect x="1145.9" y="1219.0" width="16.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.36%)</title><rect x="1145.9" y="1203.0" width="16.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.9" y="1214.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1153.9" y="1187.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.9" y="1198.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1157.9" y="1187.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1157.9" y="1171.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1157.9" y="1155.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.9" y="1166.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.34%)</title><rect x="1157.9" y="1139.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.70%)</title><rect x="1161.9" y="1235.0" width="20.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.9" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.70%)</title><rect x="1161.9" y="1219.0" width="20.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.70%)</title><rect x="1161.9" y="1203.0" width="20.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.70%)</title><rect x="1161.9" y="1187.0" width="20.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.70%)</title><rect x="1161.9" y="1171.0" width="20.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.02%)</title><rect x="1161.9" y="1155.0" width="12.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.9" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.02%)</title><rect x="1161.9" y="1139.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.9" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.02%)</title><rect x="1161.9" y="1123.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.02%)</title><rect x="1161.9" y="1107.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.02%)</title><rect x="1161.9" y="1091.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.02%)</title><rect x="1161.9" y="1075.0" width="12.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.02%)</title><rect x="1161.9" y="1059.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.9" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.9" y="1043.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.9" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.9" y="1027.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.9" y="1011.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.9" y="995.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.9" y="979.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.9" y="963.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.9" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.9" y="947.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.9" y="931.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.9" y="915.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.9" y="899.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.9" y="883.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.9" y="867.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.9" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1161.9" y="851.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.9" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1161.9" y="835.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1161.9" y="819.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1161.9" y="803.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1161.9" y="787.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1161.9" y="771.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1165.9" y="1043.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1165.9" y="1027.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1165.9" y="1011.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1165.9" y="995.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1165.9" y="979.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1165.9" y="963.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1165.9" y="947.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1165.9" y="931.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1165.9" y="915.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1165.9" y="899.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1165.9" y="883.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1165.9" y="867.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1165.9" y="851.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1165.9" y="835.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1165.9" y="819.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1165.9" y="803.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1165.9" y="787.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1165.9" y="771.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1165.9" y="755.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1165.9" y="739.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1165.9" y="723.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1165.9" y="707.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1165.9" y="691.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1165.9" y="675.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1165.9" y="659.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1165.9" y="643.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1165.9" y="627.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1165.9" y="611.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1165.9" y="595.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1165.9" y="579.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1165.9" y="563.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.9" y="547.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.9" y="531.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.9" y="515.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.9" y="499.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.9" y="483.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.9" y="467.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.9" y="451.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.9" y="435.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.9" y="419.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.9" y="403.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.9" y="387.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.9" y="371.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.9" y="355.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.9" y="339.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.9" y="323.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.9" y="307.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.9" y="291.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.9" y="275.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.9" y="259.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.9" y="243.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.9" y="227.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.9" y="211.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.9" y="195.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.9" y="179.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.9" y="163.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.34%)</title><rect x="1169.9" y="147.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1169.9" y="131.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1169.9" y="115.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.34%)</title><rect x="1169.9" y="99.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="110.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.34%)</title><rect x="1169.9" y="83.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="94.0"></text>
</g>
<g>
<title>IdealKit::make_label(int) (1 samples, 0.34%)</title><rect x="1169.9" y="67.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="78.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.34%)</title><rect x="1169.9" y="51.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="1169.9" y="35.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1172.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1173.9" y="1155.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1173.9" y="1139.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.9" y="1150.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.34%)</title><rect x="1173.9" y="1123.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="1134.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.34%)</title><rect x="1173.9" y="1107.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="1118.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.34%)</title><rect x="1173.9" y="1091.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="1102.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.34%)</title><rect x="1173.9" y="1075.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="1173.9" y="1059.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1176.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.34%)</title><rect x="1178.0" y="1155.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="1166.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.34%)</title><rect x="1178.0" y="1139.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="1150.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.34%)</title><rect x="1178.0" y="1123.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="1134.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.34%)</title><rect x="1178.0" y="1107.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="1178.0" y="1091.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1181.0" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.68%)</title><rect x="1182.0" y="1267.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1278.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.68%)</title><rect x="1182.0" y="1251.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="1262.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.68%)</title><rect x="1182.0" y="1235.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.68%)</title><rect x="1182.0" y="1219.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="1230.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.68%)</title><rect x="1182.0" y="1203.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="1214.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.68%)</title><rect x="1182.0" y="1187.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1198.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.34%)</title><rect x="1182.0" y="1171.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="1182.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.34%)</title><rect x="1182.0" y="1155.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="1166.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.34%)</title><rect x="1182.0" y="1139.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="1150.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.34%)</title><rect x="1182.0" y="1123.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1134.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.34%)</title><rect x="1186.0" y="1171.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.0" y="1182.0"></text>
</g>
<g>
<title>BitMap::~BitMap() (1 samples, 0.34%)</title><rect x="1186.0" y="1155.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="1166.0"></text>
</g>
</g>
</svg>
