<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (1,224 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (273 samples, 22.30%)</title><rect x="10.0" y="1219.0" width="263.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (271 samples, 22.14%)</title><rect x="11.9" y="1203.0" width="261.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1214.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.33%)</title><rect x="11.9" y="1187.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.33%)</title><rect x="11.9" y="1171.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1569915951.accept (4 samples, 0.33%)</title><rect x="11.9" y="1155.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.33%)</title><rect x="11.9" y="1139.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="11.9" y="1123.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.25%)</title><rect x="11.9" y="1107.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="13.9" y="1091.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.9" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.08%)</title><rect x="14.8" y="1107.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="14.8" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="15.8" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="15.8" y="1171.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="15.8" y="1155.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="15.8" y="1139.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="15.8" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (209 samples, 17.08%)</title><rect x="16.7" y="1187.0" width="201.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="1198.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/398685295.accept (204 samples, 16.67%)</title><rect x="16.7" y="1171.0" width="196.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1182.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (201 samples, 16.42%)</title><rect x="19.6" y="1155.0" width="193.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="1166.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.16%)</title><rect x="19.6" y="1139.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (160 samples, 13.07%)</title><rect x="21.6" y="1139.0" width="154.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.6" y="1150.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (160 samples, 13.07%)</title><rect x="21.6" y="1123.0" width="154.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="1134.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (160 samples, 13.07%)</title><rect x="21.6" y="1107.0" width="154.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="1118.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 13.07%)</title><rect x="21.6" y="1091.0" width="154.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="1102.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 13.07%)</title><rect x="21.6" y="1075.0" width="154.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.6" y="1086.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 12.99%)</title><rect x="22.5" y="1059.0" width="153.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="1070.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (126 samples, 10.29%)</title><rect x="22.5" y="1043.0" width="121.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="1054.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.14%)</title><rect x="22.5" y="1027.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.14%)</title><rect x="22.5" y="1011.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="26.4" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (9 samples, 0.74%)</title><rect x="27.4" y="995.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.74%)</title><rect x="27.4" y="979.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 1.14%)</title><rect x="36.0" y="1027.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (14 samples, 1.14%)</title><rect x="36.0" y="1011.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.25%)</title><rect x="41.8" y="995.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.8" y="1006.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.25%)</title><rect x="41.8" y="979.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="44.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.41%)</title><rect x="44.7" y="995.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (98 samples, 8.01%)</title><rect x="49.5" y="1027.0" width="94.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.5" y="1038.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (98 samples, 8.01%)</title><rect x="49.5" y="1011.0" width="94.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.5" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (94 samples, 7.68%)</title><rect x="49.5" y="995.0" width="90.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.5" y="1006.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (93 samples, 7.60%)</title><rect x="50.5" y="979.0" width="89.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.5" y="990.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (92 samples, 7.52%)</title><rect x="51.5" y="963.0" width="88.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.5" y="974.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="51.5" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.5" y="958.0"></text>
</g>
<g>
<title>Unsafe_Unpark (79 samples, 6.45%)</title><rect x="52.4" y="947.0" width="76.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="55.4" y="958.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="54.3" y="931.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="57.3" y="942.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="57.2" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="60.2" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_signal (57 samples, 4.66%)</title><rect x="58.2" y="931.0" width="55.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="61.2" y="942.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.16%)</title><rect x="113.2" y="931.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="116.2" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.14%)</title><rect x="115.1" y="931.0" width="13.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="118.1" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.57%)</title><rect x="128.6" y="947.0" width="6.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="131.6" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.41%)</title><rect x="135.3" y="947.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="138.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.33%)</title><rect x="140.1" y="995.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (32 samples, 2.61%)</title><rect x="144.0" y="1043.0" width="30.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.0" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (32 samples, 2.61%)</title><rect x="144.0" y="1027.0" width="30.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.0" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (32 samples, 2.61%)</title><rect x="144.0" y="1011.0" width="30.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.0" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="174.9" y="1043.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="174.9" y="1027.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="174.9" y="1011.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.33%)</title><rect x="175.8" y="1139.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.33%)</title><rect x="175.8" y="1123.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="178.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.16%)</title><rect x="179.7" y="1139.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="179.7" y="1123.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="179.7" y="1107.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (33 samples, 2.70%)</title><rect x="181.6" y="1139.0" width="31.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.6" y="1150.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.70%)</title><rect x="181.6" y="1123.0" width="31.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.6" y="1134.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.74%)</title><rect x="199.9" y="1107.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.33%)</title><rect x="199.9" y="1091.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.33%)</title><rect x="199.9" y="1075.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.33%)</title><rect x="199.9" y="1059.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.9" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="202.8" y="1043.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="205.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.41%)</title><rect x="203.8" y="1091.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.8" y="1102.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="208.6" y="1107.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="211.6" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="210.5" y="1107.0" width="2.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="213.5" y="1118.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="213.4" y="1171.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="216.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.25%)</title><rect x="215.3" y="1171.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.25%)</title><rect x="215.3" y="1155.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="215.3" y="1139.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="215.3" y="1123.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.25%)</title><rect x="215.3" y="1107.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.25%)</title><rect x="215.3" y="1091.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 4.66%)</title><rect x="218.2" y="1187.0" width="55.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="1198.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 4.66%)</title><rect x="218.2" y="1171.0" width="55.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="1182.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.53%)</title><rect x="219.2" y="1155.0" width="29.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.2" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.53%)</title><rect x="219.2" y="1139.0" width="29.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.2" y="1150.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.37%)</title><rect x="220.2" y="1123.0" width="27.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.2" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.04%)</title><rect x="220.2" y="1107.0" width="24.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.2" y="1118.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.04%)</title><rect x="220.2" y="1091.0" width="24.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.2" y="1102.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="221.1" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.1" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="221.1" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.1" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="221.1" y="1043.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.1" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="221.1" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="221.1" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.31%)</title><rect x="222.1" y="1075.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.49%)</title><rect x="231.7" y="1059.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.49%)</title><rect x="231.7" y="1043.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.49%)</title><rect x="231.7" y="1027.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.49%)</title><rect x="231.7" y="1011.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.49%)</title><rect x="231.7" y="995.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.49%)</title><rect x="231.7" y="979.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.49%)</title><rect x="231.7" y="963.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.57%)</title><rect x="237.5" y="1075.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.57%)</title><rect x="237.5" y="1059.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.41%)</title><rect x="237.5" y="1043.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.41%)</title><rect x="237.5" y="1027.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.5" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="241.4" y="1011.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="244.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.16%)</title><rect x="242.3" y="1043.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.3" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.16%)</title><rect x="242.3" y="1027.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="244.3" y="1107.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="244.3" y="1091.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="244.3" y="1075.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="244.3" y="1059.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="244.3" y="1043.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="245.2" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="245.2" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="246.2" y="1107.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="246.2" y="1091.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.16%)</title><rect x="246.2" y="1075.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="246.2" y="1059.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="248.1" y="1123.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="248.1" y="1107.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="248.1" y="1091.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.1" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="248.1" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="248.1" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.65%)</title><rect x="249.1" y="1155.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.65%)</title><rect x="249.1" y="1139.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.57%)</title><rect x="249.1" y="1123.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="250.0" y="1107.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.0" y="1091.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.0" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="250.0" y="1075.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="250.0" y="1059.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="250.0" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="250.0" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.41%)</title><rect x="251.0" y="1107.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.41%)</title><rect x="251.0" y="1091.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.33%)</title><rect x="251.0" y="1075.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.33%)</title><rect x="251.0" y="1059.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.33%)</title><rect x="251.0" y="1043.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.33%)</title><rect x="251.0" y="1027.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.33%)</title><rect x="251.0" y="1011.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="251.0" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.08%)</title><rect x="251.0" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.0" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (3 samples, 0.25%)</title><rect x="252.0" y="995.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="252.9" y="979.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="252.9" y="963.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="252.9" y="947.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="252.9" y="931.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/865480855.test (2 samples, 0.16%)</title><rect x="252.9" y="915.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="254.9" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="254.9" y="1059.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="254.9" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="254.9" y="1027.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="255.8" y="1123.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="255.8" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="255.8" y="1091.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.8" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.08%)</title><rect x="255.8" y="1075.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.08%)</title><rect x="255.8" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="255.8" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.16%)</title><rect x="256.8" y="1155.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="256.8" y="1139.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="256.8" y="1123.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="256.8" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="257.8" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="257.8" y="1123.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="257.8" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="257.8" y="1091.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.25%)</title><rect x="258.7" y="1155.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.16%)</title><rect x="258.7" y="1139.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.16%)</title><rect x="258.7" y="1123.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.08%)</title><rect x="258.7" y="1107.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.08%)</title><rect x="258.7" y="1091.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="258.7" y="1075.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="258.7" y="1059.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="259.7" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="259.7" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="259.7" y="1075.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.7" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="259.7" y="1059.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.7" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="259.7" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="260.7" y="1139.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (10 samples, 0.82%)</title><rect x="261.6" y="1155.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="261.6" y="1139.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="261.6" y="1123.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.08%)</title><rect x="261.6" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (1 samples, 0.08%)</title><rect x="261.6" y="1091.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (1 samples, 0.08%)</title><rect x="261.6" y="1075.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (1 samples, 0.08%)</title><rect x="261.6" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.74%)</title><rect x="262.6" y="1139.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.25%)</title><rect x="262.6" y="1123.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="262.6" y="1107.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1931946153.accept (2 samples, 0.16%)</title><rect x="263.5" y="1107.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.16%)</title><rect x="263.5" y="1091.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="263.5" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="263.5" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="263.5" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="263.5" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="264.5" y="1075.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="264.5" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="264.5" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.08%)</title><rect x="264.5" y="1027.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.equals (1 samples, 0.08%)</title><rect x="264.5" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.33%)</title><rect x="265.5" y="1123.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="265.5" y="1107.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.25%)</title><rect x="266.4" y="1107.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="267.4" y="1091.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="267.4" y="1075.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="267.4" y="1059.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="267.4" y="1043.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="267.4" y="1027.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="267.4" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="267.4" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="267.4" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.4" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="268.4" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="268.4" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="268.4" y="979.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.4" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="268.4" y="963.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.4" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="268.4" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="268.4" y="931.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="269.3" y="1123.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="269.3" y="1107.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.16%)</title><rect x="269.3" y="1091.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="269.3" y="1075.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="269.3" y="1059.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="269.3" y="1043.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.16%)</title><rect x="271.3" y="1155.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="271.3" y="1139.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="271.3" y="1123.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="272.2" y="1107.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="272.2" y="1091.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (685 samples, 55.96%)</title><rect x="273.2" y="1219.0" width="660.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.2" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (685 samples, 55.96%)</title><rect x="273.2" y="1203.0" width="660.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.2" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (685 samples, 55.96%)</title><rect x="273.2" y="1187.0" width="660.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.2" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1237081197.run (451 samples, 36.85%)</title><rect x="275.1" y="1171.0" width="434.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.1" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (451 samples, 36.85%)</title><rect x="275.1" y="1155.0" width="434.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.1" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (451 samples, 36.85%)</title><rect x="275.1" y="1139.0" width="434.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.1" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (426 samples, 34.80%)</title><rect x="275.1" y="1123.0" width="410.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.1" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.s..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (146 samples, 11.93%)</title><rect x="279.0" y="1107.0" width="140.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.0" y="1118.0">com/linecorp/decat..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="286.7" y="1091.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="289.7" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.65%)</title><rect x="287.6" y="1091.0" width="7.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="290.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="291.5" y="1075.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="294.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (129 samples, 10.54%)</title><rect x="295.4" y="1091.0" width="124.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.4" y="1102.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (129 samples, 10.54%)</title><rect x="295.4" y="1075.0" width="124.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.4" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="295.4" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="298.4" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="295.4" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="298.4" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="295.4" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="298.4" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="295.4" y="1011.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.4" y="1022.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="295.4" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="298.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="295.4" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="298.4" y="990.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.08%)</title><rect x="295.4" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="298.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (128 samples, 10.46%)</title><rect x="296.3" y="1059.0" width="123.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="299.3" y="1070.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (128 samples, 10.46%)</title><rect x="296.3" y="1043.0" width="123.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.3" y="1054.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (128 samples, 10.46%)</title><rect x="296.3" y="1027.0" width="123.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.3" y="1038.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (37 samples, 3.02%)</title><rect x="296.3" y="1011.0" width="35.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.3" y="1022.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (16 samples, 1.31%)</title><rect x="296.3" y="995.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (16 samples, 1.31%)</title><rect x="296.3" y="979.0" width="15.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (16 samples, 1.31%)</title><rect x="296.3" y="963.0" width="15.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 1.31%)</title><rect x="296.3" y="947.0" width="15.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 0.98%)</title><rect x="296.3" y="931.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.33%)</title><rect x="304.0" y="915.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.33%)</title><rect x="307.9" y="931.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.08%)</title><rect x="310.8" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.72%)</title><rect x="311.7" y="995.0" width="20.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="317.5" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (14 samples, 1.14%)</title><rect x="318.5" y="979.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.08%)</title><rect x="318.5" y="963.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="318.5" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.25%)</title><rect x="319.5" y="963.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.5" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="319.5" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="322.5" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="319.5" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="322.5" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="319.5" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="322.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="319.5" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="322.5" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="319.5" y="883.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="322.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.16%)</title><rect x="320.4" y="947.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="320.4" y="931.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="320.4" y="915.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="323.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="320.4" y="899.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="323.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="320.4" y="883.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="323.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="321.4" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="324.4" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="321.4" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="324.4" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="321.4" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="324.4" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="321.4" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="324.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="321.4" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="324.4" y="814.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="321.4" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="324.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.82%)</title><rect x="322.4" y="963.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (85 samples, 6.94%)</title><rect x="332.0" y="1011.0" width="81.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.0" y="1022.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="332.0" y="995.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="332.0" y="979.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.06%)</title><rect x="335.8" y="995.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.98%)</title><rect x="336.8" y="979.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.65%)</title><rect x="338.7" y="963.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.57%)</title><rect x="339.7" y="947.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="344.5" y="931.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="346.5" y="963.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.57%)</title><rect x="348.4" y="995.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="349.3" y="979.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.41%)</title><rect x="350.3" y="979.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (61 samples, 4.98%)</title><rect x="355.1" y="995.0" width="58.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.1" y="1006.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.98%)</title><rect x="355.1" y="979.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="356.1" y="963.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="356.1" y="947.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="359.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="356.1" y="931.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.57%)</title><rect x="358.0" y="963.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="364.8" y="963.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="364.8" y="947.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 4.00%)</title><rect x="366.7" y="979.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.7" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 4.00%)</title><rect x="366.7" y="963.0" width="47.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.7" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 3.92%)</title><rect x="367.7" y="947.0" width="46.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.7" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.47%)</title><rect x="372.5" y="931.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.57%)</title><rect x="378.3" y="915.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.57%)</title><rect x="378.3" y="899.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.57%)</title><rect x="378.3" y="883.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.41%)</title><rect x="380.2" y="867.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="385.0" y="915.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="386.9" y="915.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="386.9" y="899.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="387.9" y="915.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.65%)</title><rect x="389.8" y="931.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.41%)</title><rect x="392.7" y="915.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.41%)</title><rect x="392.7" y="899.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.41%)</title><rect x="392.7" y="883.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.7" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.41%)</title><rect x="392.7" y="867.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="397.5" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.57%)</title><rect x="398.5" y="931.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.57%)</title><rect x="398.5" y="915.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="401.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.57%)</title><rect x="398.5" y="899.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.57%)</title><rect x="398.5" y="883.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.5" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.57%)</title><rect x="398.5" y="867.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.5" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="399.5" y="851.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.5" y="862.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (3 samples, 0.25%)</title><rect x="402.4" y="835.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.25%)</title><rect x="405.3" y="931.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="405.3" y="915.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="405.3" y="899.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.49%)</title><rect x="408.2" y="931.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="413.0" y="915.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="413.0" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="416.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="413.0" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="413.0" y="867.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="416.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="413.0" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="416.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="413.0" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.49%)</title><rect x="413.9" y="1011.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.49%)</title><rect x="413.9" y="995.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.49%)</title><rect x="413.9" y="979.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.49%)</title><rect x="413.9" y="963.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.49%)</title><rect x="413.9" y="947.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="416.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.08%)</title><rect x="418.8" y="931.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (272 samples, 22.22%)</title><rect x="419.7" y="1107.0" width="262.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.7" y="1118.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (38 samples, 3.10%)</title><rect x="420.7" y="1091.0" width="36.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.7" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="420.7" y="1075.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.7" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (37 samples, 3.02%)</title><rect x="421.7" y="1075.0" width="35.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.7" y="1086.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (36 samples, 2.94%)</title><rect x="422.6" y="1059.0" width="34.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.6" y="1070.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="422.6" y="1043.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="422.6" y="1027.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="422.6" y="1011.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="422.6" y="995.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="425.5" y="979.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (31 samples, 2.53%)</title><rect x="427.4" y="1043.0" width="29.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.4" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (23 samples, 1.88%)</title><rect x="435.1" y="1027.0" width="22.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.1" y="1038.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.33%)</title><rect x="453.5" y="1011.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.65%)</title><rect x="457.3" y="1091.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.57%)</title><rect x="458.3" y="1075.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.57%)</title><rect x="458.3" y="1059.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (159 samples, 12.99%)</title><rect x="465.0" y="1091.0" width="153.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.0" y="1102.0">com/linecorp/decato..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="467.0" y="1075.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="470.0" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="467.9" y="1075.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="470.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="467.9" y="1059.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="470.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (151 samples, 12.34%)</title><rect x="472.7" y="1075.0" width="145.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.7" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (58 samples, 4.74%)</title><rect x="477.6" y="1059.0" width="55.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.6" y="1070.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 4.17%)</title><rect x="481.4" y="1043.0" width="49.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="484.4" y="1054.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 3.02%)</title><rect x="488.2" y="1027.0" width="35.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.2" y="1038.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.47%)</title><rect x="501.7" y="1011.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="504.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.47%)</title><rect x="501.7" y="995.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.47%)</title><rect x="501.7" y="979.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.7" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.74%)</title><rect x="506.5" y="963.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="509.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="506.5" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="509.5" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="506.5" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="509.5" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.25%)</title><rect x="507.5" y="947.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="510.5" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="507.5" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="510.5" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="508.4" y="931.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="511.4" y="942.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="508.4" y="915.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="511.4" y="926.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="508.4" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="511.4" y="910.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="509.4" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="512.4" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.33%)</title><rect x="510.3" y="947.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="513.3" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="511.3" y="931.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="514.3" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.16%)</title><rect x="511.3" y="915.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.3" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="512.3" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.3" y="910.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.08%)</title><rect x="512.3" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="515.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="513.2" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.2" y="942.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="514.2" y="947.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="517.2" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="515.2" y="963.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="518.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="519.0" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="522.0" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="520.0" y="1011.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="523.0" y="1022.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="520.9" y="1011.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="523.9" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="521.9" y="1011.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="524.9" y="1022.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="523.8" y="1027.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="526.8" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="525.8" y="1027.0" width="4.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="528.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.25%)</title><rect x="530.6" y="1043.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.6" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.25%)</title><rect x="530.6" y="1027.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="533.6" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.25%)</title><rect x="530.6" y="1011.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="533.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="531.6" y="995.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="534.6" y="1006.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="531.6" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="534.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="532.5" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="535.5" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="532.5" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="535.5" y="974.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="532.5" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.5" y="958.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="532.5" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.5" y="942.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.49%)</title><rect x="533.5" y="1059.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.49%)</title><rect x="533.5" y="1043.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="536.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.49%)</title><rect x="533.5" y="1027.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="536.5" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.70%)</title><rect x="539.3" y="1059.0" width="79.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.3" y="1070.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 6.45%)</title><rect x="542.2" y="1043.0" width="76.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.2" y="1054.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.74%)</title><rect x="542.2" y="1027.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="545.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.74%)</title><rect x="542.2" y="1011.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="545.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.74%)</title><rect x="542.2" y="995.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.74%)</title><rect x="542.2" y="979.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="548.9" y="963.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="548.9" y="947.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="551.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (70 samples, 5.72%)</title><rect x="550.8" y="1027.0" width="67.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.8" y="1038.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (64 samples, 5.23%)</title><rect x="556.6" y="1011.0" width="61.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.6" y="1022.0">java/u..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="585.5" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="588.5" y="1006.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.08%)</title><rect x="585.5" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="588.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.70%)</title><rect x="586.5" y="995.0" width="31.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="589.5" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="604.8" y="979.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.65%)</title><rect x="606.7" y="979.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.7" y="990.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.33%)</title><rect x="614.5" y="979.0" width="3.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="617.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 3.76%)</title><rect x="618.3" y="1091.0" width="44.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.3" y="1102.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="619.3" y="1075.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (43 samples, 3.51%)</title><rect x="621.2" y="1075.0" width="41.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.2" y="1086.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="623.1" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="626.1" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="623.1" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="626.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="623.1" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="626.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="623.1" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="626.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="623.1" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="626.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="623.1" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.1" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="623.1" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="626.1" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="623.1" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.1" y="958.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.08%)</title><rect x="623.1" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="626.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1017073296.process (22 samples, 1.80%)</title><rect x="624.1" y="1059.0" width="21.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.1" y="1070.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (22 samples, 1.80%)</title><rect x="624.1" y="1043.0" width="21.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.1" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.63%)</title><rect x="624.1" y="1027.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="633.7" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="636.7" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="633.7" y="995.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.7" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="633.7" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.7" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="633.7" y="963.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="633.7" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="633.7" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.33%)</title><rect x="634.7" y="1011.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.7" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="634.7" y="995.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.7" y="1006.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="635.7" y="979.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="638.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.25%)</title><rect x="638.6" y="1011.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="641.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (2 samples, 0.16%)</title><rect x="641.5" y="1011.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="644.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="643.4" y="1027.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="643.4" y="1011.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="643.4" y="995.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="643.4" y="979.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="645.3" y="1059.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="648.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="645.3" y="1043.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="648.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.16%)</title><rect x="650.1" y="1059.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="653.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.16%)</title><rect x="650.1" y="1043.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/184698725.get$Lambda (2 samples, 0.16%)</title><rect x="650.1" y="1027.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="651.1" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="654.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="651.1" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="654.1" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="651.1" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="654.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="651.1" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="654.1" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="651.1" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="654.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="651.1" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="654.1" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.65%)</title><rect x="652.1" y="1059.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="655.1" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="655.0" y="1043.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.0" y="1054.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="655.0" y="1027.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="658.0" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="657.8" y="1027.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="659.8" y="1059.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="659.8" y="1043.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="660.7" y="1059.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="661.7" y="1043.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="662.7" y="1091.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="665.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="662.7" y="1075.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="665.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="662.7" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="662.7" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="665.7" y="1054.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="662.7" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="665.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.55%)</title><rect x="663.6" y="1091.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.06%)</title><rect x="669.4" y="1075.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="672.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.90%)</title><rect x="671.3" y="1059.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/1746501162.accept (11 samples, 0.90%)</title><rect x="671.3" y="1043.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (11 samples, 0.90%)</title><rect x="671.3" y="1027.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="671.3" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.3" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="671.3" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.3" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="671.3" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.3" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="671.3" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.3" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="671.3" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.3" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="671.3" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.3" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.82%)</title><rect x="672.3" y="1011.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="675.3" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.82%)</title><rect x="672.3" y="995.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.3" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.49%)</title><rect x="675.2" y="979.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="678.2" y="990.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="676.2" y="963.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="679.2" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="681.0" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="684.0" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="681.9" y="1107.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.9" y="1118.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="681.9" y="1091.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="684.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (13 samples, 1.06%)</title><rect x="685.8" y="1123.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.8" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 0.98%)</title><rect x="686.8" y="1107.0" width="11.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="689.8" y="1118.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.98%)</title><rect x="686.8" y="1091.0" width="11.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="689.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 0.98%)</title><rect x="698.3" y="1123.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="701.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.65%)</title><rect x="702.2" y="1107.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.65%)</title><rect x="702.2" y="1091.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$271/850654427.accept (8 samples, 0.65%)</title><rect x="702.2" y="1075.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (8 samples, 0.65%)</title><rect x="702.2" y="1059.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1567793886.complete (8 samples, 0.65%)</title><rect x="702.2" y="1043.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (8 samples, 0.65%)</title><rect x="702.2" y="1027.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.65%)</title><rect x="702.2" y="1011.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.2" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.65%)</title><rect x="702.2" y="995.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="705.2" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.65%)</title><rect x="702.2" y="979.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.2" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.65%)</title><rect x="702.2" y="963.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.2" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.65%)</title><rect x="702.2" y="947.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.41%)</title><rect x="709.9" y="1171.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.41%)</title><rect x="709.9" y="1155.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="712.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.41%)</title><rect x="709.9" y="1139.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="709.9" y="1123.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="712.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1237081197.run (1 samples, 0.08%)</title><rect x="713.8" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="716.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 18.55%)</title><rect x="714.7" y="1171.0" width="218.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.7" y="1182.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (224 samples, 18.30%)</title><rect x="716.7" y="1155.0" width="215.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.7" y="1166.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (201 samples, 16.42%)</title><rect x="719.5" y="1139.0" width="193.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="722.5" y="1150.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.25%)</title><rect x="728.2" y="1123.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.25%)</title><rect x="728.2" y="1107.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (16 samples, 1.31%)</title><rect x="731.1" y="1123.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.98%)</title><rect x="746.5" y="1123.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.98%)</title><rect x="746.5" y="1107.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="749.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.98%)</title><rect x="746.5" y="1091.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="749.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.98%)</title><rect x="746.5" y="1075.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="749.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (161 samples, 13.15%)</title><rect x="758.1" y="1123.0" width="155.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="761.1" y="1134.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 13.15%)</title><rect x="758.1" y="1107.0" width="155.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.1" y="1118.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="766.8" y="1091.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="769.8" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="768.7" y="1091.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.7" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 11.93%)</title><rect x="770.6" y="1091.0" width="140.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="773.6" y="1102.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="774.5" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="775.5" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.5" y="1086.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 2.04%)</title><rect x="776.4" y="1075.0" width="24.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.4" y="1086.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.90%)</title><rect x="784.1" y="1059.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.1" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="786.1" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="789.1" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.16%)</title><rect x="787.0" y="1043.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="790.0" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="788.0" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.0" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="789.0" y="1043.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="792.0" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.33%)</title><rect x="790.9" y="1043.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="793.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.49%)</title><rect x="794.7" y="1059.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="797.7" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="800.5" y="1075.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="803.5" y="1086.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="801.5" y="1075.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="804.5" y="1086.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.65%)</title><rect x="802.5" y="1075.0" width="7.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="805.5" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 2.94%)</title><rect x="810.2" y="1075.0" width="34.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="813.2" y="1086.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (48 samples, 3.92%)</title><rect x="844.9" y="1075.0" width="46.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="847.9" y="1086.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.33%)</title><rect x="891.1" y="1075.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="894.1" y="1086.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.33%)</title><rect x="895.0" y="1075.0" width="3.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="898.0" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.25%)</title><rect x="898.9" y="1075.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="901.9" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="901.7" y="1075.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="904.7" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="905.6" y="1075.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="908.6" y="1086.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="906.6" y="1075.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="909.6" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.25%)</title><rect x="907.5" y="1075.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.5" y="1086.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="910.4" y="1075.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="911.4" y="1091.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="914.4" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="912.4" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 1.63%)</title><rect x="913.3" y="1139.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="916.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 1.63%)</title><rect x="913.3" y="1123.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 1.63%)</title><rect x="913.3" y="1107.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 1.63%)</title><rect x="913.3" y="1091.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="916.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="931.6" y="1075.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="932.6" y="1155.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="935.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="933.6" y="1219.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="936.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="933.6" y="1203.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="933.6" y="1187.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="936.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="933.6" y="1171.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="936.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="933.6" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="936.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="933.6" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="936.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="933.6" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="936.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="933.6" y="1107.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="936.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="933.6" y="1091.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="936.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="933.6" y="1075.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="936.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.08%)</title><rect x="933.6" y="1059.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.08%)</title><rect x="933.6" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="936.6" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.08%)</title><rect x="933.6" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="936.6" y="1038.0"></text>
</g>
<g>
<title>start_thread (265 samples, 21.65%)</title><rect x="934.5" y="1219.0" width="255.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="937.5" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (265 samples, 21.65%)</title><rect x="934.5" y="1203.0" width="255.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="937.5" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.88%)</title><rect x="934.5" y="1187.0" width="22.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="937.5" y="1198.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.74%)</title><rect x="934.5" y="1171.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="937.5" y="1182.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.74%)</title><rect x="934.5" y="1155.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.5" y="1166.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="934.5" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="937.5" y="1150.0"></text>
</g>
<g>
<title>SpinPause (8 samples, 0.65%)</title><rect x="935.5" y="1139.0" width="7.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="938.5" y="1150.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.14%)</title><rect x="943.2" y="1171.0" width="13.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.2" y="1182.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="943.2" y="1155.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.2" y="1166.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.08%)</title><rect x="943.2" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.2" y="1150.0"></text>
</g>
<g>
<title>Atomic::cmpxchg(signed char, signed char volatile*, signed char) (1 samples, 0.08%)</title><rect x="943.2" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.2" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="944.2" y="1139.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.2" y="1150.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="946.1" y="1139.0" width="1.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="949.1" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="948.0" y="1155.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.0" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="948.0" y="1139.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.0" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="948.0" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.0" y="1134.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="948.0" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="951.0" y="1118.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="948.0" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.0" y="1102.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="949.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.0" y="1134.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="949.0" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.0" y="1118.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.08%)</title><rect x="949.0" y="1091.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.0" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.08%)</title><rect x="949.0" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.0" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="950.0" y="1139.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="953.0" y="1150.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="950.0" y="1123.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.0" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="951.9" y="1155.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.9" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="951.9" y="1139.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="951.9" y="1123.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.9" y="1134.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.41%)</title><rect x="951.9" y="1107.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.9" y="1118.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.41%)</title><rect x="951.9" y="1091.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.9" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.41%)</title><rect x="951.9" y="1075.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.9" y="1086.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.33%)</title><rect x="951.9" y="1059.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.9" y="1070.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.25%)</title><rect x="951.9" y="1043.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.9" y="1054.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="954.8" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="957.8" y="1054.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="954.8" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.08%)</title><rect x="955.7" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.7" y="1070.0"></text>
</g>
<g>
<title>JavaThread::run() (239 samples, 19.53%)</title><rect x="956.7" y="1187.0" width="230.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.7" y="1198.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (239 samples, 19.53%)</title><rect x="956.7" y="1171.0" width="230.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="959.7" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (239 samples, 19.53%)</title><rect x="956.7" y="1155.0" width="230.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.7" y="1166.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (239 samples, 19.53%)</title><rect x="956.7" y="1139.0" width="230.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.7" y="1150.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (238 samples, 19.44%)</title><rect x="956.7" y="1123.0" width="229.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="959.7" y="1134.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (238 samples, 19.44%)</title><rect x="956.7" y="1107.0" width="229.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.7" y="1118.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (75 samples, 6.13%)</title><rect x="956.7" y="1091.0" width="72.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.7" y="1102.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.25%)</title><rect x="956.7" y="1075.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.7" y="1086.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="956.7" y="1059.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.7" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="958.6" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.6" y="1070.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="958.6" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.6" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.33%)</title><rect x="959.6" y="1075.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.6" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_non_safepoint(int) (1 samples, 0.08%)</title><rect x="959.6" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.25%)</title><rect x="960.6" y="1059.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.25%)</title><rect x="960.6" y="1043.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.57%)</title><rect x="963.4" y="1075.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.4" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="963.4" y="1059.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.4" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.49%)</title><rect x="964.4" y="1059.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.4" y="1070.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.33%)</title><rect x="965.4" y="1043.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="968.4" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="969.2" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.41%)</title><rect x="970.2" y="1075.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.2" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.41%)</title><rect x="970.2" y="1059.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="970.2" y="1043.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="972.1" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="972.1" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.1" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="973.1" y="1043.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.1" y="1054.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.08%)</title><rect x="974.1" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.1" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="974.1" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="977.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="975.0" y="1075.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (54 samples, 4.41%)</title><rect x="976.0" y="1075.0" width="52.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.0" y="1086.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="976.0" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.0" y="1070.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="976.9" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.9" y="1070.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.08%)</title><rect x="977.9" y="1059.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.9" y="1070.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="978.9" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.33%)</title><rect x="979.8" y="1059.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="980.8" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.16%)</title><rect x="981.8" y="1043.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.8" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="982.7" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.33%)</title><rect x="983.7" y="1059.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.25%)</title><rect x="984.7" y="1043.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.7" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="985.6" y="1027.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="986.6" y="1027.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.57%)</title><rect x="987.5" y="1059.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.90%)</title><rect x="994.3" y="1059.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1000.1" y="1043.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.25%)</title><rect x="1001.0" y="1043.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.0" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1002.0" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1005.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1003.0" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1006.0" y="1038.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1003.9" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="1004.9" y="1059.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1006.8" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.49%)</title><rect x="1007.8" y="1059.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.8" y="1070.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1011.7" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.7" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1012.6" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1013.6" y="1059.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1016.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.16%)</title><rect x="1014.5" y="1043.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1017.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1016.5" y="1059.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1019.5" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1016.5" y="1043.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1019.5" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1017.4" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.4" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1017.4" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1017.4" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1018.4" y="1059.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.4" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1019.4" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1020.3" y="1059.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1020.3" y="1043.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1022.3" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1022.3" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.3" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.08%)</title><rect x="1023.2" y="1059.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1026.2" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.16%)</title><rect x="1024.2" y="1059.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1027.2" y="1070.0"></text>
</g>
<g>
<title>indIndexOffsetOper::in_RegMask(int) const (1 samples, 0.08%)</title><rect x="1026.1" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="1070.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1027.1" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.1" y="1070.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.08%)</title><rect x="1028.0" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.0" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (153 samples, 12.50%)</title><rect x="1029.0" y="1091.0" width="147.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.0" y="1102.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1029.0" y="1075.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.0" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1029.0" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.0" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1029.0" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1032.0" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.16%)</title><rect x="1030.0" y="1075.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1030.0" y="1059.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1033.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1030.0" y="1043.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.0" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1030.0" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.0" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1030.0" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.0" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1030.0" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.0" y="1006.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.08%)</title><rect x="1030.0" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.0" y="990.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.08%)</title><rect x="1030.9" y="1043.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.33%)</title><rect x="1031.9" y="1075.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.33%)</title><rect x="1031.9" y="1059.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.9" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="1031.9" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.25%)</title><rect x="1032.9" y="1043.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1035.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1032.9" y="1027.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1032.9" y="1011.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1032.9" y="995.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1032.9" y="979.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1032.9" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1033.8" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.8" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1033.8" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1034.8" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.16%)</title><rect x="1035.8" y="1075.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1037.7" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1037.7" y="1059.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.08%)</title><rect x="1037.7" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.7" y="1054.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1037.7" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.7" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1037.7" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.7" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1037.7" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.7" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1037.7" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.7" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1037.7" y="963.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1038.6" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.6" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1038.6" y="1059.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1041.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (132 samples, 10.78%)</title><rect x="1039.6" y="1075.0" width="127.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.6" y="1086.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="1059.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.6" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.6" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.6" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.6" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.6" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.6" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.6" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.6" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.6" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1039.6" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.08%)</title><rect x="1039.6" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1042.6" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1040.6" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1043.6" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1040.6" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.6" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1040.6" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1043.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1040.6" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1043.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1040.6" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1040.6" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1043.6" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1040.6" y="963.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1043.6" y="974.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1041.5" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.5" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1042.5" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.57%)</title><rect x="1043.5" y="1059.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.5" y="1070.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.16%)</title><rect x="1048.3" y="1043.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1050.2" y="1059.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.25%)</title><rect x="1050.2" y="1043.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1051.2" y="1027.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (111 samples, 9.07%)</title><rect x="1053.1" y="1059.0" width="107.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.1" y="1070.0">PhaseIdealLoo..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1057.9" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.9" y="1054.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1057.9" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.9" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1057.9" y="1011.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1060.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (105 samples, 8.58%)</title><rect x="1058.9" y="1043.0" width="101.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="1054.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1063.7" y="1027.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (97 samples, 7.92%)</title><rect x="1066.6" y="1027.0" width="93.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.6" y="1038.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (14 samples, 1.14%)</title><rect x="1146.6" y="1011.0" width="13.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1160.1" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.08%)</title><rect x="1161.1" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1161.1" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="1054.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1161.1" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1161.1" y="1011.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1164.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1162.0" y="1059.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1162.0" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1162.0" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1162.0" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.33%)</title><rect x="1163.0" y="1059.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.25%)</title><rect x="1163.0" y="1043.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.0" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1163.0" y="1027.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.16%)</title><rect x="1163.0" y="1011.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.16%)</title><rect x="1163.0" y="995.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.0" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1163.0" y="979.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1164.9" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="1038.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.08%)</title><rect x="1165.9" y="1043.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.57%)</title><rect x="1166.9" y="1075.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.49%)</title><rect x="1166.9" y="1059.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.9" y="1043.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="1054.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1166.9" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.9" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1166.9" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1166.9" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.33%)</title><rect x="1167.8" y="1043.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.7" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.7" y="1054.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1171.7" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="1038.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1172.6" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1173.6" y="1075.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1173.6" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1173.6" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.6" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.16%)</title><rect x="1174.6" y="1075.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.6" y="1086.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.08%)</title><rect x="1174.6" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.6" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.5" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1175.5" y="1043.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1175.5" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.65%)</title><rect x="1176.5" y="1091.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.65%)</title><rect x="1176.5" y="1075.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.65%)</title><rect x="1176.5" y="1059.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.65%)</title><rect x="1176.5" y="1043.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.65%)</title><rect x="1176.5" y="1027.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.65%)</title><rect x="1176.5" y="1011.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="1022.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="1006.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="990.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1176.5" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1176.5" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="942.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.08%)</title><rect x="1176.5" y="915.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.57%)</title><rect x="1177.5" y="995.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.57%)</title><rect x="1177.5" y="979.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.57%)</title><rect x="1177.5" y="963.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.57%)</title><rect x="1177.5" y="947.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.57%)</title><rect x="1177.5" y="931.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1177.5" y="915.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1177.5" y="899.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1177.5" y="883.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1177.5" y="867.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1177.5" y="851.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1177.5" y="835.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1177.5" y="819.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.5" y="771.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.5" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.5" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.5" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.5" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.5" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1178.4" y="803.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1178.4" y="787.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1178.4" y="771.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1178.4" y="755.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1178.4" y="739.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1178.4" y="723.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1178.4" y="707.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1178.4" y="691.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1178.4" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1178.4" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1179.4" y="675.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1179.4" y="659.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1179.4" y="643.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1179.4" y="627.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.4" y="611.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.4" y="595.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.4" y="579.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.4" y="563.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.4" y="547.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.4" y="531.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.4" y="515.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.4" y="499.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.4" y="483.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.4" y="467.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.4" y="451.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.4" y="435.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.4" y="419.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.4" y="403.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.4" y="387.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.08%)</title><rect x="1179.4" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1179.4" y="355.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="323.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.4" y="371.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.4" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.4" y="339.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.4" y="323.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.4" y="307.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.4" y="291.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.4" y="275.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.4" y="259.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.4" y="243.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.4" y="227.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.4" y="211.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.4" y="195.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.4" y="179.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.4" y="163.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.4" y="147.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.4" y="131.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.4" y="115.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="126.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1180.4" y="99.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1180.4" y="83.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="67.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1180.4" y="51.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="35.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="595.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="515.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="419.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1181.3" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1181.3" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1181.3" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="675.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="579.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="307.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1182.3" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1182.3" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1182.3" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="771.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.08%)</title><rect x="1183.3" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="702.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="686.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1183.3" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1183.3" y="643.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.3" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1183.3" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1184.2" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.2" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1086.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1185.2" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1185.2" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1185.2" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.1" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1186.1" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="1070.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1054.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.1" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1186.1" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.1" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.1" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.1" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.08%)</title><rect x="1186.1" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.1" y="1187.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="1198.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.1" y="1171.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="1182.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.16%)</title><rect x="1187.1" y="1155.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="1166.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="1150.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1107.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="1086.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1059.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
</g>
</svg>
