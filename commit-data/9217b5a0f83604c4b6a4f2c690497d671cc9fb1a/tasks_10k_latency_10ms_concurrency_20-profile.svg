<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (54 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (6 samples, 11.11%)</title><rect x="10.0" y="1011.0" width="131.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 1.85%)</title><rect x="10.0" y="995.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">c..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.85%)</title><rect x="10.0" y="979.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.85%)</title><rect x="10.0" y="963.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 1.85%)</title><rect x="10.0" y="947.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.85%)</title><rect x="10.0" y="931.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.85%)</title><rect x="10.0" y="915.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.85%)</title><rect x="10.0" y="899.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.85%)</title><rect x="10.0" y="883.0" width="21.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 1.85%)</title><rect x="10.0" y="867.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 1.85%)</title><rect x="10.0" y="851.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 1.85%)</title><rect x="10.0" y="835.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 1.85%)</title><rect x="10.0" y="819.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 1.85%)</title><rect x="10.0" y="803.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 1.85%)</title><rect x="10.0" y="787.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 1.85%)</title><rect x="10.0" y="771.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 1.85%)</title><rect x="10.0" y="755.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 1.85%)</title><rect x="10.0" y="739.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="750.0">o..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (5 samples, 9.26%)</title><rect x="31.9" y="995.0" width="109.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.9" y="1006.0">com/linecorp/..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.85%)</title><rect x="31.9" y="979.0" width="21.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.9" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/965227620.accept (1 samples, 1.85%)</title><rect x="31.9" y="963.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.9" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.85%)</title><rect x="31.9" y="947.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.9" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 1.85%)</title><rect x="31.9" y="931.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.9" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 1.85%)</title><rect x="31.9" y="915.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.9" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 1.85%)</title><rect x="31.9" y="899.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.9" y="910.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 1.85%)</title><rect x="31.9" y="883.0" width="21.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.9" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 1.85%)</title><rect x="31.9" y="867.0" width="21.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.9" y="878.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 7.41%)</title><rect x="53.7" y="979.0" width="87.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.7" y="990.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (4 samples, 7.41%)</title><rect x="53.7" y="963.0" width="87.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.7" y="974.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 3.70%)</title><rect x="53.7" y="947.0" width="43.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.7" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 3.70%)</title><rect x="53.7" y="931.0" width="43.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.7" y="942.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 3.70%)</title><rect x="53.7" y="915.0" width="43.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.7" y="926.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 1.85%)</title><rect x="53.7" y="899.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.7" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 1.85%)</title><rect x="53.7" y="883.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.7" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 1.85%)</title><rect x="53.7" y="867.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.7" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 1.85%)</title><rect x="53.7" y="851.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.7" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 1.85%)</title><rect x="53.7" y="835.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.7" y="846.0">o..</text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 1.85%)</title><rect x="53.7" y="819.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.7" y="830.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 1.85%)</title><rect x="75.6" y="899.0" width="21.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.6" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 1.85%)</title><rect x="75.6" y="883.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.6" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.85%)</title><rect x="75.6" y="867.0" width="21.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.6" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.85%)</title><rect x="75.6" y="851.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.6" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 1.85%)</title><rect x="75.6" y="835.0" width="21.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.6" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 1.85%)</title><rect x="75.6" y="819.0" width="21.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.6" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 1.85%)</title><rect x="75.6" y="803.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.6" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 1.85%)</title><rect x="97.4" y="947.0" width="21.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.4" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 1.85%)</title><rect x="97.4" y="931.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.4" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 1.85%)</title><rect x="97.4" y="915.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.4" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 1.85%)</title><rect x="97.4" y="899.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.4" y="910.0">o..</text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 1.85%)</title><rect x="97.4" y="883.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.4" y="894.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 1.85%)</title><rect x="97.4" y="867.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.4" y="878.0">j..</text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 1.85%)</title><rect x="97.4" y="851.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.4" y="862.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 1.85%)</title><rect x="97.4" y="835.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.4" y="846.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 1.85%)</title><rect x="97.4" y="819.0" width="21.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.4" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 1.85%)</title><rect x="97.4" y="803.0" width="21.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.4" y="814.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 1.85%)</title><rect x="119.3" y="947.0" width="21.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.3" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.85%)</title><rect x="119.3" y="931.0" width="21.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.3" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 1.85%)</title><rect x="119.3" y="915.0" width="21.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="122.3" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 1.85%)</title><rect x="119.3" y="899.0" width="21.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.3" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 1.85%)</title><rect x="119.3" y="883.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.3" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 1.85%)</title><rect x="119.3" y="867.0" width="21.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.3" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 1.85%)</title><rect x="119.3" y="851.0" width="21.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.3" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 1.85%)</title><rect x="119.3" y="835.0" width="21.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="122.3" y="846.0">o..</text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 1.85%)</title><rect x="119.3" y="819.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.3" y="830.0">j..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 1.85%)</title><rect x="119.3" y="803.0" width="21.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.3" y="814.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 1.85%)</title><rect x="119.3" y="787.0" width="21.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.3" y="798.0">s..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 1.85%)</title><rect x="119.3" y="771.0" width="21.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.3" y="782.0">j..</text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.85%)</title><rect x="141.1" y="1011.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.1" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.85%)</title><rect x="141.1" y="995.0" width="21.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.1" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.85%)</title><rect x="141.1" y="979.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.1" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1624983351.run (1 samples, 1.85%)</title><rect x="141.1" y="963.0" width="21.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.1" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.85%)</title><rect x="141.1" y="947.0" width="21.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="144.1" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.85%)</title><rect x="141.1" y="931.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.1" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.85%)</title><rect x="141.1" y="915.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.1" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 1.85%)</title><rect x="141.1" y="899.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.1" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 1.85%)</title><rect x="141.1" y="883.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.1" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 1.85%)</title><rect x="141.1" y="867.0" width="21.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.1" y="878.0">c..</text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 1.85%)</title><rect x="141.1" y="851.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.1" y="862.0">j..</text>
</g>
<g>
<title>start_thread (47 samples, 87.04%)</title><rect x="163.0" y="1011.0" width="1027.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="166.0" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (47 samples, 87.04%)</title><rect x="163.0" y="995.0" width="1027.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="166.0" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (47 samples, 87.04%)</title><rect x="163.0" y="979.0" width="1027.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="166.0" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (47 samples, 87.04%)</title><rect x="163.0" y="963.0" width="1027.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="166.0" y="974.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (47 samples, 87.04%)</title><rect x="163.0" y="947.0" width="1027.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="166.0" y="958.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (45 samples, 83.33%)</title><rect x="163.0" y="931.0" width="983.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="166.0" y="942.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (45 samples, 83.33%)</title><rect x="163.0" y="915.0" width="983.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.0" y="926.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 1.85%)</title><rect x="163.0" y="899.0" width="21.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.0" y="910.0">C..</text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 1.85%)</title><rect x="163.0" y="883.0" width="21.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="166.0" y="894.0">I..</text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.85%)</title><rect x="163.0" y="867.0" width="21.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="166.0" y="878.0">c..</text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.85%)</title><rect x="163.0" y="851.0" width="21.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="166.0" y="862.0">c..</text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.85%)</title><rect x="163.0" y="835.0" width="21.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="166.0" y="846.0">c..</text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.85%)</title><rect x="163.0" y="819.0" width="21.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="166.0" y="830.0">c..</text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.85%)</title><rect x="163.0" y="803.0" width="21.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="166.0" y="814.0">c..</text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.85%)</title><rect x="163.0" y="787.0" width="21.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="166.0" y="798.0">c..</text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 1.85%)</title><rect x="163.0" y="771.0" width="21.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="166.0" y="782.0">c..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 48.15%)</title><rect x="184.8" y="899.0" width="568.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="187.8" y="910.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 1.85%)</title><rect x="184.8" y="883.0" width="21.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="187.8" y="894.0">C..</text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 1.85%)</title><rect x="184.8" y="867.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="187.8" y="878.0">M..</text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 1.85%)</title><rect x="184.8" y="851.0" width="21.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="187.8" y="862.0">A..</text>
</g>
<g>
<title>Matcher::match() (3 samples, 5.56%)</title><rect x="206.7" y="883.0" width="65.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="209.7" y="894.0">Matcher..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 5.56%)</title><rect x="206.7" y="867.0" width="65.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="209.7" y="878.0">Matcher..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 3.70%)</title><rect x="228.5" y="851.0" width="43.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="231.5" y="862.0">Matc..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.85%)</title><rect x="250.4" y="835.0" width="21.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="253.4" y="846.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 1.85%)</title><rect x="250.4" y="819.0" width="21.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="253.4" y="830.0">M..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 5.56%)</title><rect x="272.2" y="883.0" width="65.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="275.2" y="894.0">PhaseCF..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 5.56%)</title><rect x="272.2" y="867.0" width="65.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="275.2" y="878.0">PhaseCF..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 1.85%)</title><rect x="272.2" y="851.0" width="21.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="275.2" y="862.0">P..</text>
</g>
<g>
<title>os::vm_page_size() (1 samples, 1.85%)</title><rect x="272.2" y="835.0" width="21.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="275.2" y="846.0">o..</text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 3.70%)</title><rect x="294.1" y="851.0" width="43.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="297.1" y="862.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 1.85%)</title><rect x="315.9" y="835.0" width="21.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="318.9" y="846.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 35.19%)</title><rect x="337.8" y="883.0" width="415.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="340.8" y="894.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 3.70%)</title><rect x="337.8" y="867.0" width="43.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="340.8" y="878.0">Phas..</text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 3.70%)</title><rect x="337.8" y="851.0" width="43.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="340.8" y="862.0">Phas..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 1.85%)</title><rect x="359.6" y="835.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="362.6" y="846.0">I..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 1.85%)</title><rect x="381.5" y="867.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="384.5" y="878.0">P..</text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 1.85%)</title><rect x="381.5" y="851.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="384.5" y="862.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 3.70%)</title><rect x="403.3" y="867.0" width="43.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="406.3" y="878.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 9.26%)</title><rect x="447.0" y="867.0" width="109.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="450.0" y="878.0">PhaseChaitin:..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.85%)</title><rect x="468.9" y="851.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="471.9" y="862.0">I..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.85%)</title><rect x="490.7" y="851.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="493.7" y="862.0">I..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 3.70%)</title><rect x="512.6" y="851.0" width="43.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.6" y="862.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 3.70%)</title><rect x="512.6" y="835.0" width="43.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.6" y="846.0">Inde..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 1.85%)</title><rect x="556.3" y="867.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="559.3" y="878.0">P..</text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 1.85%)</title><rect x="556.3" y="851.0" width="21.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="559.3" y="862.0">R..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 1.85%)</title><rect x="578.1" y="867.0" width="21.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="581.1" y="878.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.85%)</title><rect x="578.1" y="851.0" width="21.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="581.1" y="862.0">R..</text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 1.85%)</title><rect x="600.0" y="867.0" width="21.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="878.0">P..</text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 1.85%)</title><rect x="621.9" y="867.0" width="21.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="624.9" y="878.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 1.85%)</title><rect x="621.9" y="851.0" width="21.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="624.9" y="862.0">I..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 9.26%)</title><rect x="643.7" y="867.0" width="109.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="646.7" y="878.0">PhaseLive::co..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 1.85%)</title><rect x="709.3" y="851.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="712.3" y="862.0">P..</text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 1.85%)</title><rect x="731.1" y="851.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="734.1" y="862.0">V..</text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 1.85%)</title><rect x="731.1" y="835.0" width="21.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="734.1" y="846.0">_..</text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 20.37%)</title><rect x="753.0" y="899.0" width="240.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="756.0" y="910.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 1.85%)</title><rect x="753.0" y="883.0" width="21.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="756.0" y="894.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 1.85%)</title><rect x="753.0" y="867.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="756.0" y="878.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 12.96%)</title><rect x="774.8" y="883.0" width="153.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="777.8" y="894.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 1.85%)</title><rect x="774.8" y="867.0" width="21.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.8" y="878.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 1.85%)</title><rect x="774.8" y="851.0" width="21.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="777.8" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 1.85%)</title><rect x="774.8" y="835.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="777.8" y="846.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 9.26%)</title><rect x="796.7" y="867.0" width="109.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="799.7" y="878.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 7.41%)</title><rect x="818.5" y="851.0" width="87.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="821.5" y="862.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 3.70%)</title><rect x="862.2" y="835.0" width="43.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="865.2" y="846.0">Phas..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 1.85%)</title><rect x="884.1" y="819.0" width="21.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="887.1" y="830.0">N..</text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.85%)</title><rect x="884.1" y="803.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.1" y="814.0">A..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.85%)</title><rect x="905.9" y="867.0" width="21.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.9" y="878.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 1.85%)</title><rect x="905.9" y="851.0" width="21.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="908.9" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 1.85%)</title><rect x="905.9" y="835.0" width="21.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.9" y="846.0">P..</text>
</g>
<g>
<title>__memset_sse2 (1 samples, 1.85%)</title><rect x="905.9" y="819.0" width="21.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="908.9" y="830.0">_..</text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 1.85%)</title><rect x="927.8" y="883.0" width="21.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="930.8" y="894.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 1.85%)</title><rect x="927.8" y="867.0" width="21.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="930.8" y="878.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 3.70%)</title><rect x="949.6" y="883.0" width="43.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.6" y="894.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 3.70%)</title><rect x="949.6" y="867.0" width="43.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="952.6" y="878.0">Phas..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 1.85%)</title><rect x="971.5" y="851.0" width="21.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.5" y="862.0">N..</text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 1.85%)</title><rect x="971.5" y="835.0" width="21.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.5" y="846.0">N..</text>
</g>
<g>
<title>CatchProjNode::hash() const (1 samples, 1.85%)</title><rect x="971.5" y="819.0" width="21.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.5" y="830.0">C..</text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 1.85%)</title><rect x="971.5" y="803.0" width="21.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.5" y="814.0">C..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 9.26%)</title><rect x="993.3" y="899.0" width="109.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.3" y="910.0">ParseGenerato..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 9.26%)</title><rect x="993.3" y="883.0" width="109.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.3" y="894.0">Parse::Parse(..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 9.26%)</title><rect x="993.3" y="867.0" width="109.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="878.0">Parse::do_all..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 9.26%)</title><rect x="993.3" y="851.0" width="109.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.3" y="862.0">Parse::do_one..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 9.26%)</title><rect x="993.3" y="835.0" width="109.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="846.0">Parse::do_one..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 7.41%)</title><rect x="993.3" y="819.0" width="87.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.3" y="830.0">Parse::do_..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 5.56%)</title><rect x="993.3" y="803.0" width="65.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="814.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 5.56%)</title><rect x="993.3" y="787.0" width="65.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.3" y="798.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 5.56%)</title><rect x="993.3" y="771.0" width="65.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.3" y="782.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 5.56%)</title><rect x="993.3" y="755.0" width="65.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="766.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 5.56%)</title><rect x="993.3" y="739.0" width="65.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.3" y="750.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 5.56%)</title><rect x="993.3" y="723.0" width="65.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.3" y="734.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 5.56%)</title><rect x="993.3" y="707.0" width="65.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.3" y="718.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 5.56%)</title><rect x="993.3" y="691.0" width="65.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="702.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 3.70%)</title><rect x="993.3" y="675.0" width="43.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.3" y="686.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 3.70%)</title><rect x="993.3" y="659.0" width="43.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.3" y="670.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 3.70%)</title><rect x="993.3" y="643.0" width="43.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="654.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 3.70%)</title><rect x="993.3" y="627.0" width="43.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.3" y="638.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 3.70%)</title><rect x="993.3" y="611.0" width="43.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.3" y="622.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 3.70%)</title><rect x="993.3" y="595.0" width="43.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="606.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 3.70%)</title><rect x="993.3" y="579.0" width="43.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.3" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 3.70%)</title><rect x="993.3" y="563.0" width="43.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 3.70%)</title><rect x="993.3" y="547.0" width="43.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="558.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 3.70%)</title><rect x="993.3" y="531.0" width="43.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.3" y="542.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 3.70%)</title><rect x="993.3" y="515.0" width="43.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.3" y="526.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 3.70%)</title><rect x="993.3" y="499.0" width="43.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.3" y="510.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 3.70%)</title><rect x="993.3" y="483.0" width="43.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.3" y="494.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 3.70%)</title><rect x="993.3" y="467.0" width="43.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.3" y="478.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 3.70%)</title><rect x="993.3" y="451.0" width="43.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.3" y="462.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.85%)</title><rect x="993.3" y="435.0" width="21.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.3" y="446.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="993.3" y="419.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="430.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.85%)</title><rect x="993.3" y="403.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.3" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.85%)</title><rect x="993.3" y="387.0" width="21.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.3" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.85%)</title><rect x="993.3" y="371.0" width="21.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.3" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.85%)</title><rect x="993.3" y="355.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.85%)</title><rect x="993.3" y="339.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.85%)</title><rect x="993.3" y="323.0" width="21.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="334.0">P..</text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 1.85%)</title><rect x="993.3" y="307.0" width="21.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.3" y="318.0">G..</text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 1.85%)</title><rect x="993.3" y="291.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="302.0">P..</text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 1.85%)</title><rect x="993.3" y="275.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="286.0">S..</text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 1.85%)</title><rect x="993.3" y="259.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="270.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="243.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="254.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="227.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="238.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="211.0" width="21.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.3" y="222.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="195.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="206.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="179.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="190.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="163.0" width="21.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.3" y="174.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="147.0" width="21.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.3" y="158.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="131.0" width="21.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="142.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="115.0" width="21.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="126.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="99.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="110.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="83.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="94.0">I..</text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 1.85%)</title><rect x="993.3" y="67.0" width="21.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.3" y="78.0">I..</text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.85%)</title><rect x="993.3" y="51.0" width="21.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.3" y="62.0">M..</text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 1.85%)</title><rect x="993.3" y="35.0" width="21.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.3" y="46.0">U..</text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.85%)</title><rect x="1015.2" y="435.0" width="21.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.2" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.85%)</title><rect x="1015.2" y="419.0" width="21.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1018.2" y="430.0">P..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.85%)</title><rect x="1015.2" y="403.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.2" y="414.0">G..</text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 1.85%)</title><rect x="1015.2" y="387.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.2" y="398.0">G..</text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 1.85%)</title><rect x="1015.2" y="371.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.2" y="382.0">I..</text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 1.85%)</title><rect x="1015.2" y="355.0" width="21.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1018.2" y="366.0">N..</text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 1.85%)</title><rect x="1015.2" y="339.0" width="21.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1018.2" y="350.0">N..</text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 1.85%)</title><rect x="1037.0" y="675.0" width="21.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.0" y="686.0">c..</text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 1.85%)</title><rect x="1037.0" y="659.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.0" y="670.0">c..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="803.0" width="21.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="814.0">P..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="787.0" width="21.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.9" y="798.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="771.0" width="21.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="782.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.85%)</title><rect x="1058.9" y="755.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.9" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.85%)</title><rect x="1058.9" y="739.0" width="21.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.9" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.85%)</title><rect x="1058.9" y="723.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.85%)</title><rect x="1058.9" y="707.0" width="21.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.9" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.85%)</title><rect x="1058.9" y="691.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.9" y="702.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="675.0" width="21.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.9" y="686.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.85%)</title><rect x="1058.9" y="659.0" width="21.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.9" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.85%)</title><rect x="1058.9" y="643.0" width="21.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.9" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.85%)</title><rect x="1058.9" y="627.0" width="21.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.9" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.85%)</title><rect x="1058.9" y="611.0" width="21.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.9" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.85%)</title><rect x="1058.9" y="595.0" width="21.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.9" y="606.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="579.0" width="21.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.9" y="590.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.85%)</title><rect x="1058.9" y="563.0" width="21.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.9" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.85%)</title><rect x="1058.9" y="547.0" width="21.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.9" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.85%)</title><rect x="1058.9" y="531.0" width="21.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.9" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.85%)</title><rect x="1058.9" y="515.0" width="21.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.85%)</title><rect x="1058.9" y="499.0" width="21.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="510.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="483.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.9" y="494.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.85%)</title><rect x="1058.9" y="467.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.9" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.85%)</title><rect x="1058.9" y="451.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.85%)</title><rect x="1058.9" y="435.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.85%)</title><rect x="1058.9" y="419.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.85%)</title><rect x="1058.9" y="403.0" width="21.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="414.0">P..</text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 1.85%)</title><rect x="1058.9" y="387.0" width="21.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.9" y="398.0">L..</text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 1.85%)</title><rect x="1058.9" y="371.0" width="21.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="382.0">L..</text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 1.85%)</title><rect x="1058.9" y="355.0" width="21.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="366.0">L..</text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd, bool) (1 samples, 1.85%)</title><rect x="1058.9" y="339.0" width="21.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="350.0">G..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.85%)</title><rect x="1058.9" y="323.0" width="21.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="334.0">G..</text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 1.85%)</title><rect x="1058.9" y="307.0" width="21.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.9" y="318.0">G..</text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 1.85%)</title><rect x="1058.9" y="291.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="302.0">I..</text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 1.85%)</title><rect x="1058.9" y="275.0" width="21.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="286.0">N..</text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.85%)</title><rect x="1080.7" y="819.0" width="21.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.7" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.85%)</title><rect x="1080.7" y="803.0" width="21.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.7" y="814.0">P..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.85%)</title><rect x="1080.7" y="787.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.7" y="798.0">G..</text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 1.85%)</title><rect x="1080.7" y="771.0" width="21.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.7" y="782.0">G..</text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 1.85%)</title><rect x="1080.7" y="755.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.7" y="766.0">I..</text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 1.85%)</title><rect x="1080.7" y="739.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.7" y="750.0">L..</text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.85%)</title><rect x="1080.7" y="723.0" width="21.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.7" y="734.0">T..</text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.85%)</title><rect x="1080.7" y="707.0" width="21.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.7" y="718.0">D..</text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 1.85%)</title><rect x="1080.7" y="691.0" width="21.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.7" y="702.0">T..</text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 1.85%)</title><rect x="1080.7" y="675.0" width="21.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.7" y="686.0">c..</text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 1.85%)</title><rect x="1102.6" y="899.0" width="21.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.6" y="910.0">P..</text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 1.85%)</title><rect x="1102.6" y="883.0" width="21.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.6" y="894.0">C..</text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 1.85%)</title><rect x="1124.4" y="899.0" width="21.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.4" y="910.0">c..</text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 1.85%)</title><rect x="1124.4" y="883.0" width="21.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.4" y="894.0">c..</text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 1.85%)</title><rect x="1124.4" y="867.0" width="21.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.4" y="878.0">c..</text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 1.85%)</title><rect x="1124.4" y="851.0" width="21.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.4" y="862.0">c..</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 1.85%)</title><rect x="1124.4" y="835.0" width="21.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.4" y="846.0">I..</text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 3.70%)</title><rect x="1146.3" y="931.0" width="43.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.3" y="942.0">Comp..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 3.70%)</title><rect x="1146.3" y="915.0" width="43.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.3" y="926.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 3.70%)</title><rect x="1146.3" y="899.0" width="43.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="910.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 3.70%)</title><rect x="1146.3" y="883.0" width="43.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.3" y="894.0">Comp..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.85%)</title><rect x="1146.3" y="867.0" width="21.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="878.0">C..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.85%)</title><rect x="1146.3" y="851.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.3" y="862.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.85%)</title><rect x="1146.3" y="835.0" width="21.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="846.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.85%)</title><rect x="1146.3" y="819.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.3" y="830.0">G..</text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 1.85%)</title><rect x="1146.3" y="803.0" width="21.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.3" y="814.0">P..</text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 1.85%)</title><rect x="1146.3" y="787.0" width="21.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.3" y="798.0">B..</text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 1.85%)</title><rect x="1146.3" y="771.0" width="21.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="782.0">B..</text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 1.85%)</title><rect x="1168.1" y="867.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="878.0">C..</text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 1.85%)</title><rect x="1168.1" y="851.0" width="21.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.1" y="862.0">L..</text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 1.85%)</title><rect x="1168.1" y="835.0" width="21.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="846.0">L..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 1.85%)</title><rect x="1168.1" y="819.0" width="21.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1171.1" y="830.0">p..</text>
</g>
</g>
</svg>
