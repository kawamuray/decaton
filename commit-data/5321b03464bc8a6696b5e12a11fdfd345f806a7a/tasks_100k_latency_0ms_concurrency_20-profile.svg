<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (460 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.22%)</title><rect x="10.0" y="1203.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*) (1 samples, 0.22%)</title><rect x="10.0" y="1187.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (1 samples, 0.22%)</title><rect x="10.0" y="1171.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (1 samples, 0.22%)</title><rect x="10.0" y="1155.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>Events::log(Thread*, char const*, ...) (1 samples, 0.22%)</title><rect x="10.0" y="1139.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.22%)</title><rect x="10.0" y="1123.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.22%)</title><rect x="10.0" y="1107.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.22%)</title><rect x="10.0" y="1091.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.22%)</title><rect x="10.0" y="1075.0" width="2.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.22%)</title><rect x="10.0" y="1059.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>__ultoa (1 samples, 0.22%)</title><rect x="10.0" y="1043.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (169 samples, 36.74%)</title><rect x="12.6" y="1203.0" width="433.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.6" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorSubscriptio..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.22%)</title><rect x="12.6" y="1187.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.22%)</title><rect x="12.6" y="1171.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.22%)</title><rect x="12.6" y="1155.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.22%)</title><rect x="12.6" y="1139.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.22%)</title><rect x="12.6" y="1123.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.22%)</title><rect x="12.6" y="1107.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.22%)</title><rect x="12.6" y="1091.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.22%)</title><rect x="12.6" y="1075.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.22%)</title><rect x="12.6" y="1059.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.22%)</title><rect x="12.6" y="1043.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.22%)</title><rect x="12.6" y="1027.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.22%)</title><rect x="12.6" y="1011.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.22%)</title><rect x="12.6" y="995.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.22%)</title><rect x="12.6" y="979.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.22%)</title><rect x="12.6" y="963.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.6" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.22%)</title><rect x="12.6" y="947.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.22%)</title><rect x="12.6" y="931.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.22%)</title><rect x="12.6" y="915.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.22%)</title><rect x="12.6" y="899.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.22%)</title><rect x="12.6" y="883.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.6" y="894.0"></text>
</g>
<g>
<title>writev (1 samples, 0.22%)</title><rect x="12.6" y="867.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="15.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (168 samples, 36.52%)</title><rect x="15.1" y="1187.0" width="431.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.1" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorSubscriptio..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (153 samples, 33.26%)</title><rect x="15.1" y="1171.0" width="392.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.1" y="1182.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/464908022.accept (151 samples, 32.83%)</title><rect x="15.1" y="1155.0" width="387.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorSubsc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (151 samples, 32.83%)</title><rect x="15.1" y="1139.0" width="387.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.1" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorSubsc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.22%)</title><rect x="15.1" y="1123.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (146 samples, 31.74%)</title><rect x="17.7" y="1123.0" width="374.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="1134.0">com/linecorp/decaton/processor/runtime/PartitionCon..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.22%)</title><rect x="17.7" y="1107.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.7" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="1091.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.7" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="1075.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.7" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="1059.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.7" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="1043.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="20.7" y="1054.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="1027.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="20.7" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="1011.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.7" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="995.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.7" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.22%)</title><rect x="17.7" y="979.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.22%)</title><rect x="17.7" y="963.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="20.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.22%)</title><rect x="17.7" y="947.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.7" y="958.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.22%)</title><rect x="17.7" y="931.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="20.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (145 samples, 31.52%)</title><rect x="20.3" y="1107.0" width="371.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.3" y="1118.0">com/linecorp/decaton/processor/runtime/PartitionPro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (145 samples, 31.52%)</title><rect x="20.3" y="1091.0" width="371.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.3" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUni..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (145 samples, 31.52%)</title><rect x="20.3" y="1075.0" width="371.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.3" y="1086.0">java/util/concurrent/Executors$DelegatedExecutorSer..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (145 samples, 31.52%)</title><rect x="20.3" y="1059.0" width="371.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="1070.0">java/util/concurrent/ThreadPoolExecutor.execute</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (145 samples, 31.52%)</title><rect x="20.3" y="1043.0" width="371.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.3" y="1054.0">java/util/concurrent/LinkedBlockingQueue.offer</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (144 samples, 31.30%)</title><rect x="20.3" y="1027.0" width="369.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.3" y="1038.0">java/util/concurrent/LinkedBlockingQueue.signalNot..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.22%)</title><rect x="20.3" y="1011.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.22%)</title><rect x="20.3" y="995.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.22%)</title><rect x="20.3" y="979.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (143 samples, 31.09%)</title><rect x="22.8" y="1011.0" width="366.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="1022.0">java/util/concurrent/locks/ReentrantLock.unlock</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (143 samples, 31.09%)</title><rect x="22.8" y="995.0" width="366.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="1006.0">java/util/concurrent/locks/AbstractQueuedSynchroni..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (143 samples, 31.09%)</title><rect x="22.8" y="979.0" width="366.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="25.8" y="990.0">java/util/concurrent/locks/AbstractQueuedSynchroni..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (142 samples, 30.87%)</title><rect x="25.4" y="963.0" width="364.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="974.0">java/util/concurrent/locks/LockSupport.unpark</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (142 samples, 30.87%)</title><rect x="25.4" y="947.0" width="364.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.4" y="958.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.22%)</title><rect x="43.3" y="931.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="46.3" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.22%)</title><rect x="45.9" y="931.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="48.9" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (133 samples, 28.91%)</title><rect x="48.5" y="931.0" width="341.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="51.5" y="942.0">Unsafe_Unpark</text>
</g>
<g>
<title>Parker::unpark() (68 samples, 14.78%)</title><rect x="51.0" y="915.0" width="174.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="54.0" y="926.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (67 samples, 14.57%)</title><rect x="51.0" y="899.0" width="171.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="54.0" y="910.0">__psynch_cvsignal</text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.22%)</title><rect x="222.9" y="899.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="225.9" y="910.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.22%)</title><rect x="222.9" y="883.0" width="2.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="225.9" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.22%)</title><rect x="225.5" y="915.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="228.5" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.22%)</title><rect x="225.5" y="899.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="228.5" y="910.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.22%)</title><rect x="225.5" y="883.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="228.5" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.22%)</title><rect x="225.5" y="867.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="228.5" y="878.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.22%)</title><rect x="225.5" y="851.0" width="2.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="228.5" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.22%)</title><rect x="225.5" y="835.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="228.5" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="225.5" y="819.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="228.5" y="830.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (62 samples, 13.48%)</title><rect x="228.0" y="915.0" width="159.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="231.0" y="926.0">_pthread_mutex_first..</text>
</g>
<g>
<title>__psynch_mutexdrop (60 samples, 13.04%)</title><rect x="230.6" y="899.0" width="153.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="233.6" y="910.0">__psynch_mutexdrop</text>
</g>
<g>
<title>_pthread_mutex_firstfit_wake (1 samples, 0.22%)</title><rect x="384.5" y="899.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="387.5" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.22%)</title><rect x="387.1" y="915.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="390.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.22%)</title><rect x="389.7" y="1027.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.22%)</title><rect x="392.2" y="1123.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.22%)</title><rect x="392.2" y="1107.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.22%)</title><rect x="394.8" y="1123.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.22%)</title><rect x="394.8" y="1107.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="397.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.22%)</title><rect x="394.8" y="1091.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.43%)</title><rect x="397.3" y="1123.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.43%)</title><rect x="397.3" y="1107.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.43%)</title><rect x="397.3" y="1091.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.22%)</title><rect x="399.9" y="1075.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.22%)</title><rect x="402.5" y="1155.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.22%)</title><rect x="402.5" y="1139.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.22%)</title><rect x="405.0" y="1155.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.22%)</title><rect x="405.0" y="1139.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.22%)</title><rect x="405.0" y="1123.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.22%)</title><rect x="405.0" y="1107.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 3.26%)</title><rect x="407.6" y="1171.0" width="38.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.6" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 3.26%)</title><rect x="407.6" y="1155.0" width="38.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.6" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 1.52%)</title><rect x="407.6" y="1139.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.22%)</title><rect x="407.6" y="1123.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.6" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.22%)</title><rect x="407.6" y="1107.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.6" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.22%)</title><rect x="407.6" y="1091.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="410.6" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.22%)</title><rect x="407.6" y="1075.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="410.6" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.22%)</title><rect x="407.6" y="1059.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="410.6" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.22%)</title><rect x="407.6" y="1043.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="410.6" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="407.6" y="1027.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="410.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.65%)</title><rect x="410.2" y="1123.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="413.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.65%)</title><rect x="410.2" y="1107.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.22%)</title><rect x="410.2" y="1091.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="413.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.22%)</title><rect x="410.2" y="1075.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.22%)</title><rect x="410.2" y="1059.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.22%)</title><rect x="410.2" y="1043.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.2" y="1054.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.22%)</title><rect x="410.2" y="1027.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.2" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.22%)</title><rect x="410.2" y="1011.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="413.2" y="1022.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.22%)</title><rect x="410.2" y="995.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="413.2" y="1006.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.22%)</title><rect x="410.2" y="979.0" width="2.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="413.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.43%)</title><rect x="412.7" y="1091.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.43%)</title><rect x="412.7" y="1075.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.43%)</title><rect x="412.7" y="1059.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.7" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2 samples, 0.43%)</title><rect x="412.7" y="1043.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.7" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.43%)</title><rect x="412.7" y="1027.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2 samples, 0.43%)</title><rect x="412.7" y="1011.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (2 samples, 0.43%)</title><rect x="412.7" y="995.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="415.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (2 samples, 0.43%)</title><rect x="412.7" y="979.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.7" y="990.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.22%)</title><rect x="412.7" y="963.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="415.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.22%)</title><rect x="412.7" y="947.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="415.7" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.22%)</title><rect x="412.7" y="931.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="415.7" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.22%)</title><rect x="412.7" y="915.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="415.7" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.22%)</title><rect x="412.7" y="899.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="415.7" y="910.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.22%)</title><rect x="412.7" y="883.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="415.7" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.22%)</title><rect x="412.7" y="867.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="415.7" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="412.7" y="851.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="415.7" y="862.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.22%)</title><rect x="415.3" y="963.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="418.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.65%)</title><rect x="417.9" y="1123.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.65%)</title><rect x="417.9" y="1107.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.43%)</title><rect x="417.9" y="1091.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.43%)</title><rect x="417.9" y="1075.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.22%)</title><rect x="420.4" y="1059.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.22%)</title><rect x="420.4" y="1043.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="423.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.22%)</title><rect x="420.4" y="1027.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Boolean.valueOf (1 samples, 0.22%)</title><rect x="420.4" y="1011.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.4" y="1022.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.22%)</title><rect x="420.4" y="995.0" width="2.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="423.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.22%)</title><rect x="423.0" y="1091.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.22%)</title><rect x="423.0" y="1075.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="426.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.22%)</title><rect x="423.0" y="1059.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.22%)</title><rect x="423.0" y="1043.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="426.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.22%)</title><rect x="423.0" y="1027.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.22%)</title><rect x="423.0" y="1011.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.22%)</title><rect x="423.0" y="995.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="426.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 0.87%)</title><rect x="425.6" y="1139.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.87%)</title><rect x="425.6" y="1123.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.87%)</title><rect x="425.6" y="1107.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.22%)</title><rect x="425.6" y="1091.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1083725157.accept (1 samples, 0.22%)</title><rect x="425.6" y="1075.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.22%)</title><rect x="425.6" y="1059.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.22%)</title><rect x="425.6" y="1043.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.22%)</title><rect x="425.6" y="1027.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.22%)</title><rect x="425.6" y="1011.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.22%)</title><rect x="425.6" y="995.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="428.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.equals (1 samples, 0.22%)</title><rect x="425.6" y="979.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.22%)</title><rect x="428.1" y="1091.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.22%)</title><rect x="428.1" y="1075.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.22%)</title><rect x="428.1" y="1059.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.22%)</title><rect x="430.7" y="1091.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.22%)</title><rect x="430.7" y="1075.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.22%)</title><rect x="430.7" y="1059.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.22%)</title><rect x="430.7" y="1043.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.22%)</title><rect x="430.7" y="1027.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.22%)</title><rect x="433.3" y="1091.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.22%)</title><rect x="433.3" y="1075.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.22%)</title><rect x="433.3" y="1059.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.22%)</title><rect x="433.3" y="1043.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.22%)</title><rect x="433.3" y="1027.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.22%)</title><rect x="433.3" y="1011.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.22%)</title><rect x="433.3" y="995.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.22%)</title><rect x="433.3" y="979.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.22%)</title><rect x="433.3" y="963.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.65%)</title><rect x="435.8" y="1139.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.65%)</title><rect x="435.8" y="1123.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.43%)</title><rect x="438.4" y="1107.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.22%)</title><rect x="438.4" y="1091.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.22%)</title><rect x="438.4" y="1075.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.22%)</title><rect x="441.0" y="1091.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.22%)</title><rect x="441.0" y="1075.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.22%)</title><rect x="441.0" y="1059.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.22%)</title><rect x="441.0" y="1043.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.22%)</title><rect x="441.0" y="1027.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.22%)</title><rect x="441.0" y="1011.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="444.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.22%)</title><rect x="441.0" y="995.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.22%)</title><rect x="441.0" y="979.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="444.0" y="990.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.22%)</title><rect x="441.0" y="963.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="444.0" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.22%)</title><rect x="441.0" y="947.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="444.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (1 samples, 0.22%)</title><rect x="441.0" y="931.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="444.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.22%)</title><rect x="443.5" y="1139.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.22%)</title><rect x="443.5" y="1123.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="446.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.22%)</title><rect x="443.5" y="1107.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.22%)</title><rect x="443.5" y="1091.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.22%)</title><rect x="443.5" y="1075.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.22%)</title><rect x="443.5" y="1059.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="446.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.22%)</title><rect x="443.5" y="1043.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="446.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.22%)</title><rect x="443.5" y="1027.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.22%)</title><rect x="443.5" y="1011.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="446.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.22%)</title><rect x="443.5" y="995.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="446.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.22%)</title><rect x="443.5" y="979.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="446.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.22%)</title><rect x="443.5" y="963.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.22%)</title><rect x="443.5" y="947.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/1935179169.test (1 samples, 0.22%)</title><rect x="443.5" y="931.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.22%)</title><rect x="443.5" y="915.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/107741292.test (1 samples, 0.22%)</title><rect x="443.5" y="899.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="446.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.22%)</title><rect x="443.5" y="883.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (89 samples, 19.35%)</title><rect x="446.1" y="1203.0" width="228.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="449.1" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (89 samples, 19.35%)</title><rect x="446.1" y="1187.0" width="228.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.1" y="1198.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (89 samples, 19.35%)</title><rect x="446.1" y="1171.0" width="228.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.1" y="1182.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.22%)</title><rect x="451.2" y="1155.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="454.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/122992079.run (11 samples, 2.39%)</title><rect x="453.8" y="1155.0" width="28.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="456.8" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (11 samples, 2.39%)</title><rect x="453.8" y="1139.0" width="28.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="456.8" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (11 samples, 2.39%)</title><rect x="453.8" y="1123.0" width="28.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.8" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (11 samples, 2.39%)</title><rect x="453.8" y="1107.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.8" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (3 samples, 0.65%)</title><rect x="453.8" y="1091.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (3 samples, 0.65%)</title><rect x="453.8" y="1075.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (3 samples, 0.65%)</title><rect x="453.8" y="1059.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (3 samples, 0.65%)</title><rect x="453.8" y="1043.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (3 samples, 0.65%)</title><rect x="453.8" y="1027.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (3 samples, 0.65%)</title><rect x="453.8" y="1011.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 0.65%)</title><rect x="453.8" y="995.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 0.65%)</title><rect x="453.8" y="979.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.43%)</title><rect x="453.8" y="963.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.22%)</title><rect x="453.8" y="947.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.22%)</title><rect x="453.8" y="931.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="456.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.22%)</title><rect x="456.3" y="947.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.22%)</title><rect x="456.3" y="931.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.22%)</title><rect x="458.9" y="963.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.22%)</title><rect x="458.9" y="947.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.22%)</title><rect x="458.9" y="931.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.22%)</title><rect x="458.9" y="915.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.22%)</title><rect x="458.9" y="899.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.22%)</title><rect x="458.9" y="883.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (7 samples, 1.52%)</title><rect x="461.5" y="1091.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (5 samples, 1.09%)</title><rect x="461.5" y="1075.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (5 samples, 1.09%)</title><rect x="461.5" y="1059.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.43%)</title><rect x="461.5" y="1043.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.43%)</title><rect x="461.5" y="1027.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.43%)</title><rect x="461.5" y="1011.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.43%)</title><rect x="461.5" y="995.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.43%)</title><rect x="461.5" y="979.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.22%)</title><rect x="464.0" y="963.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="467.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.22%)</title><rect x="464.0" y="947.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="467.0" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.22%)</title><rect x="464.0" y="931.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="467.0" y="942.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.22%)</title><rect x="464.0" y="915.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="467.0" y="926.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="464.0" y="899.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="467.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.22%)</title><rect x="466.6" y="1043.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.22%)</title><rect x="466.6" y="1027.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.22%)</title><rect x="466.6" y="1011.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.6" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 0.43%)</title><rect x="469.2" y="1043.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.2" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 0.43%)</title><rect x="469.2" y="1027.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.2" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.43%)</title><rect x="469.2" y="1011.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.43%)</title><rect x="469.2" y="995.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.43%)</title><rect x="469.2" y="979.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.43%)</title><rect x="474.3" y="1075.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.43%)</title><rect x="474.3" y="1059.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/148912029.linkToTargetMethod (1 samples, 0.22%)</title><rect x="474.3" y="1043.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/733957003.invokeStatic_L_L (1 samples, 0.22%)</title><rect x="474.3" y="1027.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1484385443.get$Lambda (1 samples, 0.22%)</title><rect x="474.3" y="1011.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1484385443.&lt;init&gt; (1 samples, 0.22%)</title><rect x="474.3" y="995.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.22%)</title><rect x="476.9" y="1043.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.22%)</title><rect x="476.9" y="1027.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.9" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.22%)</title><rect x="476.9" y="1011.0" width="2.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="479.9" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.22%)</title><rect x="479.4" y="1091.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="482.4" y="1102.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.22%)</title><rect x="479.4" y="1075.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="482.4" y="1086.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.22%)</title><rect x="479.4" y="1059.0" width="2.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="482.4" y="1070.0"></text>
</g>
<g>
<title>_res (1 samples, 0.22%)</title><rect x="479.4" y="1043.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="482.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.43%)</title><rect x="482.0" y="1155.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.22%)</title><rect x="484.6" y="1139.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.6" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.22%)</title><rect x="484.6" y="1123.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="487.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (73 samples, 15.87%)</title><rect x="487.1" y="1155.0" width="187.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.1" y="1166.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (73 samples, 15.87%)</title><rect x="487.1" y="1139.0" width="187.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.1" y="1150.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (73 samples, 15.87%)</title><rect x="487.1" y="1123.0" width="187.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.1" y="1134.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (73 samples, 15.87%)</title><rect x="487.1" y="1107.0" width="187.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.1" y="1118.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (73 samples, 15.87%)</title><rect x="487.1" y="1091.0" width="187.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.1" y="1102.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (70 samples, 15.22%)</title><rect x="494.8" y="1075.0" width="179.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="497.8" y="1086.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.22%)</title><rect x="494.8" y="1059.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="497.8" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (69 samples, 15.00%)</title><rect x="497.4" y="1059.0" width="177.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="500.4" y="1070.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (55 samples, 11.96%)</title><rect x="497.4" y="1043.0" width="141.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="500.4" y="1054.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 3.04%)</title><rect x="638.5" y="1043.0" width="35.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="641.5" y="1054.0">_pt..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (14 samples, 3.04%)</title><rect x="638.5" y="1027.0" width="35.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="641.5" y="1038.0">_pt..</text>
</g>
<g>
<title>__psynch_mutexwait (14 samples, 3.04%)</title><rect x="638.5" y="1011.0" width="35.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="641.5" y="1022.0">__p..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.22%)</title><rect x="674.4" y="1203.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.22%)</title><rect x="674.4" y="1187.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.22%)</title><rect x="674.4" y="1171.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.22%)</title><rect x="674.4" y="1155.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.22%)</title><rect x="674.4" y="1139.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.22%)</title><rect x="674.4" y="1123.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.22%)</title><rect x="674.4" y="1107.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.22%)</title><rect x="674.4" y="1091.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.22%)</title><rect x="674.4" y="1075.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.4" y="1086.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.22%)</title><rect x="674.4" y="1059.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.4" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.22%)</title><rect x="674.4" y="1043.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="677.4" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.22%)</title><rect x="674.4" y="1027.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="677.4" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="674.4" y="1011.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="677.4" y="1022.0"></text>
</g>
<g>
<title>thread_start (200 samples, 43.48%)</title><rect x="677.0" y="1203.0" width="513.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="680.0" y="1214.0">thread_start</text>
</g>
<g>
<title>_pthread_start (200 samples, 43.48%)</title><rect x="677.0" y="1187.0" width="513.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="680.0" y="1198.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (200 samples, 43.48%)</title><rect x="677.0" y="1171.0" width="513.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="680.0" y="1182.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (200 samples, 43.48%)</title><rect x="677.0" y="1155.0" width="513.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="680.0" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 1.09%)</title><rect x="677.0" y="1139.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.0" y="1150.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.87%)</title><rect x="677.0" y="1123.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="680.0" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.22%)</title><rect x="677.0" y="1107.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="680.0" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.22%)</title><rect x="677.0" y="1091.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="680.0" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.22%)</title><rect x="677.0" y="1075.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.0" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderData::classes_do(KlassClosure*) (1 samples, 0.22%)</title><rect x="677.0" y="1059.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.0" y="1070.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.22%)</title><rect x="677.0" y="1043.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.0" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.65%)</title><rect x="679.5" y="1107.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="682.5" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.65%)</title><rect x="679.5" y="1091.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="682.5" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.65%)</title><rect x="679.5" y="1075.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="682.5" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (3 samples, 0.65%)</title><rect x="679.5" y="1059.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="682.5" y="1070.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (3 samples, 0.65%)</title><rect x="679.5" y="1043.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.5" y="1054.0"></text>
</g>
<g>
<title>ScanRSClosure::scan_strong_code_roots(HeapRegion*) (3 samples, 0.65%)</title><rect x="679.5" y="1027.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.5" y="1038.0"></text>
</g>
<g>
<title>CodeRootSetTable::nmethods_do(CodeBlobClosure*) (3 samples, 0.65%)</title><rect x="679.5" y="1011.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="682.5" y="1022.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (3 samples, 0.65%)</title><rect x="679.5" y="995.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="682.5" y="1006.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (3 samples, 0.65%)</title><rect x="679.5" y="979.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="682.5" y="990.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.22%)</title><rect x="679.5" y="963.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="682.5" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.22%)</title><rect x="679.5" y="947.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="682.5" y="958.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.22%)</title><rect x="682.1" y="963.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="685.1" y="974.0"></text>
</g>
<g>
<title>void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.22%)</title><rect x="684.7" y="963.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="687.7" y="974.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.22%)</title><rect x="684.7" y="947.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="687.7" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.22%)</title><rect x="684.7" y="931.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="687.7" y="942.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.22%)</title><rect x="684.7" y="915.0" width="2.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="687.7" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.22%)</title><rect x="687.2" y="1123.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="690.2" y="1134.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.22%)</title><rect x="687.2" y="1107.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="690.2" y="1118.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.22%)</title><rect x="687.2" y="1091.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="690.2" y="1102.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.22%)</title><rect x="687.2" y="1075.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="690.2" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (190 samples, 41.30%)</title><rect x="689.8" y="1139.0" width="487.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.8" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (190 samples, 41.30%)</title><rect x="689.8" y="1123.0" width="487.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="692.8" y="1134.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (187 samples, 40.65%)</title><rect x="689.8" y="1107.0" width="479.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="692.8" y="1118.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (184 samples, 40.00%)</title><rect x="689.8" y="1091.0" width="472.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="692.8" y="1102.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (183 samples, 39.78%)</title><rect x="689.8" y="1075.0" width="469.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="692.8" y="1086.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (183 samples, 39.78%)</title><rect x="689.8" y="1059.0" width="469.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.8" y="1070.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool,..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.22%)</title><rect x="689.8" y="1043.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.8" y="1054.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.22%)</title><rect x="689.8" y="1027.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.8" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.22%)</title><rect x="689.8" y="1011.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="692.8" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.22%)</title><rect x="689.8" y="995.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="692.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.22%)</title><rect x="689.8" y="979.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="692.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="689.8" y="963.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.8" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="689.8" y="947.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.8" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="689.8" y="931.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.8" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.22%)</title><rect x="689.8" y="915.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="692.8" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.22%)</title><rect x="689.8" y="899.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.8" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="689.8" y="883.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="692.8" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="689.8" y="867.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.8" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.22%)</title><rect x="689.8" y="851.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="692.8" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.22%)</title><rect x="689.8" y="835.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="692.8" y="846.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="689.8" y="819.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="692.8" y="830.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.22%)</title><rect x="689.8" y="803.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="692.8" y="814.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.22%)</title><rect x="689.8" y="787.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.8" y="798.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (93 samples, 20.22%)</title><rect x="692.3" y="1043.0" width="238.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="695.3" y="1054.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.87%)</title><rect x="692.3" y="1027.0" width="10.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="695.3" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.22%)</title><rect x="692.3" y="1011.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="695.3" y="1022.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.65%)</title><rect x="694.9" y="1011.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="697.9" y="1022.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.65%)</title><rect x="694.9" y="995.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="697.9" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.22%)</title><rect x="697.5" y="979.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="700.5" y="990.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.22%)</title><rect x="697.5" y="963.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="700.5" y="974.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.22%)</title><rect x="700.0" y="979.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="703.0" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.43%)</title><rect x="702.6" y="1027.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="705.6" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.22%)</title><rect x="702.6" y="1011.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="705.6" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.22%)</title><rect x="702.6" y="995.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="705.6" y="1006.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.22%)</title><rect x="705.2" y="1011.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="708.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::match() (13 samples, 2.83%)</title><rect x="707.7" y="1027.0" width="33.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="710.7" y="1038.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.22%)</title><rect x="707.7" y="1011.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="710.7" y="1022.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.22%)</title><rect x="710.3" y="1011.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="713.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.22%)</title><rect x="712.9" y="1011.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="715.9" y="1022.0"></text>
</g>
<g>
<title>VectorSet::set(unsigned int) (1 samples, 0.22%)</title><rect x="712.9" y="995.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="715.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 2.17%)</title><rect x="715.4" y="1011.0" width="25.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="718.4" y="1022.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.43%)</title><rect x="715.4" y="995.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="718.4" y="1006.0"></text>
</g>
<g>
<title>Matcher::is_dontcare(Node*) (1 samples, 0.22%)</title><rect x="720.6" y="995.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="723.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 1.09%)</title><rect x="723.1" y="995.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="726.1" y="1006.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.43%)</title><rect x="730.8" y="979.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.8" y="990.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.22%)</title><rect x="736.0" y="995.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.0" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.22%)</title><rect x="738.5" y="995.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="741.5" y="1006.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.22%)</title><rect x="738.5" y="979.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.5" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.22%)</title><rect x="741.1" y="1027.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="744.1" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.22%)</title><rect x="741.1" y="1011.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="744.1" y="1022.0"></text>
</g>
<g>
<title>UnionFind::Find_compress(unsigned int) (1 samples, 0.22%)</title><rect x="741.1" y="995.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="744.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 1.52%)</title><rect x="743.7" y="1027.0" width="17.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.22%)</title><rect x="743.7" y="1011.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.7" y="1022.0"></text>
</g>
<g>
<title>Tarjan::EVAL() (1 samples, 0.22%)</title><rect x="743.7" y="995.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="746.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 1.30%)</title><rect x="746.2" y="1011.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="749.2" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.43%)</title><rect x="746.2" y="995.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="749.2" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.43%)</title><rect x="746.2" y="979.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="749.2" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.65%)</title><rect x="751.3" y="995.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="754.3" y="1006.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.22%)</title><rect x="751.3" y="979.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="754.3" y="990.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="751.3" y="963.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="754.3" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.22%)</title><rect x="753.9" y="979.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="756.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.22%)</title><rect x="756.5" y="979.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="759.5" y="990.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 0.22%)</title><rect x="756.5" y="963.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="759.5" y="974.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.22%)</title><rect x="759.0" y="995.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="762.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (66 samples, 14.35%)</title><rect x="761.6" y="1027.0" width="169.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="764.6" y="1038.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.22%)</title><rect x="761.6" y="1011.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.6" y="1022.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.22%)</title><rect x="764.2" y="1011.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.2" y="1022.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.22%)</title><rect x="766.7" y="1011.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="769.7" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.43%)</title><rect x="769.3" y="1011.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 1.30%)</title><rect x="774.4" y="1011.0" width="15.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="777.4" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.22%)</title><rect x="774.4" y="995.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="777.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.43%)</title><rect x="777.0" y="995.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="780.0" y="1006.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.43%)</title><rect x="777.0" y="979.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="780.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.43%)</title><rect x="782.1" y="995.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="785.1" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.22%)</title><rect x="782.1" y="979.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="785.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.22%)</title><rect x="784.7" y="979.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="787.7" y="990.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.22%)</title><rect x="787.3" y="995.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="790.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.87%)</title><rect x="789.8" y="1011.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="792.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.65%)</title><rect x="792.4" y="995.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.4" y="1006.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.22%)</title><rect x="792.4" y="979.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="795.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.43%)</title><rect x="795.0" y="979.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 1.52%)</title><rect x="800.1" y="1011.0" width="17.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="803.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.22%)</title><rect x="812.9" y="995.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="815.9" y="1006.0"></text>
</g>
<g>
<title>Block_Array::grow(unsigned int) (1 samples, 0.22%)</title><rect x="812.9" y="979.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="815.9" y="990.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.22%)</title><rect x="812.9" y="963.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.9" y="974.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="812.9" y="947.0" width="2.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="815.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.22%)</title><rect x="815.5" y="995.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="818.5" y="1006.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.22%)</title><rect x="815.5" y="979.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 2.83%)</title><rect x="818.0" y="1011.0" width="33.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="821.0" y="1022.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.22%)</title><rect x="836.0" y="995.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.0" y="1006.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.22%)</title><rect x="838.6" y="995.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="841.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.65%)</title><rect x="841.1" y="995.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.1" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.22%)</title><rect x="841.1" y="979.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="844.1" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.22%)</title><rect x="841.1" y="963.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="844.1" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.22%)</title><rect x="841.1" y="947.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="844.1" y="958.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.43%)</title><rect x="843.7" y="979.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.7" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.22%)</title><rect x="848.8" y="995.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.43%)</title><rect x="851.4" y="1011.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.4" y="1022.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.22%)</title><rect x="854.0" y="995.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="857.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 1.74%)</title><rect x="856.5" y="1011.0" width="20.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="859.5" y="1022.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (2 samples, 0.43%)</title><rect x="864.2" y="995.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.2" y="1006.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.22%)</title><rect x="869.3" y="995.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.3" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.22%)</title><rect x="871.9" y="995.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.9" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.22%)</title><rect x="871.9" y="979.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.9" y="990.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.22%)</title><rect x="874.5" y="995.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.43%)</title><rect x="877.0" y="1011.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.43%)</title><rect x="877.0" y="995.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.65%)</title><rect x="882.2" y="1011.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.2" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.65%)</title><rect x="882.2" y="995.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.43%)</title><rect x="882.2" y="979.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="885.2" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.22%)</title><rect x="887.3" y="979.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="890.3" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.22%)</title><rect x="887.3" y="963.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.43%)</title><rect x="889.9" y="1011.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="892.9" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.22%)</title><rect x="889.9" y="995.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.22%)</title><rect x="892.4" y="995.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="895.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.22%)</title><rect x="892.4" y="979.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.4" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.43%)</title><rect x="895.0" y="1011.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.22%)</title><rect x="895.0" y="995.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.22%)</title><rect x="897.6" y="995.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="900.6" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 1.52%)</title><rect x="900.1" y="1011.0" width="18.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="903.1" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.22%)</title><rect x="902.7" y="995.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.7" y="1006.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.22%)</title><rect x="905.3" y="995.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="908.3" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.87%)</title><rect x="907.8" y="995.0" width="10.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="910.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.22%)</title><rect x="915.5" y="979.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.5" y="990.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.22%)</title><rect x="918.1" y="1011.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.1" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.22%)</title><rect x="920.7" y="1011.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="923.7" y="1022.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="923.2" y="1011.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.2" y="1022.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.22%)</title><rect x="923.2" y="995.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.2" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.22%)</title><rect x="923.2" y="979.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.2" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.22%)</title><rect x="923.2" y="963.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="926.2" y="974.0"></text>
</g>
<g>
<title>YieldingFlexibleGangWorker::~YieldingFlexibleGangWorker() (1 samples, 0.22%)</title><rect x="925.8" y="1011.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="928.8" y="1022.0"></text>
</g>
<g>
<title>addL_rReg_immNode::two_adr() const (1 samples, 0.22%)</title><rect x="928.3" y="1011.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.3" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (68 samples, 14.78%)</title><rect x="930.9" y="1043.0" width="174.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.9" y="1054.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.22%)</title><rect x="930.9" y="1027.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.9" y="1038.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.22%)</title><rect x="930.9" y="1011.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="933.9" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.22%)</title><rect x="930.9" y="995.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.9" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_range_check_casts(PhaseIterGVN&amp;) (1 samples, 0.22%)</title><rect x="933.5" y="1027.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.22%)</title><rect x="933.5" y="1011.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="936.5" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.22%)</title><rect x="933.5" y="995.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="936.5" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.43%)</title><rect x="936.0" y="1027.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.0" y="1038.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.22%)</title><rect x="936.0" y="1011.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.0" y="1022.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.22%)</title><rect x="936.0" y="995.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.0" y="1006.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.22%)</title><rect x="936.0" y="979.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.0" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.22%)</title><rect x="936.0" y="963.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.0" y="974.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.22%)</title><rect x="936.0" y="947.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.0" y="958.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.22%)</title><rect x="936.0" y="931.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.0" y="942.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.22%)</title><rect x="936.0" y="915.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="939.0" y="926.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.22%)</title><rect x="936.0" y="899.0" width="2.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="939.0" y="910.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.22%)</title><rect x="936.0" y="883.0" width="2.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="939.0" y="894.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.22%)</title><rect x="936.0" y="867.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="939.0" y="878.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.22%)</title><rect x="936.0" y="851.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="939.0" y="862.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.22%)</title><rect x="938.6" y="1011.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.22%)</title><rect x="941.2" y="1027.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.22%)</title><rect x="941.2" y="1011.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.22%)</title><rect x="941.2" y="995.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.2" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.22%)</title><rect x="941.2" y="979.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.2" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.22%)</title><rect x="941.2" y="963.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.2" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.22%)</title><rect x="941.2" y="947.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.2" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::do_analysis() (1 samples, 0.22%)</title><rect x="941.2" y="931.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.2" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.22%)</title><rect x="941.2" y="915.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.2" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.22%)</title><rect x="941.2" y="899.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.2" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.22%)</title><rect x="941.2" y="883.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.2" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.22%)</title><rect x="941.2" y="867.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.2" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.22%)</title><rect x="941.2" y="851.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.2" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::do_analysis() (1 samples, 0.22%)</title><rect x="941.2" y="835.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="944.2" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.22%)</title><rect x="941.2" y="819.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.2" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.22%)</title><rect x="941.2" y="803.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.2" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.22%)</title><rect x="941.2" y="787.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.2" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="941.2" y="771.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.2" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="941.2" y="755.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.2" y="766.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="941.2" y="739.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.2" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="941.2" y="723.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="941.2" y="707.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.22%)</title><rect x="941.2" y="691.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.2" y="702.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.22%)</title><rect x="941.2" y="675.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.2" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (8 samples, 1.74%)</title><rect x="943.7" y="1027.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.7" y="1038.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="948.9" y="1011.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.9" y="1022.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.22%)</title><rect x="948.9" y="995.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.9" y="1006.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.22%)</title><rect x="948.9" y="979.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="951.9" y="990.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="948.9" y="963.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.9" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.22%)</title><rect x="948.9" y="947.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.9" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.22%)</title><rect x="948.9" y="931.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="951.9" y="942.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.22%)</title><rect x="948.9" y="915.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.9" y="926.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="951.4" y="1011.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.4" y="1022.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="951.4" y="995.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.4" y="1006.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="951.4" y="979.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="954.4" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.22%)</title><rect x="951.4" y="963.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.4" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.22%)</title><rect x="951.4" y="947.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="954.4" y="958.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="954.0" y="1011.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.0" y="1022.0"></text>
</g>
<g>
<title>ciKlass::super_depth() (1 samples, 0.22%)</title><rect x="954.0" y="995.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.0" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.22%)</title><rect x="954.0" y="979.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.0" y="990.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.22%)</title><rect x="954.0" y="963.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="957.0" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.22%)</title><rect x="954.0" y="947.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.0" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.22%)</title><rect x="954.0" y="931.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.0" y="942.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.22%)</title><rect x="954.0" y="915.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.0" y="926.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.22%)</title><rect x="954.0" y="899.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="957.0" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.22%)</title><rect x="954.0" y="883.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.0" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="954.0" y="867.0" width="2.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="957.0" y="878.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="956.6" y="1011.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.6" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.22%)</title><rect x="959.1" y="1011.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.1" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.22%)</title><rect x="959.1" y="995.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.1" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="961.7" y="1011.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.7" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="961.7" y="995.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.7" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.22%)</title><rect x="961.7" y="979.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.7" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.22%)</title><rect x="961.7" y="963.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.7" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.22%)</title><rect x="961.7" y="947.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.7" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.22%)</title><rect x="961.7" y="931.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.22%)</title><rect x="964.3" y="1027.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.3" y="1038.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.22%)</title><rect x="964.3" y="1011.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.3" y="1022.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.22%)</title><rect x="964.3" y="995.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.3" y="1006.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="964.3" y="979.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="967.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (44 samples, 9.57%)</title><rect x="966.8" y="1027.0" width="112.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.8" y="1038.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.65%)</title><rect x="966.8" y="1011.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.8" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.65%)</title><rect x="966.8" y="995.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="969.8" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.43%)</title><rect x="966.8" y="979.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.22%)</title><rect x="966.8" y="963.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.22%)</title><rect x="966.8" y="947.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.22%)</title><rect x="966.8" y="931.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.22%)</title><rect x="966.8" y="915.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="969.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.22%)</title><rect x="969.4" y="963.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.22%)</title><rect x="969.4" y="947.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.22%)</title><rect x="969.4" y="931.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="972.4" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.22%)</title><rect x="972.0" y="979.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="975.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.22%)</title><rect x="972.0" y="963.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.0" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.22%)</title><rect x="972.0" y="947.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.0" y="958.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.22%)</title><rect x="974.5" y="1011.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.87%)</title><rect x="977.1" y="1011.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.1" y="1022.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.43%)</title><rect x="982.2" y="995.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.22%)</title><rect x="984.8" y="979.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.30%)</title><rect x="987.3" y="1011.0" width="15.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.3" y="1022.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.22%)</title><rect x="995.0" y="995.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.0" y="1006.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.22%)</title><rect x="997.6" y="995.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.6" y="1006.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.22%)</title><rect x="1000.2" y="995.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 2.83%)</title><rect x="1002.7" y="1011.0" width="33.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.7" y="1022.0">Ph..</text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.22%)</title><rect x="1010.4" y="995.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="1006.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.22%)</title><rect x="1013.0" y="995.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 1.30%)</title><rect x="1015.6" y="995.0" width="15.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.43%)</title><rect x="1018.1" y="979.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.22%)</title><rect x="1018.1" y="963.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.22%)</title><rect x="1018.1" y="947.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.22%)</title><rect x="1018.1" y="931.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.22%)</title><rect x="1020.7" y="963.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1023.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.22%)</title><rect x="1023.3" y="979.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1026.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.22%)</title><rect x="1025.8" y="979.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_ctrl(Node*, Node*) (1 samples, 0.22%)</title><rect x="1028.4" y="979.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.22%)</title><rect x="1031.0" y="995.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.0" y="1006.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.22%)</title><rect x="1033.5" y="995.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.87%)</title><rect x="1036.1" y="1011.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.22%)</title><rect x="1046.3" y="1011.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.87%)</title><rect x="1048.9" y="1011.0" width="10.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.43%)</title><rect x="1051.5" y="995.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.43%)</title><rect x="1051.5" y="979.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.5" y="990.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.22%)</title><rect x="1051.5" y="963.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.5" y="974.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.22%)</title><rect x="1051.5" y="947.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.5" y="958.0"></text>
</g>
<g>
<title>Arena::set_size_in_bytes(unsigned long) (1 samples, 0.22%)</title><rect x="1051.5" y="931.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.5" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.22%)</title><rect x="1054.0" y="963.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.0" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.22%)</title><rect x="1054.0" y="947.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.0" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.22%)</title><rect x="1054.0" y="931.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.0" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.22%)</title><rect x="1054.0" y="915.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.0" y="926.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.22%)</title><rect x="1056.6" y="995.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1059.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.09%)</title><rect x="1059.2" y="1011.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.22%)</title><rect x="1059.2" y="995.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.87%)</title><rect x="1061.7" y="995.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.7" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1061.7" y="979.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.7" y="990.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1061.7" y="963.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.7" y="974.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.22%)</title><rect x="1061.7" y="947.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.7" y="958.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.22%)</title><rect x="1061.7" y="931.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.7" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.22%)</title><rect x="1064.3" y="979.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.22%)</title><rect x="1064.3" y="963.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.3" y="974.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.22%)</title><rect x="1064.3" y="947.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.3" y="958.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.22%)</title><rect x="1064.3" y="931.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.3" y="942.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.22%)</title><rect x="1064.3" y="915.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.3" y="926.0"></text>
</g>
<g>
<title>PhaseTransform::ensure_type_or_null(Node const*) (1 samples, 0.22%)</title><rect x="1066.9" y="979.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.9" y="990.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1069.4" y="979.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.4" y="990.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.22%)</title><rect x="1069.4" y="963.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.4" y="974.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.43%)</title><rect x="1072.0" y="1011.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.0" y="1022.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.43%)</title><rect x="1072.0" y="995.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.0" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.43%)</title><rect x="1072.0" y="979.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.0" y="990.0"></text>
</g>
<g>
<title>free (1 samples, 0.22%)</title><rect x="1072.0" y="963.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1075.0" y="974.0"></text>
</g>
<g>
<title>szone_size_try_large (1 samples, 0.22%)</title><rect x="1072.0" y="947.0" width="2.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1075.0" y="958.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.22%)</title><rect x="1074.6" y="963.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1077.6" y="974.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.22%)</title><rect x="1077.1" y="1011.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 1.74%)</title><rect x="1079.7" y="1027.0" width="20.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.7" y="1038.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1079.7" y="1011.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 1.52%)</title><rect x="1082.3" y="1011.0" width="17.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.3" y="1022.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1082.3" y="995.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.3" y="1006.0"></text>
</g>
<g>
<title>commute(Node*, int, int) (1 samples, 0.22%)</title><rect x="1082.3" y="979.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1085.3" y="990.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (3 samples, 0.65%)</title><rect x="1084.8" y="995.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.8" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (3 samples, 0.65%)</title><rect x="1084.8" y="979.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.8" y="990.0"></text>
</g>
<g>
<title>TypeKlassPtr::hash() const (3 samples, 0.65%)</title><rect x="1084.8" y="963.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.8" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1092.5" y="995.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.5" y="1006.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.22%)</title><rect x="1092.5" y="979.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.5" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.22%)</title><rect x="1092.5" y="963.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.5" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.22%)</title><rect x="1092.5" y="947.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.5" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.22%)</title><rect x="1095.1" y="995.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.1" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1097.7" y="995.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.7" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.22%)</title><rect x="1100.2" y="1027.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.2" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.22%)</title><rect x="1100.2" y="1011.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.2" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.22%)</title><rect x="1100.2" y="995.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.2" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.22%)</title><rect x="1100.2" y="979.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.2" y="990.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.22%)</title><rect x="1100.2" y="963.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.2" y="974.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.22%)</title><rect x="1100.2" y="947.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.2" y="958.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.22%)</title><rect x="1102.8" y="1027.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.8" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 4.13%)</title><rect x="1105.3" y="1043.0" width="48.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.3" y="1054.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 4.13%)</title><rect x="1105.3" y="1027.0" width="48.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.3" y="1038.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (19 samples, 4.13%)</title><rect x="1105.3" y="1011.0" width="48.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.3" y="1022.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (19 samples, 4.13%)</title><rect x="1105.3" y="995.0" width="48.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.3" y="1006.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (19 samples, 4.13%)</title><rect x="1105.3" y="979.0" width="48.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.3" y="990.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (19 samples, 4.13%)</title><rect x="1105.3" y="963.0" width="48.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.3" y="974.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1105.3" y="947.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.3" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1105.3" y="931.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.3" y="942.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.22%)</title><rect x="1105.3" y="915.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.3" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.22%)</title><rect x="1105.3" y="899.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.3" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.22%)</title><rect x="1105.3" y="883.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.3" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.22%)</title><rect x="1105.3" y="867.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.3" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1105.3" y="851.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.3" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1105.3" y="835.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1105.3" y="819.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.22%)</title><rect x="1105.3" y="803.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.3" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.22%)</title><rect x="1105.3" y="787.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1105.3" y="771.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1105.3" y="755.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.3" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.22%)</title><rect x="1105.3" y="739.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.3" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.22%)</title><rect x="1105.3" y="723.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.3" y="734.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1105.3" y="707.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.3" y="718.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.22%)</title><rect x="1105.3" y="691.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.3" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.22%)</title><rect x="1105.3" y="675.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.3" y="686.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.22%)</title><rect x="1105.3" y="659.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1108.3" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.22%)</title><rect x="1105.3" y="643.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.3" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="1105.3" y="627.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1108.3" y="638.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.22%)</title><rect x="1107.9" y="947.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.9" y="958.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.22%)</title><rect x="1107.9" y="931.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.9" y="942.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.22%)</title><rect x="1107.9" y="915.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.9" y="926.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.22%)</title><rect x="1107.9" y="899.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.9" y="910.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.22%)</title><rect x="1107.9" y="883.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 3.04%)</title><rect x="1110.5" y="947.0" width="35.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.5" y="958.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 3.04%)</title><rect x="1110.5" y="931.0" width="35.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.5" y="942.0">Par..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.22%)</title><rect x="1110.5" y="915.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.5" y="926.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.22%)</title><rect x="1110.5" y="899.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="910.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.22%)</title><rect x="1110.5" y="883.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.5" y="894.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.22%)</title><rect x="1110.5" y="867.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.5" y="878.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.22%)</title><rect x="1110.5" y="851.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.5" y="862.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.22%)</title><rect x="1110.5" y="835.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.5" y="846.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.22%)</title><rect x="1110.5" y="819.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.5" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.22%)</title><rect x="1110.5" y="803.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.5" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.22%)</title><rect x="1110.5" y="787.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1110.5" y="771.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.5" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1110.5" y="755.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 2.61%)</title><rect x="1113.0" y="915.0" width="30.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.0" y="926.0">Pa..</text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.22%)</title><rect x="1113.0" y="899.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.0" y="910.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.22%)</title><rect x="1113.0" y="883.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.0" y="894.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.22%)</title><rect x="1113.0" y="867.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 2.39%)</title><rect x="1115.6" y="899.0" width="28.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.6" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 2.39%)</title><rect x="1115.6" y="883.0" width="28.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.6" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 1.96%)</title><rect x="1115.6" y="867.0" width="23.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.6" y="878.0">P..</text>
</g>
<g>
<title>Bytecodes::java_code_at(Method const*, unsigned char*) (1 samples, 0.22%)</title><rect x="1115.6" y="851.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.09%)</title><rect x="1118.2" y="851.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.09%)</title><rect x="1118.2" y="835.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.09%)</title><rect x="1118.2" y="819.0" width="12.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.09%)</title><rect x="1118.2" y="803.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.09%)</title><rect x="1118.2" y="787.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.65%)</title><rect x="1118.2" y="771.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.2" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1118.2" y="755.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.2" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1118.2" y="739.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.2" y="750.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1118.2" y="723.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.2" y="734.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.22%)</title><rect x="1118.2" y="707.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.2" y="718.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.22%)</title><rect x="1118.2" y="691.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.2" y="702.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.22%)</title><rect x="1118.2" y="675.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.2" y="686.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.22%)</title><rect x="1118.2" y="659.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1120.7" y="755.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1120.7" y="739.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1120.7" y="723.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1120.7" y="707.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1120.7" y="691.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1120.7" y="675.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1120.7" y="659.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1120.7" y="643.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1120.7" y="627.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1120.7" y="611.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1120.7" y="595.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1120.7" y="579.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1120.7" y="563.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1120.7" y="547.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1120.7" y="531.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1120.7" y="515.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1120.7" y="499.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1120.7" y="483.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1120.7" y="467.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1120.7" y="451.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1120.7" y="435.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1120.7" y="419.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1120.7" y="403.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1120.7" y="387.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1120.7" y="371.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1120.7" y="355.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.7" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.22%)</title><rect x="1120.7" y="339.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.7" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.22%)</title><rect x="1120.7" y="323.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.7" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.22%)</title><rect x="1120.7" y="307.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.7" y="318.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.22%)</title><rect x="1120.7" y="291.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.7" y="302.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.22%)</title><rect x="1120.7" y="275.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.7" y="286.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.22%)</title><rect x="1123.3" y="435.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.22%)</title><rect x="1125.9" y="771.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.22%)</title><rect x="1125.9" y="755.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.9" y="766.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.22%)</title><rect x="1125.9" y="739.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::post_barrier(Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.22%)</title><rect x="1125.9" y="723.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.9" y="734.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.22%)</title><rect x="1125.9" y="707.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.9" y="718.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.22%)</title><rect x="1125.9" y="691.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.9" y="702.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.22%)</title><rect x="1125.9" y="675.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.9" y="686.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.22%)</title><rect x="1125.9" y="659.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.22%)</title><rect x="1125.9" y="643.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.9" y="654.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.22%)</title><rect x="1125.9" y="627.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.9" y="638.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.22%)</title><rect x="1128.4" y="771.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.4" y="782.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.22%)</title><rect x="1128.4" y="755.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.22%)</title><rect x="1128.4" y="739.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.4" y="750.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="1128.4" y="723.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.4" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.65%)</title><rect x="1131.0" y="851.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.65%)</title><rect x="1131.0" y="835.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.65%)</title><rect x="1131.0" y="819.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.65%)</title><rect x="1131.0" y="803.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.65%)</title><rect x="1131.0" y="787.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.65%)</title><rect x="1131.0" y="771.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.65%)</title><rect x="1131.0" y="755.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.0" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1131.0" y="739.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.0" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1131.0" y="723.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.22%)</title><rect x="1131.0" y="707.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.0" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.22%)</title><rect x="1131.0" y="691.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.0" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.22%)</title><rect x="1131.0" y="675.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.0" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.22%)</title><rect x="1131.0" y="659.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1131.0" y="643.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.0" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1131.0" y="627.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1131.0" y="611.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.0" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1131.0" y="595.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.0" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.22%)</title><rect x="1131.0" y="579.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.0" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1131.0" y="563.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.0" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.22%)</title><rect x="1131.0" y="547.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.0" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.22%)</title><rect x="1131.0" y="531.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.0" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.22%)</title><rect x="1131.0" y="515.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.22%)</title><rect x="1133.6" y="739.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.6" y="750.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.22%)</title><rect x="1133.6" y="723.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.6" y="734.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.22%)</title><rect x="1133.6" y="707.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.6" y="718.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="1133.6" y="691.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.6" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.22%)</title><rect x="1133.6" y="675.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.6" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.22%)</title><rect x="1133.6" y="659.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1136.1" y="739.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1136.1" y="723.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1136.1" y="707.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1136.1" y="691.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1136.1" y="675.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="686.0"></text>
</g>
<g>
<title>Parse::array_store_check() (1 samples, 0.22%)</title><rect x="1136.1" y="659.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.1" y="670.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.22%)</title><rect x="1136.1" y="643.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="654.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.22%)</title><rect x="1136.1" y="627.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.1" y="638.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.22%)</title><rect x="1136.1" y="611.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.1" y="622.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.22%)</title><rect x="1136.1" y="595.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.22%)</title><rect x="1138.7" y="867.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.22%)</title><rect x="1138.7" y="851.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="862.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.22%)</title><rect x="1138.7" y="835.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="846.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.22%)</title><rect x="1138.7" y="819.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.22%)</title><rect x="1138.7" y="803.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.7" y="814.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.22%)</title><rect x="1138.7" y="787.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="798.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.22%)</title><rect x="1138.7" y="771.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="782.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.22%)</title><rect x="1138.7" y="755.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.22%)</title><rect x="1141.3" y="867.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.22%)</title><rect x="1141.3" y="851.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="862.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.22%)</title><rect x="1141.3" y="835.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.3" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.22%)</title><rect x="1141.3" y="819.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1141.3" y="803.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="814.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1141.3" y="787.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="798.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.22%)</title><rect x="1141.3" y="771.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="782.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.22%)</title><rect x="1141.3" y="755.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.3" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.22%)</title><rect x="1141.3" y="739.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.22%)</title><rect x="1141.3" y="723.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.22%)</title><rect x="1143.8" y="915.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.22%)</title><rect x="1143.8" y="899.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.8" y="910.0"></text>
</g>
<g>
<title>MulNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1143.8" y="883.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.8" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.65%)</title><rect x="1146.4" y="947.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.65%)</title><rect x="1146.4" y="931.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.65%)</title><rect x="1146.4" y="915.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.65%)</title><rect x="1146.4" y="899.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.65%)</title><rect x="1146.4" y="883.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.65%)</title><rect x="1146.4" y="867.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.65%)</title><rect x="1146.4" y="851.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.65%)</title><rect x="1146.4" y="835.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.65%)</title><rect x="1146.4" y="819.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.65%)</title><rect x="1146.4" y="803.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.65%)</title><rect x="1146.4" y="787.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.65%)</title><rect x="1146.4" y="771.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.65%)</title><rect x="1146.4" y="755.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.65%)</title><rect x="1146.4" y="739.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.65%)</title><rect x="1146.4" y="723.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.65%)</title><rect x="1146.4" y="707.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.65%)</title><rect x="1146.4" y="691.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.65%)</title><rect x="1146.4" y="675.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.65%)</title><rect x="1146.4" y="659.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.4" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1146.4" y="643.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.4" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1146.4" y="627.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.4" y="638.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1146.4" y="611.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.22%)</title><rect x="1146.4" y="595.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="643.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="627.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="611.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1149.0" y="595.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1149.0" y="579.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1149.0" y="563.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="547.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="531.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="515.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1149.0" y="499.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1149.0" y="483.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1149.0" y="467.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="451.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="435.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="419.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1149.0" y="403.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1149.0" y="387.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1149.0" y="371.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="355.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="339.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="323.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1149.0" y="307.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1149.0" y="291.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1149.0" y="275.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="259.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="243.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="227.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1149.0" y="211.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1149.0" y="195.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1149.0" y="179.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="163.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="147.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="131.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.43%)</title><rect x="1149.0" y="115.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.43%)</title><rect x="1149.0" y="99.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.43%)</title><rect x="1149.0" y="83.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.0" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.43%)</title><rect x="1149.0" y="67.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.0" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.43%)</title><rect x="1149.0" y="51.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.0" y="62.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.43%)</title><rect x="1149.0" y="35.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.0" y="46.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.43%)</title><rect x="1154.1" y="1043.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.1" y="1054.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.43%)</title><rect x="1154.1" y="1027.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.1" y="1038.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.22%)</title><rect x="1154.1" y="1011.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1157.1" y="1022.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.22%)</title><rect x="1154.1" y="995.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1157.1" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.22%)</title><rect x="1156.7" y="1011.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.7" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.22%)</title><rect x="1156.7" y="995.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1159.7" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.22%)</title><rect x="1159.2" y="1075.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.22%)</title><rect x="1159.2" y="1059.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.2" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.22%)</title><rect x="1159.2" y="1043.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.2" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.22%)</title><rect x="1159.2" y="1027.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.2" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.22%)</title><rect x="1159.2" y="1011.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.2" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.22%)</title><rect x="1159.2" y="995.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.2" y="1006.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.22%)</title><rect x="1159.2" y="979.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.2" y="990.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.22%)</title><rect x="1159.2" y="963.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.2" y="974.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 0.65%)</title><rect x="1161.8" y="1091.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="1102.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.65%)</title><rect x="1161.8" y="1075.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.8" y="1086.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.65%)</title><rect x="1161.8" y="1059.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.65%)</title><rect x="1161.8" y="1043.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.8" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.65%)</title><rect x="1161.8" y="1027.0" width="7.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1164.8" y="1038.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.43%)</title><rect x="1169.5" y="1107.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.5" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.22%)</title><rect x="1169.5" y="1091.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.5" y="1102.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.22%)</title><rect x="1169.5" y="1075.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.5" y="1086.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.22%)</title><rect x="1169.5" y="1059.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1172.5" y="1070.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.22%)</title><rect x="1169.5" y="1043.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.5" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.22%)</title><rect x="1169.5" y="1027.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1038.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_method() (1 samples, 0.22%)</title><rect x="1169.5" y="1011.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.22%)</title><rect x="1172.0" y="1091.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="1102.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.22%)</title><rect x="1172.0" y="1075.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="1086.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.22%)</title><rect x="1172.0" y="1059.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.0" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.22%)</title><rect x="1172.0" y="1043.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="1172.0" y="1027.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.0" y="1038.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.22%)</title><rect x="1174.6" y="1107.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1177.6" y="1118.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.22%)</title><rect x="1174.6" y="1091.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="1102.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.22%)</title><rect x="1174.6" y="1075.0" width="2.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1177.6" y="1086.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.22%)</title><rect x="1174.6" y="1059.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.6" y="1070.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.22%)</title><rect x="1174.6" y="1043.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="1054.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, char const*, unsigned long) (1 samples, 0.22%)</title><rect x="1174.6" y="1027.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="1038.0"></text>
</g>
<g>
<title>std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; std::__1::__pad_and_output&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt;, char const*, char const*, char const*, std::__1::ios_base&amp;, char) (1 samples, 0.22%)</title><rect x="1174.6" y="1011.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="1022.0"></text>
</g>
<g>
<title>std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::xsputn(char const*, long) (1 samples, 0.22%)</title><rect x="1174.6" y="995.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.6" y="1006.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::overflow(int) (1 samples, 0.22%)</title><rect x="1174.6" y="979.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="990.0"></text>
</g>
<g>
<title>fwrite (1 samples, 0.22%)</title><rect x="1174.6" y="963.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1177.6" y="974.0"></text>
</g>
<g>
<title>__sfvwrite (1 samples, 0.22%)</title><rect x="1174.6" y="947.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1177.6" y="958.0"></text>
</g>
<g>
<title>__swsetup (1 samples, 0.22%)</title><rect x="1174.6" y="931.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1177.6" y="942.0"></text>
</g>
<g>
<title>__smakebuf (1 samples, 0.22%)</title><rect x="1174.6" y="915.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1177.6" y="926.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.22%)</title><rect x="1174.6" y="899.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1177.6" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.65%)</title><rect x="1177.2" y="1139.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.65%)</title><rect x="1177.2" y="1123.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1134.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.65%)</title><rect x="1177.2" y="1107.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="1118.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.65%)</title><rect x="1177.2" y="1091.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="1102.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.65%)</title><rect x="1177.2" y="1075.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.65%)</title><rect x="1177.2" y="1059.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (3 samples, 0.65%)</title><rect x="1177.2" y="1043.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="1054.0"></text>
</g>
<g>
<title>CodeRootSetTable::purge() (1 samples, 0.22%)</title><rect x="1177.2" y="1027.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="1038.0"></text>
</g>
<g>
<title>CodeRootSetTable::~CodeRootSetTable() (1 samples, 0.22%)</title><rect x="1177.2" y="1011.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="1022.0"></text>
</g>
<g>
<title>free (1 samples, 0.22%)</title><rect x="1177.2" y="995.0" width="2.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1180.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.22%)</title><rect x="1179.7" y="1027.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="1038.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.22%)</title><rect x="1179.7" y="1011.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.22%)</title><rect x="1179.7" y="995.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="1006.0"></text>
</g>
<g>
<title>_res (1 samples, 0.22%)</title><rect x="1179.7" y="979.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.22%)</title><rect x="1182.3" y="1027.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.43%)</title><rect x="1184.9" y="1139.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.43%)</title><rect x="1184.9" y="1123.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.43%)</title><rect x="1184.9" y="1107.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.43%)</title><rect x="1184.9" y="1091.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.43%)</title><rect x="1184.9" y="1075.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.43%)</title><rect x="1184.9" y="1059.0" width="5.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1187.9" y="1070.0"></text>
</g>
</g>
</svg>
