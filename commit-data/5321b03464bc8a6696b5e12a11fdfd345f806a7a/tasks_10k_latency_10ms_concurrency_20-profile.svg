<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (171 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.58%)</title><rect x="10.0" y="787.0" width="6.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (1 samples, 0.58%)</title><rect x="10.0" y="771.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (1 samples, 0.58%)</title><rect x="10.0" y="755.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.58%)</title><rect x="10.0" y="739.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>vframeArray::fill_in(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap const*, bool) (1 samples, 0.58%)</title><rect x="10.0" y="723.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>vframeArrayElement::fill_in(compiledVFrame*, bool) (1 samples, 0.58%)</title><rect x="10.0" y="707.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>StackValueCollection::StackValueCollection(int) (1 samples, 0.58%)</title><rect x="10.0" y="691.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.58%)</title><rect x="10.0" y="675.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (10 samples, 5.85%)</title><rect x="16.9" y="787.0" width="69.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="798.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.58%)</title><rect x="16.9" y="771.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.58%)</title><rect x="16.9" y="755.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.58%)</title><rect x="16.9" y="739.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.58%)</title><rect x="16.9" y="723.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.58%)</title><rect x="16.9" y="707.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.58%)</title><rect x="16.9" y="691.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.58%)</title><rect x="16.9" y="675.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.58%)</title><rect x="16.9" y="659.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.58%)</title><rect x="16.9" y="643.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="16.9" y="627.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="16.9" y="611.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.9" y="622.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.58%)</title><rect x="16.9" y="595.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (9 samples, 5.26%)</title><rect x="23.8" y="771.0" width="62.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.8" y="782.0">com/li..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.26%)</title><rect x="23.8" y="755.0" width="62.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.8" y="766.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.26%)</title><rect x="23.8" y="739.0" width="62.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.8" y="750.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.68%)</title><rect x="23.8" y="723.0" width="55.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.8" y="734.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 3.51%)</title><rect x="23.8" y="707.0" width="41.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.8" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 3.51%)</title><rect x="23.8" y="691.0" width="41.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.8" y="702.0">org..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.58%)</title><rect x="23.8" y="675.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="23.8" y="659.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.58%)</title><rect x="23.8" y="643.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.58%)</title><rect x="23.8" y="627.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.8" y="638.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.58%)</title><rect x="23.8" y="611.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.8" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.58%)</title><rect x="23.8" y="595.0" width="6.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="26.8" y="606.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.58%)</title><rect x="23.8" y="579.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.8" y="590.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.58%)</title><rect x="23.8" y="563.0" width="6.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="26.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 2.92%)</title><rect x="30.7" y="675.0" width="34.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.7" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.58%)</title><rect x="30.7" y="659.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 2.34%)</title><rect x="37.6" y="659.0" width="27.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.6" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.58%)</title><rect x="37.6" y="643.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getValue (1 samples, 0.58%)</title><rect x="37.6" y="627.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.58%)</title><rect x="44.5" y="643.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.58%)</title><rect x="44.5" y="627.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.58%)</title><rect x="44.5" y="611.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.58%)</title><rect x="44.5" y="595.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.58%)</title><rect x="44.5" y="579.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.58%)</title><rect x="44.5" y="563.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.58%)</title><rect x="44.5" y="547.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.58%)</title><rect x="44.5" y="531.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.58%)</title><rect x="44.5" y="515.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 1.17%)</title><rect x="51.4" y="643.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2 samples, 1.17%)</title><rect x="51.4" y="627.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 1.17%)</title><rect x="51.4" y="611.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2 samples, 1.17%)</title><rect x="51.4" y="595.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (2 samples, 1.17%)</title><rect x="51.4" y="579.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (2 samples, 1.17%)</title><rect x="51.4" y="563.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.4" y="574.0"></text>
</g>
<g>
<title>kevent (2 samples, 1.17%)</title><rect x="51.4" y="547.0" width="13.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="54.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.17%)</title><rect x="65.2" y="707.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.17%)</title><rect x="65.2" y="691.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.17%)</title><rect x="65.2" y="675.0" width="13.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.17%)</title><rect x="65.2" y="659.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.17%)</title><rect x="65.2" y="643.0" width="13.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.58%)</title><rect x="72.1" y="627.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.58%)</title><rect x="72.1" y="611.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.58%)</title><rect x="72.1" y="595.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.58%)</title><rect x="72.1" y="579.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.58%)</title><rect x="72.1" y="563.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.58%)</title><rect x="72.1" y="547.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.58%)</title><rect x="72.1" y="531.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.58%)</title><rect x="79.0" y="723.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.58%)</title><rect x="79.0" y="707.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.58%)</title><rect x="79.0" y="691.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.58%)</title><rect x="79.0" y="675.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="79.0" y="659.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.58%)</title><rect x="79.0" y="643.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="79.0" y="627.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="79.0" y="611.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.0" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.58%)</title><rect x="79.0" y="595.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.58%)</title><rect x="79.0" y="579.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (111 samples, 64.91%)</title><rect x="85.9" y="787.0" width="766.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.9" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (111 samples, 64.91%)</title><rect x="85.9" y="771.0" width="766.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.9" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (111 samples, 64.91%)</title><rect x="85.9" y="755.0" width="766.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.9" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1755830499.run (111 samples, 64.91%)</title><rect x="85.9" y="739.0" width="766.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.9" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1755830499.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (111 samples, 64.91%)</title><rect x="85.9" y="723.0" width="766.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.9" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (111 samples, 64.91%)</title><rect x="85.9" y="707.0" width="766.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.9" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (110 samples, 64.33%)</title><rect x="85.9" y="691.0" width="759.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.9" y="702.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 0.58%)</title><rect x="92.8" y="675.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (1 samples, 0.58%)</title><rect x="92.8" y="659.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 0.58%)</title><rect x="92.8" y="643.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.58%)</title><rect x="92.8" y="627.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 0.58%)</title><rect x="92.8" y="611.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 0.58%)</title><rect x="92.8" y="595.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.58%)</title><rect x="92.8" y="579.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.58%)</title><rect x="92.8" y="563.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.58%)</title><rect x="92.8" y="547.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.58%)</title><rect x="92.8" y="531.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.8" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.58%)</title><rect x="92.8" y="515.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="95.8" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.58%)</title><rect x="92.8" y="499.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="95.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(KlassHandle, int, Thread*) (1 samples, 0.58%)</title><rect x="92.8" y="483.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="95.8" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_noinit(KlassHandle, unsigned long, Thread*) (1 samples, 0.58%)</title><rect x="92.8" y="467.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="95.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.58%)</title><rect x="92.8" y="451.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (108 samples, 63.16%)</title><rect x="99.7" y="675.0" width="745.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.7" y="686.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (107 samples, 62.57%)</title><rect x="99.7" y="659.0" width="738.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.7" y="670.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (107 samples, 62.57%)</title><rect x="99.7" y="643.0" width="738.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.7" y="654.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1723327461.process (106 samples, 61.99%)</title><rect x="99.7" y="627.0" width="731.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.7" y="638.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1723327461.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (106 samples, 61.99%)</title><rect x="99.7" y="611.0" width="731.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.7" y="622.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (106 samples, 61.99%)</title><rect x="99.7" y="595.0" width="731.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.7" y="606.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (106 samples, 61.99%)</title><rect x="99.7" y="579.0" width="731.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.7" y="590.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (106 samples, 61.99%)</title><rect x="99.7" y="563.0" width="731.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.7" y="574.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.58%)</title><rect x="106.6" y="547.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="109.6" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.58%)</title><rect x="106.6" y="531.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="109.6" y="542.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.58%)</title><rect x="106.6" y="515.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="109.6" y="526.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.58%)</title><rect x="106.6" y="499.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="109.6" y="510.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.58%)</title><rect x="106.6" y="483.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="109.6" y="494.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.58%)</title><rect x="106.6" y="467.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="109.6" y="478.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.58%)</title><rect x="106.6" y="451.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="109.6" y="462.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle) (1 samples, 0.58%)</title><rect x="106.6" y="435.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="109.6" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.58%)</title><rect x="106.6" y="419.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="109.6" y="430.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.58%)</title><rect x="106.6" y="403.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="109.6" y="414.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle) (1 samples, 0.58%)</title><rect x="106.6" y="387.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="109.6" y="398.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle, char*, char const*, int, bool) (1 samples, 0.58%)</title><rect x="106.6" y="371.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.6" y="382.0"></text>
</g>
<g>
<title>os::dll_address_to_library_name(unsigned char*, char*, int, int*) (1 samples, 0.58%)</title><rect x="106.6" y="355.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="109.6" y="366.0"></text>
</g>
<g>
<title>OBJC_CLASS_$_OS_dispatch_object (1 samples, 0.58%)</title><rect x="106.6" y="339.0" width="6.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="109.6" y="350.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="106.6" y="323.0" width="6.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="109.6" y="334.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="106.6" y="307.0" width="6.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="109.6" y="318.0"></text>
</g>
<g>
<title>JVM_Sleep (104 samples, 60.82%)</title><rect x="113.5" y="547.0" width="717.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="116.5" y="558.0">JVM_Sleep</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (104 samples, 60.82%)</title><rect x="113.5" y="531.0" width="717.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="116.5" y="542.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (103 samples, 60.23%)</title><rect x="113.5" y="515.0" width="710.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="116.5" y="526.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.58%)</title><rect x="113.5" y="499.0" width="6.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="116.5" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (102 samples, 59.65%)</title><rect x="120.4" y="499.0" width="703.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="123.4" y="510.0">__psynch_cvwait</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.58%)</title><rect x="824.3" y="515.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1313319408.complete (1 samples, 0.58%)</title><rect x="831.2" y="627.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$0 (1 samples, 0.58%)</title><rect x="831.2" y="611.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="834.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.58%)</title><rect x="831.2" y="595.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.58%)</title><rect x="831.2" y="579.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="834.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="838.1" y="659.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="841.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.58%)</title><rect x="838.1" y="643.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="841.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.58%)</title><rect x="838.1" y="627.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="841.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1689598945.accept (1 samples, 0.58%)</title><rect x="838.1" y="611.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.58%)</title><rect x="838.1" y="595.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.58%)</title><rect x="838.1" y="579.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.1" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.58%)</title><rect x="838.1" y="563.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="841.1" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.58%)</title><rect x="838.1" y="547.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.58%)</title><rect x="845.0" y="691.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="848.0" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.58%)</title><rect x="845.0" y="675.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="848.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 1.17%)</title><rect x="851.9" y="787.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="854.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 1.17%)</title><rect x="851.9" y="771.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.17%)</title><rect x="851.9" y="755.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.17%)</title><rect x="851.9" y="739.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 1.17%)</title><rect x="851.9" y="723.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="854.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.17%)</title><rect x="851.9" y="707.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 1.17%)</title><rect x="851.9" y="691.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 1.17%)</title><rect x="851.9" y="675.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 1.17%)</title><rect x="851.9" y="659.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.9" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 1.17%)</title><rect x="851.9" y="643.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.9" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 1.17%)</title><rect x="851.9" y="627.0" width="13.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="854.9" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.17%)</title><rect x="851.9" y="611.0" width="13.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.9" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 1.17%)</title><rect x="851.9" y="595.0" width="13.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="854.9" y="606.0"></text>
</g>
<g>
<title>thread_start (47 samples, 27.49%)</title><rect x="865.7" y="787.0" width="324.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="868.7" y="798.0">thread_start</text>
</g>
<g>
<title>_pthread_start (47 samples, 27.49%)</title><rect x="865.7" y="771.0" width="324.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="868.7" y="782.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (47 samples, 27.49%)</title><rect x="865.7" y="755.0" width="324.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="868.7" y="766.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (47 samples, 27.49%)</title><rect x="865.7" y="739.0" width="324.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="868.7" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (43 samples, 25.15%)</title><rect x="865.7" y="723.0" width="296.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.7" y="734.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (43 samples, 25.15%)</title><rect x="865.7" y="707.0" width="296.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.7" y="718.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (36 samples, 21.05%)</title><rect x="865.7" y="691.0" width="248.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.7" y="702.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (33 samples, 19.30%)</title><rect x="865.7" y="675.0" width="227.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="868.7" y="686.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (31 samples, 18.13%)</title><rect x="865.7" y="659.0" width="213.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.7" y="670.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (31 samples, 18.13%)</title><rect x="865.7" y="643.0" width="213.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.7" y="654.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (3 samples, 1.75%)</title><rect x="865.7" y="627.0" width="20.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="868.7" y="638.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (3 samples, 1.75%)</title><rect x="865.7" y="611.0" width="20.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.7" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 1.75%)</title><rect x="865.7" y="595.0" width="20.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.58%)</title><rect x="865.7" y="579.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="868.7" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.58%)</title><rect x="865.7" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.7" y="574.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.58%)</title><rect x="865.7" y="547.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.7" y="558.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.58%)</title><rect x="865.7" y="531.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.17%)</title><rect x="872.6" y="579.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.6" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.17%)</title><rect x="872.6" y="563.0" width="13.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.6" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.17%)</title><rect x="872.6" y="547.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.6" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.17%)</title><rect x="872.6" y="531.0" width="13.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.6" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 1.17%)</title><rect x="872.6" y="515.0" width="13.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.6" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="872.6" y="499.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.6" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.58%)</title><rect x="872.6" y="483.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.6" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="872.6" y="467.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.6" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="872.6" y="451.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.6" y="462.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="872.6" y="435.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.6" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.58%)</title><rect x="872.6" y="419.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.6" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.58%)</title><rect x="872.6" y="403.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.6" y="414.0"></text>
</g>
<g>
<title>FieldStreamBase::signature() const (1 samples, 0.58%)</title><rect x="872.6" y="387.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.6" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.58%)</title><rect x="879.5" y="499.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="882.5" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="879.5" y="483.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="879.5" y="467.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.5" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="879.5" y="451.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.5" y="462.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.58%)</title><rect x="879.5" y="435.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.5" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.58%)</title><rect x="879.5" y="419.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.5" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.58%)</title><rect x="879.5" y="403.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="882.5" y="414.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.58%)</title><rect x="879.5" y="387.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.5" y="398.0"></text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.58%)</title><rect x="886.4" y="627.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.4" y="638.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.58%)</title><rect x="886.4" y="611.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="889.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="886.4" y="595.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="886.4" y="579.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.4" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="886.4" y="563.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="886.4" y="547.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="889.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="886.4" y="531.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.4" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="886.4" y="515.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.4" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="886.4" y="499.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.4" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.58%)</title><rect x="886.4" y="483.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="889.4" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="886.4" y="467.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.4" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="886.4" y="451.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.4" y="462.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="886.4" y="435.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.4" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="886.4" y="419.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.4" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="886.4" y="403.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.4" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.58%)</title><rect x="886.4" y="387.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.4" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.58%)</title><rect x="886.4" y="371.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.4" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.58%)</title><rect x="886.4" y="355.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="889.4" y="366.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 8.19%)</title><rect x="893.3" y="627.0" width="96.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="896.3" y="638.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.75%)</title><rect x="893.3" y="611.0" width="20.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="896.3" y="622.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.17%)</title><rect x="893.3" y="595.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="896.3" y="606.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.58%)</title><rect x="900.2" y="579.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.2" y="590.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.58%)</title><rect x="900.2" y="563.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="903.2" y="574.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.58%)</title><rect x="900.2" y="547.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.2" y="558.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.58%)</title><rect x="907.1" y="595.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.1" y="606.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.58%)</title><rect x="907.1" y="579.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.1" y="590.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.58%)</title><rect x="907.1" y="563.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.1" y="574.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.58%)</title><rect x="907.1" y="547.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="910.1" y="558.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.58%)</title><rect x="907.1" y="531.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.1" y="542.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.58%)</title><rect x="907.1" y="515.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="910.1" y="526.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.58%)</title><rect x="914.0" y="611.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.0" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.58%)</title><rect x="914.0" y="595.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.0" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.58%)</title><rect x="914.0" y="579.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.0" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.58%)</title><rect x="914.0" y="563.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="917.0" y="574.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.58%)</title><rect x="914.0" y="547.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.0" y="558.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.58%)</title><rect x="914.0" y="531.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="917.0" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.58%)</title><rect x="920.9" y="611.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.9" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.58%)</title><rect x="920.9" y="595.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.9" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.58%)</title><rect x="920.9" y="579.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 5.26%)</title><rect x="927.8" y="611.0" width="62.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="930.8" y="622.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.58%)</title><rect x="927.8" y="595.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.58%)</title><rect x="934.7" y="595.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.58%)</title><rect x="934.7" y="579.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.17%)</title><rect x="941.6" y="595.0" width="13.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.6" y="606.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.58%)</title><rect x="948.5" y="579.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="951.5" y="590.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.58%)</title><rect x="948.5" y="563.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="951.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.58%)</title><rect x="955.4" y="595.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="958.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.58%)</title><rect x="955.4" y="579.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.58%)</title><rect x="955.4" y="563.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.4" y="574.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.58%)</title><rect x="955.4" y="547.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.4" y="558.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.58%)</title><rect x="955.4" y="531.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="958.4" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.58%)</title><rect x="962.3" y="595.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.3" y="606.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.58%)</title><rect x="962.3" y="579.0" width="6.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="965.3" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.75%)</title><rect x="969.2" y="595.0" width="20.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.2" y="606.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.58%)</title><rect x="969.2" y="579.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.2" y="590.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.58%)</title><rect x="976.1" y="579.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.1" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.58%)</title><rect x="983.0" y="579.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.0" y="590.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.58%)</title><rect x="983.0" y="563.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.0" y="574.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.58%)</title><rect x="983.0" y="547.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.0" y="558.0"></text>
</g>
<g>
<title>free (1 samples, 0.58%)</title><rect x="983.0" y="531.0" width="6.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="986.0" y="542.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 4.68%)</title><rect x="989.9" y="627.0" width="55.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.9" y="638.0">Compi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 1.17%)</title><rect x="989.9" y="611.0" width="13.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.9" y="622.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 1.17%)</title><rect x="989.9" y="595.0" width="13.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 2.34%)</title><rect x="1003.7" y="611.0" width="27.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.7" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.58%)</title><rect x="1003.7" y="595.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.17%)</title><rect x="1010.6" y="595.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.17%)</title><rect x="1010.6" y="579.0" width="13.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.58%)</title><rect x="1010.6" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.58%)</title><rect x="1010.6" y="547.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_ctrl(Node*, Node*) (1 samples, 0.58%)</title><rect x="1017.5" y="563.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.5" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1024.4" y="595.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1027.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1024.4" y="579.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1027.4" y="590.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.58%)</title><rect x="1024.4" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.4" y="574.0"></text>
</g>
<g>
<title>SubNode::Value_common(PhaseTransform*) const (1 samples, 0.58%)</title><rect x="1024.4" y="547.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1027.4" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.17%)</title><rect x="1031.3" y="611.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.3" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.17%)</title><rect x="1031.3" y="595.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.3" y="606.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1031.3" y="579.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.3" y="590.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.58%)</title><rect x="1031.3" y="563.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.3" y="574.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1038.2" y="579.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1041.2" y="590.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.58%)</title><rect x="1038.2" y="563.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.2" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="547.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.2" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="531.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1041.2" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="515.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1041.2" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="499.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.2" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="483.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.2" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="467.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.2" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="451.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.2" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="435.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1041.2" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="419.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.2" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="403.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.2" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="387.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.2" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="371.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1041.2" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="355.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1041.2" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="339.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.2" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="323.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.2" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="307.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.2" y="318.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.58%)</title><rect x="1038.2" y="291.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1041.2" y="302.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1038.2" y="275.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.2" y="286.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.58%)</title><rect x="1038.2" y="259.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.75%)</title><rect x="1045.1" y="627.0" width="20.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.75%)</title><rect x="1045.1" y="611.0" width="20.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.75%)</title><rect x="1045.1" y="595.0" width="20.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.75%)</title><rect x="1045.1" y="579.0" width="20.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.75%)</title><rect x="1045.1" y="563.0" width="20.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.75%)</title><rect x="1045.1" y="547.0" width="20.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.75%)</title><rect x="1045.1" y="531.0" width="20.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.75%)</title><rect x="1045.1" y="515.0" width="20.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.75%)</title><rect x="1045.1" y="499.0" width="20.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.75%)</title><rect x="1045.1" y="483.0" width="20.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.75%)</title><rect x="1045.1" y="467.0" width="20.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.75%)</title><rect x="1045.1" y="451.0" width="20.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.1" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1045.1" y="435.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.1" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.58%)</title><rect x="1045.1" y="419.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.1" y="430.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.58%)</title><rect x="1045.1" y="403.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.1" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="1045.1" y="387.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.1" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="1045.1" y="371.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.1" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="1045.1" y="355.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.1" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1045.1" y="339.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.1" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1045.1" y="323.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.1" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1045.1" y="307.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.58%)</title><rect x="1045.1" y="291.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.1" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1045.1" y="275.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.1" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1045.1" y="259.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1048.1" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1045.1" y="243.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.1" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1045.1" y="227.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.1" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::find(Metadata*, GrowableArray&lt;ciMetadata*&gt;*) (1 samples, 0.58%)</title><rect x="1045.1" y="211.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1052.0" y="435.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1052.0" y="419.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1052.0" y="403.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1052.0" y="387.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1052.0" y="371.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1052.0" y="355.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1052.0" y="339.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1052.0" y="323.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1052.0" y="307.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1052.0" y="291.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1052.0" y="275.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1052.0" y="259.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1052.0" y="243.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1052.0" y="227.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1052.0" y="211.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1052.0" y="195.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1052.0" y="179.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1052.0" y="163.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.0" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1052.0" y="147.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.0" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1052.0" y="131.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.0" y="142.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.58%)</title><rect x="1052.0" y="115.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.58%)</title><rect x="1052.0" y="99.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.0" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.58%)</title><rect x="1052.0" y="83.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.0" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.58%)</title><rect x="1052.0" y="67.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.0" y="78.0"></text>
</g>
<g>
<title>MergeMemStream::next_non_empty(bool) (1 samples, 0.58%)</title><rect x="1052.0" y="51.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.0" y="62.0"></text>
</g>
<g>
<title>MergeMemStream::next(bool) (1 samples, 0.58%)</title><rect x="1052.0" y="35.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1058.9" y="435.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1058.9" y="419.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1058.9" y="403.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1058.9" y="387.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1058.9" y="371.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1058.9" y="355.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1058.9" y="339.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1058.9" y="323.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.58%)</title><rect x="1058.9" y="307.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="318.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.58%)</title><rect x="1058.9" y="291.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.9" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="1058.9" y="275.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="1058.9" y="259.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="1058.9" y="243.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1058.9" y="227.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1058.9" y="211.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.9" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1058.9" y="195.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1058.9" y="179.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.9" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.58%)</title><rect x="1058.9" y="163.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.9" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.58%)</title><rect x="1058.9" y="147.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.58%)</title><rect x="1058.9" y="131.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="142.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 1.17%)</title><rect x="1065.8" y="627.0" width="13.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.8" y="638.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.58%)</title><rect x="1065.8" y="611.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.8" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.58%)</title><rect x="1065.8" y="595.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.8" y="606.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.58%)</title><rect x="1065.8" y="579.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1068.8" y="590.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.58%)</title><rect x="1065.8" y="563.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.8" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.58%)</title><rect x="1065.8" y="547.0" width="6.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1068.8" y="558.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.58%)</title><rect x="1072.7" y="611.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.7" y="622.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.58%)</title><rect x="1072.7" y="595.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1075.7" y="606.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.58%)</title><rect x="1072.7" y="579.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1075.7" y="590.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.17%)</title><rect x="1079.6" y="659.0" width="13.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.6" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.17%)</title><rect x="1079.6" y="643.0" width="13.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.6" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.17%)</title><rect x="1079.6" y="627.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.6" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.58%)</title><rect x="1079.6" y="611.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1082.6" y="622.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.58%)</title><rect x="1079.6" y="595.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.6" y="606.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.58%)</title><rect x="1079.6" y="579.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.6" y="590.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.58%)</title><rect x="1079.6" y="563.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.6" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.58%)</title><rect x="1079.6" y="547.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.6" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1079.6" y="531.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.6" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1079.6" y="515.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1082.6" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1079.6" y="499.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.6" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1079.6" y="483.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.6" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1079.6" y="467.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.6" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1079.6" y="451.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.6" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1079.6" y="435.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.6" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1079.6" y="419.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.6" y="430.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.58%)</title><rect x="1086.5" y="611.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.5" y="622.0"></text>
</g>
<g>
<title>Dependencies::note_dep_seen(int, ciBaseObject*) (1 samples, 0.58%)</title><rect x="1086.5" y="595.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.5" y="606.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.58%)</title><rect x="1086.5" y="579.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.5" y="590.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 0.58%)</title><rect x="1086.5" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.5" y="574.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 1.75%)</title><rect x="1093.4" y="675.0" width="20.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.4" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 1.75%)</title><rect x="1093.4" y="659.0" width="20.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.4" y="670.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 1.75%)</title><rect x="1093.4" y="643.0" width="20.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.4" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.75%)</title><rect x="1093.4" y="627.0" width="20.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.4" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 1.75%)</title><rect x="1093.4" y="611.0" width="20.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1096.4" y="622.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (6 samples, 3.51%)</title><rect x="1114.1" y="691.0" width="41.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.1" y="702.0">Ser..</text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 1.17%)</title><rect x="1114.1" y="675.0" width="13.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.1" y="686.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 1.17%)</title><rect x="1114.1" y="659.0" width="13.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.1" y="670.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.58%)</title><rect x="1114.1" y="643.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.1" y="654.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.58%)</title><rect x="1121.0" y="643.0" width="6.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1124.0" y="654.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.58%)</title><rect x="1121.0" y="627.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.0" y="638.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.58%)</title><rect x="1121.0" y="611.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.0" y="622.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.58%)</title><rect x="1121.0" y="595.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.0" y="606.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 2.34%)</title><rect x="1127.9" y="675.0" width="27.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.9" y="686.0">M..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 2.34%)</title><rect x="1127.9" y="659.0" width="27.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.9" y="670.0">M..</text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (4 samples, 2.34%)</title><rect x="1127.9" y="643.0" width="27.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1130.9" y="654.0">P..</text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 2.34%)</title><rect x="1127.9" y="627.0" width="27.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="638.0">o..</text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 2.34%)</title><rect x="1127.9" y="611.0" width="27.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1130.9" y="622.0">_..</text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.58%)</title><rect x="1155.5" y="691.0" width="6.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1158.5" y="702.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.58%)</title><rect x="1155.5" y="675.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.5" y="686.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.58%)</title><rect x="1155.5" y="659.0" width="6.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1158.5" y="670.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.58%)</title><rect x="1155.5" y="643.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="654.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.58%)</title><rect x="1155.5" y="627.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.5" y="638.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.58%)</title><rect x="1155.5" y="611.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.5" y="622.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.58%)</title><rect x="1155.5" y="595.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.5" y="606.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.58%)</title><rect x="1155.5" y="579.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1158.5" y="590.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.58%)</title><rect x="1155.5" y="563.0" width="6.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1158.5" y="574.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.58%)</title><rect x="1155.5" y="547.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1158.5" y="558.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 1.17%)</title><rect x="1162.4" y="723.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.4" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 1.17%)</title><rect x="1162.4" y="707.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.4" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.58%)</title><rect x="1162.4" y="691.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.4" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.58%)</title><rect x="1162.4" y="675.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.4" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.58%)</title><rect x="1162.4" y="659.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.4" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.58%)</title><rect x="1162.4" y="643.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1165.4" y="654.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.58%)</title><rect x="1169.3" y="691.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.58%)</title><rect x="1169.3" y="675.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.58%)</title><rect x="1169.3" y="659.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.3" y="670.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.58%)</title><rect x="1169.3" y="643.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.3" y="654.0"></text>
</g>
<g>
<title>StackFrameStream::next() (1 samples, 0.58%)</title><rect x="1169.3" y="627.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.3" y="638.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 1.17%)</title><rect x="1176.2" y="723.0" width="13.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 1.17%)</title><rect x="1176.2" y="707.0" width="13.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 1.17%)</title><rect x="1176.2" y="691.0" width="13.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.2" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 1.17%)</title><rect x="1176.2" y="675.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.2" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 1.17%)</title><rect x="1176.2" y="659.0" width="13.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.2" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 1.17%)</title><rect x="1176.2" y="643.0" width="13.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1179.2" y="654.0"></text>
</g>
</g>
</svg>
