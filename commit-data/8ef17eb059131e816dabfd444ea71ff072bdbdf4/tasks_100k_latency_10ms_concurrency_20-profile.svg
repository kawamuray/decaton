<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (300 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 6.00%)</title><rect x="10.0" y="1075.0" width="70.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.33%)</title><rect x="10.0" y="1059.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.33%)</title><rect x="10.0" y="1043.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.33%)</title><rect x="10.0" y="1027.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.33%)</title><rect x="10.0" y="1011.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="10.0" y="995.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="10.0" y="979.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="10.0" y="963.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="10.0" y="947.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="10.0" y="931.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="10.0" y="915.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="10.0" y="899.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="10.0" y="883.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.33%)</title><rect x="10.0" y="867.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (17 samples, 5.67%)</title><rect x="13.9" y="1059.0" width="66.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.33%)</title><rect x="13.9" y="1043.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.33%)</title><rect x="13.9" y="1027.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.33%)</title><rect x="13.9" y="1011.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.33%)</title><rect x="13.9" y="995.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.33%)</title><rect x="13.9" y="979.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.9" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="13.9" y="963.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="16.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.67%)</title><rect x="17.9" y="1043.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/398685295.accept (5 samples, 1.67%)</title><rect x="17.9" y="1027.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (5 samples, 1.67%)</title><rect x="17.9" y="1011.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.00%)</title><rect x="17.9" y="995.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.00%)</title><rect x="17.9" y="979.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.00%)</title><rect x="17.9" y="963.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.00%)</title><rect x="17.9" y="947.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.00%)</title><rect x="17.9" y="931.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.00%)</title><rect x="17.9" y="915.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.00%)</title><rect x="17.9" y="899.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.00%)</title><rect x="17.9" y="883.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 1.00%)</title><rect x="17.9" y="867.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.33%)</title><rect x="25.7" y="851.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.67%)</title><rect x="29.7" y="995.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.67%)</title><rect x="29.7" y="979.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.7" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="33.6" y="963.0" width="3.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="36.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.67%)</title><rect x="37.5" y="1043.0" width="43.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.5" y="1054.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.67%)</title><rect x="37.5" y="1027.0" width="43.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.5" y="1038.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.67%)</title><rect x="37.5" y="1011.0" width="19.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.33%)</title><rect x="37.5" y="995.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.5" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.33%)</title><rect x="37.5" y="979.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.5" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.33%)</title><rect x="37.5" y="963.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="40.5" y="974.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.33%)</title><rect x="37.5" y="947.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="40.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="41.5" y="995.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="41.5" y="979.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="41.5" y="963.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.33%)</title><rect x="41.5" y="947.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.33%)</title><rect x="41.5" y="931.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/HeartbeatResponse.&lt;init&gt; (1 samples, 0.33%)</title><rect x="41.5" y="915.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/HeartbeatResponseData.&lt;init&gt; (1 samples, 0.33%)</title><rect x="41.5" y="899.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/HeartbeatResponseData.fromStruct (1 samples, 0.33%)</title><rect x="41.5" y="883.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.00%)</title><rect x="45.4" y="995.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.00%)</title><rect x="45.4" y="979.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.00%)</title><rect x="45.4" y="963.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.00%)</title><rect x="45.4" y="947.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.33%)</title><rect x="45.4" y="931.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.67%)</title><rect x="49.3" y="931.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.33%)</title><rect x="49.3" y="915.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.33%)</title><rect x="53.3" y="915.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.33%)</title><rect x="53.3" y="899.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.3" y="910.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.33%)</title><rect x="53.3" y="883.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.67%)</title><rect x="57.2" y="1011.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.67%)</title><rect x="57.2" y="995.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.67%)</title><rect x="57.2" y="979.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.67%)</title><rect x="57.2" y="963.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.67%)</title><rect x="57.2" y="947.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.67%)</title><rect x="57.2" y="931.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.67%)</title><rect x="57.2" y="915.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.67%)</title><rect x="57.2" y="899.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.67%)</title><rect x="57.2" y="883.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.67%)</title><rect x="57.2" y="867.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.2" y="878.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.33%)</title><rect x="57.2" y="851.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.33%)</title><rect x="61.1" y="851.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.00%)</title><rect x="65.1" y="1011.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.67%)</title><rect x="65.1" y="995.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.33%)</title><rect x="65.1" y="979.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.33%)</title><rect x="65.1" y="963.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.33%)</title><rect x="65.1" y="947.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.33%)</title><rect x="65.1" y="931.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.correlate (1 samples, 0.33%)</title><rect x="65.1" y="915.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="69.0" y="979.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="69.0" y="963.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.33%)</title><rect x="69.0" y="947.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.33%)</title><rect x="69.0" y="931.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="69.0" y="915.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="72.0" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.33%)</title><rect x="69.0" y="899.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="72.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="72.9" y="995.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="72.9" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="72.9" y="963.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="72.9" y="947.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="72.9" y="931.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.33%)</title><rect x="72.9" y="915.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.33%)</title><rect x="72.9" y="899.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.33%)</title><rect x="72.9" y="883.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.33%)</title><rect x="72.9" y="867.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.write (1 samples, 0.33%)</title><rect x="72.9" y="851.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.9" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.33%)</title><rect x="72.9" y="835.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.9" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.33%)</title><rect x="72.9" y="819.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.33%)</title><rect x="76.9" y="1011.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (153 samples, 51.00%)</title><rect x="80.8" y="1075.0" width="601.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.8" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (153 samples, 51.00%)</title><rect x="80.8" y="1059.0" width="601.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.8" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (153 samples, 51.00%)</title><rect x="80.8" y="1043.0" width="601.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.8" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1237081197.run (145 samples, 48.33%)</title><rect x="96.5" y="1027.0" width="570.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.5" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1237081197.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (145 samples, 48.33%)</title><rect x="96.5" y="1011.0" width="570.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.5" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (145 samples, 48.33%)</title><rect x="96.5" y="995.0" width="570.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.5" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (142 samples, 47.33%)</title><rect x="96.5" y="979.0" width="558.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.5" y="990.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.33%)</title><rect x="108.3" y="963.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.33%)</title><rect x="108.3" y="947.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/487620204.get (1 samples, 0.33%)</title><rect x="108.3" y="931.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="108.3" y="915.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="108.3" y="899.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="111.3" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="108.3" y="883.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="111.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="108.3" y="867.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="111.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="108.3" y="851.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="111.3" y="862.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.33%)</title><rect x="108.3" y="835.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="111.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (31 samples, 10.33%)</title><rect x="112.3" y="963.0" width="121.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.3" y="974.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (31 samples, 10.33%)</title><rect x="112.3" y="947.0" width="121.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.3" y="958.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (31 samples, 10.33%)</title><rect x="112.3" y="931.0" width="121.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.3" y="942.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 10.33%)</title><rect x="112.3" y="915.0" width="121.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.3" y="926.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 10.33%)</title><rect x="112.3" y="899.0" width="121.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.3" y="910.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 10.33%)</title><rect x="112.3" y="883.0" width="121.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.3" y="894.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 4.00%)</title><rect x="112.3" y="867.0" width="47.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.3" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 2.00%)</title><rect x="112.3" y="851.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.3" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.33%)</title><rect x="112.3" y="835.0" width="15.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.33%)</title><rect x="124.1" y="819.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="124.1" y="803.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="124.1" y="787.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="124.1" y="771.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.67%)</title><rect x="128.0" y="835.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.33%)</title><rect x="128.0" y="819.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.33%)</title><rect x="131.9" y="819.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.9" y="830.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.33%)</title><rect x="131.9" y="803.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="134.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.00%)</title><rect x="135.9" y="851.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.9" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.33%)</title><rect x="135.9" y="835.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.33%)</title><rect x="135.9" y="819.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.9" y="830.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.33%)</title><rect x="135.9" y="803.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="138.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.67%)</title><rect x="139.8" y="835.0" width="19.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.33%)</title><rect x="143.7" y="819.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 1.00%)</title><rect x="147.7" y="819.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 6.00%)</title><rect x="159.5" y="867.0" width="70.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.5" y="878.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.67%)</title><rect x="159.5" y="851.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.67%)</title><rect x="159.5" y="835.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.67%)</title><rect x="159.5" y="819.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 1.00%)</title><rect x="167.3" y="851.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.00%)</title><rect x="167.3" y="835.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.3" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="171.3" y="819.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="174.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="171.3" y="803.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="171.3" y="787.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="174.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="171.3" y="771.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.33%)</title><rect x="171.3" y="755.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="174.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="175.2" y="819.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.33%)</title><rect x="175.2" y="803.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.33%)</title><rect x="175.2" y="787.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.33%)</title><rect x="179.1" y="851.0" width="51.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.1" y="862.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.00%)</title><rect x="179.1" y="835.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.1" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.67%)</title><rect x="187.0" y="819.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.67%)</title><rect x="187.0" y="803.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.67%)</title><rect x="187.0" y="787.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.67%)</title><rect x="194.9" y="819.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.33%)</title><rect x="202.7" y="835.0" width="27.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.7" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.33%)</title><rect x="202.7" y="819.0" width="27.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.7" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.33%)</title><rect x="202.7" y="803.0" width="27.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.7" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.67%)</title><rect x="202.7" y="787.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.67%)</title><rect x="202.7" y="771.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.67%)</title><rect x="202.7" y="755.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.67%)</title><rect x="202.7" y="739.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.00%)</title><rect x="210.6" y="787.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.33%)</title><rect x="218.5" y="771.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="218.5" y="755.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="218.5" y="739.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="218.5" y="723.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.33%)</title><rect x="222.4" y="787.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.33%)</title><rect x="226.3" y="787.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.33%)</title><rect x="230.3" y="867.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.33%)</title><rect x="230.3" y="851.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.33%)</title><rect x="230.3" y="835.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.33%)</title><rect x="230.3" y="819.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.33%)</title><rect x="230.3" y="803.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (100 samples, 33.33%)</title><rect x="234.2" y="963.0" width="393.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.2" y="974.0">com/linecorp/decaton/processor/runtime/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (13 samples, 4.33%)</title><rect x="234.2" y="947.0" width="51.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.2" y="958.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 4.33%)</title><rect x="234.2" y="931.0" width="51.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.2" y="942.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 3.33%)</title><rect x="246.0" y="915.0" width="39.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="926.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.67%)</title><rect x="246.0" y="899.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.0" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.67%)</title><rect x="246.0" y="883.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.67%)</title><rect x="246.0" y="867.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.67%)</title><rect x="246.0" y="851.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.33%)</title><rect x="249.9" y="835.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.9" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 2.67%)</title><rect x="253.9" y="899.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.9" y="910.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.00%)</title><rect x="273.5" y="883.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.00%)</title><rect x="273.5" y="867.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.33%)</title><rect x="281.4" y="851.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="285.3" y="947.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="285.3" y="931.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.3" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="285.3" y="915.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 6.33%)</title><rect x="289.3" y="947.0" width="74.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.3" y="958.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (18 samples, 6.00%)</title><rect x="289.3" y="931.0" width="70.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.3" y="942.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 4.33%)</title><rect x="289.3" y="915.0" width="51.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.3" y="926.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 4.00%)</title><rect x="289.3" y="899.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.3" y="910.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 3.33%)</title><rect x="293.2" y="883.0" width="39.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="894.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 2.67%)</title><rect x="301.1" y="867.0" width="31.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.1" y="878.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 2.67%)</title><rect x="301.1" y="851.0" width="31.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.1" y="862.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 2.67%)</title><rect x="301.1" y="835.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.1" y="846.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.67%)</title><rect x="301.1" y="819.0" width="19.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="304.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.67%)</title><rect x="301.1" y="803.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="304.1" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.33%)</title><rect x="301.1" y="787.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.1" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.33%)</title><rect x="305.0" y="787.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.0" y="798.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.33%)</title><rect x="305.0" y="771.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="308.0" y="782.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.33%)</title><rect x="305.0" y="755.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="308.0" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 1.00%)</title><rect x="308.9" y="803.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="311.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 1.00%)</title><rect x="308.9" y="787.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="311.9" y="798.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.33%)</title><rect x="312.9" y="771.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="315.9" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.33%)</title><rect x="316.8" y="771.0" width="3.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="319.8" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.67%)</title><rect x="320.7" y="819.0" width="7.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="323.7" y="830.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.33%)</title><rect x="328.6" y="819.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="331.6" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="332.5" y="883.0" width="4.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="335.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.33%)</title><rect x="336.5" y="899.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.5" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.33%)</title><rect x="336.5" y="883.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.5" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.33%)</title><rect x="336.5" y="867.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="336.5" y="851.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="339.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="336.5" y="835.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="339.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="336.5" y="819.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="339.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="336.5" y="803.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="339.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.33%)</title><rect x="336.5" y="787.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="339.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.33%)</title><rect x="340.4" y="915.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.33%)</title><rect x="340.4" y="899.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.33%)</title><rect x="340.4" y="883.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.4" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 1.33%)</title><rect x="344.3" y="915.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.3" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.33%)</title><rect x="344.3" y="899.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.33%)</title><rect x="344.3" y="883.0" width="15.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.00%)</title><rect x="348.3" y="867.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.33%)</title><rect x="356.1" y="851.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.1" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.33%)</title><rect x="356.1" y="835.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="359.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="360.1" y="931.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 21.67%)</title><rect x="364.0" y="947.0" width="255.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="367.0" y="958.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 21.67%)</title><rect x="364.0" y="931.0" width="255.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.0" y="942.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="367.9" y="915.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="370.9" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="367.9" y="899.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="370.9" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="367.9" y="883.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="370.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="367.9" y="867.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="370.9" y="878.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.33%)</title><rect x="367.9" y="851.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="370.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1017073296.process (59 samples, 19.67%)</title><rect x="371.9" y="915.0" width="232.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.9" y="926.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (59 samples, 19.67%)</title><rect x="371.9" y="899.0" width="232.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.9" y="910.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (59 samples, 19.67%)</title><rect x="371.9" y="883.0" width="232.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.9" y="894.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.33%)</title><rect x="371.9" y="867.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.9" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.33%)</title><rect x="371.9" y="851.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.33%)</title><rect x="371.9" y="835.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.9" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.33%)</title><rect x="371.9" y="819.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="374.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.33%)</title><rect x="371.9" y="803.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.33%)</title><rect x="371.9" y="787.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 18.67%)</title><rect x="375.8" y="867.0" width="220.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.8" y="878.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (55 samples, 18.33%)</title><rect x="375.8" y="851.0" width="216.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.8" y="862.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.33%)</title><rect x="415.1" y="835.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="418.1" y="846.0"></text>
</g>
<g>
<title>JVM_Sleep (44 samples, 14.67%)</title><rect x="419.1" y="835.0" width="173.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="422.1" y="846.0">JVM_Sleep</text>
</g>
<g>
<title>[vdso] (2 samples, 0.67%)</title><rect x="430.9" y="819.0" width="7.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="433.9" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.00%)</title><rect x="438.7" y="819.0" width="11.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="441.7" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.67%)</title><rect x="442.7" y="803.0" width="7.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="445.7" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.33%)</title><rect x="450.5" y="819.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="453.5" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.33%)</title><rect x="454.5" y="819.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="457.5" y="830.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 11.33%)</title><rect x="458.4" y="819.0" width="133.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="461.4" y="830.0">os::sleep(Thread*..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.67%)</title><rect x="497.7" y="803.0" width="7.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="500.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="501.7" y="787.0" width="3.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="504.7" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.00%)</title><rect x="505.6" y="803.0" width="11.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="508.6" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.33%)</title><rect x="517.4" y="803.0" width="51.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="520.4" y="814.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.67%)</title><rect x="568.5" y="803.0" width="7.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="571.5" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.67%)</title><rect x="576.4" y="803.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.4" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.67%)</title><rect x="584.3" y="803.0" width="7.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="587.3" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="592.1" y="851.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="595.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="592.1" y="835.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="595.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.67%)</title><rect x="596.1" y="867.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="600.0" y="851.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="600.0" y="835.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.00%)</title><rect x="603.9" y="915.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.00%)</title><rect x="603.9" y="899.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.9" y="910.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.67%)</title><rect x="603.9" y="883.0" width="7.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="606.9" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.33%)</title><rect x="611.8" y="883.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.8" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="615.7" y="915.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.67%)</title><rect x="619.7" y="947.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.33%)</title><rect x="623.6" y="931.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.33%)</title><rect x="623.6" y="915.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/337044930.accept (1 samples, 0.33%)</title><rect x="623.6" y="899.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="623.6" y="883.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="626.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="623.6" y="867.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="626.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="623.6" y="851.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="626.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="623.6" y="835.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="626.6" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.33%)</title><rect x="623.6" y="819.0" width="3.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="626.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.33%)</title><rect x="627.5" y="963.0" width="27.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.5" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.00%)</title><rect x="631.5" y="947.0" width="23.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.5" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.00%)</title><rect x="631.5" y="931.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.5" y="942.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/337044930.accept (6 samples, 2.00%)</title><rect x="631.5" y="915.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.5" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (6 samples, 2.00%)</title><rect x="631.5" y="899.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.5" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1567793886.complete (6 samples, 2.00%)</title><rect x="631.5" y="883.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.5" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (6 samples, 2.00%)</title><rect x="631.5" y="867.0" width="23.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.5" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 2.00%)</title><rect x="631.5" y="851.0" width="23.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.5" y="862.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 2.00%)</title><rect x="631.5" y="835.0" width="23.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.5" y="846.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 2.00%)</title><rect x="631.5" y="819.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.5" y="830.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 2.00%)</title><rect x="631.5" y="803.0" width="23.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.5" y="814.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 2.00%)</title><rect x="631.5" y="787.0" width="23.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.5" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.00%)</title><rect x="655.1" y="979.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="658.1" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="662.9" y="963.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="665.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="662.9" y="947.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="665.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.33%)</title><rect x="666.9" y="1027.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="669.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.00%)</title><rect x="670.8" y="1011.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="673.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.67%)</title><rect x="674.7" y="995.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.67%)</title><rect x="674.7" y="979.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="677.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.67%)</title><rect x="674.7" y="963.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.67%)</title><rect x="674.7" y="947.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="677.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.67%)</title><rect x="682.6" y="1075.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="685.6" y="1086.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.33%)</title><rect x="682.6" y="1059.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="686.5" y="1059.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="689.5" y="1070.0"></text>
</g>
<g>
<title>start_thread (127 samples, 42.33%)</title><rect x="690.5" y="1075.0" width="499.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="693.5" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (127 samples, 42.33%)</title><rect x="690.5" y="1059.0" width="499.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="693.5" y="1070.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 1.67%)</title><rect x="690.5" y="1043.0" width="19.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="693.5" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 1.67%)</title><rect x="690.5" y="1027.0" width="19.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.5" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.67%)</title><rect x="690.5" y="1011.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="693.5" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.67%)</title><rect x="690.5" y="995.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="693.5" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.33%)</title><rect x="690.5" y="979.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="693.5" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.33%)</title><rect x="694.4" y="979.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="697.4" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.67%)</title><rect x="698.3" y="1011.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.3" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.33%)</title><rect x="698.3" y="995.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.3" y="1006.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.33%)</title><rect x="698.3" y="979.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="701.3" y="990.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.33%)</title><rect x="698.3" y="963.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="701.3" y="974.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.33%)</title><rect x="698.3" y="947.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="701.3" y="958.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.33%)</title><rect x="698.3" y="931.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.3" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.33%)</title><rect x="698.3" y="915.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="701.3" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.33%)</title><rect x="702.3" y="995.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="705.3" y="1006.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.33%)</title><rect x="702.3" y="979.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.3" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.33%)</title><rect x="706.2" y="1011.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="709.2" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.33%)</title><rect x="706.2" y="995.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="709.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.33%)</title><rect x="706.2" y="979.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="709.2" y="990.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.33%)</title><rect x="706.2" y="963.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="709.2" y="974.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.33%)</title><rect x="706.2" y="947.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="709.2" y="958.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.33%)</title><rect x="706.2" y="931.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="709.2" y="942.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.33%)</title><rect x="706.2" y="915.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="709.2" y="926.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.33%)</title><rect x="706.2" y="899.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="709.2" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (122 samples, 40.67%)</title><rect x="710.1" y="1043.0" width="479.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="713.1" y="1054.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (122 samples, 40.67%)</title><rect x="710.1" y="1027.0" width="479.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="713.1" y="1038.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (121 samples, 40.33%)</title><rect x="710.1" y="1011.0" width="476.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="713.1" y="1022.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (121 samples, 40.33%)</title><rect x="710.1" y="995.0" width="476.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="713.1" y="1006.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (117 samples, 39.00%)</title><rect x="710.1" y="979.0" width="460.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="713.1" y="990.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (117 samples, 39.00%)</title><rect x="710.1" y="963.0" width="460.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="713.1" y="974.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (85 samples, 28.33%)</title><rect x="710.1" y="947.0" width="334.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="713.1" y="958.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.67%)</title><rect x="710.1" y="931.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="713.1" y="942.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.67%)</title><rect x="710.1" y="915.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="713.1" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.67%)</title><rect x="710.1" y="899.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="713.1" y="910.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.33%)</title><rect x="714.1" y="883.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="717.1" y="894.0"></text>
</g>
<g>
<title>loadLNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.33%)</title><rect x="714.1" y="867.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="717.1" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.67%)</title><rect x="718.0" y="931.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="721.0" y="942.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.33%)</title><rect x="721.9" y="915.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.9" y="926.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.33%)</title><rect x="721.9" y="899.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="724.9" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.33%)</title><rect x="725.9" y="931.0" width="27.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="728.9" y="942.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 2.33%)</title><rect x="725.9" y="915.0" width="27.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="728.9" y="926.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 1.33%)</title><rect x="725.9" y="899.0" width="15.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="728.9" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.33%)</title><rect x="741.6" y="899.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="744.6" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.67%)</title><rect x="745.5" y="899.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="748.5" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.33%)</title><rect x="745.5" y="883.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="748.5" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.33%)</title><rect x="749.5" y="883.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.5" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.33%)</title><rect x="749.5" y="867.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="752.5" y="878.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.33%)</title><rect x="749.5" y="851.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="752.5" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.33%)</title><rect x="753.4" y="931.0" width="15.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="756.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.33%)</title><rect x="753.4" y="915.0" width="15.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="756.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.67%)</title><rect x="753.4" y="899.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="756.4" y="910.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.33%)</title><rect x="753.4" y="883.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="756.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.33%)</title><rect x="757.3" y="883.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.3" y="894.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.33%)</title><rect x="757.3" y="867.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="760.3" y="878.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.33%)</title><rect x="757.3" y="851.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.3" y="862.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.33%)</title><rect x="757.3" y="835.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="760.3" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.67%)</title><rect x="761.3" y="899.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="764.3" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.33%)</title><rect x="761.3" y="883.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="764.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.33%)</title><rect x="765.2" y="883.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="768.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (70 samples, 23.33%)</title><rect x="769.1" y="931.0" width="275.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="772.1" y="942.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.33%)</title><rect x="769.1" y="915.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="772.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.33%)</title><rect x="773.1" y="915.0" width="15.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.1" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.67%)</title><rect x="780.9" y="899.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="783.9" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.67%)</title><rect x="780.9" y="883.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="783.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 2.00%)</title><rect x="788.8" y="915.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="791.8" y="926.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="792.7" y="899.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="795.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 1.33%)</title><rect x="796.7" y="899.0" width="15.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.67%)</title><rect x="804.5" y="883.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.00%)</title><rect x="812.4" y="915.0" width="23.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="815.4" y="926.0">P..</text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.33%)</title><rect x="832.1" y="899.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 3.67%)</title><rect x="836.0" y="915.0" width="43.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="839.0" y="926.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.33%)</title><rect x="859.6" y="899.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="862.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.00%)</title><rect x="863.5" y="899.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.5" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="871.4" y="883.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="874.4" y="894.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.33%)</title><rect x="875.3" y="899.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.67%)</title><rect x="879.3" y="915.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="883.2" y="899.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="886.2" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="883.2" y="883.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="886.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.00%)</title><rect x="887.1" y="915.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.1" y="926.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.33%)</title><rect x="895.0" y="899.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.67%)</title><rect x="898.9" y="915.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="901.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.67%)</title><rect x="898.9" y="899.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="901.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="902.9" y="883.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="905.9" y="894.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.33%)</title><rect x="902.9" y="867.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="905.9" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (16 samples, 5.33%)</title><rect x="906.8" y="915.0" width="62.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.8" y="926.0">PhaseC..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (16 samples, 5.33%)</title><rect x="906.8" y="899.0" width="62.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.8" y="910.0">PhaseC..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (16 samples, 5.33%)</title><rect x="906.8" y="883.0" width="62.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.8" y="894.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.33%)</title><rect x="906.8" y="867.0" width="15.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.8" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 3.00%)</title><rect x="922.5" y="867.0" width="35.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.5" y="878.0">Pha..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 1.00%)</title><rect x="957.9" y="867.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.00%)</title><rect x="969.7" y="915.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="977.6" y="899.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.6" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.00%)</title><rect x="981.5" y="915.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.5" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.67%)</title><rect x="985.5" y="899.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.5" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.67%)</title><rect x="993.3" y="915.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.3" y="926.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.67%)</title><rect x="993.3" y="899.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 3.00%)</title><rect x="1001.2" y="915.0" width="35.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1004.2" y="926.0">Pha..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.33%)</title><rect x="1016.9" y="899.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.9" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 1.33%)</title><rect x="1020.9" y="899.0" width="15.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.9" y="910.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.33%)</title><rect x="1024.8" y="883.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.8" y="894.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.33%)</title><rect x="1024.8" y="867.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1027.8" y="878.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (2 samples, 0.67%)</title><rect x="1028.7" y="883.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.7" y="894.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 0.67%)</title><rect x="1028.7" y="867.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.7" y="878.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.33%)</title><rect x="1036.6" y="915.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.6" y="926.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.33%)</title><rect x="1036.6" y="899.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.6" y="910.0"></text>
</g>
<g>
<title>jmpConNode::oper_input_base() const (1 samples, 0.33%)</title><rect x="1040.5" y="915.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1043.5" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 8.00%)</title><rect x="1044.5" y="947.0" width="94.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.5" y="958.0">Compile::Op..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.33%)</title><rect x="1044.5" y="931.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.5" y="942.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.33%)</title><rect x="1044.5" y="915.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.67%)</title><rect x="1048.4" y="931.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.67%)</title><rect x="1048.4" y="915.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.33%)</title><rect x="1052.3" y="899.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.3" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.33%)</title><rect x="1052.3" y="883.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.3" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.33%)</title><rect x="1052.3" y="867.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.3" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.33%)</title><rect x="1052.3" y="851.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.3" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.33%)</title><rect x="1052.3" y="835.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.3" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1052.3" y="819.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.3" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.33%)</title><rect x="1052.3" y="803.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.3" y="814.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.33%)</title><rect x="1052.3" y="787.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.3" y="798.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.33%)</title><rect x="1052.3" y="771.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.3" y="782.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.33%)</title><rect x="1052.3" y="755.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.3" y="766.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1052.3" y="739.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.3" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.33%)</title><rect x="1056.3" y="931.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.3" y="942.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.33%)</title><rect x="1056.3" y="915.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.3" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1056.3" y="899.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.3" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.33%)</title><rect x="1056.3" y="883.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.3" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="1056.3" y="867.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1059.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 5.67%)</title><rect x="1060.2" y="931.0" width="66.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.2" y="942.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1060.2" y="915.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.2" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1060.2" y="899.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.2" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1060.2" y="883.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.2" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1060.2" y="867.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1063.2" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1060.2" y="851.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.2" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1060.2" y="835.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.2" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1064.1" y="915.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.1" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1064.1" y="899.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.1" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1064.1" y="883.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.33%)</title><rect x="1064.1" y="867.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason) (1 samples, 0.33%)</title><rect x="1064.1" y="851.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.33%)</title><rect x="1064.1" y="835.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.1" y="846.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.33%)</title><rect x="1064.1" y="819.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1067.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1068.1" y="915.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.33%)</title><rect x="1068.1" y="899.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 2.67%)</title><rect x="1072.0" y="915.0" width="31.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.0" y="926.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 2.67%)</title><rect x="1072.0" y="899.0" width="31.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.0" y="910.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 1.67%)</title><rect x="1079.9" y="883.0" width="19.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.9" y="894.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.33%)</title><rect x="1083.8" y="867.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.8" y="878.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1083.8" y="851.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.67%)</title><rect x="1087.7" y="867.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.33%)</title><rect x="1095.6" y="867.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.6" y="878.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.33%)</title><rect x="1099.5" y="883.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.33%)</title><rect x="1103.5" y="915.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.5" y="926.0"></text>
</g>
<g>
<title>MemBarReleaseNode::Opcode() const (1 samples, 0.33%)</title><rect x="1103.5" y="899.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.33%)</title><rect x="1107.4" y="915.0" width="15.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.67%)</title><rect x="1115.3" y="899.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.33%)</title><rect x="1119.2" y="883.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.33%)</title><rect x="1123.1" y="915.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1123.1" y="899.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.1" y="910.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1123.1" y="883.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="894.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.33%)</title><rect x="1123.1" y="867.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.1" y="878.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.33%)</title><rect x="1123.1" y="851.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.00%)</title><rect x="1127.1" y="931.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.1" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.00%)</title><rect x="1127.1" y="915.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.33%)</title><rect x="1127.1" y="899.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.33%)</title><rect x="1131.0" y="899.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.0" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.33%)</title><rect x="1131.0" y="883.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="894.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.33%)</title><rect x="1131.0" y="867.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="878.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1134.9" y="899.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.33%)</title><rect x="1134.9" y="883.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="867.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="851.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="835.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="819.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="803.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="787.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="771.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="755.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="739.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="723.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="707.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="691.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="675.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="659.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="643.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="627.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="611.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="595.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.9" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="579.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.9" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.33%)</title><rect x="1134.9" y="563.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.9" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1134.9" y="547.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.33%)</title><rect x="1138.9" y="947.0" width="27.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.9" y="958.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.33%)</title><rect x="1138.9" y="931.0" width="27.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.9" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.33%)</title><rect x="1138.9" y="915.0" width="27.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.9" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.33%)</title><rect x="1138.9" y="899.0" width="27.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.9" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.33%)</title><rect x="1138.9" y="883.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.9" y="894.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.33%)</title><rect x="1138.9" y="867.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.9" y="878.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.33%)</title><rect x="1138.9" y="851.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.9" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.33%)</title><rect x="1138.9" y="835.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.9" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1138.9" y="819.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.9" y="830.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1138.9" y="803.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.9" y="814.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.33%)</title><rect x="1138.9" y="787.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.9" y="798.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.33%)</title><rect x="1138.9" y="771.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.9" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.33%)</title><rect x="1138.9" y="755.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.9" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.33%)</title><rect x="1138.9" y="739.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.00%)</title><rect x="1142.8" y="883.0" width="23.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.8" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.00%)</title><rect x="1142.8" y="867.0" width="23.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="878.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.67%)</title><rect x="1142.8" y="851.0" width="19.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.67%)</title><rect x="1142.8" y="835.0" width="19.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.67%)</title><rect x="1142.8" y="819.0" width="19.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.67%)</title><rect x="1142.8" y="803.0" width="19.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.67%)</title><rect x="1142.8" y="787.0" width="19.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.67%)</title><rect x="1142.8" y="771.0" width="19.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1142.8" y="755.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1142.8" y="739.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1142.8" y="723.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1142.8" y="707.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1142.8" y="691.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1142.8" y="675.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1142.8" y="659.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1142.8" y="643.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1142.8" y="627.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1142.8" y="611.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1142.8" y="595.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1142.8" y="579.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1142.8" y="563.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1142.8" y="547.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1142.8" y="531.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1142.8" y="515.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1142.8" y="499.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1142.8" y="483.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1142.8" y="467.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1142.8" y="451.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1142.8" y="435.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1142.8" y="419.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1142.8" y="403.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1142.8" y="387.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1142.8" y="371.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1142.8" y="355.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1142.8" y="339.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1142.8" y="323.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1142.8" y="307.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1142.8" y="291.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.8" y="302.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1142.8" y="275.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.8" y="286.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.33%)</title><rect x="1142.8" y="259.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.8" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.33%)</title><rect x="1142.8" y="243.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="254.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1142.8" y="227.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.8" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1142.8" y="211.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.8" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1142.8" y="195.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.8" y="206.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.33%)</title><rect x="1142.8" y="179.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.8" y="190.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.33%)</title><rect x="1142.8" y="163.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.8" y="174.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.33%)</title><rect x="1142.8" y="147.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.8" y="158.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.33%)</title><rect x="1142.8" y="131.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.33%)</title><rect x="1146.7" y="483.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.7" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.33%)</title><rect x="1146.7" y="467.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="478.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1146.7" y="451.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.7" y="462.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.33%)</title><rect x="1146.7" y="435.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.7" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.00%)</title><rect x="1150.7" y="755.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.00%)</title><rect x="1150.7" y="739.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.00%)</title><rect x="1150.7" y="723.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.00%)</title><rect x="1150.7" y="707.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.00%)</title><rect x="1150.7" y="691.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.00%)</title><rect x="1150.7" y="675.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.00%)</title><rect x="1150.7" y="659.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.00%)</title><rect x="1150.7" y="643.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.00%)</title><rect x="1150.7" y="627.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.00%)</title><rect x="1150.7" y="611.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.00%)</title><rect x="1150.7" y="595.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.00%)</title><rect x="1150.7" y="579.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.00%)</title><rect x="1150.7" y="563.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.00%)</title><rect x="1150.7" y="547.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.00%)</title><rect x="1150.7" y="531.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.00%)</title><rect x="1150.7" y="515.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.00%)</title><rect x="1150.7" y="499.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.00%)</title><rect x="1150.7" y="483.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.00%)</title><rect x="1150.7" y="467.0" width="11.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1150.7" y="451.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1150.7" y="435.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1150.7" y="419.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1150.7" y="403.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1150.7" y="387.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1150.7" y="371.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1150.7" y="355.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1150.7" y="339.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1150.7" y="323.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1150.7" y="307.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1150.7" y="291.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1150.7" y="275.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1150.7" y="259.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1150.7" y="243.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1150.7" y="227.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1150.7" y="211.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1150.7" y="195.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1150.7" y="179.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.7" y="190.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1150.7" y="163.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.7" y="174.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1150.7" y="147.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="158.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1150.7" y="131.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="142.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.33%)</title><rect x="1150.7" y="115.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="126.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.33%)</title><rect x="1150.7" y="99.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="110.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.33%)</title><rect x="1150.7" y="83.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.7" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1150.7" y="67.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="78.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1150.7" y="51.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="62.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.33%)</title><rect x="1150.7" y="35.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1154.6" y="259.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1154.6" y="243.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1154.6" y="227.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1154.6" y="211.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1154.6" y="195.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1154.6" y="179.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1154.6" y="163.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1154.6" y="147.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1154.6" y="131.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1154.6" y="115.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1154.6" y="99.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1154.6" y="83.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.6" y="94.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.33%)</title><rect x="1154.6" y="67.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.6" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1158.5" y="451.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1158.5" y="435.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1158.5" y="419.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1158.5" y="403.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1158.5" y="387.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1158.5" y="371.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1158.5" y="355.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1158.5" y="339.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1158.5" y="323.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1158.5" y="307.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1158.5" y="291.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1158.5" y="275.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.33%)</title><rect x="1158.5" y="259.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.33%)</title><rect x="1158.5" y="243.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.5" y="254.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.33%)</title><rect x="1158.5" y="227.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.5" y="238.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.33%)</title><rect x="1158.5" y="211.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="222.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.33%)</title><rect x="1158.5" y="195.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.5" y="206.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.33%)</title><rect x="1158.5" y="179.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="190.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.33%)</title><rect x="1158.5" y="163.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.5" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1162.5" y="851.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1162.5" y="835.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1162.5" y="819.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1162.5" y="803.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1162.5" y="787.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1162.5" y="771.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1162.5" y="755.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1162.5" y="739.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1162.5" y="723.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1162.5" y="707.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1162.5" y="691.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1162.5" y="675.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.33%)</title><rect x="1162.5" y="659.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.33%)</title><rect x="1162.5" y="643.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.33%)</title><rect x="1162.5" y="627.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.5" y="638.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.33%)</title><rect x="1162.5" y="611.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.5" y="622.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.33%)</title><rect x="1162.5" y="595.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="606.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.33%)</title><rect x="1162.5" y="579.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.5" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.33%)</title><rect x="1166.4" y="947.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.4" y="958.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.33%)</title><rect x="1166.4" y="931.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.4" y="942.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.67%)</title><rect x="1170.3" y="979.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="990.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.67%)</title><rect x="1170.3" y="963.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.67%)</title><rect x="1170.3" y="947.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.3" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.67%)</title><rect x="1170.3" y="931.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="942.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.33%)</title><rect x="1170.3" y="915.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.3" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.33%)</title><rect x="1170.3" y="899.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="910.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.33%)</title><rect x="1170.3" y="883.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.33%)</title><rect x="1170.3" y="867.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1170.3" y="851.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1170.3" y="835.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1170.3" y="819.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1170.3" y="803.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.3" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1170.3" y="787.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1170.3" y="771.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1170.3" y="755.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.33%)</title><rect x="1170.3" y="739.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.33%)</title><rect x="1174.3" y="915.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.33%)</title><rect x="1174.3" y="899.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="910.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.33%)</title><rect x="1174.3" y="883.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 0.33%)</title><rect x="1174.3" y="867.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.3" y="878.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.33%)</title><rect x="1178.2" y="979.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.33%)</title><rect x="1178.2" y="963.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.33%)</title><rect x="1182.1" y="979.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1182.1" y="963.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1182.1" y="947.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="958.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1182.1" y="931.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="942.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.33%)</title><rect x="1182.1" y="915.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.33%)</title><rect x="1182.1" y="899.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.1" y="883.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.1" y="867.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.1" y="851.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="862.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.1" y="835.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="846.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.33%)</title><rect x="1186.1" y="1011.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.33%)</title><rect x="1186.1" y="995.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.33%)</title><rect x="1186.1" y="979.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.33%)</title><rect x="1186.1" y="963.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.33%)</title><rect x="1186.1" y="947.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.33%)</title><rect x="1186.1" y="931.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
</g>
</svg>
