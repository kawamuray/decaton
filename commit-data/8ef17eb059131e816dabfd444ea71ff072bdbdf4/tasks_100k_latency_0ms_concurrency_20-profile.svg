<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (248 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.40%)</title><rect x="10.0" y="995.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.40%)</title><rect x="10.0" y="979.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 10.48%)</title><rect x="14.8" y="995.0" width="123.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1006.0">com/linecorp/de..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.40%)</title><rect x="19.5" y="979.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 9.68%)</title><rect x="24.3" y="979.0" width="114.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.3" y="990.0">com/linecorp/d..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 8.87%)</title><rect x="24.3" y="963.0" width="104.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.3" y="974.0">java/lang/It..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/413498443.accept (22 samples, 8.87%)</title><rect x="24.3" y="947.0" width="104.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.3" y="958.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (22 samples, 8.87%)</title><rect x="24.3" y="931.0" width="104.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.3" y="942.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (17 samples, 6.85%)</title><rect x="24.3" y="915.0" width="80.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.3" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (17 samples, 6.85%)</title><rect x="24.3" y="899.0" width="80.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.3" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (17 samples, 6.85%)</title><rect x="24.3" y="883.0" width="80.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="894.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (17 samples, 6.85%)</title><rect x="24.3" y="867.0" width="80.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.3" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 5.24%)</title><rect x="38.5" y="851.0" width="61.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.5" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 5.24%)</title><rect x="38.5" y="835.0" width="61.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.5" y="846.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 4.03%)</title><rect x="38.5" y="819.0" width="47.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.5" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.21%)</title><rect x="38.5" y="803.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.21%)</title><rect x="38.5" y="787.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.21%)</title><rect x="38.5" y="771.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.82%)</title><rect x="52.8" y="803.0" width="33.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.8" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.82%)</title><rect x="52.8" y="787.0" width="33.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.8" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.82%)</title><rect x="52.8" y="771.0" width="33.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.8" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.82%)</title><rect x="52.8" y="755.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.8" y="766.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 2.42%)</title><rect x="57.6" y="739.0" width="28.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.6" y="750.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 2.42%)</title><rect x="57.6" y="723.0" width="28.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="60.6" y="734.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.02%)</title><rect x="57.6" y="707.0" width="23.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="60.6" y="718.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.40%)</title><rect x="81.4" y="707.0" width="4.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="84.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.21%)</title><rect x="86.1" y="819.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.21%)</title><rect x="86.1" y="803.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.21%)</title><rect x="86.1" y="787.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.21%)</title><rect x="86.1" y="771.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.1" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="100.4" y="851.0" width="4.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="103.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.40%)</title><rect x="105.2" y="915.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="108.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="105.2" y="899.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="105.2" y="883.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.61%)</title><rect x="109.9" y="915.0" width="19.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.9" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.61%)</title><rect x="109.9" y="899.0" width="19.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.9" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.81%)</title><rect x="119.4" y="883.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.4" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.81%)</title><rect x="119.4" y="867.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.4" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.81%)</title><rect x="119.4" y="851.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 0.81%)</title><rect x="129.0" y="963.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 0.81%)</title><rect x="129.0" y="947.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.40%)</title><rect x="129.0" y="931.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.40%)</title><rect x="129.0" y="915.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.40%)</title><rect x="129.0" y="899.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.40%)</title><rect x="129.0" y="883.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="132.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.40%)</title><rect x="129.0" y="867.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.40%)</title><rect x="129.0" y="851.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.40%)</title><rect x="129.0" y="835.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.40%)</title><rect x="129.0" y="819.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.40%)</title><rect x="129.0" y="803.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.40%)</title><rect x="129.0" y="787.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.40%)</title><rect x="129.0" y="771.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.40%)</title><rect x="129.0" y="755.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.40%)</title><rect x="129.0" y="739.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="133.7" y="931.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="133.7" y="915.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.40%)</title><rect x="133.7" y="899.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.40%)</title><rect x="133.7" y="883.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.40%)</title><rect x="133.7" y="867.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.40%)</title><rect x="133.7" y="851.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.40%)</title><rect x="133.7" y="835.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (72 samples, 29.03%)</title><rect x="138.5" y="995.0" width="342.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.5" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (72 samples, 29.03%)</title><rect x="138.5" y="979.0" width="342.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.5" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (72 samples, 29.03%)</title><rect x="138.5" y="963.0" width="342.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.5" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/708277391.run (45 samples, 18.15%)</title><rect x="152.7" y="947.0" width="214.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.7" y="958.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (45 samples, 18.15%)</title><rect x="152.7" y="931.0" width="214.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.7" y="942.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (45 samples, 18.15%)</title><rect x="152.7" y="915.0" width="214.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.7" y="926.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (43 samples, 17.34%)</title><rect x="152.7" y="899.0" width="204.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.7" y="910.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (17 samples, 6.85%)</title><rect x="162.3" y="883.0" width="80.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.3" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (17 samples, 6.85%)</title><rect x="162.3" y="867.0" width="80.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.3" y="878.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 6.85%)</title><rect x="162.3" y="851.0" width="80.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.3" y="862.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 6.85%)</title><rect x="162.3" y="835.0" width="80.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.3" y="846.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 6.85%)</title><rect x="162.3" y="819.0" width="80.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.3" y="830.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 6.85%)</title><rect x="162.3" y="803.0" width="80.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.3" y="814.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.61%)</title><rect x="162.3" y="787.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.21%)</title><rect x="162.3" y="771.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.21%)</title><rect x="162.3" y="755.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.3" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.81%)</title><rect x="167.0" y="739.0" width="9.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="170.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.81%)</title><rect x="167.0" y="723.0" width="9.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="170.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.40%)</title><rect x="176.5" y="771.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.40%)</title><rect x="176.5" y="755.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.40%)</title><rect x="176.5" y="739.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 5.24%)</title><rect x="181.3" y="787.0" width="61.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.3" y="798.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.81%)</title><rect x="181.3" y="771.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.81%)</title><rect x="181.3" y="755.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="184.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.81%)</title><rect x="181.3" y="739.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.81%)</title><rect x="181.3" y="723.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 1.21%)</title><rect x="190.8" y="771.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.21%)</title><rect x="190.8" y="755.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.40%)</title><rect x="200.3" y="739.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.40%)</title><rect x="205.1" y="771.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="205.1" y="755.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="205.1" y="739.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.40%)</title><rect x="209.8" y="771.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.40%)</title><rect x="209.8" y="755.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="209.8" y="739.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="209.8" y="723.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="209.8" y="707.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.42%)</title><rect x="214.6" y="771.0" width="28.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.6" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.21%)</title><rect x="214.6" y="755.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="214.6" y="739.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="214.6" y="723.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="217.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="214.6" y="707.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.81%)</title><rect x="219.4" y="739.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.21%)</title><rect x="228.9" y="755.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.21%)</title><rect x="228.9" y="739.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.21%)</title><rect x="228.9" y="723.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.40%)</title><rect x="228.9" y="707.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.40%)</title><rect x="228.9" y="691.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.40%)</title><rect x="228.9" y="675.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.40%)</title><rect x="228.9" y="659.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.9" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.40%)</title><rect x="228.9" y="643.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.40%)</title><rect x="233.6" y="707.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="233.6" y="691.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="233.6" y="675.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.40%)</title><rect x="238.4" y="707.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="238.4" y="691.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 9.68%)</title><rect x="243.1" y="883.0" width="114.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.1" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.21%)</title><rect x="247.9" y="867.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.21%)</title><rect x="247.9" y="851.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.21%)</title><rect x="247.9" y="835.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.9" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.21%)</title><rect x="247.9" y="819.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.21%)</title><rect x="247.9" y="803.0" width="14.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.21%)</title><rect x="247.9" y="787.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.21%)</title><rect x="247.9" y="771.0" width="14.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 1.21%)</title><rect x="247.9" y="755.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 5.65%)</title><rect x="262.2" y="867.0" width="66.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.2" y="878.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 5.65%)</title><rect x="262.2" y="851.0" width="66.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.2" y="862.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.61%)</title><rect x="271.7" y="835.0" width="19.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.7" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.21%)</title><rect x="276.5" y="819.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.5" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.21%)</title><rect x="276.5" y="803.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.5" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.81%)</title><rect x="276.5" y="787.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.5" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.40%)</title><rect x="276.5" y="771.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.40%)</title><rect x="276.5" y="755.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="279.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.40%)</title><rect x="276.5" y="739.0" width="4.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="279.5" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.40%)</title><rect x="281.2" y="771.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.2" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="281.2" y="755.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="284.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.40%)</title><rect x="286.0" y="787.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.recordOffset (1 samples, 0.40%)</title><rect x="290.7" y="835.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.7" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.81%)</title><rect x="295.5" y="835.0" width="9.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="298.5" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.02%)</title><rect x="305.0" y="835.0" width="23.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.0" y="846.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.61%)</title><rect x="309.8" y="819.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.8" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.61%)</title><rect x="309.8" y="803.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.81%)</title><rect x="319.3" y="787.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="324.0" y="771.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.0" y="782.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.40%)</title><rect x="324.0" y="755.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="327.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 2.42%)</title><rect x="328.8" y="867.0" width="28.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.8" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.42%)</title><rect x="328.8" y="851.0" width="28.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.8" y="862.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="328.8" y="835.0" width="4.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="331.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="328.8" y="819.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="331.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062177384.process (2 samples, 0.81%)</title><rect x="333.5" y="835.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 0.81%)</title><rect x="333.5" y="819.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.81%)</title><rect x="333.5" y="803.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="333.5" y="787.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="333.5" y="771.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="333.5" y="755.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="333.5" y="739.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.40%)</title><rect x="333.5" y="723.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.5" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="333.5" y="707.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="336.5" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="333.5" y="691.0" width="4.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="336.5" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="338.3" y="787.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="338.3" y="771.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="341.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="338.3" y="755.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.40%)</title><rect x="338.3" y="739.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.40%)</title><rect x="343.1" y="835.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="346.1" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.40%)</title><rect x="343.1" y="819.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="347.8" y="835.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="347.8" y="819.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.8" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="347.8" y="803.0" width="4.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="350.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="352.6" y="835.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.81%)</title><rect x="357.3" y="899.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.3" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="362.1" y="883.0" width="4.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="365.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="362.1" y="867.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="365.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.40%)</title><rect x="366.9" y="947.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="366.9" y="931.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.81%)</title><rect x="371.6" y="947.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (21 samples, 8.47%)</title><rect x="381.1" y="947.0" width="99.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.1" y="958.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (21 samples, 8.47%)</title><rect x="381.1" y="931.0" width="99.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.1" y="942.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (20 samples, 8.06%)</title><rect x="385.9" y="915.0" width="95.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.9" y="926.0">java/util/c..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.81%)</title><rect x="390.6" y="899.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.40%)</title><rect x="400.2" y="899.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.40%)</title><rect x="400.2" y="883.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.40%)</title><rect x="400.2" y="867.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.40%)</title><rect x="400.2" y="851.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.40%)</title><rect x="404.9" y="899.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="404.9" y="883.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.40%)</title><rect x="409.7" y="899.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.40%)</title><rect x="409.7" y="883.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 5.65%)</title><rect x="414.4" y="899.0" width="66.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.4" y="910.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (14 samples, 5.65%)</title><rect x="414.4" y="883.0" width="66.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.4" y="894.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Park (14 samples, 5.65%)</title><rect x="414.4" y="867.0" width="66.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="417.4" y="878.0">Unsafe_..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (2 samples, 0.81%)</title><rect x="414.4" y="851.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="417.4" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.81%)</title><rect x="424.0" y="851.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="427.0" y="862.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.81%)</title><rect x="433.5" y="851.0" width="9.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="436.5" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.21%)</title><rect x="443.0" y="851.0" width="14.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="446.0" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.02%)</title><rect x="457.3" y="851.0" width="23.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="460.3" y="862.0">_..</text>
</g>
<g>
<title>msort_with_tmp.part.0 (2 samples, 0.81%)</title><rect x="481.0" y="995.0" width="9.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="484.0" y="1006.0"></text>
</g>
<g>
<title>LinearScan::interval_cmp(Interval**, Interval**) (1 samples, 0.40%)</title><rect x="481.0" y="979.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="484.0" y="990.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.40%)</title><rect x="485.8" y="979.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="488.8" y="990.0"></text>
</g>
<g>
<title>start_thread (147 samples, 59.27%)</title><rect x="490.6" y="995.0" width="699.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="493.6" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (147 samples, 59.27%)</title><rect x="490.6" y="979.0" width="699.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="493.6" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 5.65%)</title><rect x="490.6" y="963.0" width="66.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="493.6" y="974.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 3.23%)</title><rect x="490.6" y="947.0" width="38.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.6" y="958.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.82%)</title><rect x="490.6" y="931.0" width="33.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="493.6" y="942.0">G1..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.21%)</title><rect x="490.6" y="915.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="493.6" y="926.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.61%)</title><rect x="504.8" y="915.0" width="19.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="507.8" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.40%)</title><rect x="523.9" y="931.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="526.9" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="523.9" y="915.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="526.9" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (6 samples, 2.42%)</title><rect x="528.6" y="947.0" width="28.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="531.6" y="958.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.02%)</title><rect x="528.6" y="931.0" width="23.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="531.6" y="942.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.40%)</title><rect x="533.4" y="915.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="536.4" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="533.4" y="899.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="536.4" y="910.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.81%)</title><rect x="538.1" y="915.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="541.1" y="926.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.40%)</title><rect x="547.7" y="915.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="550.7" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.40%)</title><rect x="552.4" y="931.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.4" y="942.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.40%)</title><rect x="552.4" y="915.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.4" y="926.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.40%)</title><rect x="552.4" y="899.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="555.4" y="910.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.40%)</title><rect x="552.4" y="883.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="555.4" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="552.4" y="867.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="555.4" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (133 samples, 53.63%)</title><rect x="557.2" y="963.0" width="632.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="560.2" y="974.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (132 samples, 53.23%)</title><rect x="557.2" y="947.0" width="628.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="560.2" y="958.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (132 samples, 53.23%)</title><rect x="557.2" y="931.0" width="628.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="560.2" y="942.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (130 samples, 52.42%)</title><rect x="557.2" y="915.0" width="618.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="560.2" y="926.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (130 samples, 52.42%)</title><rect x="557.2" y="899.0" width="618.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="560.2" y="910.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (73 samples, 29.44%)</title><rect x="557.2" y="883.0" width="347.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="560.2" y="894.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.81%)</title><rect x="557.2" y="867.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="560.2" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.81%)</title><rect x="557.2" y="851.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="560.2" y="862.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.40%)</title><rect x="557.2" y="835.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="560.2" y="846.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.40%)</title><rect x="561.9" y="835.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="564.9" y="846.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.40%)</title><rect x="561.9" y="819.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="564.9" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.21%)</title><rect x="566.7" y="867.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="569.7" y="878.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.40%)</title><rect x="566.7" y="851.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="569.7" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="566.7" y="835.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="569.7" y="846.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.40%)</title><rect x="566.7" y="819.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="569.7" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="571.5" y="851.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.5" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.40%)</title><rect x="571.5" y="835.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="574.5" y="846.0"></text>
</g>
<g>
<title>loadPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.40%)</title><rect x="576.2" y="851.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="579.2" y="862.0"></text>
</g>
<g>
<title>encode_RegMem(CodeBuffer&amp;, int, int, int, int, int, relocInfo::relocType) (1 samples, 0.40%)</title><rect x="576.2" y="835.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.2" y="846.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.40%)</title><rect x="581.0" y="867.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.0" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.61%)</title><rect x="585.7" y="867.0" width="19.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.7" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.61%)</title><rect x="585.7" y="851.0" width="19.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="588.7" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.21%)</title><rect x="590.5" y="835.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="593.5" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.81%)</title><rect x="595.2" y="819.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="598.2" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="600.0" y="803.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.0" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="600.0" y="787.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.0" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="600.0" y="771.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="603.0" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.61%)</title><rect x="604.8" y="867.0" width="19.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="607.8" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.61%)</title><rect x="604.8" y="851.0" width="19.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="607.8" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 1.61%)</title><rect x="604.8" y="835.0" width="19.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.8" y="846.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.40%)</title><rect x="604.8" y="819.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.8" y="830.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 1.21%)</title><rect x="609.5" y="819.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.5" y="830.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.40%)</title><rect x="619.0" y="803.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (59 samples, 23.79%)</title><rect x="623.8" y="867.0" width="280.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="626.8" y="878.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.40%)</title><rect x="633.3" y="851.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="636.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.61%)</title><rect x="638.1" y="851.0" width="19.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="641.1" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="647.6" y="835.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="650.6" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="647.6" y="819.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="650.6" y="830.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.40%)</title><rect x="652.3" y="835.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.21%)</title><rect x="657.1" y="851.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="660.1" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="661.9" y="835.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="664.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.40%)</title><rect x="666.6" y="835.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="669.6" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="666.6" y="819.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="669.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 3.23%)</title><rect x="671.4" y="851.0" width="38.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="674.4" y="862.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.40%)</title><rect x="704.7" y="835.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="707.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 5.65%)</title><rect x="709.4" y="851.0" width="66.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="712.4" y="862.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="738.0" y="835.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.0" y="846.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.40%)</title><rect x="742.7" y="835.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.7" y="846.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.40%)</title><rect x="747.5" y="835.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="750.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.61%)</title><rect x="752.3" y="835.0" width="19.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="755.3" y="846.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="766.5" y="819.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="769.5" y="830.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.40%)</title><rect x="771.3" y="835.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="774.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.40%)</title><rect x="776.0" y="851.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.40%)</title><rect x="780.8" y="851.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.40%)</title><rect x="785.6" y="851.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.6" y="862.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="785.6" y="835.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (5 samples, 2.02%)</title><rect x="790.3" y="851.0" width="23.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="793.3" y="862.0">P..</text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="804.6" y="835.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="807.6" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="804.6" y="819.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.6" y="830.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.40%)</title><rect x="809.4" y="835.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 2.02%)</title><rect x="814.1" y="851.0" width="23.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="817.1" y="862.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.81%)</title><rect x="828.4" y="835.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="831.4" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.40%)</title><rect x="837.9" y="851.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.9" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.40%)</title><rect x="837.9" y="835.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.40%)</title><rect x="837.9" y="819.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="840.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="837.9" y="803.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="840.9" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.81%)</title><rect x="842.7" y="851.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.7" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="847.4" y="835.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="850.4" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.21%)</title><rect x="852.2" y="851.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="861.7" y="835.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="864.7" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.40%)</title><rect x="866.5" y="851.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.5" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 2.42%)</title><rect x="871.2" y="851.0" width="28.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.2" y="862.0">Ph..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.40%)</title><rect x="890.2" y="835.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.2" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="895.0" y="835.0" width="4.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="898.0" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="899.8" y="851.0" width="4.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="902.8" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 18.55%)</title><rect x="904.5" y="883.0" width="218.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="907.5" y="894.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.40%)</title><rect x="904.5" y="867.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="907.5" y="878.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.40%)</title><rect x="904.5" y="851.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="907.5" y="862.0"></text>
</g>
<g>
<title>MemBarStoreStoreNode::Opcode() const (1 samples, 0.40%)</title><rect x="904.5" y="835.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="907.5" y="846.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.40%)</title><rect x="909.3" y="867.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.3" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="914.0" y="867.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.0" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.81%)</title><rect x="918.8" y="867.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.8" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.81%)</title><rect x="918.8" y="851.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 12.50%)</title><rect x="928.3" y="867.0" width="147.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.3" y="878.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.81%)</title><rect x="928.3" y="851.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.81%)</title><rect x="928.3" y="835.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.3" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="819.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.3" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="803.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.3" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="787.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="931.3" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="771.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="755.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.3" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="739.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="931.3" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="723.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="707.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.3" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="691.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.3" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="675.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.3" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="659.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="931.3" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="643.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.3" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="627.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.3" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="611.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="595.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="931.3" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="579.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="931.3" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="563.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.3" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="547.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.3" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="531.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="515.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.3" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="499.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.3" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="928.3" y="483.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.3" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.40%)</title><rect x="928.3" y="467.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.40%)</title><rect x="928.3" y="451.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.3" y="462.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.40%)</title><rect x="928.3" y="435.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.3" y="446.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="933.1" y="819.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.40%)</title><rect x="933.1" y="803.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="936.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.40%)</title><rect x="933.1" y="787.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.40%)</title><rect x="933.1" y="771.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.21%)</title><rect x="937.8" y="851.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.8" y="862.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.40%)</title><rect x="947.3" y="835.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.61%)</title><rect x="952.1" y="851.0" width="19.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.40%)</title><rect x="961.6" y="835.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.6" y="846.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.40%)</title><rect x="966.4" y="835.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.4" y="846.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="966.4" y="819.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 4.44%)</title><rect x="971.1" y="851.0" width="52.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.1" y="862.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.61%)</title><rect x="1004.4" y="835.0" width="19.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.4" y="846.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.40%)</title><rect x="1004.4" y="819.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.21%)</title><rect x="1009.2" y="819.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.81%)</title><rect x="1009.2" y="803.0" width="9.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.81%)</title><rect x="1009.2" y="787.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1012.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.40%)</title><rect x="1018.7" y="803.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.40%)</title><rect x="1023.5" y="851.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.81%)</title><rect x="1028.2" y="851.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1031.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.21%)</title><rect x="1037.7" y="851.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 1.21%)</title><rect x="1037.7" y="835.0" width="14.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.40%)</title><rect x="1037.7" y="819.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.40%)</title><rect x="1042.5" y="819.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.40%)</title><rect x="1047.3" y="819.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.3" y="830.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1047.3" y="803.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.3" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1047.3" y="787.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.3" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1047.3" y="771.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.61%)</title><rect x="1052.0" y="851.0" width="19.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.0" y="862.0"></text>
</g>
<g>
<title>IfTrueNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1052.0" y="835.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.21%)</title><rect x="1056.8" y="835.0" width="14.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1059.8" y="846.0"></text>
</g>
<g>
<title>ClearArrayNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1056.8" y="819.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.8" y="830.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.40%)</title><rect x="1056.8" y="803.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1059.8" y="814.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.40%)</title><rect x="1061.5" y="819.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.5" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1061.5" y="803.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1064.5" y="814.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.40%)</title><rect x="1061.5" y="787.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.5" y="798.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1066.3" y="819.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.3" y="830.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.40%)</title><rect x="1071.0" y="851.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1074.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 2.42%)</title><rect x="1075.8" y="867.0" width="28.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.8" y="878.0">Ph..</text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1075.8" y="851.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.8" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.02%)</title><rect x="1080.6" y="851.0" width="23.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.6" y="862.0">P..</text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1080.6" y="835.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.6" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1080.6" y="819.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.6" y="830.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.40%)</title><rect x="1080.6" y="803.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.6" y="814.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1085.3" y="835.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.3" y="846.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1085.3" y="819.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.3" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1090.1" y="835.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.1" y="846.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1090.1" y="819.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.1" y="830.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.40%)</title><rect x="1090.1" y="803.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.1" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.40%)</title><rect x="1090.1" y="787.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.1" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1090.1" y="771.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.1" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1090.1" y="755.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.1" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.40%)</title><rect x="1090.1" y="739.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.1" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1094.8" y="835.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.8" y="846.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1099.6" y="835.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.6" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.40%)</title><rect x="1099.6" y="819.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.6" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.40%)</title><rect x="1099.6" y="803.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.6" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.40%)</title><rect x="1099.6" y="787.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.6" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1099.6" y="771.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.6" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1104.4" y="867.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1104.4" y="851.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.4" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1104.4" y="835.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.4" y="846.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1104.4" y="819.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.4" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1104.4" y="803.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.4" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1104.4" y="787.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="798.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.40%)</title><rect x="1104.4" y="771.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.40%)</title><rect x="1104.4" y="755.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.4" y="766.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.40%)</title><rect x="1109.1" y="867.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.1" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.81%)</title><rect x="1113.9" y="867.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1116.9" y="878.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.81%)</title><rect x="1123.4" y="883.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.4" y="894.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.81%)</title><rect x="1123.4" y="867.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.4" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1123.4" y="851.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1123.4" y="835.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1123.4" y="819.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1123.4" y="803.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1123.4" y="787.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1123.4" y="771.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.4" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1123.4" y="755.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.4" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1123.4" y="739.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1123.4" y="723.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1123.4" y="707.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1123.4" y="691.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1123.4" y="675.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1123.4" y="659.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1123.4" y="643.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.4" y="654.0"></text>
</g>
<g>
<title>GraphKit::GraphKit() (1 samples, 0.40%)</title><rect x="1123.4" y="627.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.1" y="627.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.1" y="611.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.1" y="595.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_newarray(BasicType) (1 samples, 0.40%)</title><rect x="1128.1" y="579.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="590.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.40%)</title><rect x="1128.1" y="563.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.1" y="574.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1128.1" y="547.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.1" y="558.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1128.1" y="531.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.42%)</title><rect x="1132.9" y="883.0" width="28.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.9" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.42%)</title><rect x="1132.9" y="867.0" width="28.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.42%)</title><rect x="1132.9" y="851.0" width="28.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.9" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.42%)</title><rect x="1132.9" y="835.0" width="28.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.42%)</title><rect x="1132.9" y="819.0" width="28.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.42%)</title><rect x="1132.9" y="803.0" width="28.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="814.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.61%)</title><rect x="1132.9" y="787.0" width="19.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.61%)</title><rect x="1132.9" y="771.0" width="19.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.61%)</title><rect x="1132.9" y="755.0" width="19.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.61%)</title><rect x="1132.9" y="739.0" width="19.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.61%)</title><rect x="1132.9" y="723.0" width="19.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.61%)</title><rect x="1132.9" y="707.0" width="19.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.61%)</title><rect x="1132.9" y="691.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.61%)</title><rect x="1132.9" y="675.0" width="19.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.9" y="686.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.40%)</title><rect x="1132.9" y="659.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="670.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.40%)</title><rect x="1132.9" y="643.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.21%)</title><rect x="1137.7" y="659.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.21%)</title><rect x="1137.7" y="643.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.21%)</title><rect x="1137.7" y="627.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.21%)</title><rect x="1137.7" y="611.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.21%)</title><rect x="1137.7" y="595.0" width="14.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.21%)</title><rect x="1137.7" y="579.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.21%)</title><rect x="1137.7" y="563.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.21%)</title><rect x="1137.7" y="547.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.21%)</title><rect x="1137.7" y="531.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.7" y="515.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.7" y="499.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.7" y="483.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.7" y="467.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.7" y="451.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.7" y="435.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.7" y="419.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.7" y="403.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.7" y="387.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.7" y="371.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.7" y="355.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.40%)</title><rect x="1137.7" y="339.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.7" y="350.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.40%)</title><rect x="1137.7" y="323.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="334.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.40%)</title><rect x="1137.7" y="307.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1137.7" y="291.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="302.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1137.7" y="275.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="286.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1137.7" y="259.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="339.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1142.4" y="323.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="307.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="291.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1142.4" y="275.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1142.4" y="259.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="243.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1142.4" y="227.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="211.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="195.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1142.4" y="179.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1142.4" y="163.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="147.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.4" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.40%)</title><rect x="1142.4" y="131.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.40%)</title><rect x="1142.4" y="115.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="126.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.40%)</title><rect x="1142.4" y="99.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="110.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.40%)</title><rect x="1142.4" y="83.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.4" y="94.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.40%)</title><rect x="1142.4" y="67.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.4" y="78.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.40%)</title><rect x="1142.4" y="51.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.40%)</title><rect x="1142.4" y="35.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="515.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="499.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="510.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.40%)</title><rect x="1147.2" y="483.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.2" y="494.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.40%)</title><rect x="1147.2" y="467.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1147.2" y="451.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.2" y="462.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.40%)</title><rect x="1147.2" y="435.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.2" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1151.9" y="787.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1151.9" y="771.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1151.9" y="755.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1151.9" y="739.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1151.9" y="723.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1151.9" y="707.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1151.9" y="691.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="675.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="659.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="643.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="627.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="611.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="595.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="579.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="563.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="547.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="531.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="515.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="499.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="483.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="467.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="451.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="435.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="419.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="403.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="387.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="371.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="355.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="339.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="323.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="307.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="291.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="275.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="259.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="243.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="227.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="211.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1151.9" y="195.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1151.9" y="179.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.40%)</title><rect x="1151.9" y="163.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="174.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.40%)</title><rect x="1151.9" y="147.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="158.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1151.9" y="131.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="142.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1151.9" y="115.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="126.0"></text>
</g>
<g>
<title>TypeAryPtr::eq(Type const*) const (1 samples, 0.40%)</title><rect x="1151.9" y="99.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.7" y="675.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.7" y="659.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1156.7" y="643.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1156.7" y="627.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1156.7" y="611.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1156.7" y="595.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1156.7" y="579.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.7" y="563.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1156.7" y="547.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1156.7" y="531.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1156.7" y="515.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1156.7" y="499.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1156.7" y="483.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.7" y="467.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1156.7" y="451.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1156.7" y="435.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1156.7" y="419.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1156.7" y="403.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1156.7" y="387.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.7" y="371.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1156.7" y="355.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1156.7" y="339.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1156.7" y="323.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1156.7" y="307.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="291.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="275.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="259.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.7" y="270.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.40%)</title><rect x="1156.7" y="243.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.7" y="254.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="227.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.7" y="238.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.40%)</title><rect x="1156.7" y="211.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1156.7" y="195.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="206.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="179.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="190.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="163.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="174.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.40%)</title><rect x="1156.7" y="147.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="158.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.40%)</title><rect x="1156.7" y="131.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.7" y="142.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1156.7" y="115.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.7" y="126.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1156.7" y="99.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="110.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.81%)</title><rect x="1161.5" y="883.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1161.5" y="867.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="878.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1166.2" y="867.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="878.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.40%)</title><rect x="1171.0" y="883.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1171.0" y="867.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="878.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.40%)</title><rect x="1171.0" y="851.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.81%)</title><rect x="1175.7" y="915.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.81%)</title><rect x="1175.7" y="899.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.81%)</title><rect x="1175.7" y="883.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.81%)</title><rect x="1175.7" y="867.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.81%)</title><rect x="1175.7" y="851.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.81%)</title><rect x="1175.7" y="835.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.81%)</title><rect x="1175.7" y="819.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.81%)</title><rect x="1175.7" y="803.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.81%)</title><rect x="1175.7" y="787.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.81%)</title><rect x="1175.7" y="771.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.81%)</title><rect x="1175.7" y="755.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.81%)</title><rect x="1175.7" y="739.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.81%)</title><rect x="1175.7" y="723.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.81%)</title><rect x="1175.7" y="707.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.81%)</title><rect x="1175.7" y="691.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1175.7" y="675.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1175.7" y="659.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1175.7" y="643.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.40%)</title><rect x="1175.7" y="627.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="638.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.40%)</title><rect x="1175.7" y="611.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.40%)</title><rect x="1175.7" y="595.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*) (1 samples, 0.40%)</title><rect x="1180.5" y="675.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="686.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.40%)</title><rect x="1180.5" y="659.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.40%)</title><rect x="1185.2" y="947.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="958.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.40%)</title><rect x="1185.2" y="931.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="942.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.40%)</title><rect x="1185.2" y="915.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.40%)</title><rect x="1185.2" y="899.0" width="4.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.40%)</title><rect x="1185.2" y="883.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.40%)</title><rect x="1185.2" y="867.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="878.0"></text>
</g>
</g>
</svg>
