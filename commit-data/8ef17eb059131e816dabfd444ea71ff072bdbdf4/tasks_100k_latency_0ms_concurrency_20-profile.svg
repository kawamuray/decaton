<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (119 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.84%)</title><rect x="10.0" y="851.0" width="9.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.84%)</title><rect x="10.0" y="835.0" width="9.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 17.65%)</title><rect x="19.9" y="851.0" width="208.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="862.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 17.65%)</title><rect x="19.9" y="835.0" width="208.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.9" y="846.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.84%)</title><rect x="19.9" y="819.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.84%)</title><rect x="19.9" y="803.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.84%)</title><rect x="19.9" y="787.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.84%)</title><rect x="19.9" y="771.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.84%)</title><rect x="19.9" y="755.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.84%)</title><rect x="19.9" y="739.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.84%)</title><rect x="19.9" y="723.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.84%)</title><rect x="19.9" y="707.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.84%)</title><rect x="19.9" y="691.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.84%)</title><rect x="19.9" y="675.0" width="9.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="22.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (15 samples, 12.61%)</title><rect x="29.8" y="819.0" width="148.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.8" y="830.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1925918303.accept (14 samples, 11.76%)</title><rect x="29.8" y="803.0" width="138.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.8" y="814.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 11.76%)</title><rect x="29.8" y="787.0" width="138.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.8" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (10 samples, 8.40%)</title><rect x="29.8" y="771.0" width="99.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.8" y="782.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (10 samples, 8.40%)</title><rect x="29.8" y="755.0" width="99.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.8" y="766.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (10 samples, 8.40%)</title><rect x="29.8" y="739.0" width="99.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.8" y="750.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 8.40%)</title><rect x="29.8" y="723.0" width="99.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.8" y="734.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 8.40%)</title><rect x="29.8" y="707.0" width="99.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.8" y="718.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 8.40%)</title><rect x="29.8" y="691.0" width="99.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.8" y="702.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 7.56%)</title><rect x="29.8" y="675.0" width="89.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.8" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.68%)</title><rect x="29.8" y="659.0" width="19.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.68%)</title><rect x="29.8" y="643.0" width="19.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.84%)</title><rect x="39.7" y="627.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.84%)</title><rect x="39.7" y="611.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.84%)</title><rect x="49.7" y="659.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.84%)</title><rect x="49.7" y="643.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.84%)</title><rect x="49.7" y="627.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 5.04%)</title><rect x="59.6" y="659.0" width="59.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.6" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 5.04%)</title><rect x="59.6" y="643.0" width="59.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.6" y="654.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 5.04%)</title><rect x="59.6" y="627.0" width="59.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.6" y="638.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 5.04%)</title><rect x="59.6" y="611.0" width="59.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.6" y="622.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 5.04%)</title><rect x="59.6" y="595.0" width="59.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.6" y="606.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 3.36%)</title><rect x="69.5" y="579.0" width="39.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="72.5" y="590.0">Uns..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.84%)</title><rect x="69.5" y="563.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="72.5" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.84%)</title><rect x="79.4" y="563.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="82.4" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.84%)</title><rect x="89.3" y="563.0" width="9.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="92.3" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.84%)</title><rect x="99.2" y="563.0" width="10.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="102.2" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.84%)</title><rect x="109.2" y="579.0" width="9.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="112.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.84%)</title><rect x="119.1" y="675.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.84%)</title><rect x="119.1" y="659.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.84%)</title><rect x="119.1" y="643.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 3.36%)</title><rect x="129.0" y="771.0" width="39.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.0" y="782.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 3.36%)</title><rect x="129.0" y="755.0" width="39.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.0" y="766.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.84%)</title><rect x="138.9" y="739.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.9" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.84%)</title><rect x="138.9" y="723.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.84%)</title><rect x="138.9" y="707.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.9" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.68%)</title><rect x="148.8" y="739.0" width="19.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="151.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.84%)</title><rect x="168.7" y="803.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.84%)</title><rect x="168.7" y="787.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.84%)</title><rect x="168.7" y="771.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.84%)</title><rect x="168.7" y="755.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.84%)</title><rect x="168.7" y="739.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.84%)</title><rect x="168.7" y="723.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 4.20%)</title><rect x="178.6" y="819.0" width="49.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 4.20%)</title><rect x="178.6" y="803.0" width="49.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="814.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.68%)</title><rect x="178.6" y="787.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.68%)</title><rect x="178.6" y="771.0" width="19.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.68%)</title><rect x="178.6" y="755.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.84%)</title><rect x="178.6" y="739.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.84%)</title><rect x="178.6" y="723.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.84%)</title><rect x="178.6" y="707.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="181.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.84%)</title><rect x="178.6" y="691.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.84%)</title><rect x="178.6" y="675.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.84%)</title><rect x="178.6" y="659.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.84%)</title><rect x="178.6" y="643.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.84%)</title><rect x="178.6" y="627.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.84%)</title><rect x="178.6" y="611.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.84%)</title><rect x="178.6" y="595.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.84%)</title><rect x="188.5" y="739.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.84%)</title><rect x="188.5" y="723.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.84%)</title><rect x="188.5" y="707.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.5" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.84%)</title><rect x="188.5" y="691.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.84%)</title><rect x="188.5" y="675.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.84%)</title><rect x="188.5" y="659.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.84%)</title><rect x="188.5" y="643.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.5" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.84%)</title><rect x="188.5" y="627.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.5" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.84%)</title><rect x="188.5" y="611.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.5" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.84%)</title><rect x="188.5" y="595.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.84%)</title><rect x="198.4" y="787.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.84%)</title><rect x="198.4" y="771.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.84%)</title><rect x="198.4" y="755.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.84%)</title><rect x="198.4" y="739.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.68%)</title><rect x="208.3" y="787.0" width="19.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.68%)</title><rect x="208.3" y="771.0" width="19.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.84%)</title><rect x="208.3" y="755.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.84%)</title><rect x="218.2" y="755.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.84%)</title><rect x="218.2" y="739.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.84%)</title><rect x="218.2" y="723.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.84%)</title><rect x="218.2" y="707.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.84%)</title><rect x="218.2" y="691.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.84%)</title><rect x="218.2" y="675.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.84%)</title><rect x="218.2" y="659.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.84%)</title><rect x="218.2" y="643.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.2" y="654.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.84%)</title><rect x="218.2" y="627.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.84%)</title><rect x="218.2" y="611.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.84%)</title><rect x="218.2" y="595.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.84%)</title><rect x="218.2" y="579.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.84%)</title><rect x="218.2" y="563.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$170/1143390810.accept (1 samples, 0.84%)</title><rect x="218.2" y="547.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.84%)</title><rect x="218.2" y="531.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (44 samples, 36.97%)</title><rect x="228.2" y="851.0" width="436.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.2" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (44 samples, 36.97%)</title><rect x="228.2" y="835.0" width="436.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.2" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (44 samples, 36.97%)</title><rect x="228.2" y="819.0" width="436.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.2" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1967437444.run (25 samples, 21.01%)</title><rect x="257.9" y="803.0" width="247.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.9" y="814.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (25 samples, 21.01%)</title><rect x="257.9" y="787.0" width="247.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.9" y="798.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (25 samples, 21.01%)</title><rect x="257.9" y="771.0" width="247.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.9" y="782.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (25 samples, 21.01%)</title><rect x="257.9" y="755.0" width="247.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.9" y="766.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 6.72%)</title><rect x="257.9" y="739.0" width="79.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.9" y="750.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 6.72%)</title><rect x="257.9" y="723.0" width="79.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.9" y="734.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 6.72%)</title><rect x="257.9" y="707.0" width="79.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.9" y="718.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 6.72%)</title><rect x="257.9" y="691.0" width="79.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.9" y="702.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 6.72%)</title><rect x="257.9" y="675.0" width="79.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.9" y="686.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 6.72%)</title><rect x="257.9" y="659.0" width="79.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.9" y="670.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.84%)</title><rect x="257.9" y="643.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.9" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.84%)</title><rect x="257.9" y="627.0" width="9.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="260.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 5.88%)</title><rect x="267.8" y="643.0" width="69.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.8" y="654.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.84%)</title><rect x="267.8" y="627.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.84%)</title><rect x="267.8" y="611.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.84%)</title><rect x="267.8" y="595.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.84%)</title><rect x="267.8" y="579.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.84%)</title><rect x="267.8" y="563.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.84%)</title><rect x="277.7" y="627.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.84%)</title><rect x="277.7" y="611.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 4.20%)</title><rect x="287.6" y="627.0" width="49.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.6" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 2.52%)</title><rect x="287.6" y="611.0" width="29.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.6" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.84%)</title><rect x="307.5" y="595.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.68%)</title><rect x="317.4" y="611.0" width="19.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.68%)</title><rect x="317.4" y="595.0" width="19.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.68%)</title><rect x="317.4" y="579.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.84%)</title><rect x="317.4" y="563.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.84%)</title><rect x="327.3" y="563.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.84%)</title><rect x="327.3" y="547.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.84%)</title><rect x="327.3" y="531.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="330.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.84%)</title><rect x="327.3" y="515.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.3" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.84%)</title><rect x="327.3" y="499.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (13 samples, 10.92%)</title><rect x="337.2" y="739.0" width="128.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.2" y="750.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 2.52%)</title><rect x="347.1" y="723.0" width="29.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.1" y="734.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 2.52%)</title><rect x="347.1" y="707.0" width="29.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="350.1" y="718.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 2.52%)</title><rect x="347.1" y="691.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.1" y="702.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.68%)</title><rect x="357.1" y="675.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.84%)</title><rect x="367.0" y="659.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.84%)</title><rect x="367.0" y="643.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (5 samples, 4.20%)</title><rect x="376.9" y="723.0" width="49.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.9" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (5 samples, 4.20%)</title><rect x="376.9" y="707.0" width="49.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.9" y="718.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.84%)</title><rect x="376.9" y="691.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.9" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.84%)</title><rect x="376.9" y="675.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.9" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.84%)</title><rect x="376.9" y="659.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.9" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.84%)</title><rect x="376.9" y="643.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.9" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.84%)</title><rect x="376.9" y="627.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.9" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.84%)</title><rect x="376.9" y="611.0" width="9.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="379.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.84%)</title><rect x="386.8" y="691.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.8" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.84%)</title><rect x="386.8" y="675.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.84%)</title><rect x="386.8" y="659.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.8" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 2.52%)</title><rect x="396.7" y="691.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.7" y="702.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 2.52%)</title><rect x="396.7" y="675.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.7" y="686.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.84%)</title><rect x="396.7" y="659.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.84%)</title><rect x="396.7" y="643.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="399.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.84%)</title><rect x="396.7" y="627.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.84%)</title><rect x="396.7" y="611.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.7" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.68%)</title><rect x="406.6" y="659.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.84%)</title><rect x="416.6" y="643.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.84%)</title><rect x="416.6" y="627.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.52%)</title><rect x="426.5" y="723.0" width="29.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="429.5" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.52%)</title><rect x="426.5" y="707.0" width="29.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="429.5" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/90565621.process (3 samples, 2.52%)</title><rect x="426.5" y="691.0" width="29.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="429.5" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.84%)</title><rect x="426.5" y="675.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.84%)</title><rect x="426.5" y="659.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.84%)</title><rect x="426.5" y="643.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.84%)</title><rect x="426.5" y="627.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.84%)</title><rect x="426.5" y="611.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.68%)</title><rect x="436.4" y="675.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.84%)</title><rect x="456.2" y="723.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 2.52%)</title><rect x="466.1" y="739.0" width="29.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.1" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 2.52%)</title><rect x="466.1" y="723.0" width="29.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.1" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 2.52%)</title><rect x="466.1" y="707.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.1" y="718.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$275/1256240786.accept (3 samples, 2.52%)</title><rect x="466.1" y="691.0" width="29.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.1" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (3 samples, 2.52%)</title><rect x="466.1" y="675.0" width="29.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.1" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/899497486.complete (3 samples, 2.52%)</title><rect x="466.1" y="659.0" width="29.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.1" y="670.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (3 samples, 2.52%)</title><rect x="466.1" y="643.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.1" y="654.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 2.52%)</title><rect x="466.1" y="627.0" width="29.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.1" y="638.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 2.52%)</title><rect x="466.1" y="611.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.1" y="622.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 2.52%)</title><rect x="466.1" y="595.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.1" y="606.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 2.52%)</title><rect x="466.1" y="579.0" width="29.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="469.1" y="590.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 2.52%)</title><rect x="466.1" y="563.0" width="29.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.1" y="574.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.84%)</title><rect x="495.9" y="739.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="498.9" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.84%)</title><rect x="495.9" y="723.0" width="9.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="498.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.84%)</title><rect x="505.8" y="803.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.84%)</title><rect x="505.8" y="787.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.84%)</title><rect x="515.7" y="803.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 10.92%)</title><rect x="525.6" y="803.0" width="128.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="528.6" y="814.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 10.08%)</title><rect x="525.6" y="787.0" width="119.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.6" y="798.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 7.56%)</title><rect x="545.5" y="771.0" width="89.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.5" y="782.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 6.72%)</title><rect x="555.4" y="755.0" width="79.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.4" y="766.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (8 samples, 6.72%)</title><rect x="555.4" y="739.0" width="79.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.4" y="750.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 6.72%)</title><rect x="555.4" y="723.0" width="79.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="558.4" y="734.0">Unsafe_Park</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.84%)</title><rect x="555.4" y="707.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="558.4" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.84%)</title><rect x="565.3" y="707.0" width="9.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="568.3" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 2.52%)</title><rect x="575.2" y="707.0" width="29.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="578.2" y="718.0">__..</text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.84%)</title><rect x="605.0" y="707.0" width="9.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="608.0" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 1.68%)</title><rect x="614.9" y="707.0" width="19.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="617.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.84%)</title><rect x="634.7" y="771.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.84%)</title><rect x="634.7" y="755.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.84%)</title><rect x="634.7" y="739.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.84%)</title><rect x="634.7" y="723.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.84%)</title><rect x="644.6" y="787.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="647.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.84%)</title><rect x="654.5" y="803.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.5" y="814.0"></text>
</g>
<g>
<title>start_thread (53 samples, 44.54%)</title><rect x="664.5" y="851.0" width="525.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="667.5" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (53 samples, 44.54%)</title><rect x="664.5" y="835.0" width="525.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="667.5" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 10.08%)</title><rect x="664.5" y="819.0" width="118.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="667.5" y="830.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 2.52%)</title><rect x="664.5" y="803.0" width="29.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="667.5" y="814.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 2.52%)</title><rect x="664.5" y="787.0" width="29.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.5" y="798.0">G1..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.84%)</title><rect x="664.5" y="771.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.5" y="782.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.68%)</title><rect x="674.4" y="771.0" width="19.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="677.4" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (9 samples, 7.56%)</title><rect x="694.2" y="803.0" width="89.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="697.2" y="814.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 6.72%)</title><rect x="694.2" y="787.0" width="79.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="697.2" y="798.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.84%)</title><rect x="723.9" y="771.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="726.9" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.84%)</title><rect x="723.9" y="755.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.9" y="766.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 2.52%)</title><rect x="733.9" y="771.0" width="29.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="736.9" y="782.0">Ge..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.84%)</title><rect x="763.6" y="771.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="766.6" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.84%)</title><rect x="773.5" y="787.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="776.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.84%)</title><rect x="773.5" y="771.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.5" y="782.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.84%)</title><rect x="773.5" y="755.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="776.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.84%)</title><rect x="773.5" y="739.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.5" y="750.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.84%)</title><rect x="773.5" y="723.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.5" y="734.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.84%)</title><rect x="773.5" y="707.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.5" y="718.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.84%)</title><rect x="773.5" y="691.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="776.5" y="702.0"></text>
</g>
<g>
<title>HeapRegion::add_strong_code_root(nmethod*) (1 samples, 0.84%)</title><rect x="773.5" y="675.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="776.5" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 34.45%)</title><rect x="783.4" y="819.0" width="406.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="786.4" y="830.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 34.45%)</title><rect x="783.4" y="803.0" width="406.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.4" y="814.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (41 samples, 34.45%)</title><rect x="783.4" y="787.0" width="406.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="786.4" y="798.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (36 samples, 30.25%)</title><rect x="783.4" y="771.0" width="357.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="786.4" y="782.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (36 samples, 30.25%)</title><rect x="783.4" y="755.0" width="357.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="786.4" y="766.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.84%)</title><rect x="783.4" y="739.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="786.4" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.84%)</title><rect x="783.4" y="723.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="786.4" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.84%)</title><rect x="783.4" y="707.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="786.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.84%)</title><rect x="783.4" y="691.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.84%)</title><rect x="783.4" y="675.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.84%)</title><rect x="783.4" y="659.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.4" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.84%)</title><rect x="783.4" y="643.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="786.4" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.84%)</title><rect x="783.4" y="627.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="786.4" y="638.0"></text>
</g>
<g>
<title>ciExceptionHandler::catch_klass() (1 samples, 0.84%)</title><rect x="783.4" y="611.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="786.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.84%)</title><rect x="783.4" y="595.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="786.4" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.84%)</title><rect x="783.4" y="579.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="786.4" y="590.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.84%)</title><rect x="783.4" y="563.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="786.4" y="574.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.84%)</title><rect x="783.4" y="547.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.4" y="558.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.84%)</title><rect x="783.4" y="531.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.4" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 15.13%)</title><rect x="793.4" y="739.0" width="178.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="796.4" y="750.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.84%)</title><rect x="793.4" y="723.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="796.4" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.84%)</title><rect x="793.4" y="707.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="796.4" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.84%)</title><rect x="803.3" y="723.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.3" y="734.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.84%)</title><rect x="803.3" y="707.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.3" y="718.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.84%)</title><rect x="803.3" y="691.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.3" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.68%)</title><rect x="813.2" y="723.0" width="19.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.2" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.68%)</title><rect x="813.2" y="707.0" width="19.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="816.2" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.68%)</title><rect x="813.2" y="691.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="816.2" y="702.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.84%)</title><rect x="813.2" y="675.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="816.2" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.84%)</title><rect x="823.1" y="675.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.1" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.84%)</title><rect x="823.1" y="659.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="826.1" y="670.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.84%)</title><rect x="823.1" y="643.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="826.1" y="654.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.84%)</title><rect x="823.1" y="627.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="826.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 11.76%)</title><rect x="833.0" y="723.0" width="138.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="836.0" y="734.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.84%)</title><rect x="833.0" y="707.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="836.0" y="718.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.84%)</title><rect x="842.9" y="707.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.9" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.84%)</title><rect x="852.9" y="707.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="855.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.84%)</title><rect x="862.8" y="707.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="865.8" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.84%)</title><rect x="862.8" y="691.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="865.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.68%)</title><rect x="872.7" y="707.0" width="19.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.84%)</title><rect x="892.5" y="707.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.84%)</title><rect x="892.5" y="691.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.84%)</title><rect x="902.4" y="707.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.84%)</title><rect x="912.4" y="707.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.68%)</title><rect x="922.3" y="707.0" width="19.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="925.3" y="718.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.84%)</title><rect x="932.2" y="691.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.68%)</title><rect x="942.1" y="707.0" width="19.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.84%)</title><rect x="952.0" y="691.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="955.0" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.84%)</title><rect x="961.9" y="707.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.9" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 10.08%)</title><rect x="971.8" y="739.0" width="119.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.8" y="750.0">Compile::Optim..</text>
</g>
<g>
<title>CastP2XNode::Opcode() const (1 samples, 0.84%)</title><rect x="971.8" y="723.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.8" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.84%)</title><rect x="981.8" y="723.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.8" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.84%)</title><rect x="981.8" y="707.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.84%)</title><rect x="991.7" y="723.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="994.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.84%)</title><rect x="991.7" y="707.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.84%)</title><rect x="991.7" y="691.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.84%)</title><rect x="991.7" y="675.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.84%)</title><rect x="991.7" y="659.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 5.88%)</title><rect x="1001.6" y="723.0" width="69.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1004.6" y="734.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.68%)</title><rect x="1001.6" y="707.0" width="19.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.6" y="718.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.84%)</title><rect x="1001.6" y="691.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.6" y="702.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.84%)</title><rect x="1001.6" y="675.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.6" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.84%)</title><rect x="1001.6" y="659.0" width="9.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1004.6" y="670.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.84%)</title><rect x="1011.5" y="691.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.84%)</title><rect x="1021.4" y="707.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.84%)</title><rect x="1021.4" y="691.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.84%)</title><rect x="1021.4" y="675.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.84%)</title><rect x="1021.4" y="659.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.84%)</title><rect x="1031.3" y="707.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.84%)</title><rect x="1031.3" y="691.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.84%)</title><rect x="1041.3" y="707.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.84%)</title><rect x="1041.3" y="691.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.84%)</title><rect x="1041.3" y="675.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.3" y="686.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.84%)</title><rect x="1041.3" y="659.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.3" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.84%)</title><rect x="1041.3" y="643.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.3" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.84%)</title><rect x="1041.3" y="627.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.3" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.68%)</title><rect x="1051.2" y="707.0" width="19.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.68%)</title><rect x="1051.2" y="691.0" width="19.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.2" y="702.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.84%)</title><rect x="1051.2" y="675.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.2" y="686.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.84%)</title><rect x="1051.2" y="659.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.84%)</title><rect x="1051.2" y="643.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.2" y="654.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.84%)</title><rect x="1061.1" y="675.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.1" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.84%)</title><rect x="1061.1" y="659.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.1" y="670.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.84%)</title><rect x="1061.1" y="643.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.1" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.84%)</title><rect x="1071.0" y="723.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.0" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.84%)</title><rect x="1071.0" y="707.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.84%)</title><rect x="1071.0" y="691.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.84%)</title><rect x="1071.0" y="675.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.0" y="686.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.84%)</title><rect x="1071.0" y="659.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.0" y="670.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.84%)</title><rect x="1080.9" y="723.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.9" y="734.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.84%)</title><rect x="1080.9" y="707.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.9" y="718.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.84%)</title><rect x="1080.9" y="691.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 4.20%)</title><rect x="1090.8" y="739.0" width="49.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.8" y="750.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 4.20%)</title><rect x="1090.8" y="723.0" width="49.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.8" y="734.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 4.20%)</title><rect x="1090.8" y="707.0" width="49.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.8" y="718.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 4.20%)</title><rect x="1090.8" y="691.0" width="49.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.8" y="702.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 4.20%)</title><rect x="1090.8" y="675.0" width="49.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.8" y="686.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 4.20%)</title><rect x="1090.8" y="659.0" width="49.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.8" y="670.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.36%)</title><rect x="1090.8" y="643.0" width="39.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.8" y="654.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.36%)</title><rect x="1090.8" y="627.0" width="39.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.8" y="638.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.36%)</title><rect x="1090.8" y="611.0" width="39.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.8" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 3.36%)</title><rect x="1090.8" y="595.0" width="39.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.8" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 3.36%)</title><rect x="1090.8" y="579.0" width="39.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.8" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 3.36%)</title><rect x="1090.8" y="563.0" width="39.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.8" y="574.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.84%)</title><rect x="1090.8" y="547.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.8" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.84%)</title><rect x="1090.8" y="531.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.8" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.84%)</title><rect x="1090.8" y="515.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.84%)</title><rect x="1090.8" y="499.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.84%)</title><rect x="1090.8" y="483.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.84%)</title><rect x="1090.8" y="467.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.84%)</title><rect x="1090.8" y="451.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.84%)</title><rect x="1090.8" y="435.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.84%)</title><rect x="1090.8" y="419.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.8" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.84%)</title><rect x="1090.8" y="403.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.8" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.84%)</title><rect x="1090.8" y="387.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.84%)</title><rect x="1090.8" y="371.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="382.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.84%)</title><rect x="1090.8" y="355.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.8" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.84%)</title><rect x="1090.8" y="339.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.8" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.84%)</title><rect x="1090.8" y="323.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.8" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.84%)</title><rect x="1090.8" y="307.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.8" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.84%)</title><rect x="1090.8" y="291.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.8" y="302.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.84%)</title><rect x="1090.8" y="275.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.8" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.84%)</title><rect x="1090.8" y="259.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.8" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.84%)</title><rect x="1090.8" y="243.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.8" y="254.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.84%)</title><rect x="1090.8" y="227.0" width="10.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1093.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.52%)</title><rect x="1100.8" y="547.0" width="29.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.8" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.52%)</title><rect x="1100.8" y="531.0" width="29.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.8" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.52%)</title><rect x="1100.8" y="515.0" width="29.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.8" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.52%)</title><rect x="1100.8" y="499.0" width="29.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.8" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.52%)</title><rect x="1100.8" y="483.0" width="29.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.8" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.52%)</title><rect x="1100.8" y="467.0" width="29.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.8" y="478.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.84%)</title><rect x="1100.8" y="451.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.8" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.84%)</title><rect x="1100.8" y="435.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.8" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.84%)</title><rect x="1100.8" y="419.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.84%)</title><rect x="1100.8" y="403.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.8" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.84%)</title><rect x="1100.8" y="387.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.8" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.84%)</title><rect x="1100.8" y="371.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.8" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.84%)</title><rect x="1100.8" y="355.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.8" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.84%)</title><rect x="1100.8" y="339.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.8" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.84%)</title><rect x="1100.8" y="323.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.8" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.84%)</title><rect x="1100.8" y="307.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.8" y="318.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.84%)</title><rect x="1100.8" y="291.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.68%)</title><rect x="1110.7" y="451.0" width="19.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.68%)</title><rect x="1110.7" y="435.0" width="19.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.68%)</title><rect x="1110.7" y="419.0" width="19.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.68%)</title><rect x="1110.7" y="403.0" width="19.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.68%)</title><rect x="1110.7" y="387.0" width="19.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.68%)</title><rect x="1110.7" y="371.0" width="19.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.68%)</title><rect x="1110.7" y="355.0" width="19.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.68%)</title><rect x="1110.7" y="339.0" width="19.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.68%)</title><rect x="1110.7" y="323.0" width="19.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.68%)</title><rect x="1110.7" y="307.0" width="19.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.68%)</title><rect x="1110.7" y="291.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.68%)</title><rect x="1110.7" y="275.0" width="19.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.68%)</title><rect x="1110.7" y="259.0" width="19.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.68%)</title><rect x="1110.7" y="243.0" width="19.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.68%)</title><rect x="1110.7" y="227.0" width="19.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.68%)</title><rect x="1110.7" y="211.0" width="19.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.68%)</title><rect x="1110.7" y="195.0" width="19.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.84%)</title><rect x="1110.7" y="179.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.84%)</title><rect x="1110.7" y="163.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.84%)</title><rect x="1110.7" y="147.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.84%)</title><rect x="1110.7" y="131.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.84%)</title><rect x="1110.7" y="115.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.84%)</title><rect x="1110.7" y="99.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="110.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.84%)</title><rect x="1110.7" y="83.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.7" y="94.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.84%)</title><rect x="1110.7" y="67.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.7" y="78.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.84%)</title><rect x="1110.7" y="51.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="62.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.84%)</title><rect x="1110.7" y="35.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.84%)</title><rect x="1120.6" y="179.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.84%)</title><rect x="1120.6" y="163.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="174.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.84%)</title><rect x="1120.6" y="147.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.6" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.84%)</title><rect x="1120.6" y="131.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="142.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.84%)</title><rect x="1120.6" y="115.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.6" y="126.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.84%)</title><rect x="1120.6" y="99.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.84%)</title><rect x="1130.5" y="643.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.84%)</title><rect x="1130.5" y="627.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.84%)</title><rect x="1130.5" y="611.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.84%)</title><rect x="1130.5" y="595.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.84%)</title><rect x="1130.5" y="579.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.84%)</title><rect x="1130.5" y="563.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.84%)</title><rect x="1130.5" y="547.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.84%)</title><rect x="1130.5" y="531.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.84%)</title><rect x="1130.5" y="515.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.84%)</title><rect x="1130.5" y="499.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.84%)</title><rect x="1130.5" y="483.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.84%)</title><rect x="1130.5" y="467.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.84%)</title><rect x="1130.5" y="451.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.84%)</title><rect x="1130.5" y="435.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.5" y="446.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.84%)</title><rect x="1130.5" y="419.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.5" y="430.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.84%)</title><rect x="1130.5" y="403.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.5" y="414.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.84%)</title><rect x="1130.5" y="387.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.5" y="398.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.84%)</title><rect x="1130.5" y="371.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.5" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.84%)</title><rect x="1130.5" y="355.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.5" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.84%)</title><rect x="1130.5" y="339.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.5" y="350.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (5 samples, 4.20%)</title><rect x="1140.4" y="771.0" width="49.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.4" y="782.0">Compi..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (5 samples, 4.20%)</title><rect x="1140.4" y="755.0" width="49.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.4" y="766.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 4.20%)</title><rect x="1140.4" y="739.0" width="49.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.4" y="750.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 4.20%)</title><rect x="1140.4" y="723.0" width="49.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.4" y="734.0">Compi..</text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 3.36%)</title><rect x="1140.4" y="707.0" width="39.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="718.0">Com..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 3.36%)</title><rect x="1140.4" y="691.0" width="39.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="702.0">IR:..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 3.36%)</title><rect x="1140.4" y="675.0" width="39.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.4" y="686.0">IRS..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 3.36%)</title><rect x="1140.4" y="659.0" width="39.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.4" y="670.0">Gra..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 3.36%)</title><rect x="1140.4" y="643.0" width="39.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="654.0">Gra..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 3.36%)</title><rect x="1140.4" y="627.0" width="39.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.4" y="638.0">Gra..</text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 3.36%)</title><rect x="1140.4" y="611.0" width="39.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="622.0">Gra..</text>
</g>
<g>
<title>Dependencies::assert_leaf_type(ciKlass*) (1 samples, 0.84%)</title><rect x="1140.4" y="595.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.4" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.68%)</title><rect x="1150.3" y="595.0" width="19.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.68%)</title><rect x="1150.3" y="579.0" width="19.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.68%)</title><rect x="1150.3" y="563.0" width="19.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.3" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.68%)</title><rect x="1150.3" y="547.0" width="19.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.84%)</title><rect x="1150.3" y="531.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.3" y="542.0"></text>
</g>
<g>
<title>Instruction::as_StateSplit() (1 samples, 0.84%)</title><rect x="1150.3" y="515.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.84%)</title><rect x="1160.3" y="531.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.3" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.84%)</title><rect x="1160.3" y="515.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.3" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.84%)</title><rect x="1160.3" y="499.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.3" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.84%)</title><rect x="1160.3" y="483.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.3" y="494.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.84%)</title><rect x="1160.3" y="467.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="478.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (1 samples, 0.84%)</title><rect x="1160.3" y="451.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="462.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.84%)</title><rect x="1160.3" y="435.0" width="9.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1163.3" y="446.0"></text>
</g>
<g>
<title>ValueStack::pop_arguments(int) (1 samples, 0.84%)</title><rect x="1170.2" y="595.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.2" y="606.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.84%)</title><rect x="1180.1" y="707.0" width="9.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.84%)</title><rect x="1180.1" y="691.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.84%)</title><rect x="1180.1" y="675.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.84%)</title><rect x="1180.1" y="659.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="670.0"></text>
</g>
</g>
</svg>
