<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (994 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (246 samples, 24.75%)</title><rect x="10.0" y="771.0" width="292.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="782.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (246 samples, 24.75%)</title><rect x="10.0" y="755.0" width="292.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.30%)</title><rect x="10.0" y="739.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.30%)</title><rect x="10.0" y="723.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="10.0" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="11.2" y="707.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="11.2" y="691.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="11.2" y="675.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="11.2" y="659.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="11.2" y="643.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="11.2" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="11.2" y="611.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="11.2" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/1914110907.test (1 samples, 0.10%)</title><rect x="11.2" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$44 (1 samples, 0.10%)</title><rect x="11.2" y="563.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.10%)</title><rect x="11.2" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="11.2" y="531.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="12.4" y="627.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.20%)</title><rect x="13.6" y="739.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.20%)</title><rect x="13.6" y="723.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="13.6" y="707.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="13.6" y="691.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="13.6" y="675.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="13.6" y="659.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="13.6" y="643.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="14.7" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="14.7" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="14.7" y="595.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/1085109241.test (1 samples, 0.10%)</title><rect x="14.7" y="579.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 18.81%)</title><rect x="15.9" y="739.0" width="222.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="750.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1709829722.accept (176 samples, 17.71%)</title><rect x="17.1" y="723.0" width="209.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="734.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (175 samples, 17.61%)</title><rect x="18.3" y="707.0" width="207.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="718.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.20%)</title><rect x="18.3" y="691.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (145 samples, 14.59%)</title><rect x="20.7" y="691.0" width="172.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.7" y="702.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (145 samples, 14.59%)</title><rect x="20.7" y="675.0" width="172.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.7" y="686.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (145 samples, 14.59%)</title><rect x="20.7" y="659.0" width="172.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="670.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (145 samples, 14.59%)</title><rect x="20.7" y="643.0" width="172.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="654.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (145 samples, 14.59%)</title><rect x="20.7" y="627.0" width="172.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="638.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="42.1" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (120 samples, 12.07%)</title><rect x="43.2" y="611.0" width="142.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.2" y="622.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (96 samples, 9.66%)</title><rect x="68.2" y="595.0" width="113.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.2" y="606.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 2.52%)</title><rect x="78.9" y="579.0" width="29.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.9" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 2.52%)</title><rect x="78.9" y="563.0" width="29.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.9" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (25 samples, 2.52%)</title><rect x="78.9" y="547.0" width="29.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.9" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (62 samples, 6.24%)</title><rect x="108.5" y="579.0" width="73.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.5" y="590.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (62 samples, 6.24%)</title><rect x="108.5" y="563.0" width="73.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.5" y="574.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (62 samples, 6.24%)</title><rect x="108.5" y="547.0" width="73.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.5" y="558.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (62 samples, 6.24%)</title><rect x="108.5" y="531.0" width="73.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.5" y="542.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (58 samples, 5.84%)</title><rect x="113.3" y="515.0" width="68.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.3" y="526.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="114.5" y="499.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="117.5" y="510.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.20%)</title><rect x="115.7" y="499.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="118.7" y="510.0"></text>
</g>
<g>
<title>Unsafe_Unpark (50 samples, 5.03%)</title><rect x="118.0" y="499.0" width="59.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="121.0" y="510.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="121.6" y="483.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.6" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_signal (30 samples, 3.02%)</title><rect x="122.8" y="483.0" width="35.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="125.8" y="494.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.60%)</title><rect x="158.4" y="483.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="161.4" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 1.01%)</title><rect x="165.5" y="483.0" width="11.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="168.5" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.30%)</title><rect x="177.4" y="499.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="180.4" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="180.9" y="499.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="183.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.30%)</title><rect x="182.1" y="595.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.30%)</title><rect x="182.1" y="579.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.30%)</title><rect x="182.1" y="563.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="185.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.30%)</title><rect x="182.1" y="547.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="184.5" y="531.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="185.7" y="611.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.10%)</title><rect x="185.7" y="595.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.10%)</title><rect x="185.7" y="579.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.10%)</title><rect x="185.7" y="563.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.7" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.50%)</title><rect x="186.9" y="611.0" width="5.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="189.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.20%)</title><rect x="192.8" y="691.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.20%)</title><rect x="192.8" y="675.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.20%)</title><rect x="195.2" y="691.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="195.2" y="675.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="195.2" y="659.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 2.41%)</title><rect x="197.6" y="691.0" width="28.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.6" y="702.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="197.6" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="200.6" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="197.6" y="659.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="200.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="197.6" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="200.6" y="654.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="197.6" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="200.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (23 samples, 2.31%)</title><rect x="198.8" y="675.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.8" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 1.01%)</title><rect x="210.6" y="659.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.6" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.70%)</title><rect x="211.8" y="643.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.8" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.70%)</title><rect x="211.8" y="627.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.8" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.70%)</title><rect x="211.8" y="611.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="216.6" y="595.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="219.6" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="216.6" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="219.6" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="217.7" y="579.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="220.7" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="217.7" y="563.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="220.7" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="217.7" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="220.7" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="217.7" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="220.7" y="542.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="217.7" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="220.7" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="218.9" y="595.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="221.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.20%)</title><rect x="220.1" y="643.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.1" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="222.5" y="659.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (10 samples, 1.01%)</title><rect x="226.1" y="723.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.91%)</title><rect x="227.2" y="707.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.91%)</title><rect x="227.2" y="691.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.91%)</title><rect x="227.2" y="675.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (9 samples, 0.91%)</title><rect x="227.2" y="659.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (9 samples, 0.91%)</title><rect x="227.2" y="643.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 5.43%)</title><rect x="237.9" y="739.0" width="64.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.9" y="750.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 5.43%)</title><rect x="237.9" y="723.0" width="64.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.9" y="734.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 3.32%)</title><rect x="237.9" y="707.0" width="39.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.9" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 3.32%)</title><rect x="237.9" y="691.0" width="39.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.9" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 3.32%)</title><rect x="237.9" y="675.0" width="39.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.9" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.62%)</title><rect x="237.9" y="659.0" width="30.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.9" y="670.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.62%)</title><rect x="237.9" y="643.0" width="30.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.9" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.41%)</title><rect x="240.3" y="627.0" width="16.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="245.1" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.10%)</title><rect x="245.1" y="595.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.91%)</title><rect x="246.2" y="611.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.91%)</title><rect x="246.2" y="595.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.91%)</title><rect x="246.2" y="579.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.91%)</title><rect x="246.2" y="563.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.91%)</title><rect x="246.2" y="547.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.91%)</title><rect x="246.2" y="531.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.91%)</title><rect x="246.2" y="515.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 1.01%)</title><rect x="256.9" y="627.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.10%)</title><rect x="258.1" y="611.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.80%)</title><rect x="259.3" y="611.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="259.3" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="262.3" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="259.3" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="262.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="259.3" y="563.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.70%)</title><rect x="260.5" y="595.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.5" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.70%)</title><rect x="260.5" y="579.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.5" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="266.4" y="563.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="269.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.30%)</title><rect x="268.8" y="659.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.30%)</title><rect x="268.8" y="643.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.10%)</title><rect x="268.8" y="627.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.8" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="268.8" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.10%)</title><rect x="268.8" y="595.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.10%)</title><rect x="268.8" y="579.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="270.0" y="627.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="270.0" y="611.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="270.0" y="595.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="270.0" y="579.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.0" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="270.0" y="563.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="273.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="271.2" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="271.2" y="563.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.2" y="574.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="271.2" y="547.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="274.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.30%)</title><rect x="272.4" y="659.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.30%)</title><rect x="272.4" y="643.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.30%)</title><rect x="272.4" y="627.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.30%)</title><rect x="272.4" y="611.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.4" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="272.4" y="595.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="275.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="273.5" y="595.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="274.7" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.7" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="274.7" y="563.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="277.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="275.9" y="659.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 1.11%)</title><rect x="277.1" y="707.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 1.01%)</title><rect x="277.1" y="691.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 1.01%)</title><rect x="277.1" y="675.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.1" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.30%)</title><rect x="278.3" y="659.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="278.3" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/333017579.accept (1 samples, 0.10%)</title><rect x="278.3" y="627.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/333017579.accept (2 samples, 0.20%)</title><rect x="279.5" y="643.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.20%)</title><rect x="279.5" y="627.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="279.5" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="279.5" y="595.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.10%)</title><rect x="279.5" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="279.5" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="279.5" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="280.7" y="611.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="280.7" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="281.9" y="659.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="281.9" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.9" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="281.9" y="627.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="281.9" y="611.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="281.9" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="281.9" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.50%)</title><rect x="283.0" y="659.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="286.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.50%)</title><rect x="283.0" y="643.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="284.2" y="627.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="284.2" y="611.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="284.2" y="595.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="284.2" y="579.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="284.2" y="563.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.2" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="284.2" y="547.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.2" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.10%)</title><rect x="284.2" y="531.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.2" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="285.4" y="547.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="286.6" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="286.6" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="286.6" y="515.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="286.6" y="499.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/1641049602.get (1 samples, 0.10%)</title><rect x="286.6" y="483.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="287.8" y="627.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="287.8" y="611.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="287.8" y="595.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="287.8" y="579.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="289.0" y="691.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.10%)</title><rect x="289.0" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.40%)</title><rect x="290.2" y="707.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.20%)</title><rect x="290.2" y="691.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="290.2" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="290.2" y="659.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="290.2" y="643.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.10%)</title><rect x="290.2" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.10%)</title><rect x="290.2" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.10%)</title><rect x="290.2" y="595.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="290.2" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="290.2" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="291.3" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="291.3" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="291.3" y="643.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.3" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="291.3" y="627.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="294.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.20%)</title><rect x="292.5" y="691.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="293.7" y="675.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="293.7" y="659.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="293.7" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="293.7" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="293.7" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="293.7" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.7" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.10%)</title><rect x="293.7" y="579.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.60%)</title><rect x="294.9" y="707.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.60%)</title><rect x="294.9" y="691.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="294.9" y="675.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1413862083.accept (1 samples, 0.10%)</title><rect x="294.9" y="659.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="294.9" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="294.9" y="627.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="294.9" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.10%)</title><rect x="294.9" y="595.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.9" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.10%)</title><rect x="294.9" y="579.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.9" y="590.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.10%)</title><rect x="294.9" y="563.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.10%)</title><rect x="296.1" y="675.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.1" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.10%)</title><rect x="296.1" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.10%)</title><rect x="296.1" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.1" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="296.1" y="627.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="299.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.40%)</title><rect x="297.3" y="675.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="297.3" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="297.3" y="643.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="297.3" y="627.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.3" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="297.3" y="611.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="300.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.30%)</title><rect x="298.5" y="659.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="298.5" y="643.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="298.5" y="627.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.5" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="298.5" y="611.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="298.5" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="298.5" y="579.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="298.5" y="563.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="298.5" y="547.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="299.7" y="611.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="299.7" y="595.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="299.7" y="579.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.7" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="299.7" y="563.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.7" y="574.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.20%)</title><rect x="299.7" y="547.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.20%)</title><rect x="299.7" y="531.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="299.7" y="515.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/981399193.test (2 samples, 0.20%)</title><rect x="299.7" y="499.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (2 samples, 0.20%)</title><rect x="299.7" y="483.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/982965103.test (2 samples, 0.20%)</title><rect x="299.7" y="467.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (2 samples, 0.20%)</title><rect x="299.7" y="451.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.20%)</title><rect x="299.7" y="435.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.20%)</title><rect x="299.7" y="419.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="299.7" y="403.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.20%)</title><rect x="299.7" y="387.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.run (659 samples, 66.30%)</title><rect x="302.0" y="771.0" width="782.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.0" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (659 samples, 66.30%)</title><rect x="302.0" y="755.0" width="782.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.0" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (659 samples, 66.30%)</title><rect x="302.0" y="739.0" width="782.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.0" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/653839909.run (452 samples, 45.47%)</title><rect x="302.0" y="723.0" width="536.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.0" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/653839909..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (452 samples, 45.47%)</title><rect x="302.0" y="707.0" width="536.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.0" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (452 samples, 45.47%)</title><rect x="302.0" y="691.0" width="536.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.0" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="306.8" y="675.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="309.8" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.60%)</title><rect x="308.0" y="675.0" width="7.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="311.0" y="686.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="308.0" y="659.0" width="7.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="311.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (438 samples, 44.06%)</title><rect x="315.1" y="675.0" width="520.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.1" y="686.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.10%)</title><rect x="325.8" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (140 samples, 14.08%)</title><rect x="327.0" y="659.0" width="166.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.0" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (140 samples, 14.08%)</title><rect x="327.0" y="643.0" width="166.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.0" y="654.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (140 samples, 14.08%)</title><rect x="327.0" y="627.0" width="166.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.0" y="638.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (140 samples, 14.08%)</title><rect x="327.0" y="611.0" width="166.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.0" y="622.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (140 samples, 14.08%)</title><rect x="327.0" y="595.0" width="166.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.0" y="606.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (140 samples, 14.08%)</title><rect x="327.0" y="579.0" width="166.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.0" y="590.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (27 samples, 2.72%)</title><rect x="338.8" y="563.0" width="32.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.8" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 2.72%)</title><rect x="338.8" y="547.0" width="32.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.8" y="558.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="338.8" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="341.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="338.8" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="341.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="338.8" y="499.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="341.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="338.8" y="483.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="341.8" y="494.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="338.8" y="467.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="341.8" y="478.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="338.8" y="451.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="341.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.62%)</title><rect x="340.0" y="531.0" width="30.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.0" y="542.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="340.0" y="515.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="343.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (22 samples, 2.21%)</title><rect x="342.4" y="515.0" width="26.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.4" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (22 samples, 2.21%)</title><rect x="342.4" y="499.0" width="26.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.4" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="368.5" y="515.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="371.5" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="368.5" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.5" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="368.5" y="483.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="371.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="368.5" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="371.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="368.5" y="451.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="371.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="368.5" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="371.5" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="368.5" y="419.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="371.5" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="368.5" y="403.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="371.5" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="368.5" y="387.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="371.5" y="398.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="368.5" y="371.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.5" y="382.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="368.5" y="355.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="371.5" y="366.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="368.5" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="371.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="369.7" y="499.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="369.7" y="483.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="369.7" y="467.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="372.7" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="369.7" y="451.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="372.7" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="369.7" y="435.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="372.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="369.7" y="419.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="372.7" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="369.7" y="403.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="372.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (94 samples, 9.46%)</title><rect x="370.9" y="563.0" width="111.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="373.9" y="574.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.50%)</title><rect x="370.9" y="547.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.50%)</title><rect x="370.9" y="531.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.20%)</title><rect x="370.9" y="515.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.20%)</title><rect x="370.9" y="499.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (3 samples, 0.30%)</title><rect x="373.3" y="515.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.10%)</title><rect x="373.3" y="499.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.20%)</title><rect x="374.4" y="499.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.80%)</title><rect x="376.8" y="547.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.80%)</title><rect x="376.8" y="531.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="382.8" y="515.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.91%)</title><rect x="386.3" y="547.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.80%)</title><rect x="387.5" y="531.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.70%)</title><rect x="387.5" y="515.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.70%)</title><rect x="387.5" y="499.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.40%)</title><rect x="391.1" y="483.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="395.8" y="515.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.70%)</title><rect x="397.0" y="547.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.70%)</title><rect x="397.0" y="531.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (7 samples, 0.70%)</title><rect x="397.0" y="515.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.40%)</title><rect x="400.6" y="499.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.40%)</title><rect x="400.6" y="483.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 6.54%)</title><rect x="405.3" y="547.0" width="77.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.3" y="558.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.41%)</title><rect x="405.3" y="531.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.40%)</title><rect x="406.5" y="515.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.40%)</title><rect x="406.5" y="499.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.40%)</title><rect x="406.5" y="483.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.70%)</title><rect x="411.2" y="515.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.20%)</title><rect x="419.6" y="515.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 5.13%)</title><rect x="421.9" y="531.0" width="60.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.9" y="542.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 5.13%)</title><rect x="421.9" y="515.0" width="60.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.9" y="526.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (47 samples, 4.73%)</title><rect x="424.3" y="499.0" width="55.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.3" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 2.01%)</title><rect x="429.1" y="483.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.1" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.70%)</title><rect x="432.6" y="467.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.70%)</title><rect x="432.6" y="451.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.70%)</title><rect x="432.6" y="435.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.50%)</title><rect x="435.0" y="419.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.70%)</title><rect x="440.9" y="467.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.30%)</title><rect x="449.2" y="467.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.30%)</title><rect x="449.2" y="451.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.30%)</title><rect x="449.2" y="435.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.80%)</title><rect x="452.8" y="483.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.80%)</title><rect x="452.8" y="467.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.80%)</title><rect x="452.8" y="451.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="455.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.80%)</title><rect x="452.8" y="435.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.80%)</title><rect x="452.8" y="419.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="462.3" y="483.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.70%)</title><rect x="463.5" y="483.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.70%)</title><rect x="463.5" y="467.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.70%)</title><rect x="463.5" y="451.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.70%)</title><rect x="463.5" y="435.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.5" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.70%)</title><rect x="463.5" y="419.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.5" y="430.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.40%)</title><rect x="464.7" y="403.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.7" y="414.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.20%)</title><rect x="467.0" y="387.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.0" y="398.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.20%)</title><rect x="469.4" y="403.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.70%)</title><rect x="471.8" y="483.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="474.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.70%)</title><rect x="471.8" y="467.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.70%)</title><rect x="471.8" y="451.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (2 samples, 0.20%)</title><rect x="480.1" y="499.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.91%)</title><rect x="482.5" y="563.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.91%)</title><rect x="482.5" y="547.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.91%)</title><rect x="482.5" y="531.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.91%)</title><rect x="482.5" y="515.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.10%)</title><rect x="487.2" y="499.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="490.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.40%)</title><rect x="488.4" y="499.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (266 samples, 26.76%)</title><rect x="493.2" y="659.0" width="315.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.2" y="670.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (54 samples, 5.43%)</title><rect x="493.2" y="643.0" width="64.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.2" y="654.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/923219335.process (2 samples, 0.20%)</title><rect x="496.7" y="627.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.7" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.93%)</title><rect x="499.1" y="627.0" width="58.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="502.1" y="638.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.93%)</title><rect x="499.1" y="611.0" width="58.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.1" y="622.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.40%)</title><rect x="500.3" y="595.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.40%)</title><rect x="500.3" y="579.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.40%)</title><rect x="500.3" y="563.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.40%)</title><rect x="500.3" y="547.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="505.0" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="508.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="505.0" y="579.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="505.0" y="563.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (43 samples, 4.33%)</title><rect x="506.2" y="595.0" width="51.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="509.2" y="606.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 1.31%)</title><rect x="541.8" y="579.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (13 samples, 1.31%)</title><rect x="541.8" y="563.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.60%)</title><rect x="550.1" y="547.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.70%)</title><rect x="557.3" y="643.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="560.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.60%)</title><rect x="558.5" y="627.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.5" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.60%)</title><rect x="558.5" y="611.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (152 samples, 15.29%)</title><rect x="565.6" y="643.0" width="180.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="568.6" y="654.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="569.1" y="627.0" width="3.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="572.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="569.1" y="611.0" width="3.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="572.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (146 samples, 14.69%)</title><rect x="572.7" y="627.0" width="173.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.7" y="638.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (48 samples, 4.83%)</title><rect x="577.4" y="611.0" width="57.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="580.4" y="622.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 4.83%)</title><rect x="577.4" y="595.0" width="57.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="580.4" y="606.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 3.42%)</title><rect x="586.9" y="579.0" width="40.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="589.9" y="590.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.71%)</title><rect x="596.4" y="563.0" width="20.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="599.4" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.71%)</title><rect x="596.4" y="547.0" width="20.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.4" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.71%)</title><rect x="596.4" y="531.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.4" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.60%)</title><rect x="604.7" y="515.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.7" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.20%)</title><rect x="605.9" y="499.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="608.9" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.20%)</title><rect x="605.9" y="483.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="608.9" y="494.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="607.1" y="467.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="610.1" y="478.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="607.1" y="451.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="610.1" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="608.3" y="499.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="608.3" y="483.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="611.3" y="494.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="608.3" y="467.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="611.3" y="478.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="608.3" y="451.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="611.3" y="462.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="609.5" y="467.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.5" y="478.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.10%)</title><rect x="610.7" y="499.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="613.7" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="611.9" y="515.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="614.9" y="526.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="615.4" y="515.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="618.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.40%)</title><rect x="616.6" y="563.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.6" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.40%)</title><rect x="621.4" y="563.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="624.4" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="626.1" y="563.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="629.1" y="574.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="627.3" y="579.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="630.3" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.50%)</title><rect x="628.5" y="579.0" width="5.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="631.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.40%)</title><rect x="634.4" y="611.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="634.4" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.4" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="634.4" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.4" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="634.4" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="637.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="634.4" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="637.4" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="634.4" y="531.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="637.4" y="542.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="634.4" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="637.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.30%)</title><rect x="635.6" y="595.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="635.6" y="579.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.6" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (90 samples, 9.05%)</title><rect x="639.2" y="611.0" width="106.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.2" y="622.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (89 samples, 8.95%)</title><rect x="640.4" y="595.0" width="105.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="643.4" y="606.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.70%)</title><rect x="640.4" y="579.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.70%)</title><rect x="640.4" y="563.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.70%)</title><rect x="640.4" y="547.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="643.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.70%)</title><rect x="640.4" y="531.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.20%)</title><rect x="648.7" y="579.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.20%)</title><rect x="648.7" y="563.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.20%)</title><rect x="648.7" y="547.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="649.9" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="652.9" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (80 samples, 8.05%)</title><rect x="651.0" y="579.0" width="95.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.0" y="590.0">java/util/C..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 6.84%)</title><rect x="665.3" y="563.0" width="80.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.3" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 3.62%)</title><rect x="703.3" y="547.0" width="42.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.3" y="558.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.20%)</title><rect x="730.6" y="531.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.80%)</title><rect x="733.0" y="531.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="736.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="740.1" y="515.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="743.1" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="740.1" y="499.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="740.1" y="483.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.1" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="740.1" y="467.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="743.1" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="740.1" y="451.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="743.1" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="741.3" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="744.3" y="462.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="741.3" y="435.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="744.3" y="446.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="742.5" y="531.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="745.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (39 samples, 3.92%)</title><rect x="746.0" y="643.0" width="46.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.0" y="654.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (39 samples, 3.92%)</title><rect x="746.0" y="627.0" width="46.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.0" y="638.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/923219335.process (19 samples, 1.91%)</title><rect x="747.2" y="611.0" width="22.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="750.2" y="622.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (19 samples, 1.91%)</title><rect x="747.2" y="595.0" width="22.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="750.2" y="606.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.81%)</title><rect x="747.2" y="579.0" width="21.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="750.2" y="590.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="753.1" y="563.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.1" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="753.1" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.1" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="753.1" y="531.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.1" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="753.1" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.80%)</title><rect x="754.3" y="563.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.3" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.80%)</title><rect x="754.3" y="547.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="757.3" y="558.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.80%)</title><rect x="754.3" y="531.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="757.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.20%)</title><rect x="763.8" y="563.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="766.2" y="563.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.10%)</title><rect x="767.4" y="563.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="770.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="768.6" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="768.6" y="563.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="768.6" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="771.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="768.6" y="531.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="771.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="769.8" y="611.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="772.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="769.8" y="595.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.8" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="773.3" y="611.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="773.3" y="595.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="773.3" y="579.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.70%)</title><rect x="774.5" y="611.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.60%)</title><rect x="775.7" y="595.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.7" y="606.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.30%)</title><rect x="776.9" y="579.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="779.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.20%)</title><rect x="780.4" y="579.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.4" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.30%)</title><rect x="782.8" y="611.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.30%)</title><rect x="782.8" y="595.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.8" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.50%)</title><rect x="786.4" y="611.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="791.1" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.1" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="791.1" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.1" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="791.1" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="791.1" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="794.1" y="558.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="791.1" y="531.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="794.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="792.3" y="643.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.31%)</title><rect x="793.5" y="643.0" width="15.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.5" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="797.1" y="627.0" width="3.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="800.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="798.2" y="611.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="801.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.70%)</title><rect x="800.6" y="627.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.70%)</title><rect x="800.6" y="611.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/499110831.accept (7 samples, 0.70%)</title><rect x="800.6" y="595.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (7 samples, 0.70%)</title><rect x="800.6" y="579.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.20%)</title><rect x="800.6" y="563.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.6" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.20%)</title><rect x="800.6" y="547.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.6" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.20%)</title><rect x="800.6" y="531.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="800.6" y="515.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="803.6" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="800.6" y="499.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="803.6" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="800.6" y="483.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="803.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="800.6" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="803.6" y="478.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="800.6" y="451.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="803.6" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="801.8" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="804.8" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.50%)</title><rect x="803.0" y="563.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.0" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.50%)</title><rect x="803.0" y="547.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.0" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="805.4" y="531.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="808.4" y="542.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="805.4" y="515.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="808.4" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.10%)</title><rect x="808.9" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.10%)</title><rect x="808.9" y="643.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/250551454.get$Lambda (1 samples, 0.10%)</title><rect x="808.9" y="627.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="808.9" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="811.9" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="808.9" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="808.9" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="811.9" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="808.9" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.21%)</title><rect x="810.1" y="659.0" width="14.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.91%)</title><rect x="813.7" y="643.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.80%)</title><rect x="814.9" y="627.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/250551454.accept (8 samples, 0.80%)</title><rect x="814.9" y="611.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (8 samples, 0.80%)</title><rect x="814.9" y="595.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1548278752.complete (8 samples, 0.80%)</title><rect x="814.9" y="579.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (8 samples, 0.80%)</title><rect x="814.9" y="563.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.80%)</title><rect x="814.9" y="547.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.9" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.80%)</title><rect x="814.9" y="531.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.9" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.80%)</title><rect x="814.9" y="515.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.9" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.80%)</title><rect x="814.9" y="499.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.9" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.80%)</title><rect x="814.9" y="483.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.9" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.91%)</title><rect x="824.4" y="659.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.4" y="670.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.91%)</title><rect x="824.4" y="643.0" width="10.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="827.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.30%)</title><rect x="835.1" y="675.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (12 samples, 1.21%)</title><rect x="838.6" y="723.0" width="14.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="841.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.21%)</title><rect x="838.6" y="707.0" width="14.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="841.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.21%)</title><rect x="838.6" y="691.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="841.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.21%)</title><rect x="838.6" y="675.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="841.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (195 samples, 19.62%)</title><rect x="852.9" y="723.0" width="231.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.9" y="734.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (195 samples, 19.62%)</title><rect x="852.9" y="707.0" width="231.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.9" y="718.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (170 samples, 17.10%)</title><rect x="860.0" y="691.0" width="201.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="863.0" y="702.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.51%)</title><rect x="870.7" y="675.0" width="17.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (146 samples, 14.69%)</title><rect x="888.5" y="675.0" width="173.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="891.5" y="686.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (144 samples, 14.49%)</title><rect x="890.8" y="659.0" width="171.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="893.8" y="670.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="896.8" y="643.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.8" y="654.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="898.0" y="643.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="899.2" y="643.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="902.2" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park (130 samples, 13.08%)</title><rect x="901.5" y="643.0" width="154.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="904.5" y="654.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.30%)</title><rect x="907.5" y="627.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="910.5" y="638.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="911.0" y="627.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="914.0" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.81%)</title><rect x="912.2" y="627.0" width="21.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.2" y="638.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.60%)</title><rect x="920.5" y="611.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="923.5" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="921.7" y="595.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="924.7" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="921.7" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="924.7" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.40%)</title><rect x="922.9" y="595.0" width="4.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="925.9" y="606.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="927.6" y="611.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="930.6" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.40%)</title><rect x="928.8" y="611.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.8" y="622.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="933.6" y="627.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.6" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="934.8" y="627.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.8" y="638.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.40%)</title><rect x="936.0" y="627.0" width="4.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="939.0" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (37 samples, 3.72%)</title><rect x="940.7" y="627.0" width="43.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="943.7" y="638.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 4.53%)</title><rect x="984.6" y="627.0" width="53.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="987.6" y="638.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.30%)</title><rect x="1038.0" y="627.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1041.0" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.20%)</title><rect x="1041.6" y="627.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1044.6" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.40%)</title><rect x="1044.0" y="627.0" width="4.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1047.0" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.40%)</title><rect x="1048.7" y="627.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1051.7" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="1053.5" y="627.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.5" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.50%)</title><rect x="1055.9" y="643.0" width="5.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1058.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.91%)</title><rect x="1061.8" y="691.0" width="22.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.8" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.91%)</title><rect x="1061.8" y="675.0" width="22.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.91%)</title><rect x="1061.8" y="659.0" width="22.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.91%)</title><rect x="1061.8" y="643.0" width="22.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1064.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.10%)</title><rect x="1083.2" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1084.3" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1087.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1084.3" y="755.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.10%)</title><rect x="1084.3" y="739.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1084.3" y="723.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1087.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.10%)</title><rect x="1084.3" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1087.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="1084.3" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="1084.3" y="675.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="1084.3" y="659.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.3" y="670.0"></text>
</g>
<g>
<title>start_thread (88 samples, 8.85%)</title><rect x="1085.5" y="771.0" width="104.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1088.5" y="782.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (88 samples, 8.85%)</title><rect x="1085.5" y="755.0" width="104.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1088.5" y="766.0">java_start(T..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 2.01%)</title><rect x="1085.5" y="739.0" width="23.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.5" y="750.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.30%)</title><rect x="1086.7" y="723.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.7" y="734.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.30%)</title><rect x="1086.7" y="707.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.7" y="718.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.20%)</title><rect x="1086.7" y="691.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.7" y="702.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="1089.1" y="691.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1092.1" y="702.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.51%)</title><rect x="1090.3" y="723.0" width="17.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.3" y="734.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.60%)</title><rect x="1090.3" y="707.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.3" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1090.3" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.3" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1090.3" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.3" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1091.5" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.5" y="702.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.40%)</title><rect x="1092.7" y="691.0" width="4.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1095.7" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.50%)</title><rect x="1097.4" y="707.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.4" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1097.4" y="691.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.4" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1097.4" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.4" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1098.6" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.6" y="686.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1098.6" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.6" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1098.6" y="643.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.6" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1098.6" y="627.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.6" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="1098.6" y="611.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.6" y="622.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="1098.6" y="595.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.6" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="1099.8" y="691.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.8" y="702.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.30%)</title><rect x="1099.8" y="675.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.40%)</title><rect x="1103.3" y="707.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.40%)</title><rect x="1103.3" y="691.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.3" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.30%)</title><rect x="1103.3" y="675.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.3" y="686.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.30%)</title><rect x="1103.3" y="659.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.3" y="670.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.30%)</title><rect x="1103.3" y="643.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.3" y="654.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.30%)</title><rect x="1103.3" y="627.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.3" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_obj_dead(oopDesc*, HeapRegion const*) const (1 samples, 0.10%)</title><rect x="1103.3" y="611.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.3" y="622.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.20%)</title><rect x="1104.5" y="611.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.5" y="622.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1104.5" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.5" y="606.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1104.5" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.5" y="590.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1105.7" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1105.7" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="590.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.10%)</title><rect x="1105.7" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="574.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1106.9" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1106.9" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.9" y="670.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1108.1" y="723.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.1" y="734.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1108.1" y="707.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.1" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.10%)</title><rect x="1108.1" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.1" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (67 samples, 6.74%)</title><rect x="1109.3" y="739.0" width="79.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.3" y="750.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (67 samples, 6.74%)</title><rect x="1109.3" y="723.0" width="79.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.3" y="734.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (67 samples, 6.74%)</title><rect x="1109.3" y="707.0" width="79.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.3" y="718.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 6.74%)</title><rect x="1109.3" y="691.0" width="79.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.3" y="702.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (67 samples, 6.74%)</title><rect x="1109.3" y="675.0" width="79.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.3" y="686.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (67 samples, 6.74%)</title><rect x="1109.3" y="659.0" width="79.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.3" y="670.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 3.32%)</title><rect x="1109.3" y="643.0" width="39.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="654.0">Com..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1109.3" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="638.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="1109.3" y="611.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.3" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.30%)</title><rect x="1110.5" y="627.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.5" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.30%)</title><rect x="1110.5" y="611.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.5" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1112.8" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.8" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1112.8" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.8" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1112.8" y="563.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.8" y="574.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="1112.8" y="547.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.8" y="558.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.10%)</title><rect x="1112.8" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.40%)</title><rect x="1114.0" y="627.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.0" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.40%)</title><rect x="1114.0" y="611.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="595.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.0" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.10%)</title><rect x="1114.0" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.0" y="590.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.10%)</title><rect x="1114.0" y="563.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.0" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1114.0" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1114.0" y="531.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.0" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1114.0" y="515.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.0" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.10%)</title><rect x="1114.0" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.30%)</title><rect x="1115.2" y="595.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.10%)</title><rect x="1117.6" y="579.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 2.52%)</title><rect x="1118.8" y="627.0" width="29.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="638.0">Ph..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.10%)</title><rect x="1118.8" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1120.0" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.0" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1120.0" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.0" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1120.0" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1121.1" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.1" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1121.1" y="595.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.1" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1121.1" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.10%)</title><rect x="1122.3" y="611.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 1.01%)</title><rect x="1123.5" y="611.0" width="11.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="622.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.10%)</title><rect x="1127.1" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.1" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1128.3" y="595.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.30%)</title><rect x="1130.6" y="595.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.6" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1133.0" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.0" y="590.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="1134.2" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="1135.4" y="611.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="622.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1135.4" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.4" y="606.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.10%)</title><rect x="1136.6" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.30%)</title><rect x="1137.8" y="611.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.10%)</title><rect x="1140.1" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.1" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1141.3" y="611.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.3" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1142.5" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.5" y="622.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1142.5" y="595.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.5" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.10%)</title><rect x="1142.5" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.5" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.10%)</title><rect x="1142.5" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.5" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.20%)</title><rect x="1143.7" y="611.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.7" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1143.7" y="595.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.7" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="1146.1" y="611.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.1" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1147.3" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.3" y="606.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.10%)</title><rect x="1148.5" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.5" y="654.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 2.72%)</title><rect x="1149.6" y="643.0" width="32.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.6" y="654.0">Co..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1149.6" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.6" y="638.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1149.6" y="611.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.6" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1149.6" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.6" y="606.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1149.6" y="579.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.20%)</title><rect x="1150.8" y="627.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.20%)</title><rect x="1150.8" y="611.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.10%)</title><rect x="1150.8" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.8" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.10%)</title><rect x="1150.8" y="579.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.8" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1150.8" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="574.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.10%)</title><rect x="1150.8" y="547.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="558.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.10%)</title><rect x="1150.8" y="531.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.8" y="542.0"></text>
</g>
<g>
<title>ciCallTypeData::translate_from(ProfileData const*) (1 samples, 0.10%)</title><rect x="1150.8" y="515.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1150.8" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1152.0" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.10%)</title><rect x="1152.0" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.0" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1153.2" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.2" y="638.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1153.2" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.2" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1154.4" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.4" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1154.4" y="611.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.4" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.10%)</title><rect x="1154.4" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.4" y="606.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.10%)</title><rect x="1154.4" y="579.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 1.51%)</title><rect x="1155.6" y="627.0" width="17.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1155.6" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1156.8" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1156.8" y="595.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1156.8" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.60%)</title><rect x="1157.9" y="611.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.60%)</title><rect x="1157.9" y="595.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1157.9" y="579.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.50%)</title><rect x="1159.1" y="579.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.20%)</title><rect x="1165.1" y="611.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1166.3" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.10%)</title><rect x="1167.4" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1167.4" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.10%)</title><rect x="1167.4" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1167.4" y="563.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.10%)</title><rect x="1167.4" y="547.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.30%)</title><rect x="1168.6" y="611.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.20%)</title><rect x="1169.8" y="595.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1169.8" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="590.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1169.8" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.8" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.0" y="579.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1171.0" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1172.2" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1172.2" y="595.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.2" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1172.2" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="574.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.2" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.50%)</title><rect x="1173.4" y="627.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.40%)</title><rect x="1174.6" y="611.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="622.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.6" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.6" y="606.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.10%)</title><rect x="1174.6" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="590.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1175.8" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1175.8" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.10%)</title><rect x="1175.8" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="574.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1175.8" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1175.8" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1175.8" y="515.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1175.8" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1175.8" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1175.8" y="467.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1175.8" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="462.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1176.9" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.10%)</title><rect x="1176.9" y="579.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1178.1" y="595.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1178.1" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="563.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="531.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="515.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="499.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="483.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="467.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="451.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="419.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="403.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="387.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="371.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="355.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="339.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="323.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="307.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="291.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="259.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="270.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1178.1" y="243.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="254.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1178.1" y="227.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="238.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1179.3" y="627.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.10%)</title><rect x="1179.3" y="611.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.10%)</title><rect x="1179.3" y="595.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1179.3" y="579.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1179.3" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1180.5" y="627.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.10%)</title><rect x="1180.5" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.10%)</title><rect x="1180.5" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.50%)</title><rect x="1181.7" y="643.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.50%)</title><rect x="1181.7" y="627.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.50%)</title><rect x="1181.7" y="611.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.50%)</title><rect x="1181.7" y="595.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.50%)</title><rect x="1181.7" y="579.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.50%)</title><rect x="1181.7" y="563.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1181.7" y="547.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1181.7" y="531.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1181.7" y="515.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1181.7" y="499.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1181.7" y="483.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.7" y="467.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.7" y="451.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="435.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.7" y="419.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.7" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.7" y="387.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.7" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.7" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.7" y="339.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1181.7" y="323.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.7" y="291.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.7" y="275.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.7" y="259.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.7" y="243.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.7" y="227.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1181.7" y="211.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.10%)</title><rect x="1181.7" y="195.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="451.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="435.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="419.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="355.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="339.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="323.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="307.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="291.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="275.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="259.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="243.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1182.9" y="227.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.10%)</title><rect x="1182.9" y="211.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1182.9" y="195.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1182.9" y="179.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="190.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1182.9" y="163.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1185.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1184.1" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="435.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1184.1" y="419.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1184.1" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1184.1" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1184.1" y="371.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.10%)</title><rect x="1184.1" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1185.3" y="547.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1185.3" y="531.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1185.3" y="515.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1185.3" y="499.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1185.3" y="483.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1185.3" y="467.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1185.3" y="451.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1185.3" y="435.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1185.3" y="419.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1185.3" y="403.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1185.3" y="387.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1185.3" y="371.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1185.3" y="355.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1185.3" y="339.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1185.3" y="323.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1185.3" y="307.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1185.3" y="291.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1185.3" y="275.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1185.3" y="259.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1185.3" y="243.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1185.3" y="227.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1185.3" y="211.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1185.3" y="195.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1185.3" y="179.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1185.3" y="163.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1185.3" y="147.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1185.3" y="131.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1185.3" y="115.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1185.3" y="99.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1185.3" y="83.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="67.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1185.3" y="51.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="62.0"></text>
</g>
<g>
<title>GraphKit::builtin_throw(Deoptimization::DeoptReason, Node*) (1 samples, 0.10%)</title><rect x="1185.3" y="35.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.3" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.10%)</title><rect x="1186.4" y="67.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.4" y="78.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1186.4" y="51.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="62.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1187.6" y="643.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.6" y="654.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1187.6" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="654.0"></text>
</g>
<g>
<title>oop_Relocation::unpack_data() (1 samples, 0.10%)</title><rect x="1188.8" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="638.0"></text>
</g>
</g>
</svg>
