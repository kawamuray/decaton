<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (151 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 20.53%)</title><rect x="10.0" y="739.0" width="242.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.66%)</title><rect x="10.0" y="723.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.66%)</title><rect x="10.0" y="707.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.66%)</title><rect x="10.0" y="691.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.66%)</title><rect x="10.0" y="675.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.66%)</title><rect x="10.0" y="659.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.66%)</title><rect x="10.0" y="643.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 19.87%)</title><rect x="17.8" y="723.0" width="234.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="734.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 1.32%)</title><rect x="17.8" y="707.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 1.32%)</title><rect x="17.8" y="691.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.66%)</title><rect x="25.6" y="675.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.66%)</title><rect x="25.6" y="659.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.66%)</title><rect x="25.6" y="643.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.66%)</title><rect x="25.6" y="627.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.66%)</title><rect x="25.6" y="611.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.66%)</title><rect x="25.6" y="595.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.66%)</title><rect x="25.6" y="579.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 12.58%)</title><rect x="33.4" y="707.0" width="148.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.4" y="718.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1612081961.accept (19 samples, 12.58%)</title><rect x="33.4" y="691.0" width="148.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.4" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 12.58%)</title><rect x="33.4" y="675.0" width="148.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.4" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (15 samples, 9.93%)</title><rect x="33.4" y="659.0" width="117.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.4" y="670.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (15 samples, 9.93%)</title><rect x="33.4" y="643.0" width="117.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.4" y="654.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (15 samples, 9.93%)</title><rect x="33.4" y="627.0" width="117.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.4" y="638.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (15 samples, 9.93%)</title><rect x="33.4" y="611.0" width="117.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.4" y="622.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 9.93%)</title><rect x="33.4" y="595.0" width="117.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.4" y="606.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (15 samples, 9.93%)</title><rect x="33.4" y="579.0" width="117.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.4" y="590.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 7.95%)</title><rect x="33.4" y="563.0" width="93.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.4" y="574.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.99%)</title><rect x="33.4" y="547.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.4" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.99%)</title><rect x="33.4" y="531.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.4" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 5.96%)</title><rect x="56.9" y="547.0" width="70.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.9" y="558.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 5.96%)</title><rect x="56.9" y="531.0" width="70.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.9" y="542.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 5.96%)</title><rect x="56.9" y="515.0" width="70.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.9" y="526.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 5.96%)</title><rect x="56.9" y="499.0" width="70.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.9" y="510.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (9 samples, 5.96%)</title><rect x="56.9" y="483.0" width="70.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.9" y="494.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 5.96%)</title><rect x="56.9" y="467.0" width="70.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="59.9" y="478.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.97%)</title><rect x="56.9" y="451.0" width="46.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="59.9" y="462.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 1.99%)</title><rect x="103.8" y="451.0" width="23.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="106.8" y="462.0">p..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.99%)</title><rect x="127.2" y="563.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="130.2" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.99%)</title><rect x="127.2" y="547.0" width="23.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.2" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.99%)</title><rect x="127.2" y="531.0" width="23.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="130.2" y="542.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.66%)</title><rect x="150.7" y="659.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.66%)</title><rect x="150.7" y="643.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.66%)</title><rect x="150.7" y="627.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.99%)</title><rect x="158.5" y="659.0" width="23.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.5" y="670.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.99%)</title><rect x="158.5" y="643.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.5" y="654.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.66%)</title><rect x="174.1" y="627.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.1" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.66%)</title><rect x="174.1" y="611.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.1" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.66%)</title><rect x="174.1" y="595.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.66%)</title><rect x="174.1" y="579.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="177.1" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.66%)</title><rect x="174.1" y="563.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="177.1" y="574.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.66%)</title><rect x="174.1" y="547.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="177.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.96%)</title><rect x="181.9" y="707.0" width="70.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.9" y="718.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.96%)</title><rect x="181.9" y="691.0" width="70.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.9" y="702.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.31%)</title><rect x="181.9" y="675.0" width="39.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.9" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 3.31%)</title><rect x="181.9" y="659.0" width="39.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.9" y="670.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.66%)</title><rect x="181.9" y="643.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.66%)</title><rect x="181.9" y="627.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="184.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.66%)</title><rect x="181.9" y="611.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.99%)</title><rect x="189.7" y="643.0" width="23.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.7" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.99%)</title><rect x="189.7" y="627.0" width="23.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.7" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.99%)</title><rect x="189.7" y="611.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.7" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.32%)</title><rect x="189.7" y="595.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.66%)</title><rect x="197.5" y="579.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.66%)</title><rect x="197.5" y="563.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.66%)</title><rect x="197.5" y="547.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.66%)</title><rect x="197.5" y="531.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.66%)</title><rect x="197.5" y="515.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.66%)</title><rect x="197.5" y="499.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.66%)</title><rect x="197.5" y="483.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.66%)</title><rect x="197.5" y="467.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.66%)</title><rect x="205.4" y="595.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.66%)</title><rect x="205.4" y="579.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.66%)</title><rect x="205.4" y="563.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.4" y="574.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.66%)</title><rect x="205.4" y="547.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.66%)</title><rect x="213.2" y="643.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.66%)</title><rect x="213.2" y="627.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.66%)</title><rect x="213.2" y="611.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.2" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.66%)</title><rect x="213.2" y="595.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.66%)</title><rect x="213.2" y="579.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.66%)</title><rect x="213.2" y="563.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.2" y="574.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.66%)</title><rect x="213.2" y="547.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.66%)</title><rect x="221.0" y="675.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.66%)</title><rect x="221.0" y="659.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.66%)</title><rect x="221.0" y="643.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.66%)</title><rect x="221.0" y="627.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.66%)</title><rect x="221.0" y="611.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.66%)</title><rect x="221.0" y="595.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.0" y="606.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.66%)</title><rect x="221.0" y="579.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.66%)</title><rect x="221.0" y="563.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.66%)</title><rect x="221.0" y="547.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.0" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.66%)</title><rect x="221.0" y="531.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.32%)</title><rect x="228.8" y="675.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.32%)</title><rect x="228.8" y="659.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.66%)</title><rect x="228.8" y="643.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.66%)</title><rect x="228.8" y="627.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.66%)</title><rect x="228.8" y="611.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.66%)</title><rect x="228.8" y="595.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.66%)</title><rect x="228.8" y="579.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.66%)</title><rect x="228.8" y="563.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.66%)</title><rect x="228.8" y="547.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.66%)</title><rect x="228.8" y="531.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.66%)</title><rect x="228.8" y="515.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.66%)</title><rect x="228.8" y="499.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.66%)</title><rect x="228.8" y="483.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.66%)</title><rect x="228.8" y="467.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.readableRecords (1 samples, 0.66%)</title><rect x="228.8" y="451.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.&lt;init&gt; (1 samples, 0.66%)</title><rect x="228.8" y="435.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecords.&lt;init&gt; (1 samples, 0.66%)</title><rect x="228.8" y="419.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.8" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.66%)</title><rect x="228.8" y="403.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.66%)</title><rect x="236.6" y="643.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.66%)</title><rect x="236.6" y="627.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.66%)</title><rect x="236.6" y="611.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.66%)</title><rect x="236.6" y="595.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.66%)</title><rect x="236.6" y="579.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.66%)</title><rect x="236.6" y="563.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.66%)</title><rect x="236.6" y="547.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.66%)</title><rect x="236.6" y="531.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.66%)</title><rect x="236.6" y="515.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.6" y="526.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.66%)</title><rect x="236.6" y="499.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="239.6" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.66%)</title><rect x="236.6" y="483.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="239.6" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.66%)</title><rect x="236.6" y="467.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="239.6" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.66%)</title><rect x="236.6" y="451.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="239.6" y="462.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.66%)</title><rect x="236.6" y="435.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="239.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.66%)</title><rect x="236.6" y="419.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="239.6" y="430.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.66%)</title><rect x="236.6" y="403.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="239.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.66%)</title><rect x="244.4" y="675.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.66%)</title><rect x="244.4" y="659.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.66%)</title><rect x="244.4" y="643.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.66%)</title><rect x="244.4" y="627.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.66%)</title><rect x="244.4" y="611.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (56 samples, 37.09%)</title><rect x="252.3" y="739.0" width="437.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.3" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (56 samples, 37.09%)</title><rect x="252.3" y="723.0" width="437.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.3" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (56 samples, 37.09%)</title><rect x="252.3" y="707.0" width="437.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.3" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2038354488.run (36 samples, 23.84%)</title><rect x="260.1" y="691.0" width="281.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.1" y="702.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (36 samples, 23.84%)</title><rect x="260.1" y="675.0" width="281.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.1" y="686.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (36 samples, 23.84%)</title><rect x="260.1" y="659.0" width="281.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.1" y="670.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (34 samples, 22.52%)</title><rect x="260.1" y="643.0" width="265.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.1" y="654.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 9.27%)</title><rect x="260.1" y="627.0" width="109.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.1" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (14 samples, 9.27%)</title><rect x="260.1" y="611.0" width="109.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.1" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 9.27%)</title><rect x="260.1" y="595.0" width="109.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.1" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 9.27%)</title><rect x="260.1" y="579.0" width="109.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.1" y="590.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 9.27%)</title><rect x="260.1" y="563.0" width="109.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.1" y="574.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 9.27%)</title><rect x="260.1" y="547.0" width="109.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.1" y="558.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.65%)</title><rect x="260.1" y="531.0" width="31.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.1" y="542.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.66%)</title><rect x="260.1" y="515.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.66%)</title><rect x="260.1" y="499.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.66%)</title><rect x="260.1" y="483.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.99%)</title><rect x="267.9" y="515.0" width="23.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.9" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.99%)</title><rect x="267.9" y="499.0" width="23.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.9" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.32%)</title><rect x="267.9" y="483.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.66%)</title><rect x="283.5" y="483.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.66%)</title><rect x="283.5" y="467.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.64%)</title><rect x="291.3" y="531.0" width="54.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.3" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.66%)</title><rect x="291.3" y="515.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.66%)</title><rect x="291.3" y="499.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.66%)</title><rect x="299.1" y="515.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.66%)</title><rect x="299.1" y="499.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.66%)</title><rect x="299.1" y="483.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 3.31%)</title><rect x="307.0" y="515.0" width="39.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.0" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.32%)</title><rect x="307.0" y="499.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.66%)</title><rect x="307.0" y="483.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.66%)</title><rect x="307.0" y="467.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.66%)</title><rect x="307.0" y="451.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.66%)</title><rect x="307.0" y="435.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.66%)</title><rect x="314.8" y="483.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.66%)</title><rect x="314.8" y="467.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.66%)</title><rect x="314.8" y="451.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.99%)</title><rect x="322.6" y="499.0" width="23.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.6" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.99%)</title><rect x="322.6" y="483.0" width="23.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.6" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.99%)</title><rect x="322.6" y="467.0" width="23.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.6" y="478.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.32%)</title><rect x="330.4" y="451.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.66%)</title><rect x="338.2" y="435.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.66%)</title><rect x="338.2" y="419.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.66%)</title><rect x="338.2" y="403.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.66%)</title><rect x="338.2" y="387.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.99%)</title><rect x="346.0" y="531.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.0" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.99%)</title><rect x="346.0" y="515.0" width="23.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.0" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.99%)</title><rect x="346.0" y="499.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.0" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.99%)</title><rect x="346.0" y="483.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.0" y="494.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.66%)</title><rect x="361.7" y="467.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (19 samples, 12.58%)</title><rect x="369.5" y="627.0" width="148.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.5" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.66%)</title><rect x="369.5" y="611.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.5" y="622.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.66%)</title><rect x="369.5" y="595.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.66%)</title><rect x="369.5" y="579.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.66%)</title><rect x="369.5" y="563.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="372.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.66%)</title><rect x="369.5" y="547.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="372.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.66%)</title><rect x="369.5" y="531.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 9.93%)</title><rect x="377.3" y="611.0" width="117.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.3" y="622.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.66%)</title><rect x="377.3" y="595.0" width="7.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="380.3" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.66%)</title><rect x="377.3" y="579.0" width="7.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="380.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 9.27%)</title><rect x="385.1" y="595.0" width="109.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.1" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.65%)</title><rect x="400.7" y="579.0" width="31.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.7" y="590.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.65%)</title><rect x="400.7" y="563.0" width="31.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.7" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.65%)</title><rect x="400.7" y="547.0" width="31.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.7" y="558.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.66%)</title><rect x="424.2" y="531.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.2" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.66%)</title><rect x="424.2" y="515.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.2" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.66%)</title><rect x="424.2" y="499.0" width="7.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="427.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 1.99%)</title><rect x="432.0" y="579.0" width="23.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.0" y="590.0">j..</text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.66%)</title><rect x="432.0" y="563.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 1.32%)</title><rect x="439.8" y="563.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 1.32%)</title><rect x="439.8" y="547.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.8" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 3.31%)</title><rect x="455.4" y="579.0" width="39.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.4" y="590.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 3.31%)</title><rect x="455.4" y="563.0" width="39.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="458.4" y="574.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.66%)</title><rect x="455.4" y="547.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.66%)</title><rect x="455.4" y="531.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.66%)</title><rect x="455.4" y="515.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.66%)</title><rect x="455.4" y="499.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.65%)</title><rect x="463.2" y="547.0" width="31.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.2" y="558.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.99%)</title><rect x="471.1" y="531.0" width="23.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.1" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.32%)</title><rect x="478.9" y="515.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.66%)</title><rect x="486.7" y="499.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 1.99%)</title><rect x="494.5" y="611.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.5" y="622.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 1.99%)</title><rect x="494.5" y="595.0" width="23.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="497.5" y="606.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/117397272.process (1 samples, 0.66%)</title><rect x="494.5" y="579.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.66%)</title><rect x="494.5" y="563.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.66%)</title><rect x="494.5" y="547.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.66%)</title><rect x="502.3" y="579.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.66%)</title><rect x="502.3" y="563.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.66%)</title><rect x="510.1" y="579.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="513.1" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.66%)</title><rect x="510.1" y="563.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="513.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.66%)</title><rect x="510.1" y="547.0" width="7.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="513.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.66%)</title><rect x="517.9" y="627.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.66%)</title><rect x="517.9" y="611.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.66%)</title><rect x="517.9" y="595.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1412969451.accept (1 samples, 0.66%)</title><rect x="517.9" y="579.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="520.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.66%)</title><rect x="517.9" y="563.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.66%)</title><rect x="517.9" y="547.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.9" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.66%)</title><rect x="517.9" y="531.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.9" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.66%)</title><rect x="517.9" y="515.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.66%)</title><rect x="525.8" y="643.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.66%)</title><rect x="525.8" y="627.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.8" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.66%)</title><rect x="525.8" y="611.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="528.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.66%)</title><rect x="533.6" y="643.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="536.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.32%)</title><rect x="541.4" y="691.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="544.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.66%)</title><rect x="549.2" y="675.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="552.2" y="686.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.66%)</title><rect x="549.2" y="659.0" width="7.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="552.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.66%)</title><rect x="557.0" y="691.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="560.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.66%)</title><rect x="557.0" y="675.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.66%)</title><rect x="557.0" y="659.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 10.60%)</title><rect x="564.8" y="691.0" width="125.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.8" y="702.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 10.60%)</title><rect x="564.8" y="675.0" width="125.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.8" y="686.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 7.95%)</title><rect x="572.6" y="659.0" width="93.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.6" y="670.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.32%)</title><rect x="580.5" y="643.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.32%)</title><rect x="580.5" y="627.0" width="15.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.32%)</title><rect x="580.5" y="611.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.32%)</title><rect x="580.5" y="595.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 5.96%)</title><rect x="596.1" y="643.0" width="70.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="599.1" y="654.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 5.96%)</title><rect x="596.1" y="627.0" width="70.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="599.1" y="638.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 5.30%)</title><rect x="603.9" y="611.0" width="62.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="606.9" y="622.0">Unsafe..</text>
</g>
<g>
<title>BarrierSet::write_barrier(oopDesc*) (1 samples, 0.66%)</title><rect x="603.9" y="595.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="606.9" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.32%)</title><rect x="611.7" y="595.0" width="15.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="614.7" y="606.0"></text>
</g>
<g>
<title>_init (1 samples, 0.66%)</title><rect x="619.5" y="579.0" width="7.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="622.5" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.32%)</title><rect x="627.4" y="595.0" width="15.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="630.4" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.99%)</title><rect x="643.0" y="595.0" width="23.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="646.0" y="606.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.99%)</title><rect x="666.4" y="659.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.99%)</title><rect x="666.4" y="643.0" width="23.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.99%)</title><rect x="666.4" y="627.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.4" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.99%)</title><rect x="666.4" y="611.0" width="23.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="669.4" y="622.0">j..</text>
</g>
<g>
<title>start_thread (64 samples, 42.38%)</title><rect x="689.9" y="739.0" width="500.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="692.9" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (64 samples, 42.38%)</title><rect x="689.9" y="723.0" width="500.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="692.9" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 9.93%)</title><rect x="689.9" y="707.0" width="117.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.9" y="718.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.32%)</title><rect x="689.9" y="691.0" width="15.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.9" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.32%)</title><rect x="689.9" y="675.0" width="15.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.9" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.66%)</title><rect x="689.9" y="659.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="692.9" y="670.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.66%)</title><rect x="697.7" y="659.0" width="7.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="700.7" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 8.61%)</title><rect x="705.5" y="691.0" width="101.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="708.5" y="702.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 7.95%)</title><rect x="705.5" y="675.0" width="93.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="708.5" y="686.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 5.30%)</title><rect x="713.3" y="659.0" width="62.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="716.3" y="670.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 3.31%)</title><rect x="728.9" y="643.0" width="39.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="731.9" y="654.0">G1P..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.66%)</title><rect x="760.2" y="627.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="763.2" y="638.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.66%)</title><rect x="760.2" y="611.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="763.2" y="622.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_range_nv(oopDesc*, G1ParScanClosure*, int, int) (1 samples, 0.66%)</title><rect x="768.0" y="643.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.0" y="654.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.66%)</title><rect x="768.0" y="627.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.0" y="638.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.32%)</title><rect x="775.8" y="659.0" width="15.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.8" y="670.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.66%)</title><rect x="791.5" y="659.0" width="7.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="794.5" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.66%)</title><rect x="799.3" y="675.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="802.3" y="686.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.66%)</title><rect x="799.3" y="659.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.66%)</title><rect x="799.3" y="643.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="802.3" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.66%)</title><rect x="799.3" y="627.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.3" y="638.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (1 samples, 0.66%)</title><rect x="799.3" y="611.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="802.3" y="622.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.66%)</title><rect x="799.3" y="595.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="802.3" y="606.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) [clone .part.174] (1 samples, 0.66%)</title><rect x="799.3" y="579.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.3" y="590.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.66%)</title><rect x="799.3" y="563.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="802.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.66%)</title><rect x="799.3" y="547.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.3" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (49 samples, 32.45%)</title><rect x="807.1" y="707.0" width="382.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="810.1" y="718.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (49 samples, 32.45%)</title><rect x="807.1" y="691.0" width="382.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="810.1" y="702.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (49 samples, 32.45%)</title><rect x="807.1" y="675.0" width="382.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.1" y="686.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (47 samples, 31.13%)</title><rect x="807.1" y="659.0" width="367.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="810.1" y="670.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (47 samples, 31.13%)</title><rect x="807.1" y="643.0" width="367.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.1" y="654.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 18.54%)</title><rect x="807.1" y="627.0" width="218.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="810.1" y="638.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.66%)</title><rect x="807.1" y="611.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.1" y="622.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.66%)</title><rect x="807.1" y="595.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="810.1" y="606.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.66%)</title><rect x="807.1" y="579.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.1" y="590.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.66%)</title><rect x="807.1" y="563.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="810.1" y="574.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.66%)</title><rect x="807.1" y="547.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.1" y="558.0"></text>
</g>
<g>
<title>MacroAssembler::jump_cc(Assembler::Condition, AddressLiteral) (1 samples, 0.66%)</title><rect x="807.1" y="531.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.1" y="542.0"></text>
</g>
<g>
<title>runtime_call_Relocation::type() (1 samples, 0.66%)</title><rect x="807.1" y="515.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="810.1" y="526.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.32%)</title><rect x="814.9" y="611.0" width="15.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.9" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.66%)</title><rect x="814.9" y="595.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.9" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.66%)</title><rect x="814.9" y="579.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="817.9" y="590.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.66%)</title><rect x="822.7" y="595.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.7" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.99%)</title><rect x="830.5" y="611.0" width="23.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.5" y="622.0">M..</text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.66%)</title><rect x="830.5" y="595.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.5" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.32%)</title><rect x="838.3" y="595.0" width="15.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.3" y="606.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.66%)</title><rect x="838.3" y="579.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.3" y="590.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.66%)</title><rect x="846.2" y="579.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="849.2" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.66%)</title><rect x="846.2" y="563.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.2" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.66%)</title><rect x="846.2" y="547.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.2" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.66%)</title><rect x="846.2" y="531.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.2" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.66%)</title><rect x="846.2" y="515.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="849.2" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.99%)</title><rect x="854.0" y="611.0" width="23.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="857.0" y="622.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.99%)</title><rect x="854.0" y="595.0" width="23.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.0" y="606.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.32%)</title><rect x="861.8" y="579.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="864.8" y="590.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 1.32%)</title><rect x="861.8" y="563.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 12.58%)</title><rect x="877.4" y="611.0" width="148.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="880.4" y="622.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.65%)</title><rect x="877.4" y="595.0" width="31.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="880.4" y="606.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.66%)</title><rect x="893.0" y="579.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="896.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.66%)</title><rect x="893.0" y="563.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.0" y="574.0"></text>
</g>
<g>
<title>MachProjNode::size_of() const (1 samples, 0.66%)</title><rect x="893.0" y="547.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.0" y="558.0"></text>
</g>
<g>
<title>membar_storestoreNode::out_RegMask() const (1 samples, 0.66%)</title><rect x="900.9" y="579.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 2.65%)</title><rect x="908.7" y="595.0" width="31.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.7" y="606.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.66%)</title><rect x="924.3" y="579.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="927.3" y="590.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.66%)</title><rect x="932.1" y="579.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.66%)</title><rect x="939.9" y="595.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.66%)</title><rect x="947.7" y="595.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="950.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.66%)</title><rect x="955.6" y="595.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.6" y="606.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.66%)</title><rect x="955.6" y="579.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.32%)</title><rect x="963.4" y="595.0" width="15.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.32%)</title><rect x="979.0" y="595.0" width="15.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.32%)</title><rect x="979.0" y="579.0" width="15.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.0" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.32%)</title><rect x="994.6" y="595.0" width="15.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.6" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.32%)</title><rect x="994.6" y="579.0" width="15.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.6" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.66%)</title><rect x="1010.3" y="595.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.3" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.66%)</title><rect x="1010.3" y="579.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.3" y="590.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.66%)</title><rect x="1018.1" y="595.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.1" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 9.27%)</title><rect x="1025.9" y="627.0" width="109.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.9" y="638.0">Compile::Opti..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.66%)</title><rect x="1025.9" y="611.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.66%)</title><rect x="1025.9" y="595.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 4.64%)</title><rect x="1033.7" y="611.0" width="54.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.7" y="622.0">Phase..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.66%)</title><rect x="1033.7" y="595.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.32%)</title><rect x="1041.5" y="595.0" width="15.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1044.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.66%)</title><rect x="1057.2" y="595.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.66%)</title><rect x="1057.2" y="579.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.32%)</title><rect x="1065.0" y="595.0" width="15.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.32%)</title><rect x="1065.0" y="579.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.32%)</title><rect x="1065.0" y="563.0" width="15.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.66%)</title><rect x="1072.8" y="547.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.66%)</title><rect x="1080.6" y="595.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.66%)</title><rect x="1088.4" y="611.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.4" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.66%)</title><rect x="1088.4" y="595.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.99%)</title><rect x="1096.2" y="611.0" width="23.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.2" y="622.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.99%)</title><rect x="1096.2" y="595.0" width="23.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.2" y="606.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.66%)</title><rect x="1096.2" y="579.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.2" y="590.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.66%)</title><rect x="1096.2" y="563.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.2" y="574.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.66%)</title><rect x="1096.2" y="547.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.2" y="558.0"></text>
</g>
<g>
<title>ShenandoahBarrierNode::skip_through_barrier(Node*) (1 samples, 0.66%)</title><rect x="1096.2" y="531.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.2" y="542.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.32%)</title><rect x="1104.0" y="579.0" width="15.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.0" y="590.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.66%)</title><rect x="1111.9" y="563.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.9" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.66%)</title><rect x="1119.7" y="611.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.7" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.66%)</title><rect x="1119.7" y="595.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.7" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.66%)</title><rect x="1119.7" y="579.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.7" y="590.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.66%)</title><rect x="1127.5" y="611.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.66%)</title><rect x="1127.5" y="595.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="606.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.66%)</title><rect x="1127.5" y="579.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.5" y="590.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.66%)</title><rect x="1127.5" y="563.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.31%)</title><rect x="1135.3" y="627.0" width="39.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="638.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.31%)</title><rect x="1135.3" y="611.0" width="39.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.3" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.31%)</title><rect x="1135.3" y="595.0" width="39.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.3" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.31%)</title><rect x="1135.3" y="579.0" width="39.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.31%)</title><rect x="1135.3" y="563.0" width="39.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.3" y="574.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.31%)</title><rect x="1135.3" y="547.0" width="39.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.3" y="558.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.32%)</title><rect x="1135.3" y="531.0" width="15.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.32%)</title><rect x="1135.3" y="515.0" width="15.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.32%)</title><rect x="1135.3" y="499.0" width="15.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.32%)</title><rect x="1135.3" y="483.0" width="15.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.32%)</title><rect x="1135.3" y="467.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.3" y="478.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.66%)</title><rect x="1135.3" y="451.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.3" y="462.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.66%)</title><rect x="1135.3" y="435.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.3" y="446.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.66%)</title><rect x="1135.3" y="419.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.66%)</title><rect x="1135.3" y="403.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.3" y="414.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.66%)</title><rect x="1135.3" y="387.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.3" y="398.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.66%)</title><rect x="1135.3" y="371.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1143.1" y="451.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="462.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1143.1" y="435.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="446.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.66%)</title><rect x="1143.1" y="419.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_array_copyOf(bool) (1 samples, 0.66%)</title><rect x="1143.1" y="403.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.1" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.32%)</title><rect x="1150.9" y="531.0" width="15.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1150.9" y="515.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1150.9" y="499.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1150.9" y="483.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1150.9" y="467.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1150.9" y="451.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1150.9" y="435.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1150.9" y="419.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1150.9" y="403.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1150.9" y="387.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1150.9" y="371.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1150.9" y="355.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1150.9" y="339.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1150.9" y="323.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1150.9" y="307.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1150.9" y="291.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1150.9" y="275.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1150.9" y="259.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1150.9" y="243.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.9" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.66%)</title><rect x="1150.9" y="227.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.9" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.66%)</title><rect x="1150.9" y="211.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.9" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.66%)</title><rect x="1150.9" y="195.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.9" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.66%)</title><rect x="1150.9" y="179.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.9" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.66%)</title><rect x="1150.9" y="163.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.66%)</title><rect x="1150.9" y="147.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.9" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.66%)</title><rect x="1150.9" y="131.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.66%)</title><rect x="1150.9" y="115.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.9" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.66%)</title><rect x="1150.9" y="99.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.9" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.66%)</title><rect x="1150.9" y="83.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.9" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.66%)</title><rect x="1150.9" y="67.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.66%)</title><rect x="1150.9" y="51.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="62.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.66%)</title><rect x="1150.9" y="35.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1158.7" y="515.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1158.7" y="499.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1158.7" y="483.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1158.7" y="467.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1158.7" y="451.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.7" y="462.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.66%)</title><rect x="1158.7" y="435.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.66%)</title><rect x="1166.6" y="531.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.66%)</title><rect x="1166.6" y="515.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.6" y="526.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.66%)</title><rect x="1174.4" y="659.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>__strlen_sse2_pminub (1 samples, 0.66%)</title><rect x="1174.4" y="643.0" width="7.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1177.4" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.66%)</title><rect x="1182.2" y="659.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.66%)</title><rect x="1182.2" y="643.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.66%)</title><rect x="1182.2" y="627.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.66%)</title><rect x="1182.2" y="611.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.66%)</title><rect x="1182.2" y="595.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.66%)</title><rect x="1182.2" y="579.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.66%)</title><rect x="1182.2" y="563.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.66%)</title><rect x="1182.2" y="547.0" width="7.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
</g>
</svg>
