<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,233 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="11.0" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="11.0" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (255 samples, 20.68%)</title><rect x="11.9" y="2035.0" width="244.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.9" y="2046.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.08%)</title><rect x="12.9" y="2019.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="12.9" y="2003.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="12.9" y="1987.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.08%)</title><rect x="12.9" y="1971.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.08%)</title><rect x="12.9" y="1955.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="12.9" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="12.9" y="1923.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="12.9" y="1907.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="12.9" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="12.9" y="1875.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="12.9" y="1859.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="12.9" y="1843.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="12.9" y="1827.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="12.9" y="1811.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (252 samples, 20.44%)</title><rect x="13.8" y="2019.0" width="241.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.8" y="2030.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="13.8" y="2003.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="16.8" y="2014.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="13.8" y="1987.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.24%)</title><rect x="15.7" y="2003.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.24%)</title><rect x="15.7" y="1987.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1868016132.accept (1 samples, 0.08%)</title><rect x="17.7" y="1971.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.08%)</title><rect x="17.7" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="17.7" y="1939.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.7" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="17.7" y="1923.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="18.6" y="2003.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="18.6" y="1987.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="18.6" y="1971.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="18.6" y="1955.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="19.6" y="2003.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="19.6" y="1987.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="19.6" y="1971.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="19.6" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.6" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (189 samples, 15.33%)</title><rect x="20.5" y="2003.0" width="180.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.5" y="2014.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/35877640.accept (185 samples, 15.00%)</title><rect x="20.5" y="1987.0" width="177.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.5" y="1998.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (184 samples, 14.92%)</title><rect x="21.5" y="1971.0" width="176.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.5" y="1982.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (141 samples, 11.44%)</title><rect x="21.5" y="1955.0" width="134.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (141 samples, 11.44%)</title><rect x="21.5" y="1939.0" width="134.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.5" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (141 samples, 11.44%)</title><rect x="21.5" y="1923.0" width="134.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.5" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 11.44%)</title><rect x="21.5" y="1907.0" width="134.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.5" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 11.44%)</title><rect x="21.5" y="1891.0" width="134.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (141 samples, 11.44%)</title><rect x="21.5" y="1875.0" width="134.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (92 samples, 7.46%)</title><rect x="56.9" y="1859.0" width="88.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.9" y="1870.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.14%)</title><rect x="56.9" y="1843.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.14%)</title><rect x="56.9" y="1827.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.14%)</title><rect x="56.9" y="1811.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.41%)</title><rect x="70.3" y="1843.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.41%)</title><rect x="70.3" y="1827.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="71.2" y="1811.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.2" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="71.2" y="1795.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="74.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.16%)</title><rect x="73.2" y="1811.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 5.92%)</title><rect x="75.1" y="1843.0" width="69.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.1" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 5.92%)</title><rect x="75.1" y="1827.0" width="69.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.1" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="76.0" y="1811.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (68 samples, 5.52%)</title><rect x="77.0" y="1811.0" width="65.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.0" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 5.52%)</title><rect x="77.0" y="1795.0" width="65.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (67 samples, 5.43%)</title><rect x="77.9" y="1779.0" width="64.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.9" y="1790.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 5.03%)</title><rect x="78.9" y="1763.0" width="59.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="81.9" y="1774.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.32%)</title><rect x="78.9" y="1747.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="81.9" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.33%)</title><rect x="82.7" y="1747.0" width="39.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="85.7" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.32%)</title><rect x="122.0" y="1747.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="125.0" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.05%)</title><rect x="125.8" y="1747.0" width="12.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="128.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="138.2" y="1763.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="141.2" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="139.2" y="1763.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="142.2" y="1774.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="140.2" y="1763.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="143.2" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="141.1" y="1763.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="144.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.24%)</title><rect x="142.1" y="1811.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.32%)</title><rect x="144.9" y="1859.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.32%)</title><rect x="144.9" y="1843.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.32%)</title><rect x="144.9" y="1827.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="147.8" y="1811.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.57%)</title><rect x="148.8" y="1859.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.57%)</title><rect x="148.8" y="1843.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (7 samples, 0.57%)</title><rect x="148.8" y="1827.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="149.7" y="1811.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (5 samples, 0.41%)</title><rect x="150.7" y="1811.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.7" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="155.5" y="1859.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="158.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.08%)</title><rect x="156.4" y="1955.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="156.4" y="1939.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.4" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.32%)</title><rect x="157.4" y="1955.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.4" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.32%)</title><rect x="157.4" y="1939.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.4" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.32%)</title><rect x="157.4" y="1923.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (38 samples, 3.08%)</title><rect x="161.2" y="1955.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.2" y="1966.0">com..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="161.2" y="1939.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (34 samples, 2.76%)</title><rect x="162.2" y="1939.0" width="32.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.2" y="1950.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (18 samples, 1.46%)</title><rect x="176.5" y="1923.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.73%)</title><rect x="176.5" y="1907.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.73%)</title><rect x="176.5" y="1891.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.73%)</title><rect x="176.5" y="1875.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="179.4" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="182.4" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="179.4" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="182.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="179.4" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="182.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="179.4" y="1811.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="182.4" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="179.4" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="182.4" y="1806.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="179.4" y="1779.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="182.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="179.4" y="1763.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="182.4" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="179.4" y="1747.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="182.4" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="180.3" y="1859.0" width="4.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="183.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.24%)</title><rect x="185.1" y="1907.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.49%)</title><rect x="188.0" y="1907.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.0" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="193.7" y="1923.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="196.7" y="1934.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="194.7" y="1939.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.7" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="194.7" y="1923.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="197.7" y="1934.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="194.7" y="1907.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="197.7" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="194.7" y="1891.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="197.7" y="1902.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="195.7" y="1939.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="198.7" y="1950.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="196.6" y="1939.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="199.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.32%)</title><rect x="197.6" y="1987.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.32%)</title><rect x="197.6" y="1971.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.32%)</title><rect x="197.6" y="1955.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.32%)</title><rect x="197.6" y="1939.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (4 samples, 0.32%)</title><rect x="197.6" y="1923.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.32%)</title><rect x="197.6" y="1907.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.54%)</title><rect x="201.4" y="2003.0" width="53.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.4" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.54%)</title><rect x="201.4" y="1987.0" width="53.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.4" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.08%)</title><rect x="201.4" y="1971.0" width="36.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.4" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="201.4" y="1955.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="201.4" y="1939.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.4" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="201.4" y="1923.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="204.4" y="1934.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="201.4" y="1907.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="204.4" y="1918.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.08%)</title><rect x="201.4" y="1891.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="204.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.08%)</title><rect x="201.4" y="1875.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="204.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.00%)</title><rect x="202.4" y="1955.0" width="35.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.4" y="1966.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="202.4" y="1939.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.4" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="202.4" y="1923.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="202.4" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 2.92%)</title><rect x="203.3" y="1939.0" width="34.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.3" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.35%)</title><rect x="203.3" y="1923.0" width="27.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.3" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.35%)</title><rect x="203.3" y="1907.0" width="27.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.3" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 0.89%)</title><rect x="207.1" y="1891.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.32%)</title><rect x="207.1" y="1875.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.32%)</title><rect x="207.1" y="1859.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.32%)</title><rect x="207.1" y="1843.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.32%)</title><rect x="207.1" y="1827.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.32%)</title><rect x="207.1" y="1811.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.32%)</title><rect x="207.1" y="1795.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.32%)</title><rect x="207.1" y="1779.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.57%)</title><rect x="211.0" y="1875.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.57%)</title><rect x="211.0" y="1859.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.08%)</title><rect x="216.7" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="216.7" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarint (1 samples, 0.08%)</title><rect x="216.7" y="1811.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readUnsignedVarint (1 samples, 0.08%)</title><rect x="216.7" y="1795.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.7" y="1806.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="216.7" y="1779.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="216.7" y="1763.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="219.7" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="216.7" y="1747.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="219.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="216.7" y="1731.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="219.7" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="216.7" y="1715.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="219.7" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.14%)</title><rect x="217.7" y="1891.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.14%)</title><rect x="217.7" y="1875.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.32%)</title><rect x="217.7" y="1859.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.32%)</title><rect x="217.7" y="1843.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.7" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="220.5" y="1827.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="223.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (9 samples, 0.73%)</title><rect x="221.5" y="1859.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.73%)</title><rect x="221.5" y="1843.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.5" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="228.2" y="1827.0" width="1.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="231.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="230.1" y="1859.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="230.1" y="1843.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.1" y="1854.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="230.1" y="1827.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="233.1" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="230.1" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="233.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.32%)</title><rect x="231.1" y="1923.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.1" y="1934.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.08%)</title><rect x="231.1" y="1907.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="234.1" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="231.1" y="1891.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="234.1" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="231.1" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="234.1" y="1886.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="231.1" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="234.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.24%)</title><rect x="232.0" y="1907.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="232.0" y="1891.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="232.0" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="233.0" y="1891.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="233.0" y="1875.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="233.0" y="1859.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="233.9" y="1843.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.9" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="233.9" y="1827.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="236.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="234.9" y="1923.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="234.9" y="1907.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.16%)</title><rect x="234.9" y="1891.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="234.9" y="1875.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="236.8" y="1923.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="236.8" y="1907.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="236.8" y="1891.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.8" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="236.8" y="1875.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="236.8" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.73%)</title><rect x="237.8" y="1971.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.73%)</title><rect x="237.8" y="1955.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.73%)</title><rect x="237.8" y="1939.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="237.8" y="1923.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/488084351.accept (2 samples, 0.16%)</title><rect x="237.8" y="1907.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.16%)</title><rect x="237.8" y="1891.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.16%)</title><rect x="237.8" y="1875.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="237.8" y="1859.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="237.8" y="1843.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="238.7" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="238.7" y="1843.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.7" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="238.7" y="1827.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="238.7" y="1811.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="239.7" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="240.6" y="1923.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="240.6" y="1907.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="240.6" y="1891.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="240.6" y="1875.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="240.6" y="1859.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="240.6" y="1843.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.08%)</title><rect x="240.6" y="1827.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="241.6" y="1923.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="241.6" y="1907.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="244.6" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="241.6" y="1891.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="241.6" y="1875.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="241.6" y="1859.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.32%)</title><rect x="242.6" y="1923.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.32%)</title><rect x="242.6" y="1907.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="243.5" y="1891.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="243.5" y="1875.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.24%)</title><rect x="243.5" y="1859.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="243.5" y="1843.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="243.5" y="1827.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="243.5" y="1811.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="243.5" y="1795.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="243.5" y="1779.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.5" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="244.5" y="1763.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.5" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="244.5" y="1747.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/1995361045.test (1 samples, 0.08%)</title><rect x="244.5" y="1731.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="245.4" y="1811.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.4" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="245.4" y="1795.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="245.4" y="1779.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="245.4" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.4" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/2136288211.get (1 samples, 0.08%)</title><rect x="245.4" y="1747.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.08%)</title><rect x="246.4" y="1971.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="246.4" y="1955.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="246.4" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="246.4" y="1923.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="246.4" y="1907.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="246.4" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="246.4" y="1875.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="246.4" y="1859.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="246.4" y="1843.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.4" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="246.4" y="1827.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.4" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="246.4" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.4" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="246.4" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.4" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="246.4" y="1779.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.4" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.41%)</title><rect x="247.3" y="1971.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.32%)</title><rect x="248.3" y="1955.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.32%)</title><rect x="248.3" y="1939.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.24%)</title><rect x="249.3" y="1923.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="251.2" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="251.2" y="1891.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="251.2" y="1875.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.08%)</title><rect x="251.2" y="1859.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="251.2" y="1843.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="251.2" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (3 samples, 0.24%)</title><rect x="252.1" y="1971.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="252.1" y="1955.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="252.1" y="1939.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="253.1" y="1923.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.16%)</title><rect x="253.1" y="1907.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.1" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="254.0" y="1891.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="257.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="255.0" y="2019.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.0" y="2030.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.08%)</title><rect x="255.0" y="2003.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="258.0" y="2014.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="255.0" y="1987.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="258.0" y="1998.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="255.0" y="1971.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="258.0" y="1982.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="255.0" y="1955.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="258.0" y="1966.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="255.0" y="1939.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="258.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.run (700 samples, 56.77%)</title><rect x="256.0" y="2035.0" width="669.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.0" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (700 samples, 56.77%)</title><rect x="256.0" y="2019.0" width="669.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.0" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (700 samples, 56.77%)</title><rect x="256.0" y="2003.0" width="669.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.0" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1826420464.run (474 samples, 38.44%)</title><rect x="259.8" y="1987.0" width="453.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$2..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (474 samples, 38.44%)</title><rect x="259.8" y="1971.0" width="453.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.8" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$pu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (474 samples, 38.44%)</title><rect x="259.8" y="1955.0" width="453.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.8" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (468 samples, 37.96%)</title><rect x="259.8" y="1939.0" width="447.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.8" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedu..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.41%)</title><rect x="273.2" y="1923.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (169 samples, 13.71%)</title><rect x="278.0" y="1923.0" width="161.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.0" y="1934.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (169 samples, 13.71%)</title><rect x="278.0" y="1907.0" width="161.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.0" y="1918.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (169 samples, 13.71%)</title><rect x="278.0" y="1891.0" width="161.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.0" y="1902.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="278.0" y="1875.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="281.0" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="278.9" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="281.9" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="278.9" y="1843.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="281.9" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="278.9" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="281.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 13.54%)</title><rect x="279.9" y="1875.0" width="159.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.9" y="1886.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 13.54%)</title><rect x="279.9" y="1859.0" width="159.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.9" y="1870.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 13.54%)</title><rect x="279.9" y="1843.0" width="159.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.9" y="1854.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (62 samples, 5.03%)</title><rect x="279.9" y="1827.0" width="59.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.9" y="1838.0">com/fa..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="296.1" y="1811.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="299.1" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.89%)</title><rect x="297.1" y="1811.0" width="10.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="300.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.65%)</title><rect x="300.0" y="1795.0" width="7.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="303.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.89%)</title><rect x="307.6" y="1811.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.65%)</title><rect x="309.5" y="1795.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="312.4" y="1779.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="312.4" y="1763.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.4" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="312.4" y="1747.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="312.4" y="1731.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="317.2" y="1795.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.70%)</title><rect x="318.2" y="1811.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 0.41%)</title><rect x="333.5" y="1795.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.24%)</title><rect x="333.5" y="1779.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.24%)</title><rect x="333.5" y="1763.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="336.3" y="1779.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.08%)</title><rect x="336.3" y="1763.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.08%)</title><rect x="336.3" y="1747.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.3" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="336.3" y="1731.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="339.3" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="336.3" y="1715.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="339.3" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="336.3" y="1699.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="339.3" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="336.3" y="1683.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="339.3" y="1694.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="336.3" y="1667.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="339.3" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="336.3" y="1651.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="339.3" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="337.3" y="1779.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="340.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="337.3" y="1763.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="340.3" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="337.3" y="1747.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="340.3" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="337.3" y="1731.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="340.3" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="337.3" y="1715.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="340.3" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="337.3" y="1699.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="340.3" y="1710.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="338.3" y="1811.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="341.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (98 samples, 7.95%)</title><rect x="339.2" y="1827.0" width="93.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.2" y="1838.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="340.2" y="1811.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.08%)</title><rect x="341.1" y="1811.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.16%)</title><rect x="342.1" y="1811.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.24%)</title><rect x="344.0" y="1811.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="345.0" y="1795.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="348.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.05%)</title><rect x="346.9" y="1811.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.97%)</title><rect x="347.8" y="1795.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.57%)</title><rect x="350.7" y="1779.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.49%)</title><rect x="351.7" y="1763.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.24%)</title><rect x="354.5" y="1747.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="357.4" y="1779.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.65%)</title><rect x="359.3" y="1811.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="361.2" y="1795.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="364.2" y="1806.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="362.2" y="1795.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="365.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="362.2" y="1779.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="365.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.32%)</title><rect x="363.1" y="1795.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (67 samples, 5.43%)</title><rect x="367.0" y="1811.0" width="64.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.0" y="1822.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.05%)</title><rect x="367.0" y="1795.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.32%)</title><rect x="367.9" y="1779.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.32%)</title><rect x="367.9" y="1763.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.32%)</title><rect x="367.9" y="1747.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.41%)</title><rect x="371.8" y="1779.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.24%)</title><rect x="376.5" y="1779.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.24%)</title><rect x="376.5" y="1763.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="379.4" y="1795.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.22%)</title><rect x="381.3" y="1795.0" width="49.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.3" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.22%)</title><rect x="381.3" y="1779.0" width="49.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.3" y="1790.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (51 samples, 4.14%)</title><rect x="382.3" y="1763.0" width="48.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.3" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.89%)</title><rect x="389.0" y="1747.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.32%)</title><rect x="391.8" y="1731.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.32%)</title><rect x="391.8" y="1715.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.32%)</title><rect x="391.8" y="1699.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="393.8" y="1683.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="396.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="395.7" y="1731.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="397.6" y="1731.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="397.6" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="398.5" y="1731.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.97%)</title><rect x="399.5" y="1747.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.81%)</title><rect x="401.4" y="1731.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.81%)</title><rect x="401.4" y="1715.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.81%)</title><rect x="401.4" y="1699.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.81%)</title><rect x="401.4" y="1683.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="411.0" y="1747.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.49%)</title><rect x="412.9" y="1747.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.49%)</title><rect x="412.9" y="1731.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.49%)</title><rect x="412.9" y="1715.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.49%)</title><rect x="412.9" y="1699.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.49%)</title><rect x="412.9" y="1683.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.9" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="412.9" y="1667.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.9" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor9.newInstance (6 samples, 0.49%)</title><rect x="412.9" y="1651.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="417.7" y="1635.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.41%)</title><rect x="418.6" y="1747.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.6" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.41%)</title><rect x="418.6" y="1731.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="421.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.41%)</title><rect x="418.6" y="1715.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.24%)</title><rect x="420.6" y="1699.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.65%)</title><rect x="423.4" y="1747.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.16%)</title><rect x="431.1" y="1811.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.57%)</title><rect x="433.0" y="1827.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.41%)</title><rect x="434.9" y="1811.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="437.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.41%)</title><rect x="434.9" y="1795.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="437.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.41%)</title><rect x="434.9" y="1779.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="437.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="434.9" y="1763.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (261 samples, 21.17%)</title><rect x="439.7" y="1923.0" width="249.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.7" y="1934.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (44 samples, 3.57%)</title><rect x="439.7" y="1907.0" width="42.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.7" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="439.7" y="1891.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.7" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.49%)</title><rect x="440.7" y="1891.0" width="41.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.7" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 3.33%)</title><rect x="442.6" y="1875.0" width="39.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.6" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.65%)</title><rect x="445.4" y="1859.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.65%)</title><rect x="445.4" y="1843.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.65%)</title><rect x="445.4" y="1827.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.65%)</title><rect x="445.4" y="1811.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="451.2" y="1795.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="451.2" y="1779.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (30 samples, 2.43%)</title><rect x="453.1" y="1859.0" width="28.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="456.1" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 1.78%)</title><rect x="460.8" y="1843.0" width="21.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.8" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.49%)</title><rect x="476.1" y="1827.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="481.8" y="1907.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="481.8" y="1891.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.24%)</title><rect x="481.8" y="1875.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (156 samples, 12.65%)</title><rect x="484.7" y="1907.0" width="149.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.7" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (156 samples, 12.65%)</title><rect x="484.7" y="1891.0" width="149.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.7" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="490.4" y="1875.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="493.4" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="490.4" y="1859.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.4" y="1870.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="491.4" y="1875.0" width="6.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="494.4" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="494.2" y="1859.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="497.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (46 samples, 3.73%)</title><rect x="498.1" y="1875.0" width="44.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.1" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.68%)</title><rect x="504.8" y="1859.0" width="31.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.8" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.60%)</title><rect x="505.7" y="1843.0" width="30.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.30%)</title><rect x="512.4" y="1827.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.30%)</title><rect x="512.4" y="1811.0" width="15.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.30%)</title><rect x="512.4" y="1795.0" width="15.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.57%)</title><rect x="516.3" y="1779.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.32%)</title><rect x="516.3" y="1763.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="519.3" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="516.3" y="1747.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="519.3" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.16%)</title><rect x="517.2" y="1747.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="520.2" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="519.1" y="1747.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="522.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="519.1" y="1731.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="522.1" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="519.1" y="1715.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="522.1" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="520.1" y="1763.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.1" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="521.0" y="1763.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="524.0" y="1774.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.08%)</title><rect x="521.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="524.0" y="1758.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="522.0" y="1763.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="525.0" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="523.0" y="1779.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="526.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="527.7" y="1827.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.7" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="529.7" y="1827.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="532.7" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="532.5" y="1827.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="535.5" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="536.4" y="1859.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="539.4" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="537.3" y="1859.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="540.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="542.1" y="1875.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.32%)</title><rect x="544.0" y="1875.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.32%)</title><rect x="544.0" y="1859.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="544.0" y="1843.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="546.9" y="1827.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.9" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (90 samples, 7.30%)</title><rect x="547.8" y="1875.0" width="86.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.8" y="1886.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (88 samples, 7.14%)</title><rect x="549.8" y="1859.0" width="84.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.8" y="1870.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.49%)</title><rect x="549.8" y="1843.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.49%)</title><rect x="549.8" y="1827.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.49%)</title><rect x="549.8" y="1811.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.49%)</title><rect x="549.8" y="1795.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.8" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.08%)</title><rect x="554.5" y="1779.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.5" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="554.5" y="1763.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.5" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (82 samples, 6.65%)</title><rect x="555.5" y="1843.0" width="78.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.5" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (77 samples, 6.24%)</title><rect x="560.3" y="1827.0" width="73.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="563.3" y="1838.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (50 samples, 4.06%)</title><rect x="586.1" y="1811.0" width="47.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="589.1" y="1822.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="608.1" y="1795.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="611.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (22 samples, 1.78%)</title><rect x="610.0" y="1795.0" width="21.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.0" y="1806.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.24%)</title><rect x="628.2" y="1779.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="631.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.24%)</title><rect x="628.2" y="1763.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="631.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="628.2" y="1747.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="629.2" y="1747.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="632.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="629.2" y="1731.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="632.2" y="1742.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="629.2" y="1715.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="632.2" y="1726.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="629.2" y="1699.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="632.2" y="1710.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="630.1" y="1715.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.1" y="1726.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.24%)</title><rect x="631.1" y="1795.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="634.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 3.41%)</title><rect x="634.0" y="1907.0" width="40.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.0" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (42 samples, 3.41%)</title><rect x="634.0" y="1891.0" width="40.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.0" y="1902.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/227827484.process (25 samples, 2.03%)</title><rect x="634.0" y="1875.0" width="23.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.0" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (25 samples, 2.03%)</title><rect x="634.0" y="1859.0" width="23.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.0" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.22%)</title><rect x="637.8" y="1843.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.8" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="646.4" y="1827.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.4" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="646.4" y="1811.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.24%)</title><rect x="646.4" y="1795.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.24%)</title><rect x="646.4" y="1779.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="648.3" y="1763.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="651.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="648.3" y="1747.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="651.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.24%)</title><rect x="649.3" y="1827.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.3" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="650.2" y="1811.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="653.2" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="650.2" y="1795.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="653.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.41%)</title><rect x="652.2" y="1843.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="655.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="652.2" y="1827.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="652.2" y="1811.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="655.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="652.2" y="1795.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="656.9" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="657.9" y="1875.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="657.9" y="1859.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.9" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.49%)</title><rect x="659.8" y="1875.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.24%)</title><rect x="662.7" y="1859.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.7" y="1870.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="662.7" y="1843.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="665.7" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="665.6" y="1875.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="665.6" y="1859.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="668.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.65%)</title><rect x="666.5" y="1875.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="669.5" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="672.3" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="672.3" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="675.3" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="672.3" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="675.3" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="672.3" y="1811.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="675.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="672.3" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="675.3" y="1806.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="672.3" y="1779.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="675.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="672.3" y="1763.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.3" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="673.2" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.30%)</title><rect x="674.2" y="1907.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.2" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="677.0" y="1891.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="680.0" y="1902.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="677.0" y="1875.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="680.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.81%)</title><rect x="679.9" y="1891.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="682.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.49%)</title><rect x="682.8" y="1875.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="685.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/239024659.accept (1 samples, 0.08%)</title><rect x="682.8" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="685.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.08%)</title><rect x="682.8" y="1843.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="682.8" y="1827.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="682.8" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.8" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="682.8" y="1795.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="682.8" y="1779.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.8" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/835066991.accept (5 samples, 0.41%)</title><rect x="683.7" y="1859.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (5 samples, 0.41%)</title><rect x="683.7" y="1843.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/753115185.complete (5 samples, 0.41%)</title><rect x="683.7" y="1827.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (5 samples, 0.41%)</title><rect x="683.7" y="1811.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 0.41%)</title><rect x="683.7" y="1795.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.7" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 0.41%)</title><rect x="683.7" y="1779.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.7" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 0.41%)</title><rect x="683.7" y="1763.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.7" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.41%)</title><rect x="683.7" y="1747.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="686.7" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 0.41%)</title><rect x="683.7" y="1731.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.7" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="688.5" y="1875.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.22%)</title><rect x="689.5" y="1923.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="692.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.14%)</title><rect x="690.4" y="1907.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.05%)</title><rect x="691.4" y="1891.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/835066991.accept (13 samples, 1.05%)</title><rect x="691.4" y="1875.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (13 samples, 1.05%)</title><rect x="691.4" y="1859.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/753115185.complete (13 samples, 1.05%)</title><rect x="691.4" y="1843.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="694.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (13 samples, 1.05%)</title><rect x="691.4" y="1827.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="694.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 1.05%)</title><rect x="691.4" y="1811.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.05%)</title><rect x="691.4" y="1795.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.05%)</title><rect x="691.4" y="1779.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="694.4" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 1.05%)</title><rect x="691.4" y="1763.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="694.4" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (13 samples, 1.05%)</title><rect x="691.4" y="1747.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="694.4" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="703.8" y="1923.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="706.8" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="703.8" y="1907.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="706.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.49%)</title><rect x="707.7" y="1939.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.7" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="708.6" y="1923.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="711.6" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="709.6" y="1923.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="712.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="709.6" y="1907.0" width="3.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="712.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="713.4" y="1987.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="716.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.57%)</title><rect x="714.4" y="1987.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="717.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.57%)</title><rect x="714.4" y="1971.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.4" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.57%)</title><rect x="714.4" y="1955.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.57%)</title><rect x="714.4" y="1939.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.4" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1826420464.run (1 samples, 0.08%)</title><rect x="720.1" y="1923.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 17.36%)</title><rect x="721.1" y="1987.0" width="204.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.1" y="1998.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (214 samples, 17.36%)</title><rect x="721.1" y="1971.0" width="204.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="724.1" y="1982.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (167 samples, 13.54%)</title><rect x="765.1" y="1955.0" width="159.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.1" y="1966.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.57%)</title><rect x="778.5" y="1939.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.57%)</title><rect x="778.5" y="1923.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.57%)</title><rect x="778.5" y="1907.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.57%)</title><rect x="778.5" y="1891.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (146 samples, 11.84%)</title><rect x="785.2" y="1939.0" width="139.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.2" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (146 samples, 11.84%)</title><rect x="785.2" y="1923.0" width="139.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="788.2" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.24%)</title><rect x="793.8" y="1907.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="796.8" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="796.7" y="1907.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.7" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="797.6" y="1907.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="800.6" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="798.6" y="1907.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="801.6" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (127 samples, 10.30%)</title><rect x="799.5" y="1907.0" width="121.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="802.5" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="801.5" y="1891.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="804.5" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.78%)</title><rect x="803.4" y="1891.0" width="21.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="806.4" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.65%)</title><rect x="809.1" y="1875.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="812.1" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="812.0" y="1859.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="815.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.24%)</title><rect x="812.0" y="1843.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.0" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="814.8" y="1859.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.8" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.57%)</title><rect x="816.8" y="1875.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.8" y="1886.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.08%)</title><rect x="822.5" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="825.5" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="822.5" y="1843.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.5" y="1854.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="822.5" y="1827.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.5" y="1838.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="822.5" y="1811.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="825.5" y="1822.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="823.5" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="826.5" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="824.4" y="1891.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="827.4" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.41%)</title><rect x="826.3" y="1891.0" width="4.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="829.3" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.43%)</title><rect x="831.1" y="1891.0" width="28.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="834.1" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 3.81%)</title><rect x="859.8" y="1891.0" width="45.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="862.8" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.49%)</title><rect x="904.8" y="1891.0" width="5.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="907.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="910.6" y="1891.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="913.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="911.5" y="1891.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="914.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="913.4" y="1891.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="916.4" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.16%)</title><rect x="916.3" y="1891.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="919.3" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="918.2" y="1891.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.2" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="919.2" y="1891.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.2" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="920.1" y="1891.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="923.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="921.1" y="1907.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="924.1" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="923.0" y="1907.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.0" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="923.9" y="1907.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="924.9" y="1955.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="927.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="924.9" y="1939.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="927.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="924.9" y="1923.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="924.9" y="1907.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="927.9" y="1918.0"></text>
</g>
<g>
<title>start_thread (276 samples, 22.38%)</title><rect x="925.9" y="2035.0" width="264.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="928.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (276 samples, 22.38%)</title><rect x="925.9" y="2019.0" width="264.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="928.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.62%)</title><rect x="925.9" y="2003.0" width="19.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.9" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.57%)</title><rect x="925.9" y="1987.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="928.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.57%)</title><rect x="925.9" y="1971.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="928.9" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="925.9" y="1955.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.9" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.32%)</title><rect x="927.8" y="1955.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="930.8" y="1966.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.08%)</title><rect x="931.6" y="1955.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="934.6" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.05%)</title><rect x="932.6" y="1987.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.6" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="933.5" y="1971.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.5" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.16%)</title><rect x="933.5" y="1955.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="936.5" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.16%)</title><rect x="933.5" y="1939.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="936.5" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.16%)</title><rect x="933.5" y="1923.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="936.5" y="1934.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="935.4" y="1955.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.4" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="936.4" y="1971.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="936.4" y="1955.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.4" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="936.4" y="1939.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.4" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="936.4" y="1923.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.4" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="936.4" y="1907.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.4" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="937.3" y="1939.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.3" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="937.3" y="1923.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.3" y="1934.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.08%)</title><rect x="937.3" y="1907.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="940.3" y="1918.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.08%)</title><rect x="937.3" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.3" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.08%)</title><rect x="937.3" y="1875.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="940.3" y="1886.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.08%)</title><rect x="937.3" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.3" y="1870.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="938.3" y="1955.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.3" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="938.3" y="1939.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.3" y="1950.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="940.2" y="1939.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.2" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="940.2" y="1923.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.2" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.32%)</title><rect x="941.2" y="1971.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.2" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.32%)</title><rect x="941.2" y="1955.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.2" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.32%)</title><rect x="941.2" y="1939.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.2" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.32%)</title><rect x="941.2" y="1923.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.2" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.32%)</title><rect x="941.2" y="1907.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="944.2" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.32%)</title><rect x="941.2" y="1891.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.2" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.24%)</title><rect x="942.1" y="1875.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="945.1" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.16%)</title><rect x="943.1" y="1859.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.1" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="944.0" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.0" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (254 samples, 20.60%)</title><rect x="945.0" y="2003.0" width="243.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.0" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (254 samples, 20.60%)</title><rect x="945.0" y="1987.0" width="243.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.0" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (254 samples, 20.60%)</title><rect x="945.0" y="1971.0" width="243.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.0" y="1982.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (254 samples, 20.60%)</title><rect x="945.0" y="1955.0" width="243.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.0" y="1966.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (253 samples, 20.52%)</title><rect x="945.0" y="1939.0" width="242.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.0" y="1950.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (253 samples, 20.52%)</title><rect x="945.0" y="1923.0" width="242.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.0" y="1934.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (56 samples, 4.54%)</title><rect x="945.0" y="1907.0" width="53.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.0" y="1918.0">Compi..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.24%)</title><rect x="945.0" y="1891.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="948.0" y="1902.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.08%)</title><rect x="945.0" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.16%)</title><rect x="946.0" y="1875.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.16%)</title><rect x="946.0" y="1859.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="949.0" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="947.9" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.9" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.65%)</title><rect x="948.8" y="1891.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="948.8" y="1875.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="951.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.57%)</title><rect x="949.8" y="1875.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.8" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.57%)</title><rect x="949.8" y="1859.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.16%)</title><rect x="956.5" y="1891.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="956.5" y="1875.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="956.5" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="959.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="957.4" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.4" y="1870.0"></text>
</g>
<g>
<title>loadConLNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="957.4" y="1843.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 3.41%)</title><rect x="958.4" y="1891.0" width="40.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="1902.0">Pha..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.08%)</title><rect x="958.4" y="1875.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.16%)</title><rect x="959.4" y="1875.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.4" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="961.3" y="1875.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.3" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="962.2" y="1859.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="965.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.24%)</title><rect x="963.2" y="1875.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="964.1" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="965.1" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="968.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="965.1" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="966.1" y="1875.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="966.1" y="1859.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.57%)</title><rect x="968.0" y="1875.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.16%)</title><rect x="972.8" y="1859.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.08%)</title><rect x="973.7" y="1843.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.73%)</title><rect x="974.7" y="1875.0" width="8.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="977.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.16%)</title><rect x="977.5" y="1859.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="979.5" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="982.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.24%)</title><rect x="980.4" y="1859.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.24%)</title><rect x="980.4" y="1843.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.24%)</title><rect x="983.3" y="1875.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.3" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="985.2" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="986.2" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="986.2" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.41%)</title><rect x="987.1" y="1875.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="987.1" y="1859.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.08%)</title><rect x="988.1" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="991.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.08%)</title><rect x="988.1" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="991.1" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="988.1" y="1811.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="991.1" y="1822.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.24%)</title><rect x="989.0" y="1859.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.24%)</title><rect x="989.0" y="1843.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="989.0" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="990.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="990.9" y="1827.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="991.9" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="991.9" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="992.9" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.9" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="992.9" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.24%)</title><rect x="993.8" y="1875.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.8" y="1886.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="996.7" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.7" y="1886.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.08%)</title><rect x="996.7" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="999.7" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="997.6" y="1875.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1000.6" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (191 samples, 15.49%)</title><rect x="998.6" y="1907.0" width="182.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.6" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="998.6" y="1891.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.6" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="998.6" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.6" y="1886.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="998.6" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.6" y="1870.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.08%)</title><rect x="998.6" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.6" y="1854.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="998.6" y="1827.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.6" y="1838.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="999.6" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1002.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="999.6" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="999.6" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1002.6" y="1870.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.08%)</title><rect x="999.6" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1002.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.32%)</title><rect x="1000.5" y="1891.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.32%)</title><rect x="1000.5" y="1875.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="1000.5" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1003.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) (1 samples, 0.08%)</title><rect x="1000.5" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.5" y="1854.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.08%)</title><rect x="1000.5" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1001.5" y="1859.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1004.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1001.5" y="1843.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1001.5" y="1827.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1001.5" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.5" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1001.5" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1002.4" y="1811.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1002.4" y="1795.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1002.4" y="1779.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1003.4" y="1779.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1003.4" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1003.4" y="1747.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1003.4" y="1731.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1003.4" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1006.4" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (167 samples, 13.54%)</title><rect x="1004.3" y="1891.0" width="159.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.3" y="1902.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1004.3" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.49%)</title><rect x="1005.3" y="1875.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.3" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1008.2" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.2" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.16%)</title><rect x="1009.1" y="1859.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1011.0" y="1875.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1012.0" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (146 samples, 11.84%)</title><rect x="1013.0" y="1875.0" width="139.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.0" y="1886.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (144 samples, 11.68%)</title><rect x="1014.9" y="1859.0" width="137.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.9" y="1870.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.57%)</title><rect x="1016.8" y="1843.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1019.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (135 samples, 10.95%)</title><rect x="1023.5" y="1843.0" width="129.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.5" y="1854.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.16%)</title><rect x="1133.5" y="1827.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.16%)</title><rect x="1133.5" y="1811.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (17 samples, 1.38%)</title><rect x="1135.5" y="1827.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1151.7" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1151.7" y="1811.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.24%)</title><rect x="1152.7" y="1875.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.49%)</title><rect x="1155.5" y="1875.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.5" y="1886.0"></text>
</g>
<g>
<title>LoadNKlassNode::Opcode() const (1 samples, 0.08%)</title><rect x="1156.5" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.32%)</title><rect x="1157.5" y="1859.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1159.4" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.08%)</title><rect x="1160.3" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1160.3" y="1827.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1161.3" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1162.2" y="1875.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1162.2" y="1859.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.2" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1162.2" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="1854.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1162.2" y="1827.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.2" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1162.2" y="1811.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.2" y="1822.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1163.2" y="1843.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1163.2" y="1827.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="1838.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1163.2" y="1811.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="1822.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1163.2" y="1795.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 1.30%)</title><rect x="1164.2" y="1891.0" width="15.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.05%)</title><rect x="1166.1" y="1875.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1886.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.08%)</title><rect x="1166.1" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.1" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.0" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1168.0" y="1859.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.9" y="1843.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.24%)</title><rect x="1169.9" y="1859.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1169.9" y="1843.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.9" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1169.9" y="1827.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="1838.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.08%)</title><rect x="1170.9" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1171.8" y="1843.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1172.8" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.8" y="1870.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1172.8" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.32%)</title><rect x="1173.7" y="1859.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.7" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1173.7" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1174.7" y="1843.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.16%)</title><rect x="1174.7" y="1827.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.16%)</title><rect x="1174.7" y="1811.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="1822.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1176.6" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="1854.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1177.6" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="1870.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.08%)</title><rect x="1178.5" y="1875.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1179.5" y="1891.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1179.5" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1179.5" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.5" y="1843.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1180.4" y="1891.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1183.4" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1181.4" y="1907.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1181.4" y="1891.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1181.4" y="1875.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1181.4" y="1859.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1181.4" y="1843.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1181.4" y="1827.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.4" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1181.4" y="1795.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1181.4" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1181.4" y="1763.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1181.4" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.4" y="1731.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.4" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.4" y="1699.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.4" y="1683.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1181.4" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.4" y="1651.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.4" y="1635.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="1646.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.4" y="1619.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.08%)</title><rect x="1181.4" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.08%)</title><rect x="1181.4" y="1587.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1182.3" y="1811.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1182.3" y="1795.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1182.3" y="1779.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1182.3" y="1763.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1182.3" y="1747.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1182.3" y="1731.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1182.3" y="1715.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1182.3" y="1699.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1182.3" y="1683.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1182.3" y="1667.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1182.3" y="1651.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1182.3" y="1635.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="1646.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="1619.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="1630.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1182.3" y="1603.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="1614.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1182.3" y="1587.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1182.3" y="1571.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1182.3" y="1555.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.3" y="1539.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.3" y="1523.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1182.3" y="1507.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="1491.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="1502.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1182.3" y="1475.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.3" y="1459.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.3" y="1443.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="1454.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.3" y="1427.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1183.3" y="1619.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1183.3" y="1603.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1183.3" y="1587.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1183.3" y="1571.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1183.3" y="1555.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1183.3" y="1539.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1523.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="1507.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="1491.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="1475.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="1459.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="1443.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1427.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1411.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="1395.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="1379.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="1363.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="1347.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="1331.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1315.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="1299.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="1283.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="1267.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="1251.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="1235.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1219.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="1198.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1183.3" y="1171.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.3" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="1166.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1183.3" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1523.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1507.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1491.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="1475.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="1459.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="1443.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="1427.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1411.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1395.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="1379.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="1363.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="1347.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1315.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1299.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1283.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="1251.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="1235.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1187.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1184.3" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.3" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="1118.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.08%)</title><rect x="1184.3" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1811.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1795.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1779.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1747.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1731.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="1715.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1699.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1683.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1667.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1651.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1635.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="1619.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1603.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1587.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1571.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1555.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1539.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1523.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1534.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.08%)</title><rect x="1185.2" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1518.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1185.2" y="1491.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="1502.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1475.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="1486.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1459.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="1470.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1443.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1454.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1186.2" y="1907.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1186.2" y="1891.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.1" y="1939.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1187.1" y="1923.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1187.1" y="1907.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1187.1" y="1891.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1187.1" y="1875.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.1" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1187.1" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1187.1" y="1827.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1187.1" y="1811.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1187.1" y="1795.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1187.1" y="1779.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1187.1" y="1763.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1187.1" y="1747.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1187.1" y="1731.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1187.1" y="1715.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1187.1" y="1699.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1710.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1187.1" y="1683.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="1694.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1187.1" y="1667.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="1678.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1187.1" y="1651.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1662.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1187.1" y="1635.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="1646.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1187.1" y="1619.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="1630.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1187.1" y="1603.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="1614.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1187.1" y="1587.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="1598.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.08%)</title><rect x="1187.1" y="1571.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="1582.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.08%)</title><rect x="1187.1" y="1555.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1566.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1187.1" y="1539.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1550.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1187.1" y="1523.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="1534.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.08%)</title><rect x="1187.1" y="1507.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="1518.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.08%)</title><rect x="1187.1" y="1491.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1190.1" y="1502.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="2003.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1987.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="1971.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="1955.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="1939.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1188.1" y="1923.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="1934.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.08%)</title><rect x="1188.1" y="1907.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.1" y="1918.0"></text>
</g>
<g>
<title>Universe::print_heap_after_gc(outputStream*, bool) (1 samples, 0.08%)</title><rect x="1188.1" y="1891.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="1902.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.08%)</title><rect x="1188.1" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1886.0"></text>
</g>
<g>
<title>__strchr_sse42 (1 samples, 0.08%)</title><rect x="1188.1" y="1859.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.1" y="1870.0"></text>
</g>
<g>
<title>JvmtiEnvBase::check_for_periodic_clean_up() (1 samples, 0.08%)</title><rect x="1189.0" y="1923.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="1934.0"></text>
</g>
</g>
</svg>
