<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (16 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (4 samples, 25.00%)</title><rect x="10.0" y="419.0" width="295.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="430.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (4 samples, 25.00%)</title><rect x="10.0" y="403.0" width="295.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="414.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 12.50%)</title><rect x="10.0" y="387.0" width="147.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1383856192.accept (2 samples, 12.50%)</title><rect x="10.0" y="371.0" width="147.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="382.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (2 samples, 12.50%)</title><rect x="10.0" y="355.0" width="147.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="366.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 12.50%)</title><rect x="10.0" y="339.0" width="147.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="350.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 12.50%)</title><rect x="10.0" y="323.0" width="147.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="334.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 12.50%)</title><rect x="10.0" y="307.0" width="147.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="318.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 12.50%)</title><rect x="10.0" y="291.0" width="147.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 12.50%)</title><rect x="10.0" y="275.0" width="147.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 12.50%)</title><rect x="10.0" y="259.0" width="147.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 6.25%)</title><rect x="10.0" y="243.0" width="73.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 6.25%)</title><rect x="10.0" y="227.0" width="73.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="238.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 6.25%)</title><rect x="10.0" y="211.0" width="73.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="222.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 6.25%)</title><rect x="83.8" y="243.0" width="73.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="254.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 6.25%)</title><rect x="83.8" y="227.0" width="73.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.8" y="238.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 6.25%)</title><rect x="83.8" y="211.0" width="73.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="86.8" y="222.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 6.25%)</title><rect x="83.8" y="195.0" width="73.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.8" y="206.0">java/uti..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 12.50%)</title><rect x="157.5" y="387.0" width="147.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.5" y="398.0">org/apache/kafka/cl..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (2 samples, 12.50%)</title><rect x="157.5" y="371.0" width="147.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="160.5" y="382.0">org/apache/kafka/cl..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 6.25%)</title><rect x="157.5" y="355.0" width="73.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.5" y="366.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 6.25%)</title><rect x="157.5" y="339.0" width="73.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.5" y="350.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 6.25%)</title><rect x="157.5" y="323.0" width="73.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.5" y="334.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 6.25%)</title><rect x="157.5" y="307.0" width="73.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.5" y="318.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 6.25%)</title><rect x="157.5" y="291.0" width="73.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="160.5" y="302.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 6.25%)</title><rect x="157.5" y="275.0" width="73.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.5" y="286.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/ApiVersions.get (1 samples, 6.25%)</title><rect x="157.5" y="259.0" width="73.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.5" y="270.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 6.25%)</title><rect x="231.2" y="355.0" width="73.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.2" y="366.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 6.25%)</title><rect x="231.2" y="339.0" width="73.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.2" y="350.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 6.25%)</title><rect x="231.2" y="323.0" width="73.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.2" y="334.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 6.25%)</title><rect x="231.2" y="307.0" width="73.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.2" y="318.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 6.25%)</title><rect x="231.2" y="291.0" width="73.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.2" y="302.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 6.25%)</title><rect x="231.2" y="275.0" width="73.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.2" y="286.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 6.25%)</title><rect x="231.2" y="259.0" width="73.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.2" y="270.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 6.25%)</title><rect x="231.2" y="243.0" width="73.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.2" y="254.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 6.25%)</title><rect x="231.2" y="227.0" width="73.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.2" y="238.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 6.25%)</title><rect x="231.2" y="211.0" width="73.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.2" y="222.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 6.25%)</title><rect x="231.2" y="195.0" width="73.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.2" y="206.0">org/apac..</text>
</g>
<g>
<title>start_thread (12 samples, 75.00%)</title><rect x="305.0" y="419.0" width="885.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="308.0" y="430.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (12 samples, 75.00%)</title><rect x="305.0" y="403.0" width="885.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="308.0" y="414.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (12 samples, 75.00%)</title><rect x="305.0" y="387.0" width="885.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="308.0" y="398.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (12 samples, 75.00%)</title><rect x="305.0" y="371.0" width="885.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="308.0" y="382.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 75.00%)</title><rect x="305.0" y="355.0" width="885.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="308.0" y="366.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (11 samples, 68.75%)</title><rect x="305.0" y="339.0" width="811.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="308.0" y="350.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (11 samples, 68.75%)</title><rect x="305.0" y="323.0" width="811.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="308.0" y="334.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (7 samples, 43.75%)</title><rect x="305.0" y="307.0" width="516.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.0" y="318.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (1 samples, 6.25%)</title><rect x="305.0" y="291.0" width="73.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="308.0" y="302.0">Matcher:..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 6.25%)</title><rect x="305.0" y="275.0" width="73.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="308.0" y="286.0">Matcher:..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 6.25%)</title><rect x="305.0" y="259.0" width="73.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="308.0" y="270.0">Matcher:..</text>
</g>
<g>
<title>__memset_sse2 (1 samples, 6.25%)</title><rect x="305.0" y="243.0" width="73.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="308.0" y="254.0">__memset..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 18.75%)</title><rect x="378.8" y="291.0" width="221.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="381.8" y="302.0">PhaseCFG::do_global_code_moti..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 18.75%)</title><rect x="378.8" y="275.0" width="221.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="381.8" y="286.0">PhaseCFG::global_code_motion()</text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 6.25%)</title><rect x="452.5" y="259.0" width="73.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="455.5" y="270.0">Node::ne..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 6.25%)</title><rect x="526.2" y="259.0" width="73.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="529.2" y="270.0">PhaseCFG..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 18.75%)</title><rect x="600.0" y="291.0" width="221.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="302.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 6.25%)</title><rect x="600.0" y="275.0" width="73.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="603.0" y="286.0">PhaseCha..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 6.25%)</title><rect x="673.8" y="275.0" width="73.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.8" y="286.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 6.25%)</title><rect x="673.8" y="259.0" width="73.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="676.8" y="270.0">IndexSet..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 6.25%)</title><rect x="747.5" y="275.0" width="73.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="750.5" y="286.0">PhaseLiv..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 6.25%)</title><rect x="747.5" y="259.0" width="73.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="750.5" y="270.0">PhaseLiv..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 6.25%)</title><rect x="747.5" y="243.0" width="73.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="750.5" y="254.0">pthread_..</text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 12.50%)</title><rect x="821.2" y="307.0" width="147.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.2" y="318.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 6.25%)</title><rect x="821.2" y="291.0" width="73.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.2" y="302.0">Connecti..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 6.25%)</title><rect x="821.2" y="275.0" width="73.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.2" y="286.0">Connecti..</text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 6.25%)</title><rect x="821.2" y="259.0" width="73.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="824.2" y="270.0">Connecti..</text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 6.25%)</title><rect x="821.2" y="243.0" width="73.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="824.2" y="254.0">ciMethod..</text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 6.25%)</title><rect x="821.2" y="227.0" width="73.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="824.2" y="238.0">BCEscape..</text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 6.25%)</title><rect x="821.2" y="211.0" width="73.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.2" y="222.0">BCEscape..</text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 6.25%)</title><rect x="821.2" y="195.0" width="73.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="824.2" y="206.0">BCEscape..</text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 6.25%)</title><rect x="821.2" y="179.0" width="73.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.2" y="190.0">BCEscape..</text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 6.25%)</title><rect x="821.2" y="163.0" width="73.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="824.2" y="174.0">ciByteco..</text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 6.25%)</title><rect x="821.2" y="147.0" width="73.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.2" y="158.0">ciEnv::g..</text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 6.25%)</title><rect x="821.2" y="131.0" width="73.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.2" y="142.0">ciEnv::g..</text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 6.25%)</title><rect x="821.2" y="115.0" width="73.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.2" y="126.0">ciEnv::l..</text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 6.25%)</title><rect x="821.2" y="99.0" width="73.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.2" y="110.0">LinkReso..</text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass*) (1 samples, 6.25%)</title><rect x="821.2" y="83.0" width="73.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="824.2" y="94.0">Instance..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (1 samples, 6.25%)</title><rect x="895.0" y="291.0" width="73.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="302.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 6.25%)</title><rect x="895.0" y="275.0" width="73.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="286.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 6.25%)</title><rect x="895.0" y="259.0" width="73.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="270.0">PhaseIde..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 12.50%)</title><rect x="968.8" y="307.0" width="147.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.8" y="318.0">ParseGenerator::gen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 12.50%)</title><rect x="968.8" y="291.0" width="147.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.8" y="302.0">Parse::Parse(JVMSta..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 12.50%)</title><rect x="968.8" y="275.0" width="147.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.8" y="286.0">Parse::do_all_block..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 12.50%)</title><rect x="968.8" y="259.0" width="147.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.8" y="270.0">Parse::do_one_block()</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 12.50%)</title><rect x="968.8" y="243.0" width="147.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.8" y="254.0">Parse::do_one_bytec..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 12.50%)</title><rect x="968.8" y="227.0" width="147.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.8" y="238.0">Parse::do_call()</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 12.50%)</title><rect x="968.8" y="211.0" width="147.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.8" y="222.0">PredictedCallGenera..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 12.50%)</title><rect x="968.8" y="195.0" width="147.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.8" y="206.0">ParseGenerator::gen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 12.50%)</title><rect x="968.8" y="179.0" width="147.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.8" y="190.0">Parse::Parse(JVMSta..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 12.50%)</title><rect x="968.8" y="163.0" width="147.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.8" y="174.0">Parse::do_all_block..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 12.50%)</title><rect x="968.8" y="147.0" width="147.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.8" y="158.0">Parse::do_one_block()</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 12.50%)</title><rect x="968.8" y="131.0" width="147.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.8" y="142.0">Parse::do_one_bytec..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 6.25%)</title><rect x="968.8" y="115.0" width="73.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.8" y="126.0">Parse::d..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 6.25%)</title><rect x="968.8" y="99.0" width="73.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.8" y="110.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 6.25%)</title><rect x="968.8" y="83.0" width="73.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.8" y="94.0">Parse::P..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 6.25%)</title><rect x="968.8" y="67.0" width="73.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.8" y="78.0">Parse::b..</text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 6.25%)</title><rect x="968.8" y="51.0" width="73.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.8" y="62.0">GraphKit..</text>
</g>
<g>
<title>Node::clone() const (1 samples, 6.25%)</title><rect x="968.8" y="35.0" width="73.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.8" y="46.0">Node::cl..</text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 6.25%)</title><rect x="1042.5" y="115.0" width="73.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.5" y="126.0">Parse::d..</text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 6.25%)</title><rect x="1042.5" y="99.0" width="73.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="110.0">GraphKit..</text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 6.25%)</title><rect x="1042.5" y="83.0" width="73.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="94.0">GraphKit..</text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 6.25%)</title><rect x="1042.5" y="67.0" width="73.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.5" y="78.0">GraphKit..</text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 6.25%)</title><rect x="1042.5" y="51.0" width="73.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.5" y="62.0">GraphKit..</text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 6.25%)</title><rect x="1042.5" y="35.0" width="73.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="46.0">PhaseGVN..</text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 6.25%)</title><rect x="1116.2" y="339.0" width="73.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.2" y="350.0">Compiler..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 6.25%)</title><rect x="1116.2" y="323.0" width="73.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.2" y="334.0">Compilat..</text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 6.25%)</title><rect x="1116.2" y="307.0" width="73.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.2" y="318.0">Compilat..</text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 6.25%)</title><rect x="1116.2" y="291.0" width="73.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.2" y="302.0">Compilat..</text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 6.25%)</title><rect x="1116.2" y="275.0" width="73.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.2" y="286.0">ciMethod..</text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 6.25%)</title><rect x="1116.2" y="259.0" width="73.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.2" y="270.0">ciMethod..</text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 6.25%)</title><rect x="1116.2" y="243.0" width="73.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.2" y="254.0">Method::..</text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle, Thread*) (1 samples, 6.25%)</title><rect x="1116.2" y="227.0" width="73.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.2" y="238.0">MethodDa..</text>
</g>
<g>
<title>MethodData::MethodData(methodHandle, int, Thread*) (1 samples, 6.25%)</title><rect x="1116.2" y="211.0" width="73.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="222.0">MethodDa..</text>
</g>
<g>
<title>MethodData::post_initialize(BytecodeStream*) (1 samples, 6.25%)</title><rect x="1116.2" y="195.0" width="73.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.2" y="206.0">MethodDa..</text>
</g>
<g>
<title>BranchData::post_initialize(BytecodeStream*, MethodData*) (1 samples, 6.25%)</title><rect x="1116.2" y="179.0" width="73.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.2" y="190.0">BranchDa..</text>
</g>
<g>
<title>MethodData::bci_to_dp(int) (1 samples, 6.25%)</title><rect x="1116.2" y="163.0" width="73.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.2" y="174.0">MethodDa..</text>
</g>
<g>
<title>DataLayout::data_in() (1 samples, 6.25%)</title><rect x="1116.2" y="147.0" width="73.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.2" y="158.0">DataLayo..</text>
</g>
</g>
</svg>
