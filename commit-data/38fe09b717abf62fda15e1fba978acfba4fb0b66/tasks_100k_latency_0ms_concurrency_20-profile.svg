<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (210 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.48%)</title><rect x="10.0" y="451.0" width="5.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.48%)</title><rect x="10.0" y="435.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (34 samples, 16.19%)</title><rect x="15.6" y="451.0" width="191.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.6" y="462.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 16.19%)</title><rect x="15.6" y="435.0" width="191.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="446.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 11.43%)</title><rect x="15.6" y="419.0" width="134.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.6" y="430.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/26582582.accept (23 samples, 10.95%)</title><rect x="15.6" y="403.0" width="129.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="414.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (23 samples, 10.95%)</title><rect x="15.6" y="387.0" width="129.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.6" y="398.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (21 samples, 10.00%)</title><rect x="15.6" y="371.0" width="118.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.6" y="382.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (21 samples, 10.00%)</title><rect x="15.6" y="355.0" width="118.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.6" y="366.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (21 samples, 10.00%)</title><rect x="15.6" y="339.0" width="118.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="350.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (21 samples, 10.00%)</title><rect x="15.6" y="323.0" width="118.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="334.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (21 samples, 10.00%)</title><rect x="15.6" y="307.0" width="118.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="318.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (21 samples, 10.00%)</title><rect x="15.6" y="291.0" width="118.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="302.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (15 samples, 7.14%)</title><rect x="15.6" y="275.0" width="84.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="286.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.95%)</title><rect x="15.6" y="259.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.95%)</title><rect x="15.6" y="243.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.48%)</title><rect x="21.2" y="227.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.48%)</title><rect x="21.2" y="211.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.48%)</title><rect x="26.9" y="259.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.48%)</title><rect x="26.9" y="243.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 5.71%)</title><rect x="32.5" y="259.0" width="67.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.5" y="270.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 5.71%)</title><rect x="32.5" y="243.0" width="67.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="254.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 5.24%)</title><rect x="32.5" y="227.0" width="61.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.5" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 5.24%)</title><rect x="32.5" y="211.0" width="61.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="222.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 5.24%)</title><rect x="32.5" y="195.0" width="61.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.5" y="206.0">sun/mi..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.48%)</title><rect x="32.5" y="179.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="35.5" y="190.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) [clone .part.121] (1 samples, 0.48%)</title><rect x="32.5" y="163.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="35.5" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.48%)</title><rect x="32.5" y="147.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="35.5" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 4.76%)</title><rect x="38.1" y="179.0" width="56.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="41.1" y="190.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.48%)</title><rect x="38.1" y="163.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.1" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 3.33%)</title><rect x="43.7" y="163.0" width="39.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="46.7" y="174.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.48%)</title><rect x="83.0" y="163.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="86.0" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.48%)</title><rect x="88.7" y="163.0" width="5.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="91.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.48%)</title><rect x="94.3" y="227.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.38%)</title><rect x="99.9" y="275.0" width="28.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.9" y="286.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.38%)</title><rect x="99.9" y="259.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.9" y="270.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.38%)</title><rect x="99.9" y="243.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.9" y="254.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.48%)</title><rect x="128.0" y="275.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.48%)</title><rect x="128.0" y="259.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.48%)</title><rect x="128.0" y="243.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.0" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.95%)</title><rect x="133.6" y="371.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.95%)</title><rect x="133.6" y="355.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.6" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.48%)</title><rect x="139.2" y="339.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.48%)</title><rect x="139.2" y="323.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.48%)</title><rect x="144.9" y="403.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.48%)</title><rect x="144.9" y="387.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.76%)</title><rect x="150.5" y="419.0" width="56.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.5" y="430.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.76%)</title><rect x="150.5" y="403.0" width="56.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.5" y="414.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.90%)</title><rect x="150.5" y="387.0" width="22.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.5" y="398.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.90%)</title><rect x="150.5" y="371.0" width="22.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.5" y="382.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.90%)</title><rect x="150.5" y="355.0" width="22.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.5" y="366.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.90%)</title><rect x="150.5" y="339.0" width="22.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.5" y="350.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.90%)</title><rect x="150.5" y="323.0" width="22.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.5" y="334.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.43%)</title><rect x="150.5" y="307.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.5" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.48%)</title><rect x="156.1" y="291.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.1" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.48%)</title><rect x="156.1" y="275.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.48%)</title><rect x="156.1" y="259.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.1" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.48%)</title><rect x="156.1" y="243.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.1" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.48%)</title><rect x="156.1" y="227.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.1" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.48%)</title><rect x="156.1" y="211.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="159.1" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.48%)</title><rect x="156.1" y="195.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="159.1" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.48%)</title><rect x="161.7" y="291.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.7" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.48%)</title><rect x="161.7" y="275.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.7" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.48%)</title><rect x="161.7" y="259.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.7" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.48%)</title><rect x="161.7" y="243.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.7" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.timestampType (1 samples, 0.48%)</title><rect x="161.7" y="227.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="164.7" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.48%)</title><rect x="161.7" y="211.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="164.7" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="195.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="164.7" y="206.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="179.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="164.7" y="190.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="163.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="164.7" y="174.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="147.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="164.7" y="158.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="131.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="164.7" y="142.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="115.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="164.7" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.48%)</title><rect x="161.7" y="99.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="164.7" y="110.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.48%)</title><rect x="161.7" y="83.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="164.7" y="94.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.48%)</title><rect x="167.3" y="307.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.48%)</title><rect x="167.3" y="291.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.48%)</title><rect x="167.3" y="275.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.3" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.48%)</title><rect x="167.3" y="259.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.3" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.48%)</title><rect x="173.0" y="387.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.48%)</title><rect x="173.0" y="371.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.48%)</title><rect x="173.0" y="355.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.48%)</title><rect x="173.0" y="339.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.48%)</title><rect x="173.0" y="323.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.0" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.48%)</title><rect x="173.0" y="307.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.0" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.48%)</title><rect x="173.0" y="291.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.0" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.48%)</title><rect x="173.0" y="275.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.0" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.48%)</title><rect x="173.0" y="259.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.90%)</title><rect x="178.6" y="387.0" width="22.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="398.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.90%)</title><rect x="178.6" y="371.0" width="22.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.6" y="382.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.48%)</title><rect x="178.6" y="355.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.48%)</title><rect x="178.6" y="339.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.48%)</title><rect x="178.6" y="323.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.6" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.48%)</title><rect x="178.6" y="307.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.48%)</title><rect x="178.6" y="291.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.48%)</title><rect x="178.6" y="275.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.6" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.48%)</title><rect x="178.6" y="259.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.6" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.48%)</title><rect x="178.6" y="243.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.48%)</title><rect x="178.6" y="227.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.48%)</title><rect x="178.6" y="211.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.6" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.48%)</title><rect x="178.6" y="195.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.48%)</title><rect x="178.6" y="179.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.48%)</title><rect x="178.6" y="163.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.48%)</title><rect x="178.6" y="147.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="178.6" y="131.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="178.6" y="115.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="126.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="178.6" y="99.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.6" y="110.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="178.6" y="83.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.6" y="94.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.48%)</title><rect x="178.6" y="67.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.6" y="78.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.48%)</title><rect x="184.2" y="355.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.2" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.48%)</title><rect x="184.2" y="339.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.95%)</title><rect x="189.8" y="355.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.maybeCloseOldestConnection (1 samples, 0.48%)</title><rect x="189.8" y="339.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.pollExpiredConnection (1 samples, 0.48%)</title><rect x="189.8" y="323.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.48%)</title><rect x="195.4" y="339.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.48%)</title><rect x="195.4" y="323.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="198.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.48%)</title><rect x="195.4" y="307.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.4" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.48%)</title><rect x="195.4" y="291.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.4" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.48%)</title><rect x="195.4" y="275.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.4" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.48%)</title><rect x="195.4" y="259.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.48%)</title><rect x="195.4" y="243.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.48%)</title><rect x="195.4" y="227.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.4" y="238.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.48%)</title><rect x="195.4" y="211.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="198.4" y="222.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.48%)</title><rect x="195.4" y="195.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="198.4" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.48%)</title><rect x="201.0" y="387.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.0" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.48%)</title><rect x="201.0" y="371.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="204.0" y="382.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="201.0" y="355.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="204.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (76 samples, 36.19%)</title><rect x="206.7" y="451.0" width="427.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (76 samples, 36.19%)</title><rect x="206.7" y="435.0" width="427.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="446.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (76 samples, 36.19%)</title><rect x="206.7" y="419.0" width="427.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.7" y="430.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 1.43%)</title><rect x="217.9" y="403.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/2040234173.run (52 samples, 24.76%)</title><rect x="234.8" y="403.0" width="292.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.8" y="414.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (52 samples, 24.76%)</title><rect x="234.8" y="387.0" width="292.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.8" y="398.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (52 samples, 24.76%)</title><rect x="234.8" y="371.0" width="292.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.8" y="382.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (51 samples, 24.29%)</title><rect x="234.8" y="355.0" width="286.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.8" y="366.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (20 samples, 9.52%)</title><rect x="234.8" y="339.0" width="112.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.8" y="350.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (20 samples, 9.52%)</title><rect x="234.8" y="323.0" width="112.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.8" y="334.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (20 samples, 9.52%)</title><rect x="234.8" y="307.0" width="112.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.8" y="318.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.52%)</title><rect x="234.8" y="291.0" width="112.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.8" y="302.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.52%)</title><rect x="234.8" y="275.0" width="112.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.8" y="286.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 9.52%)</title><rect x="234.8" y="259.0" width="112.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.8" y="270.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 3.33%)</title><rect x="234.8" y="243.0" width="39.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.8" y="254.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 2.38%)</title><rect x="246.0" y="227.0" width="28.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.0" y="238.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.43%)</title><rect x="257.2" y="211.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.95%)</title><rect x="257.2" y="195.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.2" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.95%)</title><rect x="257.2" y="179.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.2" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.48%)</title><rect x="268.5" y="195.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.5" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.48%)</title><rect x="268.5" y="179.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="271.5" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 6.19%)</title><rect x="274.1" y="243.0" width="73.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.1" y="254.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.48%)</title><rect x="274.1" y="227.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.48%)</title><rect x="274.1" y="211.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.95%)</title><rect x="279.7" y="227.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.95%)</title><rect x="279.7" y="211.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.7" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.48%)</title><rect x="279.7" y="195.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.7" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.48%)</title><rect x="279.7" y="179.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.7" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.48%)</title><rect x="285.3" y="195.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.3" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.95%)</title><rect x="291.0" y="227.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.95%)</title><rect x="291.0" y="211.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.0" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="296.6" y="195.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="299.6" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="296.6" y="179.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="299.6" y="190.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.48%)</title><rect x="296.6" y="163.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="299.6" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.33%)</title><rect x="302.2" y="227.0" width="39.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.2" y="238.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.95%)</title><rect x="302.2" y="211.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.95%)</title><rect x="302.2" y="195.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.2" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.38%)</title><rect x="313.4" y="211.0" width="28.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.4" y="222.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.38%)</title><rect x="313.4" y="195.0" width="28.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.4" y="206.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.38%)</title><rect x="313.4" y="179.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.4" y="190.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.48%)</title><rect x="313.4" y="163.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.4" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.48%)</title><rect x="313.4" y="147.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.4" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.48%)</title><rect x="313.4" y="131.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.4" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.48%)</title><rect x="313.4" y="115.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.4" y="126.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.48%)</title><rect x="313.4" y="99.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="316.4" y="110.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.48%)</title><rect x="313.4" y="83.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.4" y="94.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor14.newInstance (1 samples, 0.48%)</title><rect x="313.4" y="67.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.4" y="78.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.95%)</title><rect x="319.0" y="163.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.0" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.95%)</title><rect x="319.0" y="147.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.0" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.95%)</title><rect x="319.0" y="131.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="322.0" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.95%)</title><rect x="330.3" y="163.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.3" y="174.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="335.9" y="147.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="338.9" y="158.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="335.9" y="131.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="338.9" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.48%)</title><rect x="341.5" y="227.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.5" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (31 samples, 14.76%)</title><rect x="347.1" y="339.0" width="174.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.1" y="350.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (8 samples, 3.81%)</title><rect x="347.1" y="323.0" width="45.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.1" y="334.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.48%)</title><rect x="347.1" y="307.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.1" y="318.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (7 samples, 3.33%)</title><rect x="352.8" y="307.0" width="39.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.8" y="318.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 3.33%)</title><rect x="352.8" y="291.0" width="39.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.8" y="302.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.43%)</title><rect x="352.8" y="275.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.8" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.43%)</title><rect x="352.8" y="259.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.8" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 1.43%)</title><rect x="352.8" y="243.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.43%)</title><rect x="352.8" y="227.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.43%)</title><rect x="352.8" y="211.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.8" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.43%)</title><rect x="369.6" y="275.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.6" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.95%)</title><rect x="369.6" y="259.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.6" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.95%)</title><rect x="369.6" y="243.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="372.6" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.48%)</title><rect x="380.9" y="259.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.9" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.48%)</title><rect x="380.9" y="243.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.9" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.48%)</title><rect x="380.9" y="227.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.9" y="238.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.48%)</title><rect x="386.5" y="275.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.48%)</title><rect x="386.5" y="259.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.48%)</title><rect x="386.5" y="243.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.5" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 7.14%)</title><rect x="392.1" y="323.0" width="84.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.1" y="334.0">com/lineco..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="397.7" y="307.0" width="5.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="400.7" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 6.19%)</title><rect x="403.3" y="307.0" width="73.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="318.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.43%)</title><rect x="414.6" y="291.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.6" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.43%)</title><rect x="414.6" y="275.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.6" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.95%)</title><rect x="420.2" y="259.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.2" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.95%)</title><rect x="420.2" y="243.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.2" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.95%)</title><rect x="420.2" y="227.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.2" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.48%)</title><rect x="425.8" y="211.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="428.8" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.48%)</title><rect x="425.8" y="195.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="428.8" y="206.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.48%)</title><rect x="425.8" y="179.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="428.8" y="190.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.48%)</title><rect x="425.8" y="163.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="428.8" y="174.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.81%)</title><rect x="431.4" y="291.0" width="45.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.4" y="302.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.81%)</title><rect x="431.4" y="275.0" width="45.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.4" y="286.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.95%)</title><rect x="431.4" y="259.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.4" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.95%)</title><rect x="431.4" y="243.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.95%)</title><rect x="431.4" y="227.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.4" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.95%)</title><rect x="431.4" y="211.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.4" y="222.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.86%)</title><rect x="442.7" y="259.0" width="33.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.7" y="270.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.86%)</title><rect x="442.7" y="243.0" width="33.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.7" y="254.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.95%)</title><rect x="465.1" y="227.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.1" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.48%)</title><rect x="465.1" y="211.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.1" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.48%)</title><rect x="470.8" y="211.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.8" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 2.86%)</title><rect x="476.4" y="323.0" width="33.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.4" y="334.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.86%)</title><rect x="476.4" y="307.0" width="33.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="479.4" y="318.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/701735847.process (3 samples, 1.43%)</title><rect x="476.4" y="291.0" width="16.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.4" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.43%)</title><rect x="476.4" y="275.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="479.4" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.95%)</title><rect x="476.4" y="259.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.4" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.95%)</title><rect x="476.4" y="243.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.95%)</title><rect x="476.4" y="227.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="479.4" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.95%)</title><rect x="476.4" y="211.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.95%)</title><rect x="476.4" y="195.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.48%)</title><rect x="482.0" y="179.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.0" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.48%)</title><rect x="482.0" y="163.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="485.0" y="174.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="482.0" y="147.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="485.0" y="158.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.48%)</title><rect x="487.6" y="259.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.6" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="487.6" y="243.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.6" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.48%)</title><rect x="487.6" y="227.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.6" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="487.6" y="211.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.6" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.95%)</title><rect x="493.2" y="291.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.2" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.95%)</title><rect x="493.2" y="275.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.2" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.48%)</title><rect x="504.5" y="291.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.5" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.48%)</title><rect x="504.5" y="275.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.5" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.48%)</title><rect x="504.5" y="259.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.48%)</title><rect x="510.1" y="323.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.48%)</title><rect x="515.7" y="323.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.48%)</title><rect x="515.7" y="307.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.48%)</title><rect x="515.7" y="291.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.7" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1384027597.accept (1 samples, 0.48%)</title><rect x="515.7" y="275.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.7" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.48%)</title><rect x="515.7" y="259.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.7" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.48%)</title><rect x="515.7" y="243.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.7" y="254.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.48%)</title><rect x="515.7" y="227.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.7" y="238.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.48%)</title><rect x="515.7" y="211.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.7" y="222.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="515.7" y="195.0" width="5.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="518.7" y="206.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="515.7" y="179.0" width="5.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="518.7" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.48%)</title><rect x="521.3" y="355.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.95%)</title><rect x="527.0" y="403.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.95%)</title><rect x="527.0" y="387.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.48%)</title><rect x="532.6" y="371.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.95%)</title><rect x="538.2" y="403.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 7.14%)</title><rect x="549.4" y="403.0" width="84.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.4" y="414.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 7.14%)</title><rect x="549.4" y="387.0" width="84.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.4" y="398.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 5.71%)</title><rect x="549.4" y="371.0" width="67.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.4" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.48%)</title><rect x="549.4" y="355.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="552.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 5.24%)</title><rect x="555.0" y="355.0" width="61.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.0" y="366.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 4.76%)</title><rect x="560.7" y="339.0" width="56.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="563.7" y="350.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 3.81%)</title><rect x="566.3" y="323.0" width="44.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="569.3" y="334.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.95%)</title><rect x="566.3" y="307.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="569.3" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.48%)</title><rect x="571.9" y="291.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="574.9" y="302.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.48%)</title><rect x="571.9" y="275.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="574.9" y="286.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.48%)</title><rect x="577.5" y="307.0" width="5.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="580.5" y="318.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.95%)</title><rect x="583.1" y="307.0" width="11.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="586.1" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.43%)</title><rect x="594.4" y="307.0" width="16.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="597.4" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.48%)</title><rect x="611.2" y="323.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="614.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.43%)</title><rect x="616.9" y="371.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="619.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.43%)</title><rect x="616.9" y="355.0" width="16.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="619.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.43%)</title><rect x="616.9" y="339.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="619.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.43%)</title><rect x="616.9" y="323.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.9" y="334.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.48%)</title><rect x="633.7" y="451.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="636.7" y="462.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.48%)</title><rect x="639.3" y="451.0" width="5.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="642.3" y="462.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.48%)</title><rect x="639.3" y="435.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="642.3" y="446.0"></text>
</g>
<g>
<title>start_thread (97 samples, 46.19%)</title><rect x="645.0" y="451.0" width="545.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="648.0" y="462.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (97 samples, 46.19%)</title><rect x="645.0" y="435.0" width="545.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="648.0" y="446.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 12.38%)</title><rect x="645.0" y="419.0" width="146.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="648.0" y="430.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 4.76%)</title><rect x="645.0" y="403.0" width="56.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.0" y="414.0">G1ParP..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 4.76%)</title><rect x="645.0" y="387.0" width="56.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="648.0" y="398.0">G1ParE..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.43%)</title><rect x="645.0" y="371.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="648.0" y="382.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 3.33%)</title><rect x="661.8" y="371.0" width="39.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="664.8" y="382.0">Spi..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (16 samples, 7.62%)</title><rect x="701.1" y="403.0" width="89.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.1" y="414.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 5.71%)</title><rect x="701.1" y="387.0" width="67.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="704.1" y="398.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.43%)</title><rect x="706.8" y="371.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="709.8" y="382.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.48%)</title><rect x="718.0" y="355.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="721.0" y="366.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.95%)</title><rect x="723.6" y="371.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="726.6" y="382.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.95%)</title><rect x="734.9" y="371.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.9" y="382.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.90%)</title><rect x="746.1" y="371.0" width="22.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="749.1" y="382.0">S..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.48%)</title><rect x="768.6" y="387.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="771.6" y="398.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.48%)</title><rect x="768.6" y="371.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="771.6" y="382.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.48%)</title><rect x="768.6" y="355.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="771.6" y="366.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.48%)</title><rect x="768.6" y="339.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="771.6" y="350.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 1.43%)</title><rect x="774.2" y="387.0" width="16.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="777.2" y="398.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 1.43%)</title><rect x="774.2" y="371.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="777.2" y="382.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 1.43%)</title><rect x="774.2" y="355.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="777.2" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (3 samples, 1.43%)</title><rect x="774.2" y="339.0" width="16.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="777.2" y="350.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (3 samples, 1.43%)</title><rect x="774.2" y="323.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.2" y="334.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (3 samples, 1.43%)</title><rect x="774.2" y="307.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.2" y="318.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.95%)</title><rect x="774.2" y="291.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="777.2" y="302.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.48%)</title><rect x="779.8" y="275.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="782.8" y="286.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.48%)</title><rect x="785.4" y="291.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.4" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (71 samples, 33.81%)</title><rect x="791.0" y="419.0" width="399.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.0" y="430.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (71 samples, 33.81%)</title><rect x="791.0" y="403.0" width="399.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.0" y="414.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (71 samples, 33.81%)</title><rect x="791.0" y="387.0" width="399.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.0" y="398.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (69 samples, 32.86%)</title><rect x="791.0" y="371.0" width="387.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.0" y="382.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (69 samples, 32.86%)</title><rect x="791.0" y="355.0" width="387.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="794.0" y="366.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 16.67%)</title><rect x="791.0" y="339.0" width="196.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.0" y="350.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.48%)</title><rect x="791.0" y="323.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="794.0" y="334.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.48%)</title><rect x="791.0" y="307.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.0" y="318.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.48%)</title><rect x="791.0" y="291.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="794.0" y="302.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.48%)</title><rect x="791.0" y="275.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.0" y="286.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.48%)</title><rect x="791.0" y="259.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.0" y="270.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.48%)</title><rect x="791.0" y="243.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.0" y="254.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.48%)</title><rect x="796.7" y="323.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.7" y="334.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.48%)</title><rect x="796.7" y="307.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.7" y="318.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.48%)</title><rect x="796.7" y="291.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.7" y="302.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.95%)</title><rect x="802.3" y="323.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.3" y="334.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.95%)</title><rect x="802.3" y="307.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.3" y="318.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.48%)</title><rect x="807.9" y="291.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="810.9" y="302.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.43%)</title><rect x="813.5" y="323.0" width="16.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="816.5" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.43%)</title><rect x="813.5" y="307.0" width="16.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.5" y="318.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.95%)</title><rect x="813.5" y="291.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="816.5" y="302.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.95%)</title><rect x="813.5" y="275.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="816.5" y="286.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.48%)</title><rect x="824.8" y="291.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.8" y="302.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.48%)</title><rect x="824.8" y="275.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="827.8" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 13.33%)</title><rect x="830.4" y="323.0" width="157.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.4" y="334.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.48%)</title><rect x="830.4" y="307.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.4" y="318.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="830.4" y="291.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.4" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.95%)</title><rect x="836.0" y="307.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="839.0" y="318.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="836.0" y="291.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.0" y="302.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.48%)</title><rect x="841.6" y="291.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.6" y="302.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="841.6" y="275.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.6" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.38%)</title><rect x="847.2" y="307.0" width="28.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="850.2" y="318.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.48%)</title><rect x="869.7" y="291.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="872.7" y="302.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.48%)</title><rect x="869.7" y="275.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="872.7" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.86%)</title><rect x="875.3" y="307.0" width="33.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.3" y="318.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.95%)</title><rect x="892.2" y="291.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="895.2" y="302.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="897.8" y="275.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="900.8" y="286.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.48%)</title><rect x="903.4" y="291.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="906.4" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.48%)</title><rect x="909.0" y="307.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="912.0" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.43%)</title><rect x="914.7" y="307.0" width="16.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.7" y="318.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.48%)</title><rect x="925.9" y="291.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.9" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.95%)</title><rect x="931.5" y="307.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.5" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.48%)</title><rect x="937.1" y="291.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.1" y="302.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.95%)</title><rect x="942.8" y="307.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.8" y="318.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.95%)</title><rect x="942.8" y="291.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.8" y="302.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.95%)</title><rect x="954.0" y="307.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.0" y="318.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="959.6" y="291.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.6" y="302.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.43%)</title><rect x="965.2" y="307.0" width="16.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.2" y="318.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.48%)</title><rect x="965.2" y="291.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.2" y="302.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.95%)</title><rect x="970.9" y="291.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.9" y="302.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.48%)</title><rect x="982.1" y="307.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.1" y="318.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 13.81%)</title><rect x="987.7" y="339.0" width="163.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.7" y="350.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.95%)</title><rect x="987.7" y="323.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.7" y="334.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.95%)</title><rect x="987.7" y="307.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.7" y="318.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.48%)</title><rect x="987.7" y="291.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.7" y="302.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.48%)</title><rect x="993.3" y="291.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.3" y="302.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="323.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.0" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.48%)</title><rect x="999.0" y="307.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1002.0" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.48%)</title><rect x="999.0" y="291.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.0" y="302.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="999.0" y="275.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1002.0" y="286.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.48%)</title><rect x="999.0" y="259.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.0" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="243.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.0" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="227.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.0" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="211.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1002.0" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="195.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="179.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="163.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.0" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="147.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.0" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="131.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.0" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="115.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.0" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="99.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1002.0" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="83.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.0" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="67.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.0" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.48%)</title><rect x="999.0" y="51.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1002.0" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.48%)</title><rect x="999.0" y="35.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1002.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.48%)</title><rect x="1004.6" y="323.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.48%)</title><rect x="1004.6" y="307.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.48%)</title><rect x="1004.6" y="291.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.48%)</title><rect x="1004.6" y="275.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.6" y="286.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.48%)</title><rect x="1004.6" y="259.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.6" y="270.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.48%)</title><rect x="1004.6" y="243.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1007.6" y="254.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1004.6" y="227.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.6" y="238.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.95%)</title><rect x="1010.2" y="323.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.2" y="334.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.95%)</title><rect x="1010.2" y="307.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.2" y="318.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.48%)</title><rect x="1015.8" y="291.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.8" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 7.62%)</title><rect x="1021.4" y="323.0" width="89.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.4" y="334.0">PhaseIdeal..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.48%)</title><rect x="1021.4" y="307.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.48%)</title><rect x="1021.4" y="291.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.4" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.48%)</title><rect x="1021.4" y="275.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.48%)</title><rect x="1021.4" y="259.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.95%)</title><rect x="1027.0" y="307.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.0" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.48%)</title><rect x="1032.7" y="291.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.7" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 4.76%)</title><rect x="1038.3" y="307.0" width="56.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.3" y="318.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 3.81%)</title><rect x="1049.5" y="291.0" width="45.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.5" y="302.0">Phas..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.48%)</title><rect x="1049.5" y="275.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.5" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 3.33%)</title><rect x="1055.1" y="275.0" width="39.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.1" y="286.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.48%)</title><rect x="1055.1" y="259.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1058.1" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 2.86%)</title><rect x="1060.8" y="259.0" width="33.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.8" y="270.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.48%)</title><rect x="1094.5" y="307.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.5" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.48%)</title><rect x="1094.5" y="291.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.5" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="1100.1" y="307.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.1" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.48%)</title><rect x="1105.7" y="307.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.48%)</title><rect x="1105.7" y="291.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.7" y="302.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.48%)</title><rect x="1105.7" y="275.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 3.33%)</title><rect x="1111.3" y="323.0" width="39.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.3" y="334.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 3.33%)</title><rect x="1111.3" y="307.0" width="39.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.3" y="318.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1111.3" y="291.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="302.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1111.3" y="275.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.3" y="286.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.48%)</title><rect x="1117.0" y="291.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.0" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.48%)</title><rect x="1122.6" y="291.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.6" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.48%)</title><rect x="1122.6" y="275.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.6" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.48%)</title><rect x="1128.2" y="291.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.2" y="302.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1133.8" y="291.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.8" y="302.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.48%)</title><rect x="1133.8" y="275.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="286.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1139.4" y="291.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.4" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.48%)</title><rect x="1139.4" y="275.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.4" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.48%)</title><rect x="1139.4" y="259.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="270.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.48%)</title><rect x="1139.4" y="243.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.4" y="254.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1145.0" y="291.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="302.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.48%)</title><rect x="1145.0" y="275.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="259.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.0" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="243.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="227.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="211.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="195.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="179.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="163.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.0" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="147.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="131.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.48%)</title><rect x="1145.0" y="115.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="126.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.48%)</title><rect x="1145.0" y="99.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.43%)</title><rect x="1150.7" y="339.0" width="16.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.43%)</title><rect x="1150.7" y="323.0" width="16.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.43%)</title><rect x="1150.7" y="307.0" width="16.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.43%)</title><rect x="1150.7" y="291.0" width="16.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.43%)</title><rect x="1150.7" y="275.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1150.7" y="259.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="270.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.48%)</title><rect x="1150.7" y="243.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="254.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.48%)</title><rect x="1150.7" y="227.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1156.3" y="243.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1156.3" y="227.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1156.3" y="211.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1156.3" y="195.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1156.3" y="179.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1156.3" y="163.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1156.3" y="147.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1156.3" y="131.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.48%)</title><rect x="1156.3" y="115.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1156.3" y="99.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="110.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.48%)</title><rect x="1156.3" y="83.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="94.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="1156.3" y="67.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.3" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1156.3" y="51.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.48%)</title><rect x="1156.3" y="35.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.48%)</title><rect x="1161.9" y="259.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="270.0"></text>
</g>
<g>
<title>Node::Identity(PhaseTransform*) (1 samples, 0.48%)</title><rect x="1161.9" y="243.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.9" y="254.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.48%)</title><rect x="1167.5" y="339.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="350.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.48%)</title><rect x="1167.5" y="323.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="334.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.48%)</title><rect x="1173.1" y="339.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="350.0"></text>
</g>
<g>
<title>Dict::Dict(int (*)(void const*, void const*), int (*)(void const*), Arena*, int) (1 samples, 0.48%)</title><rect x="1173.1" y="323.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.1" y="334.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.48%)</title><rect x="1173.1" y="307.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.1" y="318.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.48%)</title><rect x="1173.1" y="291.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.1" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.48%)</title><rect x="1173.1" y="275.0" width="5.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1176.1" y="286.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.95%)</title><rect x="1178.8" y="371.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.95%)</title><rect x="1178.8" y="355.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.95%)</title><rect x="1178.8" y="339.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.95%)</title><rect x="1178.8" y="323.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.48%)</title><rect x="1178.8" y="307.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.48%)</title><rect x="1178.8" y="291.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.48%)</title><rect x="1178.8" y="275.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (1 samples, 0.48%)</title><rect x="1178.8" y="259.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.48%)</title><rect x="1184.4" y="307.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="318.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.48%)</title><rect x="1184.4" y="291.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="302.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.48%)</title><rect x="1184.4" y="275.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="286.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.48%)</title><rect x="1184.4" y="259.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="270.0"></text>
</g>
</g>
</svg>
