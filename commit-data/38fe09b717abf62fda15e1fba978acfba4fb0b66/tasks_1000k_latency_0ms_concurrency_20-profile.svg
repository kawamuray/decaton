<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (1,179 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>__GI__IO_padn (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (279 samples, 23.66%)</title><rect x="11.0" y="1091.0" width="279.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1102.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (279 samples, 23.66%)</title><rect x="11.0" y="1075.0" width="279.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1086.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.42%)</title><rect x="11.0" y="1059.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.42%)</title><rect x="11.0" y="1043.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1787602502.accept (4 samples, 0.34%)</title><rect x="12.0" y="1027.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.34%)</title><rect x="12.0" y="1011.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="12.0" y="995.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.34%)</title><rect x="12.0" y="979.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="15.0" y="963.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="15.0" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="15.0" y="931.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="15.0" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.42%)</title><rect x="16.0" y="1059.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.42%)</title><rect x="16.0" y="1043.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.42%)</title><rect x="16.0" y="1027.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.42%)</title><rect x="16.0" y="1011.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.42%)</title><rect x="16.0" y="995.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.34%)</title><rect x="17.0" y="979.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.34%)</title><rect x="17.0" y="963.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="17.0" y="947.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="20.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="18.0" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="18.0" y="931.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1152251577.test (1 samples, 0.08%)</title><rect x="18.0" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.0" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.17%)</title><rect x="19.0" y="947.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (2 samples, 0.17%)</title><rect x="19.0" y="931.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (213 samples, 18.07%)</title><rect x="21.0" y="1059.0" width="213.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.0" y="1070.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (210 samples, 17.81%)</title><rect x="21.0" y="1043.0" width="210.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.0" y="1054.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="21.0" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="24.0" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="21.0" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="21.0" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="21.0" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (209 samples, 17.73%)</title><rect x="22.0" y="1027.0" width="209.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="1038.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (172 samples, 14.59%)</title><rect x="22.0" y="1011.0" width="172.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.0" y="1022.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (172 samples, 14.59%)</title><rect x="22.0" y="995.0" width="172.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.0" y="1006.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (172 samples, 14.59%)</title><rect x="22.0" y="979.0" width="172.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.0" y="990.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (172 samples, 14.59%)</title><rect x="22.0" y="963.0" width="172.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="974.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (172 samples, 14.59%)</title><rect x="22.0" y="947.0" width="172.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="958.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="38.0" y="931.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 13.06%)</title><rect x="39.0" y="931.0" width="154.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.0" y="942.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (127 samples, 10.77%)</title><rect x="39.0" y="915.0" width="127.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.0" y="926.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (127 samples, 10.77%)</title><rect x="39.0" y="899.0" width="127.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.0" y="910.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (127 samples, 10.77%)</title><rect x="39.0" y="883.0" width="127.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.0" y="894.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (127 samples, 10.77%)</title><rect x="39.0" y="867.0" width="127.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.0" y="878.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (127 samples, 10.77%)</title><rect x="39.0" y="851.0" width="127.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="862.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (81 samples, 6.87%)</title><rect x="85.1" y="835.0" width="81.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.1" y="846.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.60%)</title><rect x="89.1" y="819.0" width="66.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="92.1" y="830.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="93.1" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="96.1" y="814.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="95.1" y="803.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="98.1" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="97.1" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.1" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 3.90%)</title><rect x="98.1" y="803.0" width="46.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="101.1" y="814.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="144.1" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="147.1" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.85%)</title><rect x="145.1" y="803.0" width="10.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="148.1" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 0.76%)</title><rect x="155.1" y="819.0" width="9.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="158.1" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="164.1" y="819.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="167.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 2.29%)</title><rect x="166.1" y="915.0" width="27.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.1" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 2.29%)</title><rect x="166.1" y="899.0" width="27.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.1" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 2.29%)</title><rect x="166.1" y="883.0" width="27.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.1" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 2.29%)</title><rect x="166.1" y="867.0" width="27.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.1" y="878.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="193.2" y="931.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="196.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.25%)</title><rect x="194.2" y="1011.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="194.2" y="995.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="194.2" y="979.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (34 samples, 2.88%)</title><rect x="197.2" y="1011.0" width="34.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.2" y="1022.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="197.2" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.80%)</title><rect x="198.2" y="995.0" width="33.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.2" y="1006.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.85%)</title><rect x="217.2" y="979.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.2" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.51%)</title><rect x="217.2" y="963.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.2" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.51%)</title><rect x="217.2" y="947.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.2" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.51%)</title><rect x="217.2" y="931.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.2" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="222.2" y="915.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="225.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="223.2" y="963.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.2" y="974.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="227.2" y="979.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="230.2" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="228.2" y="979.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="231.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.25%)</title><rect x="231.2" y="1043.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.25%)</title><rect x="231.2" y="1027.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="231.2" y="1011.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="231.2" y="995.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.25%)</title><rect x="231.2" y="979.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.25%)</title><rect x="231.2" y="963.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.75%)</title><rect x="234.2" y="1059.0" width="56.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.2" y="1070.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.75%)</title><rect x="234.2" y="1043.0" width="56.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.2" y="1054.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.14%)</title><rect x="235.2" y="1027.0" width="37.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.2" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="235.2" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="235.2" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.05%)</title><rect x="236.2" y="1011.0" width="36.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.2" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 3.05%)</title><rect x="236.2" y="995.0" width="36.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.2" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.63%)</title><rect x="236.2" y="979.0" width="31.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.2" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.63%)</title><rect x="236.2" y="963.0" width="31.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.2" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.27%)</title><rect x="238.2" y="947.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.68%)</title><rect x="245.2" y="931.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.68%)</title><rect x="245.2" y="915.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.68%)</title><rect x="245.2" y="899.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.68%)</title><rect x="245.2" y="883.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.68%)</title><rect x="245.2" y="867.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.68%)</title><rect x="245.2" y="851.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.68%)</title><rect x="245.2" y="835.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.19%)</title><rect x="253.2" y="947.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.10%)</title><rect x="254.2" y="931.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="254.2" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="257.2" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="254.2" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="257.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="254.2" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="257.2" y="894.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="254.2" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="257.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.68%)</title><rect x="255.2" y="915.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.2" y="926.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.68%)</title><rect x="255.2" y="899.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.2" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="261.2" y="883.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="264.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.34%)</title><rect x="263.2" y="915.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.2" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.34%)</title><rect x="263.2" y="899.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="267.2" y="979.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="267.2" y="963.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="267.2" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="267.2" y="931.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="267.2" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="267.2" y="899.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="268.2" y="947.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="268.2" y="931.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="269.2" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="269.2" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.08%)</title><rect x="269.2" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="269.2" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="269.2" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="269.2" y="899.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.17%)</title><rect x="270.2" y="979.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.08%)</title><rect x="270.2" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="271.2" y="963.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="271.2" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.2" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="271.2" y="931.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="271.2" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.59%)</title><rect x="272.2" y="1027.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.51%)</title><rect x="272.2" y="1011.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.42%)</title><rect x="272.2" y="995.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="272.2" y="979.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="272.2" y="963.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/2117579856.accept (1 samples, 0.08%)</title><rect x="272.2" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/2117579856.accept (1 samples, 0.08%)</title><rect x="273.2" y="963.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="273.2" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="273.2" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="273.2" y="915.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="273.2" y="899.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="273.2" y="883.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="273.2" y="867.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="274.2" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="274.2" y="963.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="274.2" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="274.2" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="274.2" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.2" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="274.2" y="899.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.08%)</title><rect x="274.2" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="275.2" y="979.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="275.2" y="963.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="275.2" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="275.2" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="275.2" y="915.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="275.2" y="899.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="275.2" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="275.2" y="867.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="276.2" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="276.2" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="276.2" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="276.2" y="899.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="277.2" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="277.2" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="277.2" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="277.2" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="277.2" y="931.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="277.2" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="277.2" y="899.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="277.2" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="277.2" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="278.2" y="1011.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="278.2" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="278.2" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="278.2" y="963.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="278.2" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="278.2" y="931.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="278.2" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="278.2" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.51%)</title><rect x="279.2" y="1027.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.51%)</title><rect x="279.2" y="1011.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.08%)</title><rect x="279.2" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.08%)</title><rect x="279.2" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.08%)</title><rect x="279.2" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.42%)</title><rect x="280.2" y="995.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="280.2" y="979.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="280.2" y="963.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="280.2" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="280.2" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="281.2" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="281.2" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="281.2" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.08%)</title><rect x="281.2" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.08%)</title><rect x="281.2" y="883.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.08%)</title><rect x="282.2" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="282.2" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="282.2" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="282.2" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="282.2" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="283.2" y="979.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.17%)</title><rect x="283.2" y="963.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.2" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="283.2" y="947.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="286.2" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="283.2" y="931.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="286.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.34%)</title><rect x="285.2" y="1027.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.34%)</title><rect x="285.2" y="1011.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="285.2" y="995.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/275374105.accept (2 samples, 0.17%)</title><rect x="285.2" y="979.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.17%)</title><rect x="285.2" y="963.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="285.2" y="947.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="285.2" y="931.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="285.2" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="285.2" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="286.2" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="287.2" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="287.2" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="287.2" y="963.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="287.2" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="287.2" y="931.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="288.2" y="995.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.2" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="289.2" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="292.2" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="289.2" y="1011.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="292.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (752 samples, 63.78%)</title><rect x="290.2" y="1091.0" width="752.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.2" y="1102.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (752 samples, 63.78%)</title><rect x="290.2" y="1075.0" width="752.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.2" y="1086.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (752 samples, 63.78%)</title><rect x="290.2" y="1059.0" width="752.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.2" y="1070.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (505 samples, 42.83%)</title><rect x="290.2" y="1043.0" width="505.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.2" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/19044..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (505 samples, 42.83%)</title><rect x="290.2" y="1027.0" width="505.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.2" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (505 samples, 42.83%)</title><rect x="290.2" y="1011.0" width="505.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.2" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="294.2" y="995.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="297.2" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.68%)</title><rect x="296.2" y="995.0" width="8.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="299.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="298.2" y="979.0" width="6.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="301.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (489 samples, 41.48%)</title><rect x="304.2" y="995.0" width="489.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.2" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="317.3" y="979.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="320.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (2 samples, 0.17%)</title><rect x="319.3" y="979.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="322.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (152 samples, 12.89%)</title><rect x="321.3" y="979.0" width="152.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.3" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (152 samples, 12.89%)</title><rect x="321.3" y="963.0" width="152.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.3" y="974.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (152 samples, 12.89%)</title><rect x="321.3" y="947.0" width="152.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.3" y="958.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="321.3" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="324.3" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="321.3" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="324.3" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="321.3" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="324.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="321.3" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="324.3" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="321.3" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="324.3" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="321.3" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="324.3" y="862.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="321.3" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="324.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="321.3" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="324.3" y="830.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="321.3" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="324.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 12.81%)</title><rect x="322.3" y="931.0" width="151.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.3" y="942.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 12.81%)</title><rect x="322.3" y="915.0" width="151.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.3" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (151 samples, 12.81%)</title><rect x="322.3" y="899.0" width="151.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="325.3" y="910.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 3.82%)</title><rect x="322.3" y="883.0" width="45.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.3" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 1.10%)</title><rect x="322.3" y="867.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 1.10%)</title><rect x="322.3" y="851.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (9 samples, 0.76%)</title><rect x="322.3" y="835.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.34%)</title><rect x="331.3" y="835.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="331.3" y="819.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="333.3" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="333.3" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="336.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.08%)</title><rect x="334.3" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (32 samples, 2.71%)</title><rect x="335.3" y="867.0" width="32.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.3" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (32 samples, 2.71%)</title><rect x="335.3" y="851.0" width="32.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.3" y="862.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="337.3" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="340.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="337.3" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="337.3" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="340.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="337.3" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="340.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="338.3" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="341.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="338.3" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (12 samples, 1.02%)</title><rect x="339.3" y="835.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="344.3" y="819.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.08%)</title><rect x="345.3" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.08%)</title><rect x="346.3" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.25%)</title><rect x="347.3" y="819.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.08%)</title><rect x="350.3" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.76%)</title><rect x="351.3" y="835.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.76%)</title><rect x="351.3" y="819.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.34%)</title><rect x="355.3" y="803.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="358.3" y="787.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="359.3" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="359.3" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="362.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="359.3" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="359.3" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="362.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="359.3" y="739.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.3" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="359.3" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="362.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="359.3" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="362.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.59%)</title><rect x="360.3" y="835.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="365.3" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="366.3" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (98 samples, 8.31%)</title><rect x="367.3" y="883.0" width="98.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.3" y="894.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (11 samples, 0.93%)</title><rect x="367.3" y="867.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (11 samples, 0.93%)</title><rect x="367.3" y="851.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (8 samples, 0.68%)</title><rect x="367.3" y="835.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.25%)</title><rect x="367.3" y="819.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 0.42%)</title><rect x="370.3" y="819.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (3 samples, 0.25%)</title><rect x="375.3" y="835.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.25%)</title><rect x="375.3" y="819.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.08%)</title><rect x="378.3" y="867.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="381.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="378.3" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.76%)</title><rect x="379.3" y="867.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.76%)</title><rect x="379.3" y="851.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.51%)</title><rect x="380.3" y="835.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.25%)</title><rect x="383.3" y="819.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.3" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="385.3" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="388.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="385.3" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="386.3" y="835.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="386.3" y="819.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.68%)</title><rect x="388.3" y="867.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.68%)</title><rect x="388.3" y="851.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.3" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.25%)</title><rect x="388.3" y="835.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="391.3" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="388.3" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="391.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="389.3" y="819.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="392.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="389.3" y="803.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="392.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="389.3" y="787.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="392.3" y="798.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="390.3" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="393.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.42%)</title><rect x="391.3" y="835.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="394.3" y="819.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="394.3" y="803.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.85%)</title><rect x="396.3" y="867.0" width="69.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.3" y="878.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.44%)</title><rect x="397.3" y="851.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="398.3" y="835.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="398.3" y="819.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="398.3" y="803.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.34%)</title><rect x="398.3" y="787.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="400.3" y="771.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 1.02%)</title><rect x="402.3" y="835.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.25%)</title><rect x="402.3" y="819.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (9 samples, 0.76%)</title><rect x="405.3" y="819.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (9 samples, 0.76%)</title><rect x="405.3" y="803.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 0.51%)</title><rect x="408.3" y="787.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 0.51%)</title><rect x="408.3" y="771.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.33%)</title><rect x="414.3" y="851.0" width="51.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.3" y="862.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.33%)</title><rect x="414.3" y="835.0" width="51.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.3" y="846.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.16%)</title><rect x="414.3" y="819.0" width="49.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.3" y="830.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.36%)</title><rect x="418.3" y="803.0" width="16.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.42%)</title><rect x="421.3" y="787.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.42%)</title><rect x="421.3" y="771.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.42%)</title><rect x="421.3" y="755.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="421.3" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.34%)</title><rect x="422.3" y="739.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="425.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="424.4" y="723.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="425.4" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.08%)</title><rect x="425.4" y="691.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.34%)</title><rect x="426.4" y="787.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="426.4" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.25%)</title><rect x="427.4" y="771.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.25%)</title><rect x="427.4" y="755.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="430.4" y="787.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="430.4" y="771.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.17%)</title><rect x="432.4" y="787.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.76%)</title><rect x="434.4" y="803.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.51%)</title><rect x="437.4" y="787.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.51%)</title><rect x="437.4" y="771.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.51%)</title><rect x="437.4" y="755.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.51%)</title><rect x="437.4" y="739.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.68%)</title><rect x="443.4" y="803.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.68%)</title><rect x="443.4" y="787.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="446.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.68%)</title><rect x="443.4" y="771.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.68%)</title><rect x="443.4" y="755.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.4" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.68%)</title><rect x="443.4" y="739.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.4" y="750.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.42%)</title><rect x="446.4" y="723.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (12 samples, 1.02%)</title><rect x="451.4" y="803.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.02%)</title><rect x="451.4" y="787.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 1.02%)</title><rect x="451.4" y="771.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="454.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (2 samples, 0.17%)</title><rect x="463.4" y="819.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="466.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.68%)</title><rect x="465.4" y="883.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.68%)</title><rect x="465.4" y="867.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="468.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.68%)</title><rect x="465.4" y="851.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.68%)</title><rect x="465.4" y="835.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="468.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="467.4" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.42%)</title><rect x="468.4" y="819.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (299 samples, 25.36%)</title><rect x="473.4" y="979.0" width="299.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.4" y="990.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (60 samples, 5.09%)</title><rect x="474.4" y="963.0" width="60.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.4" y="974.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (60 samples, 5.09%)</title><rect x="474.4" y="947.0" width="60.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.4" y="958.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (56 samples, 4.75%)</title><rect x="478.4" y="931.0" width="56.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.4" y="942.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.51%)</title><rect x="480.4" y="915.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.51%)</title><rect x="480.4" y="899.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.51%)</title><rect x="480.4" y="883.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.51%)</title><rect x="480.4" y="867.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.08%)</title><rect x="485.4" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="485.4" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="488.4" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 4.07%)</title><rect x="486.4" y="915.0" width="48.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.4" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (16 samples, 1.36%)</title><rect x="518.4" y="899.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.17%)</title><rect x="518.4" y="883.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.4" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="518.4" y="867.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="521.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (14 samples, 1.19%)</title><rect x="520.4" y="883.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.4" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.25%)</title><rect x="530.4" y="867.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.4" y="878.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="533.4" y="867.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="536.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.42%)</title><rect x="534.4" y="963.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.34%)</title><rect x="535.4" y="947.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.34%)</title><rect x="535.4" y="931.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (156 samples, 13.23%)</title><rect x="539.4" y="963.0" width="156.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="542.4" y="974.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (156 samples, 13.23%)</title><rect x="539.4" y="947.0" width="156.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.4" y="958.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="545.5" y="931.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="548.5" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="545.5" y="915.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="548.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (66 samples, 5.60%)</title><rect x="548.5" y="931.0" width="66.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.5" y="942.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 3.56%)</title><rect x="559.5" y="915.0" width="42.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.5" y="926.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.39%)</title><rect x="561.5" y="899.0" width="40.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="564.5" y="910.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 1.95%)</title><rect x="571.5" y="883.0" width="23.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="574.5" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 1.95%)</title><rect x="571.5" y="867.0" width="23.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="574.5" y="878.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 1.95%)</title><rect x="571.5" y="851.0" width="23.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="574.5" y="862.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.02%)</title><rect x="576.5" y="835.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="576.5" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="576.5" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="579.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.42%)</title><rect x="577.5" y="819.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="580.5" y="830.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="577.5" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="580.5" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.34%)</title><rect x="578.5" y="803.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="581.5" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.34%)</title><rect x="578.5" y="787.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.5" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="578.5" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="581.5" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="578.5" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="581.5" y="766.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="579.5" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="582.5" y="782.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="580.5" y="771.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="583.5" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.42%)</title><rect x="582.5" y="819.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="585.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.25%)</title><rect x="584.5" y="803.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="587.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="585.5" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="588.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="585.5" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.5" y="782.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="585.5" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="588.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="585.5" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="588.5" y="750.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="585.5" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="588.5" y="734.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="585.5" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="588.5" y="718.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="586.5" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="589.5" y="798.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="587.5" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="590.5" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.51%)</title><rect x="588.5" y="835.0" width="6.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="591.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="594.5" y="883.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="597.5" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="598.5" y="883.0" width="3.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="601.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="601.5" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="604.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="601.5" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="604.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="601.5" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="604.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="601.5" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.5" y="878.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.34%)</title><rect x="602.5" y="915.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="605.5" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.68%)</title><rect x="606.5" y="915.0" width="8.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="609.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.51%)</title><rect x="614.5" y="931.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.17%)</title><rect x="614.5" y="915.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.5" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="614.5" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="615.5" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="618.5" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="615.5" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.5" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.08%)</title><rect x="615.5" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="618.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.34%)</title><rect x="616.5" y="915.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.5" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="617.5" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="620.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="618.5" y="899.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.5" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 6.36%)</title><rect x="620.5" y="931.0" width="75.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.5" y="942.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 6.28%)</title><rect x="621.5" y="915.0" width="74.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.5" y="926.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.76%)</title><rect x="621.5" y="899.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.76%)</title><rect x="621.5" y="883.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.76%)</title><rect x="621.5" y="867.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.76%)</title><rect x="621.5" y="851.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 5.51%)</title><rect x="630.5" y="899.0" width="65.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.5" y="910.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.92%)</title><rect x="637.5" y="883.0" width="58.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.5" y="894.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.14%)</title><rect x="658.5" y="867.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.5" y="878.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="676.6" y="851.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.19%)</title><rect x="678.6" y="851.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.6" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="691.6" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="694.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="691.6" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="694.6" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="691.6" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="694.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="691.6" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="694.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="691.6" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.6" y="782.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.25%)</title><rect x="692.6" y="851.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="695.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (54 samples, 4.58%)</title><rect x="695.6" y="963.0" width="54.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.6" y="974.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (53 samples, 4.50%)</title><rect x="696.6" y="947.0" width="53.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="699.6" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (24 samples, 2.04%)</title><rect x="699.6" y="931.0" width="24.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="702.6" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 1.95%)</title><rect x="700.6" y="915.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.6" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.70%)</title><rect x="701.6" y="899.0" width="20.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="704.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.34%)</title><rect x="702.6" y="883.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.34%)</title><rect x="702.6" y="867.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.6" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.34%)</title><rect x="702.6" y="851.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.6" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.34%)</title><rect x="702.6" y="835.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="704.6" y="819.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="705.6" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.34%)</title><rect x="706.6" y="883.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="706.6" y="867.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="709.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.25%)</title><rect x="707.6" y="867.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="710.6" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="707.6" y="851.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="710.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.93%)</title><rect x="710.6" y="883.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="713.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="721.6" y="899.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="721.6" y="883.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="724.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="721.6" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="724.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="721.6" y="851.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="724.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.08%)</title><rect x="722.6" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.42%)</title><rect x="723.6" y="931.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="726.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.42%)</title><rect x="723.6" y="915.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="726.6" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (11 samples, 0.93%)</title><rect x="728.6" y="931.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="731.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (11 samples, 0.93%)</title><rect x="728.6" y="915.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1389532383.get$Lambda (11 samples, 0.93%)</title><rect x="728.6" y="899.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1389532383.&lt;init&gt; (10 samples, 0.85%)</title><rect x="729.6" y="883.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="732.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="739.6" y="931.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="739.6" y="915.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.6" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.08%)</title><rect x="740.6" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="743.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.42%)</title><rect x="741.6" y="931.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="744.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.25%)</title><rect x="743.6" y="915.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.6" y="926.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="743.6" y="899.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="746.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="746.6" y="931.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="749.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="746.6" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="747.6" y="931.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="748.6" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.6" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/422302325.linkToTargetMethod (2 samples, 0.17%)</title><rect x="749.6" y="963.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="752.6" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (2 samples, 0.17%)</title><rect x="749.6" y="947.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1718752033.get$Lambda (2 samples, 0.17%)</title><rect x="749.6" y="931.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="749.6" y="915.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="752.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="749.6" y="899.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="752.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="749.6" y="883.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="752.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="749.6" y="867.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="752.6" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="750.6" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.78%)</title><rect x="751.6" y="963.0" width="21.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.6" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.78%)</title><rect x="751.6" y="947.0" width="21.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.6" y="958.0">j..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="757.6" y="931.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="760.6" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="758.6" y="931.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="761.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="760.6" y="915.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="763.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.85%)</title><rect x="762.6" y="931.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1718752033.accept (9 samples, 0.76%)</title><rect x="762.6" y="915.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="765.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.76%)</title><rect x="762.6" y="899.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="765.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.76%)</title><rect x="762.6" y="883.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.6" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.76%)</title><rect x="762.6" y="867.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.6" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.76%)</title><rect x="762.6" y="851.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="765.6" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="765.6" y="835.0" width="6.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="768.6" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="765.6" y="819.0" width="6.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="768.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/1279242081.accept (1 samples, 0.08%)</title><rect x="771.6" y="915.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="774.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="771.6" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="774.6" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="771.6" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="774.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="771.6" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="774.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="771.6" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="774.6" y="862.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="771.6" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="771.6" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="774.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.02%)</title><rect x="772.6" y="979.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.02%)</title><rect x="772.6" y="963.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="775.6" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="778.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.68%)</title><rect x="776.6" y="947.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1718752033.accept (8 samples, 0.68%)</title><rect x="776.6" y="931.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.68%)</title><rect x="776.6" y="915.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.68%)</title><rect x="776.6" y="899.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.6" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.68%)</title><rect x="776.6" y="883.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.6" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.68%)</title><rect x="776.6" y="867.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="779.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.76%)</title><rect x="784.7" y="979.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="787.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.76%)</title><rect x="784.7" y="963.0" width="9.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="787.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.17%)</title><rect x="793.7" y="995.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.85%)</title><rect x="795.7" y="1043.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.85%)</title><rect x="795.7" y="1027.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.85%)</title><rect x="795.7" y="1011.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="798.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.85%)</title><rect x="795.7" y="995.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="800.7" y="979.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="803.7" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="800.7" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="803.7" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="801.7" y="979.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="804.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="801.7" y="963.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="804.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (2 samples, 0.17%)</title><rect x="803.7" y="979.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (237 samples, 20.10%)</title><rect x="805.7" y="1043.0" width="237.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.7" y="1054.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (235 samples, 19.93%)</title><rect x="807.7" y="1027.0" width="235.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.7" y="1038.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (214 samples, 18.15%)</title><rect x="807.7" y="1011.0" width="214.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.7" y="1022.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (27 samples, 2.29%)</title><rect x="818.7" y="995.0" width="27.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.7" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.59%)</title><rect x="845.7" y="995.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.59%)</title><rect x="845.7" y="979.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.59%)</title><rect x="845.7" y="963.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="848.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.59%)</title><rect x="845.7" y="947.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="848.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.17%)</title><rect x="852.7" y="995.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.17%)</title><rect x="852.7" y="979.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="855.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (166 samples, 14.08%)</title><rect x="854.7" y="995.0" width="166.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="857.7" y="1006.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (165 samples, 13.99%)</title><rect x="855.7" y="979.0" width="165.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.7" y="990.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="860.7" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.7" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park (153 samples, 12.98%)</title><rect x="861.7" y="963.0" width="153.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="864.7" y="974.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.42%)</title><rect x="864.7" y="947.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.7" y="958.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="869.7" y="947.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="872.7" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.95%)</title><rect x="870.7" y="947.0" width="23.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.7" y="958.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.59%)</title><rect x="881.7" y="931.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.7" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.25%)</title><rect x="883.7" y="915.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="886.7" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="884.7" y="899.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="887.7" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="886.7" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="889.7" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="887.7" y="915.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="890.7" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="888.7" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.7" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="889.7" y="931.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.7" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.25%)</title><rect x="890.7" y="931.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.7" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="893.7" y="947.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="896.7" y="958.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="895.8" y="947.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="898.8" y="958.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.42%)</title><rect x="896.8" y="947.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="899.8" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 3.31%)</title><rect x="901.8" y="947.0" width="39.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="904.8" y="958.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.66%)</title><rect x="940.8" y="947.0" width="55.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="943.8" y="958.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.25%)</title><rect x="995.8" y="947.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="998.8" y="958.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="998.8" y="947.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1001.8" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="999.8" y="947.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1002.8" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.34%)</title><rect x="1001.8" y="947.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1004.8" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="1005.8" y="947.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1008.8" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.34%)</title><rect x="1007.8" y="947.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.8" y="958.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1011.8" y="947.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.8" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1013.9" y="947.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1016.9" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.25%)</title><rect x="1014.9" y="963.0" width="3.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1017.9" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.17%)</title><rect x="1017.9" y="963.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.9" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1019.9" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.9" y="974.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1020.9" y="995.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1023.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.25%)</title><rect x="1021.9" y="1011.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1024.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="1024.9" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1027.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="1024.9" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1024.9" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.9" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1024.9" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1027.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="1024.9" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.44%)</title><rect x="1025.9" y="1011.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.44%)</title><rect x="1025.9" y="995.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.44%)</title><rect x="1025.9" y="979.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1028.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.44%)</title><rect x="1025.9" y="963.0" width="17.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1028.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1042.9" y="1091.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1045.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1042.9" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1042.9" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1045.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="1042.9" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1045.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="1042.9" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="1042.9" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="1042.9" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1045.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="1042.9" y="979.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1045.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="1042.9" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="1042.9" y="947.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1045.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="1042.9" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="1042.9" y="915.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1045.9" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="1042.9" y="899.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1045.9" y="910.0"></text>
</g>
<g>
<title>start_thread (146 samples, 12.38%)</title><rect x="1043.9" y="1091.0" width="146.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1046.9" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (146 samples, 12.38%)</title><rect x="1043.9" y="1075.0" width="146.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1046.9" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.78%)</title><rect x="1043.9" y="1059.0" width="21.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.9" y="1070.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.76%)</title><rect x="1043.9" y="1043.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.9" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.76%)</title><rect x="1043.9" y="1027.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.9" y="1038.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.34%)</title><rect x="1043.9" y="1011.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.9" y="1022.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.42%)</title><rect x="1047.9" y="1011.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1050.9" y="1022.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.02%)</title><rect x="1052.9" y="1043.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.9" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1053.9" y="1027.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.9" y="1038.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1053.9" y="1011.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1056.9" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.34%)</title><rect x="1055.9" y="1027.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.9" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1055.9" y="1011.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.9" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1055.9" y="995.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.9" y="1006.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1055.9" y="979.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.9" y="990.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.17%)</title><rect x="1055.9" y="963.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.9" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1057.9" y="1011.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.9" y="1022.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="1057.9" y="995.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.42%)</title><rect x="1059.9" y="1027.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.9" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.42%)</title><rect x="1059.9" y="1011.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.34%)</title><rect x="1059.9" y="995.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.9" y="1006.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.34%)</title><rect x="1059.9" y="979.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.9" y="990.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.34%)</title><rect x="1059.9" y="963.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.9" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.34%)</title><rect x="1059.9" y="947.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.9" y="958.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="1060.9" y="931.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.9" y="942.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1061.9" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.9" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.08%)</title><rect x="1062.9" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.9" y="926.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1063.9" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.9" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1063.9" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.9" y="990.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1063.9" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.9" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (123 samples, 10.43%)</title><rect x="1064.9" y="1059.0" width="123.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.9" y="1070.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (123 samples, 10.43%)</title><rect x="1064.9" y="1043.0" width="123.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.9" y="1054.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (123 samples, 10.43%)</title><rect x="1064.9" y="1027.0" width="123.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.9" y="1038.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (122 samples, 10.35%)</title><rect x="1064.9" y="1011.0" width="122.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.9" y="1022.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (122 samples, 10.35%)</title><rect x="1064.9" y="995.0" width="122.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.9" y="1006.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (122 samples, 10.35%)</title><rect x="1064.9" y="979.0" width="122.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.9" y="990.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 4.24%)</title><rect x="1064.9" y="963.0" width="50.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.9" y="974.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.25%)</title><rect x="1064.9" y="947.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.9" y="958.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="1064.9" y="931.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.9" y="942.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1065.9" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.9" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1066.9" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.9" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1067.9" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.9" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1067.9" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.9" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1067.9" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.9" y="926.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1068.9" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.9" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.42%)</title><rect x="1069.9" y="947.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.9" y="958.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1069.9" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.9" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.34%)</title><rect x="1070.9" y="931.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.9" y="942.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.17%)</title><rect x="1071.9" y="915.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.9" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1073.9" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.9" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1073.9" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.9" y="910.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1073.9" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.9" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1073.9" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.9" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1073.9" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.9" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1073.9" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.9" y="846.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.08%)</title><rect x="1073.9" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.17%)</title><rect x="1074.9" y="947.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.17%)</title><rect x="1074.9" y="931.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1074.9" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.9" y="926.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.08%)</title><rect x="1074.9" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.9" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1075.9" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 3.22%)</title><rect x="1076.9" y="947.0" width="38.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.9" y="958.0">Pha..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1077.9" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.9" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.17%)</title><rect x="1078.9" y="931.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.9" y="942.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1080.9" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.9" y="942.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1081.9" y="931.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.9" y="942.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1082.9" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.9" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1082.9" y="899.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1085.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.34%)</title><rect x="1083.9" y="931.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.25%)</title><rect x="1084.9" y="915.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.9" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1084.9" y="899.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.08%)</title><rect x="1087.9" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1087.9" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.25%)</title><rect x="1088.9" y="931.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.9" y="942.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1090.9" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.68%)</title><rect x="1091.9" y="931.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.25%)</title><rect x="1095.9" y="915.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.9" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1096.9" y="899.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.9" y="910.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1098.9" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1099.9" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.17%)</title><rect x="1100.9" y="931.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1102.9" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="1103.9" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.9" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.17%)</title><rect x="1104.9" y="931.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.9" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1104.9" y="915.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.9" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.17%)</title><rect x="1104.9" y="899.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.9" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1105.9" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.9" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1106.9" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1107.9" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1108.9" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.9" y="942.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1108.9" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.9" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.42%)</title><rect x="1109.9" y="931.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.9" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1113.9" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1113.9" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (62 samples, 5.26%)</title><rect x="1114.9" y="963.0" width="62.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.9" y="974.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.17%)</title><rect x="1114.9" y="947.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.9" y="958.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.17%)</title><rect x="1114.9" y="931.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.9" y="942.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.08%)</title><rect x="1114.9" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.9" y="926.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.08%)</title><rect x="1115.9" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.42%)</title><rect x="1116.9" y="947.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.42%)</title><rect x="1116.9" y="931.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.08%)</title><rect x="1116.9" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.9" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1116.9" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.9" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1116.9" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.9" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1116.9" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.9" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1116.9" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.9" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1116.9" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1117.9" y="915.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::get_addp_base(Node*) (1 samples, 0.08%)</title><rect x="1118.9" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.9" y="910.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.08%)</title><rect x="1118.9" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1119.9" y="915.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1119.9" y="899.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1119.9" y="883.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1119.9" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1120.9" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1120.9" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1120.9" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.9" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1120.9" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.9" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1121.9" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (46 samples, 3.90%)</title><rect x="1122.9" y="947.0" width="46.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.9" y="958.0">Phas..</text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.08%)</title><rect x="1122.9" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1123.9" y="931.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1125.9" y="931.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1127.9" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (32 samples, 2.71%)</title><rect x="1128.9" y="931.0" width="32.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="942.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 2.46%)</title><rect x="1130.9" y="915.0" width="29.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.9" y="926.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (29 samples, 2.46%)</title><rect x="1130.9" y="899.0" width="29.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.9" y="910.0">Ph..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1156.0" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1156.0" y="867.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1159.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1157.0" y="883.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.08%)</title><rect x="1160.0" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.34%)</title><rect x="1161.0" y="931.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1165.0" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.0" y="942.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.08%)</title><rect x="1165.0" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.0" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1166.0" y="931.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.0" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1166.0" y="915.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.0" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1166.0" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.0" y="910.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.0" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1167.0" y="883.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1168.0" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.59%)</title><rect x="1169.0" y="947.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.59%)</title><rect x="1169.0" y="931.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.0" y="942.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1171.0" y="915.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="926.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.0" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.0" y="910.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1171.0" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1171.0" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="878.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1171.0" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1171.0" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="846.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1172.0" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.0" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.0" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1172.0" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.0" y="915.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.0" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.0" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.0" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="910.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.0" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.0" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="926.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="851.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.0" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.0" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1176.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1176.0" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1176.0" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.68%)</title><rect x="1177.0" y="963.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.68%)</title><rect x="1177.0" y="947.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.68%)</title><rect x="1177.0" y="931.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.68%)</title><rect x="1177.0" y="915.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.68%)</title><rect x="1177.0" y="899.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.68%)</title><rect x="1177.0" y="883.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.0" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.0" y="851.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.0" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.0" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.0" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.0" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.0" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.0" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.0" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1177.0" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1177.0" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.0" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.0" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="686.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1177.0" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="670.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1177.0" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="654.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.0" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="622.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.0" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1177.0" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.0" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1178.0" y="867.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1178.0" y="851.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1178.0" y="835.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1178.0" y="819.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1178.0" y="803.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.51%)</title><rect x="1178.0" y="787.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1178.0" y="771.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1178.0" y="755.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1178.0" y="739.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1178.0" y="723.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.42%)</title><rect x="1178.0" y="707.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.42%)</title><rect x="1178.0" y="691.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1178.0" y="675.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1178.0" y="659.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1178.0" y="643.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1178.0" y="627.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1178.0" y="611.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1178.0" y="595.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1178.0" y="579.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1178.0" y="563.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1178.0" y="547.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1178.0" y="531.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1178.0" y="515.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1178.0" y="499.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="510.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1178.0" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="494.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1178.0" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="478.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypeOopPtr const*, int, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1179.0" y="499.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1179.0" y="483.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1179.0" y="467.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1179.0" y="451.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1179.0" y="435.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1179.0" y="419.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1179.0" y="403.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1179.0" y="387.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1179.0" y="371.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1179.0" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1179.0" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1179.0" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.0" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.0" y="339.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.0" y="323.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.0" y="307.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.0" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.0" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.0" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.0" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.0" y="227.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.0" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.0" y="195.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.0" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.0" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1180.0" y="147.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.0" y="131.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.0" y="115.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.0" y="99.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.0" y="83.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.0" y="67.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1180.0" y="51.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="62.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.08%)</title><rect x="1180.0" y="35.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="579.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.0" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="467.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.0" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="323.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.0" y="291.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="275.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="227.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.0" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="206.0"></text>
</g>
<g>
<title>AddINode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1181.0" y="179.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="190.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1182.0" y="627.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1182.0" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1182.0" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.08%)</title><rect x="1182.0" y="579.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.0" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.0" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.0" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.0" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.0" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.0" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.0" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.0" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.0" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.0" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.0" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.0" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.0" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.0" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1183.0" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1183.0" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1183.0" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1183.0" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1183.0" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.08%)</title><rect x="1183.0" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.08%)</title><rect x="1183.0" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.0" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.0" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.0" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.0" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.0" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.0" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.0" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.0" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.0" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.0" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.0" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.0" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.0" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.0" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.0" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.0" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.0" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.0" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.0" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.0" y="563.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.0" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.0" y="531.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.0" y="515.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.0" y="499.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.0" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.0" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1184.0" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1184.0" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1184.0" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1185.0" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="974.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.0" y="947.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="958.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1186.0" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="974.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.08%)</title><rect x="1186.0" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="958.0"></text>
</g>
<g>
<title>ciInstanceKlass::unique_concrete_subklass() (1 samples, 0.08%)</title><rect x="1186.0" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="942.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1187.0" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1187.0" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1187.0" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1187.0" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="974.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.08%)</title><rect x="1187.0" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="958.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1059.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="1070.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1043.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="1054.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1027.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1011.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="995.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="979.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.0" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1188.0" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.0" y="958.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.08%)</title><rect x="1188.0" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1188.0" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1188.0" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>SurvRateGroup::record_surviving_words(int, unsigned long) (1 samples, 0.08%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (1 samples, 0.08%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
</g>
</svg>
