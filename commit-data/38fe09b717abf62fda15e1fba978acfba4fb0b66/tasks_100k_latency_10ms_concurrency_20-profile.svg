<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (315 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.32%)</title><rect x="10.0" y="1331.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="10.0" y="1315.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.32%)</title><rect x="10.0" y="1299.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.32%)</title><rect x="10.0" y="1283.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.63%)</title><rect x="13.7" y="1331.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.7" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.63%)</title><rect x="13.7" y="1315.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.7" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.63%)</title><rect x="13.7" y="1299.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.7" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.63%)</title><rect x="13.7" y="1283.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.7" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.63%)</title><rect x="13.7" y="1267.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 6.35%)</title><rect x="21.2" y="1331.0" width="75.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.2" y="1342.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.63%)</title><rect x="21.2" y="1315.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.63%)</title><rect x="21.2" y="1299.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.63%)</title><rect x="21.2" y="1283.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.63%)</title><rect x="21.2" y="1267.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.32%)</title><rect x="21.2" y="1251.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.32%)</title><rect x="21.2" y="1235.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="25.0" y="1251.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="25.0" y="1235.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="25.0" y="1219.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.32%)</title><rect x="25.0" y="1203.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.32%)</title><rect x="25.0" y="1187.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.32%)</title><rect x="25.0" y="1171.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.32%)</title><rect x="25.0" y="1155.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.32%)</title><rect x="25.0" y="1139.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.32%)</title><rect x="25.0" y="1123.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.32%)</title><rect x="25.0" y="1107.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 5.71%)</title><rect x="28.7" y="1315.0" width="67.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.7" y="1326.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.32%)</title><rect x="28.7" y="1299.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.7" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.32%)</title><rect x="28.7" y="1283.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.7" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1594197076.accept (1 samples, 0.32%)</title><rect x="28.7" y="1267.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.32%)</title><rect x="28.7" y="1251.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.32%)</title><rect x="28.7" y="1235.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.7" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.32%)</title><rect x="28.7" y="1219.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.32%)</title><rect x="32.5" y="1299.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.5" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.32%)</title><rect x="32.5" y="1283.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.5" y="1294.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.32%)</title><rect x="32.5" y="1267.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="35.5" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.32%)</title><rect x="32.5" y="1251.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="35.5" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="32.5" y="1235.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.5" y="1246.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.32%)</title><rect x="32.5" y="1219.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="35.5" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.32%)</title><rect x="32.5" y="1203.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.5" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.32%)</title><rect x="32.5" y="1187.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="35.5" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.32%)</title><rect x="32.5" y="1171.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="35.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.95%)</title><rect x="36.2" y="1299.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1115484232.accept (3 samples, 0.95%)</title><rect x="36.2" y="1283.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.2" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (3 samples, 0.95%)</title><rect x="36.2" y="1267.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.63%)</title><rect x="36.2" y="1251.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.63%)</title><rect x="36.2" y="1235.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.63%)</title><rect x="36.2" y="1219.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.63%)</title><rect x="36.2" y="1203.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.63%)</title><rect x="36.2" y="1187.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.63%)</title><rect x="36.2" y="1171.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.32%)</title><rect x="43.7" y="1251.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.32%)</title><rect x="43.7" y="1235.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.13%)</title><rect x="47.5" y="1299.0" width="48.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.5" y="1310.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.13%)</title><rect x="47.5" y="1283.0" width="48.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.5" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 3.17%)</title><rect x="47.5" y="1267.0" width="37.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.5" y="1278.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.32%)</title><rect x="47.5" y="1251.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.32%)</title><rect x="47.5" y="1235.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.5" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.32%)</title><rect x="47.5" y="1219.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="50.5" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.32%)</title><rect x="47.5" y="1203.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="50.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.59%)</title><rect x="51.2" y="1251.0" width="18.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.59%)</title><rect x="51.2" y="1235.0" width="18.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="51.2" y="1219.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.32%)</title><rect x="51.2" y="1203.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.32%)</title><rect x="51.2" y="1187.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.32%)</title><rect x="51.2" y="1171.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/800848180.shouldBlock (2 samples, 0.63%)</title><rect x="55.0" y="1219.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (2 samples, 0.63%)</title><rect x="55.0" y="1203.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (2 samples, 0.63%)</title><rect x="55.0" y="1187.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (2 samples, 0.63%)</title><rect x="55.0" y="1171.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.63%)</title><rect x="55.0" y="1155.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.63%)</title><rect x="55.0" y="1139.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.63%)</title><rect x="55.0" y="1123.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.63%)</title><rect x="55.0" y="1107.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.63%)</title><rect x="55.0" y="1091.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.63%)</title><rect x="55.0" y="1075.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.63%)</title><rect x="55.0" y="1059.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.0" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.32%)</title><rect x="55.0" y="1043.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="58.0" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.32%)</title><rect x="55.0" y="1027.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="58.0" y="1038.0"></text>
</g>
<g>
<title>JavaThread::last_frame() (1 samples, 0.32%)</title><rect x="55.0" y="1011.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="58.0" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.32%)</title><rect x="55.0" y="995.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="58.0" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.32%)</title><rect x="55.0" y="979.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="58.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.32%)</title><rect x="58.7" y="1043.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.32%)</title><rect x="58.7" y="1027.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$245/1925606426.test (1 samples, 0.32%)</title><rect x="58.7" y="1011.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.32%)</title><rect x="58.7" y="995.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.32%)</title><rect x="58.7" y="979.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (2 samples, 0.63%)</title><rect x="62.4" y="1219.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (2 samples, 0.63%)</title><rect x="62.4" y="1203.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (2 samples, 0.63%)</title><rect x="62.4" y="1187.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.32%)</title><rect x="66.2" y="1171.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.32%)</title><rect x="66.2" y="1155.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.32%)</title><rect x="66.2" y="1139.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.32%)</title><rect x="66.2" y="1123.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.27%)</title><rect x="69.9" y="1251.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.95%)</title><rect x="69.9" y="1235.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.63%)</title><rect x="69.9" y="1219.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.63%)</title><rect x="69.9" y="1203.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.32%)</title><rect x="69.9" y="1187.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.32%)</title><rect x="73.7" y="1187.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.32%)</title><rect x="73.7" y="1171.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.32%)</title><rect x="73.7" y="1155.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.7" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.32%)</title><rect x="73.7" y="1139.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.7" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.32%)</title><rect x="73.7" y="1123.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.32%)</title><rect x="77.4" y="1219.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.32%)</title><rect x="77.4" y="1203.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="77.4" y="1187.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="77.4" y="1171.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="77.4" y="1155.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.32%)</title><rect x="81.2" y="1235.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.2" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.32%)</title><rect x="81.2" y="1219.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="84.2" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.32%)</title><rect x="81.2" y="1203.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="84.2" y="1214.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.32%)</title><rect x="81.2" y="1187.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="84.2" y="1198.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.32%)</title><rect x="81.2" y="1171.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.2" y="1182.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.32%)</title><rect x="81.2" y="1155.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.2" y="1166.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.32%)</title><rect x="81.2" y="1139.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="84.2" y="1150.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.32%)</title><rect x="81.2" y="1123.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="84.2" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.32%)</title><rect x="81.2" y="1107.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.2" y="1118.0"></text>
</g>
<g>
<title>CompileBroker::create_compile_task(CompileQueue*, int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.32%)</title><rect x="81.2" y="1091.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.32%)</title><rect x="81.2" y="1075.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="84.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.32%)</title><rect x="84.9" y="1267.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.32%)</title><rect x="84.9" y="1251.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.32%)</title><rect x="84.9" y="1235.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.32%)</title><rect x="84.9" y="1219.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ensureActive (1 samples, 0.32%)</title><rect x="84.9" y="1203.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.32%)</title><rect x="88.7" y="1267.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.32%)</title><rect x="92.4" y="1267.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="92.4" y="1251.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="92.4" y="1235.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="92.4" y="1219.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (150 samples, 47.62%)</title><rect x="96.2" y="1331.0" width="561.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.2" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (150 samples, 47.62%)</title><rect x="96.2" y="1315.0" width="561.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.2" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (150 samples, 47.62%)</title><rect x="96.2" y="1299.0" width="561.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.2" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/790206222.run (143 samples, 45.40%)</title><rect x="96.2" y="1283.0" width="535.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.2" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/790206222..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (143 samples, 45.40%)</title><rect x="96.2" y="1267.0" width="535.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.2" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (143 samples, 45.40%)</title><rect x="96.2" y="1251.0" width="535.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.2" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (142 samples, 45.08%)</title><rect x="96.2" y="1235.0" width="531.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.2" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (25 samples, 7.94%)</title><rect x="107.4" y="1219.0" width="93.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.4" y="1230.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (25 samples, 7.94%)</title><rect x="107.4" y="1203.0" width="93.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.4" y="1214.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 7.94%)</title><rect x="107.4" y="1187.0" width="93.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.4" y="1198.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 7.94%)</title><rect x="107.4" y="1171.0" width="93.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.4" y="1182.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 7.94%)</title><rect x="107.4" y="1155.0" width="93.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="110.4" y="1166.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 7.94%)</title><rect x="107.4" y="1139.0" width="93.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.4" y="1150.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.22%)</title><rect x="107.4" y="1123.0" width="26.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.4" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.95%)</title><rect x="122.4" y="1107.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.95%)</title><rect x="122.4" y="1091.0" width="11.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.63%)</title><rect x="126.1" y="1075.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.63%)</title><rect x="126.1" y="1059.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.63%)</title><rect x="126.1" y="1043.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.63%)</title><rect x="126.1" y="1027.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 5.08%)</title><rect x="133.6" y="1123.0" width="60.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.6" y="1134.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 5.08%)</title><rect x="133.6" y="1107.0" width="60.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.6" y="1118.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.59%)</title><rect x="133.6" y="1091.0" width="18.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.32%)</title><rect x="141.1" y="1075.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.32%)</title><rect x="141.1" y="1059.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.32%)</title><rect x="141.1" y="1043.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.32%)</title><rect x="141.1" y="1027.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.32%)</title><rect x="141.1" y="1011.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="144.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.calcHash (1 samples, 0.32%)</title><rect x="141.1" y="995.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="144.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.63%)</title><rect x="144.9" y="1075.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.32%)</title><rect x="152.3" y="1091.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 3.17%)</title><rect x="156.1" y="1091.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.1" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 3.17%)</title><rect x="156.1" y="1075.0" width="37.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.1" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.86%)</title><rect x="159.8" y="1059.0" width="33.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.8" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.59%)</title><rect x="159.8" y="1043.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.63%)</title><rect x="163.6" y="1027.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.63%)</title><rect x="163.6" y="1011.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.63%)</title><rect x="163.6" y="995.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.63%)</title><rect x="163.6" y="979.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.63%)</title><rect x="163.6" y="963.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.32%)</title><rect x="167.3" y="947.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.32%)</title><rect x="167.3" y="931.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="170.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.32%)</title><rect x="171.1" y="1027.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.32%)</title><rect x="171.1" y="1011.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.32%)</title><rect x="174.8" y="1027.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.63%)</title><rect x="178.6" y="1043.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.32%)</title><rect x="182.3" y="1027.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="185.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.32%)</title><rect x="182.3" y="1011.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.32%)</title><rect x="182.3" y="995.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.32%)</title><rect x="182.3" y="979.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.32%)</title><rect x="186.1" y="1043.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.32%)</title><rect x="186.1" y="1027.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.32%)</title><rect x="186.1" y="1011.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.32%)</title><rect x="186.1" y="995.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.32%)</title><rect x="186.1" y="979.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.1" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.32%)</title><rect x="186.1" y="963.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.32%)</title><rect x="189.8" y="1043.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.63%)</title><rect x="193.6" y="1123.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.63%)</title><rect x="193.6" y="1107.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.63%)</title><rect x="193.6" y="1091.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.63%)</title><rect x="193.6" y="1075.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.63%)</title><rect x="193.6" y="1059.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (110 samples, 34.92%)</title><rect x="201.0" y="1219.0" width="412.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.0" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 5.40%)</title><rect x="223.5" y="1203.0" width="63.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.5" y="1214.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.08%)</title><rect x="227.3" y="1187.0" width="59.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.3" y="1198.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 4.44%)</title><rect x="234.8" y="1171.0" width="52.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.8" y="1182.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 1.90%)</title><rect x="238.5" y="1155.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.5" y="1166.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 1.90%)</title><rect x="238.5" y="1139.0" width="22.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.5" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 1.90%)</title><rect x="238.5" y="1123.0" width="22.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.5" y="1134.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.95%)</title><rect x="249.7" y="1107.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.95%)</title><rect x="249.7" y="1091.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.22%)</title><rect x="261.0" y="1155.0" width="26.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.0" y="1166.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.22%)</title><rect x="261.0" y="1139.0" width="26.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.0" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.63%)</title><rect x="264.7" y="1123.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.63%)</title><rect x="264.7" y="1107.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.27%)</title><rect x="272.2" y="1123.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="287.2" y="1203.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="287.2" y="1187.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.32%)</title><rect x="287.2" y="1171.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (31 samples, 9.84%)</title><rect x="291.0" y="1203.0" width="116.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="1214.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (31 samples, 9.84%)</title><rect x="291.0" y="1187.0" width="116.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.0" y="1198.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="302.2" y="1171.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="305.2" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="302.2" y="1155.0" width="3.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="305.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 3.49%)</title><rect x="305.9" y="1171.0" width="41.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.9" y="1182.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.59%)</title><rect x="320.9" y="1155.0" width="18.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.27%)</title><rect x="324.7" y="1139.0" width="15.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.95%)</title><rect x="324.7" y="1123.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.95%)</title><rect x="324.7" y="1107.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.95%)</title><rect x="324.7" y="1091.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.95%)</title><rect x="324.7" y="1075.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="327.7" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.95%)</title><rect x="324.7" y="1059.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="327.7" y="1070.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.32%)</title><rect x="328.4" y="1043.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="331.4" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.32%)</title><rect x="332.2" y="1043.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="335.2" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.32%)</title><rect x="332.2" y="1027.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="335.2" y="1038.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.32%)</title><rect x="332.2" y="1011.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="335.2" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="335.9" y="1123.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="338.9" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.32%)</title><rect x="339.7" y="1155.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="342.7" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="343.4" y="1155.0" width="3.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="346.4" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 5.08%)</title><rect x="347.1" y="1171.0" width="60.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.1" y="1182.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 5.08%)</title><rect x="347.1" y="1155.0" width="60.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.1" y="1166.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.27%)</title><rect x="347.1" y="1139.0" width="15.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.27%)</title><rect x="347.1" y="1123.0" width="15.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 1.27%)</title><rect x="347.1" y="1107.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.32%)</title><rect x="358.4" y="1091.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="361.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.32%)</title><rect x="358.4" y="1075.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="361.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 3.81%)</title><rect x="362.1" y="1139.0" width="45.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.1" y="1150.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 3.81%)</title><rect x="362.1" y="1123.0" width="45.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.1" y="1134.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.63%)</title><rect x="365.9" y="1107.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.63%)</title><rect x="365.9" y="1091.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.86%)</title><rect x="373.4" y="1107.0" width="33.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.4" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.63%)</title><rect x="388.3" y="1091.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.63%)</title><rect x="395.8" y="1091.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.8" y="1102.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.32%)</title><rect x="403.3" y="1091.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="406.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 15.87%)</title><rect x="407.1" y="1203.0" width="187.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.1" y="1214.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (50 samples, 15.87%)</title><rect x="407.1" y="1187.0" width="187.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.1" y="1198.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1002249153.process (41 samples, 13.02%)</title><rect x="418.3" y="1171.0" width="153.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.3" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (41 samples, 13.02%)</title><rect x="418.3" y="1155.0" width="153.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.3" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (41 samples, 13.02%)</title><rect x="418.3" y="1139.0" width="153.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="421.3" y="1150.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (40 samples, 12.70%)</title><rect x="418.3" y="1123.0" width="149.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.3" y="1134.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 12.70%)</title><rect x="418.3" y="1107.0" width="149.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.3" y="1118.0">java/lang/Thread.sl..</text>
</g>
<g>
<title>JVM_Sleep (38 samples, 12.06%)</title><rect x="425.8" y="1091.0" width="142.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="428.8" y="1102.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.27%)</title><rect x="429.6" y="1075.0" width="14.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="432.6" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.32%)</title><rect x="444.5" y="1075.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="447.5" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="448.3" y="1075.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="451.3" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="452.0" y="1075.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="455.0" y="1086.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 9.52%)</title><rect x="455.8" y="1075.0" width="112.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.8" y="1086.0">os::sleep(Thre..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="470.8" y="1059.0" width="3.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="473.8" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="470.8" y="1043.0" width="3.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="473.8" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.63%)</title><rect x="474.5" y="1059.0" width="7.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="477.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.32%)</title><rect x="482.0" y="1059.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="485.0" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.81%)</title><rect x="485.7" y="1059.0" width="45.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="488.7" y="1070.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="530.7" y="1059.0" width="3.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="533.7" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.32%)</title><rect x="534.4" y="1059.0" width="3.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="537.4" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 2.22%)</title><rect x="538.2" y="1059.0" width="26.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="541.2" y="1070.0">o..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.32%)</title><rect x="564.4" y="1059.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="567.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="568.2" y="1123.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="571.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="568.2" y="1107.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="571.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="568.2" y="1091.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.95%)</title><rect x="571.9" y="1171.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="574.9" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.32%)</title><rect x="583.1" y="1171.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.32%)</title><rect x="583.1" y="1155.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.63%)</title><rect x="586.9" y="1171.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="589.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.59%)</title><rect x="594.4" y="1203.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="597.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.59%)</title><rect x="594.4" y="1187.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.27%)</title><rect x="598.1" y="1171.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/716325123.accept (3 samples, 0.95%)</title><rect x="598.1" y="1155.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 0.95%)</title><rect x="598.1" y="1139.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.1" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.95%)</title><rect x="598.1" y="1123.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="601.1" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.95%)</title><rect x="598.1" y="1107.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="601.1" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.63%)</title><rect x="601.9" y="1091.0" width="7.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="604.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.63%)</title><rect x="601.9" y="1075.0" width="7.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="604.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/376484981.accept (1 samples, 0.32%)</title><rect x="609.4" y="1155.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="612.4" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="609.4" y="1139.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="612.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.95%)</title><rect x="613.1" y="1219.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.95%)</title><rect x="613.1" y="1203.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="620.6" y="1187.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/376484981.accept (1 samples, 0.32%)</title><rect x="620.6" y="1171.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (1 samples, 0.32%)</title><rect x="620.6" y="1155.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1660478380.complete (1 samples, 0.32%)</title><rect x="620.6" y="1139.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (1 samples, 0.32%)</title><rect x="620.6" y="1123.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.32%)</title><rect x="620.6" y="1107.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.6" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.32%)</title><rect x="620.6" y="1091.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="623.6" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.32%)</title><rect x="620.6" y="1075.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.6" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.32%)</title><rect x="620.6" y="1059.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.6" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="624.3" y="1219.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="627.3" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="624.3" y="1203.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="627.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.32%)</title><rect x="628.1" y="1235.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="631.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.22%)</title><rect x="631.8" y="1283.0" width="26.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.8" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.22%)</title><rect x="631.8" y="1267.0" width="26.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.8" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.63%)</title><rect x="646.8" y="1251.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="649.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.63%)</title><rect x="646.8" y="1235.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.32%)</title><rect x="654.3" y="1251.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.32%)</title><rect x="654.3" y="1235.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.32%)</title><rect x="654.3" y="1219.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.32%)</title><rect x="654.3" y="1203.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.32%)</title><rect x="658.1" y="1331.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.32%)</title><rect x="658.1" y="1315.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="658.1" y="1299.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.32%)</title><rect x="658.1" y="1283.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="661.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.32%)</title><rect x="658.1" y="1267.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.1" y="1278.0"></text>
</g>
<g>
<title>start_thread (141 samples, 44.76%)</title><rect x="661.8" y="1331.0" width="528.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="664.8" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (141 samples, 44.76%)</title><rect x="661.8" y="1315.0" width="528.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="664.8" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 6.35%)</title><rect x="661.8" y="1299.0" width="74.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="664.8" y="1310.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.95%)</title><rect x="661.8" y="1283.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="664.8" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.95%)</title><rect x="661.8" y="1267.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="664.8" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.32%)</title><rect x="661.8" y="1251.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="664.8" y="1262.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.63%)</title><rect x="665.6" y="1251.0" width="7.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="668.6" y="1262.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 5.40%)</title><rect x="673.0" y="1283.0" width="63.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="676.0" y="1294.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 4.13%)</title><rect x="673.0" y="1267.0" width="48.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="676.0" y="1278.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.54%)</title><rect x="673.0" y="1251.0" width="30.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="676.0" y="1262.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 2.22%)</title><rect x="673.0" y="1235.0" width="26.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="676.0" y="1246.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.95%)</title><rect x="684.3" y="1219.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="687.3" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.32%)</title><rect x="695.5" y="1219.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.5" y="1230.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.32%)</title><rect x="699.3" y="1235.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="702.3" y="1246.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 1.59%)</title><rect x="703.0" y="1251.0" width="18.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="706.0" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="721.7" y="1267.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="724.7" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.32%)</title><rect x="721.7" y="1251.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="724.7" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.32%)</title><rect x="721.7" y="1235.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="724.7" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.32%)</title><rect x="721.7" y="1219.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.7" y="1230.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.32%)</title><rect x="721.7" y="1203.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.7" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.95%)</title><rect x="725.5" y="1267.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.5" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.95%)</title><rect x="725.5" y="1251.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="728.5" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.95%)</title><rect x="725.5" y="1235.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="728.5" y="1246.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.95%)</title><rect x="725.5" y="1219.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.5" y="1230.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.95%)</title><rect x="725.5" y="1203.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="728.5" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.95%)</title><rect x="725.5" y="1187.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="728.5" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.63%)</title><rect x="725.5" y="1171.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="728.5" y="1182.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.63%)</title><rect x="725.5" y="1155.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.5" y="1166.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.63%)</title><rect x="725.5" y="1139.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="728.5" y="1150.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.32%)</title><rect x="733.0" y="1171.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="736.0" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (120 samples, 38.10%)</title><rect x="736.7" y="1299.0" width="449.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.7" y="1310.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (120 samples, 38.10%)</title><rect x="736.7" y="1283.0" width="449.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="739.7" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (120 samples, 38.10%)</title><rect x="736.7" y="1267.0" width="449.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.7" y="1278.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (120 samples, 38.10%)</title><rect x="736.7" y="1251.0" width="449.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="739.7" y="1262.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (118 samples, 37.46%)</title><rect x="736.7" y="1235.0" width="442.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="739.7" y="1246.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (118 samples, 37.46%)</title><rect x="736.7" y="1219.0" width="442.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.7" y="1230.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (76 samples, 24.13%)</title><rect x="736.7" y="1203.0" width="284.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.7" y="1214.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.63%)</title><rect x="736.7" y="1187.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="739.7" y="1198.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.32%)</title><rect x="736.7" y="1171.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="739.7" y="1182.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.32%)</title><rect x="740.5" y="1171.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="743.5" y="1182.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.32%)</title><rect x="740.5" y="1155.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.5" y="1166.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.32%)</title><rect x="740.5" y="1139.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.5" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.27%)</title><rect x="744.2" y="1187.0" width="15.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="747.2" y="1198.0"></text>
</g>
<g>
<title>CodeBuffer::locator_address(int) const (1 samples, 0.32%)</title><rect x="748.0" y="1171.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.0" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.63%)</title><rect x="751.7" y="1171.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="754.7" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.63%)</title><rect x="751.7" y="1155.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="754.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.27%)</title><rect x="759.2" y="1187.0" width="15.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="762.2" y="1198.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.32%)</title><rect x="759.2" y="1171.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="762.2" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.95%)</title><rect x="763.0" y="1171.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.0" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.63%)</title><rect x="766.7" y="1155.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="769.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.95%)</title><rect x="774.2" y="1187.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.32%)</title><rect x="774.2" y="1171.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="777.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.32%)</title><rect x="774.2" y="1155.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="777.2" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.63%)</title><rect x="777.9" y="1171.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.32%)</title><rect x="777.9" y="1155.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="780.9" y="1166.0"></text>
</g>
<g>
<title>membar_releaseNode::ideal_Opcode() const (1 samples, 0.32%)</title><rect x="781.7" y="1155.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (63 samples, 20.00%)</title><rect x="785.4" y="1187.0" width="236.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.4" y="1198.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="785.4" y="1171.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="788.4" y="1182.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.32%)</title><rect x="789.2" y="1171.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="792.2" y="1182.0"></text>
</g>
<g>
<title>MachSpillCopyNode::in_RegMask(unsigned int) const (1 samples, 0.32%)</title><rect x="792.9" y="1171.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="795.9" y="1182.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.32%)</title><rect x="796.7" y="1171.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.7" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.32%)</title><rect x="800.4" y="1171.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="803.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.63%)</title><rect x="804.2" y="1171.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="807.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.32%)</title><rect x="807.9" y="1155.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.63%)</title><rect x="811.7" y="1171.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="814.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.63%)</title><rect x="811.7" y="1155.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.59%)</title><rect x="819.1" y="1171.0" width="18.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="822.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.32%)</title><rect x="830.4" y="1155.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.4" y="1166.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.32%)</title><rect x="834.1" y="1155.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="837.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.90%)</title><rect x="837.9" y="1171.0" width="22.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.9" y="1182.0">P..</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.32%)</title><rect x="849.1" y="1155.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.63%)</title><rect x="852.9" y="1155.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="855.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.32%)</title><rect x="860.3" y="1171.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="863.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.32%)</title><rect x="860.3" y="1155.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.27%)</title><rect x="864.1" y="1171.0" width="15.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.1" y="1182.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.32%)</title><rect x="875.3" y="1155.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.63%)</title><rect x="879.1" y="1171.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.1" y="1182.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.32%)</title><rect x="882.8" y="1155.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="885.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.32%)</title><rect x="886.6" y="1171.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (24 samples, 7.62%)</title><rect x="890.3" y="1171.0" width="89.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.3" y="1182.0">PhaseCoale..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.32%)</title><rect x="890.3" y="1155.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.3" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (23 samples, 7.30%)</title><rect x="894.1" y="1155.0" width="86.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="897.1" y="1166.0">PhaseConse..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.32%)</title><rect x="894.1" y="1139.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="897.1" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (22 samples, 6.98%)</title><rect x="897.8" y="1139.0" width="82.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="900.8" y="1150.0">PhaseCons..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.27%)</title><rect x="897.8" y="1123.0" width="15.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="900.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="909.0" y="1107.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.0" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (15 samples, 4.76%)</title><rect x="912.8" y="1123.0" width="56.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.8" y="1134.0">PhaseC..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.95%)</title><rect x="969.0" y="1123.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.32%)</title><rect x="980.2" y="1171.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.63%)</title><rect x="984.0" y="1171.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.0" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="987.7" y="1155.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.7" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 1.90%)</title><rect x="991.5" y="1171.0" width="22.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.5" y="1182.0">P..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.32%)</title><rect x="1006.4" y="1155.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1009.4" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.32%)</title><rect x="1010.2" y="1155.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.2" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.32%)</title><rect x="1013.9" y="1171.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.9" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="1017.7" y="1171.0" width="3.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1020.7" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (36 samples, 11.43%)</title><rect x="1021.4" y="1203.0" width="134.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="1214.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.32%)</title><rect x="1021.4" y="1187.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.4" y="1198.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="1021.4" y="1171.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="1021.4" y="1155.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1166.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.32%)</title><rect x="1021.4" y="1139.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.4" y="1150.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.32%)</title><rect x="1021.4" y="1123.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1134.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.32%)</title><rect x="1025.2" y="1187.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.2" y="1198.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.32%)</title><rect x="1025.2" y="1171.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.2" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.32%)</title><rect x="1025.2" y="1155.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.2" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.32%)</title><rect x="1025.2" y="1139.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.32%)</title><rect x="1028.9" y="1187.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.32%)</title><rect x="1028.9" y="1171.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.32%)</title><rect x="1028.9" y="1155.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="1028.9" y="1139.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.32%)</title><rect x="1032.7" y="1187.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.7" y="1198.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.32%)</title><rect x="1032.7" y="1171.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 9.21%)</title><rect x="1036.4" y="1187.0" width="108.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.4" y="1198.0">PhaseIdealLoo..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.32%)</title><rect x="1036.4" y="1171.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.95%)</title><rect x="1040.2" y="1171.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1043.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1051.4" y="1171.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1054.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.32%)</title><rect x="1051.4" y="1155.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.4" y="1166.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.32%)</title><rect x="1051.4" y="1139.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 6.67%)</title><rect x="1055.1" y="1171.0" width="78.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.1" y="1182.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 6.35%)</title><rect x="1058.9" y="1155.0" width="74.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="1166.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 6.03%)</title><rect x="1062.6" y="1139.0" width="71.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.6" y="1150.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.32%)</title><rect x="1130.1" y="1123.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.32%)</title><rect x="1133.8" y="1171.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1137.6" y="1171.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.32%)</title><rect x="1137.6" y="1155.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.32%)</title><rect x="1137.6" y="1139.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.32%)</title><rect x="1141.3" y="1171.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.32%)</title><rect x="1141.3" y="1155.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1141.3" y="1139.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.32%)</title><rect x="1141.3" y="1123.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.95%)</title><rect x="1145.0" y="1187.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.95%)</title><rect x="1145.0" y="1171.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.0" y="1182.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.32%)</title><rect x="1145.0" y="1155.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.32%)</title><rect x="1148.8" y="1155.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.32%)</title><rect x="1152.5" y="1155.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.90%)</title><rect x="1156.3" y="1203.0" width="22.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="1214.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.90%)</title><rect x="1156.3" y="1187.0" width="22.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.90%)</title><rect x="1156.3" y="1171.0" width="22.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.90%)</title><rect x="1156.3" y="1155.0" width="22.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.90%)</title><rect x="1156.3" y="1139.0" width="22.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.90%)</title><rect x="1156.3" y="1123.0" width="22.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="1134.0">P..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1156.3" y="1107.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="1118.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.32%)</title><rect x="1156.3" y="1091.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="1102.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.32%)</title><rect x="1156.3" y="1075.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="1086.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.32%)</title><rect x="1156.3" y="1059.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.3" y="1070.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.32%)</title><rect x="1156.3" y="1043.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.27%)</title><rect x="1160.0" y="1107.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.27%)</title><rect x="1160.0" y="1091.0" width="15.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.27%)</title><rect x="1160.0" y="1075.0" width="15.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.27%)</title><rect x="1160.0" y="1059.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.27%)</title><rect x="1160.0" y="1043.0" width="15.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.27%)</title><rect x="1160.0" y="1027.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1160.0" y="1011.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.0" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1160.0" y="995.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1160.0" y="979.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1160.0" y="963.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1160.0" y="947.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1160.0" y="931.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1160.0" y="915.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1160.0" y="899.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1160.0" y="883.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1160.0" y="867.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1160.0" y="851.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1160.0" y="835.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1160.0" y="819.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1160.0" y="803.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1160.0" y="787.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1160.0" y="771.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1160.0" y="755.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1160.0" y="739.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1160.0" y="723.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1160.0" y="707.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.32%)</title><rect x="1160.0" y="691.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.0" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.32%)</title><rect x="1160.0" y="675.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.0" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1160.0" y="659.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.0" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.95%)</title><rect x="1163.8" y="1011.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.95%)</title><rect x="1163.8" y="995.0" width="11.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.95%)</title><rect x="1163.8" y="979.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.95%)</title><rect x="1163.8" y="963.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.95%)</title><rect x="1163.8" y="947.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.95%)</title><rect x="1163.8" y="931.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.95%)</title><rect x="1163.8" y="915.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="899.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1163.8" y="883.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1163.8" y="867.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1163.8" y="851.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1163.8" y="835.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1163.8" y="819.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="803.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1163.8" y="787.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1163.8" y="771.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1163.8" y="755.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1163.8" y="739.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1163.8" y="723.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="707.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1163.8" y="691.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1163.8" y="675.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1163.8" y="659.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1163.8" y="643.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1163.8" y="627.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="611.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1163.8" y="595.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1163.8" y="579.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1163.8" y="563.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1163.8" y="547.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1163.8" y="531.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="515.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1163.8" y="499.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1163.8" y="483.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1163.8" y="467.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1163.8" y="451.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1163.8" y="435.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.8" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="419.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1163.8" y="403.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1163.8" y="387.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1163.8" y="371.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1163.8" y="355.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1163.8" y="339.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1163.8" y="323.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="334.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.32%)</title><rect x="1163.8" y="307.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.8" y="318.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.32%)</title><rect x="1163.8" y="291.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.5" y="307.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.5" y="291.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.5" y="275.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.5" y="259.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.5" y="243.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.5" y="227.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.5" y="211.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.5" y="195.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.5" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.5" y="179.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.5" y="163.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.5" y="147.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.5" y="131.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.5" y="115.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="126.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.32%)</title><rect x="1167.5" y="99.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="110.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.32%)</title><rect x="1167.5" y="83.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1167.5" y="67.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.32%)</title><rect x="1167.5" y="51.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="62.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.32%)</title><rect x="1167.5" y="35.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.3" y="899.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.3" y="883.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.3" y="867.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.3" y="851.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.3" y="835.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.3" y="819.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.3" y="803.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.3" y="787.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.3" y="771.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.3" y="755.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.3" y="739.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.3" y="723.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.3" y="707.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.3" y="691.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.3" y="675.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.3" y="659.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.3" y="643.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.3" y="627.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.3" y="638.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.32%)</title><rect x="1171.3" y="611.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="622.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.32%)</title><rect x="1171.3" y="595.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.3" y="606.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.32%)</title><rect x="1171.3" y="579.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1171.3" y="563.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.32%)</title><rect x="1171.3" y="547.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1175.0" y="1107.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.0" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1175.0" y="1091.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1175.0" y="1075.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1175.0" y="1059.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1175.0" y="1043.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1175.0" y="1027.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1175.0" y="1011.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1175.0" y="995.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1175.0" y="979.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1175.0" y="963.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1175.0" y="947.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1175.0" y="931.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.32%)</title><rect x="1175.0" y="915.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1175.0" y="899.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.32%)</title><rect x="1175.0" y="883.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.0" y="894.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.32%)</title><rect x="1175.0" y="867.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="878.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.32%)</title><rect x="1175.0" y="851.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.32%)</title><rect x="1175.0" y="835.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.32%)</title><rect x="1175.0" y="819.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.32%)</title><rect x="1175.0" y="803.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.32%)</title><rect x="1175.0" y="787.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.63%)</title><rect x="1178.8" y="1235.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1246.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.63%)</title><rect x="1178.8" y="1219.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.63%)</title><rect x="1178.8" y="1203.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.63%)</title><rect x="1178.8" y="1187.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.63%)</title><rect x="1178.8" y="1171.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.63%)</title><rect x="1178.8" y="1155.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.32%)</title><rect x="1178.8" y="1139.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="1150.0"></text>
</g>
<g>
<title>AddressLiteral::AddressLiteral(unsigned char*, relocInfo::relocType) (1 samples, 0.32%)</title><rect x="1178.8" y="1123.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op2(LIR_Op2*) (1 samples, 0.32%)</title><rect x="1182.5" y="1139.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.32%)</title><rect x="1186.3" y="1299.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="1310.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.32%)</title><rect x="1186.3" y="1283.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="1294.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.32%)</title><rect x="1186.3" y="1267.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="1278.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.32%)</title><rect x="1186.3" y="1251.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="1262.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.32%)</title><rect x="1186.3" y="1235.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.32%)</title><rect x="1186.3" y="1219.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.32%)</title><rect x="1186.3" y="1203.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.32%)</title><rect x="1186.3" y="1187.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="1198.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.32%)</title><rect x="1186.3" y="1171.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1182.0"></text>
</g>
<g>
<title>G1CodeRootSet::clear() (1 samples, 0.32%)</title><rect x="1186.3" y="1155.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="1166.0"></text>
</g>
</g>
</svg>
